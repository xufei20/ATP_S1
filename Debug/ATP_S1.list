
ATP_S1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028f5c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000439c  08029200  08029200  0002a200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d59c  0802d59c  0002e59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d5a4  0802d5a4  0002e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802d5a8  0802d5a8  0002e5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003e0  24000000  0802d5ac  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000bd30  240003e0  0802d98c  0002f3e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400c110  0802d98c  00030110  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  00030000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000350dc  2**0
                  CONTENTS, READONLY
 11 ._Text_Area   00000658  30004a84  30004a84  00034a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .debug_info   00045f26  00000000  00000000  0003510a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c37  00000000  00000000  0007b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  00084c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000232c  00000000  00000000  000878b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004dbf9  00000000  00000000  00089be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00056497  00000000  00000000  000d77dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bc3b  00000000  00000000  0012dc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002b98af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca30  00000000  00000000  002b98f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  002c6324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003e0 	.word	0x240003e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080291e4 	.word	0x080291e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003e4 	.word	0x240003e4
 80002dc:	080291e4 	.word	0x080291e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <checkData>:
uint8_t setFocusFreq = 0;




uint8_t checkData(uint8_t* data, uint8_t length) {
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
    uint8_t check = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	e009      	b.n	8000a92 <checkData+0x2a>
        check ^= data[i];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	4053      	eors	r3, r2
 8000a8a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbf1      	blt.n	8000a7e <checkData+0x16>
    }
    return check;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SendFocusData>:

void SendFocusData(SendFocusFrameTypedef *SendType)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    SendType->data[0] = SendType->head[0];
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	711a      	strb	r2, [r3, #4]
    SendType->data[1] = SendType->head[1];
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	785a      	ldrb	r2, [r3, #1]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	715a      	strb	r2, [r3, #5]
    SendType->data[4] = 0x03; // 设备ID
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	721a      	strb	r2, [r3, #8]
    SendType->data[5] = 0x00; //通道
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	725a      	strb	r2, [r3, #9]
    switch (SendType->func)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b1a      	cmp	r3, #26
 8000ad4:	f200 80d5 	bhi.w	8000c82 <SendFocusData+0x1da>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <SendFocusData+0x38>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b4d 	.word	0x08000b4d
 8000ae4:	08000c83 	.word	0x08000c83
 8000ae8:	08000b9d 	.word	0x08000b9d
 8000aec:	08000c83 	.word	0x08000c83
 8000af0:	08000bcd 	.word	0x08000bcd
 8000af4:	08000c83 	.word	0x08000c83
 8000af8:	08000c83 	.word	0x08000c83
 8000afc:	08000c83 	.word	0x08000c83
 8000b00:	08000c83 	.word	0x08000c83
 8000b04:	08000c83 	.word	0x08000c83
 8000b08:	08000c83 	.word	0x08000c83
 8000b0c:	08000c83 	.word	0x08000c83
 8000b10:	08000c83 	.word	0x08000c83
 8000b14:	08000c83 	.word	0x08000c83
 8000b18:	08000bfd 	.word	0x08000bfd
 8000b1c:	08000c2f 	.word	0x08000c2f
 8000b20:	08000c83 	.word	0x08000c83
 8000b24:	08000c83 	.word	0x08000c83
 8000b28:	08000c83 	.word	0x08000c83
 8000b2c:	08000c83 	.word	0x08000c83
 8000b30:	08000c83 	.word	0x08000c83
 8000b34:	08000c83 	.word	0x08000c83
 8000b38:	08000c83 	.word	0x08000c83
 8000b3c:	08000c83 	.word	0x08000c83
 8000b40:	08000c83 	.word	0x08000c83
 8000b44:	08000c83 	.word	0x08000c83
 8000b48:	08000c59 	.word	0x08000c59
    {
        case SetPos:{
            SendType->len = 0x0c;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	220c      	movs	r2, #12
 8000b50:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	789a      	ldrb	r2, [r3, #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = SetPos;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	71da      	strb	r2, [r3, #7]
            //     setFocusPos.f = 2000.f;
            // }else if(setFocusPos.f < -2000.f)
            // {
            //     setFocusPos.f = -2000.f;
            // }
            SendType->data[6] = setFocusPos.u8t[3];
 8000b60:	4b5a      	ldr	r3, [pc, #360]	@ (8000ccc <SendFocusData+0x224>)
 8000b62:	78da      	ldrb	r2, [r3, #3]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = setFocusPos.u8t[2];
 8000b68:	4b58      	ldr	r3, [pc, #352]	@ (8000ccc <SendFocusData+0x224>)
 8000b6a:	789a      	ldrb	r2, [r3, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	72da      	strb	r2, [r3, #11]
            SendType->data[8] = setFocusPos.u8t[1];
 8000b70:	4b56      	ldr	r3, [pc, #344]	@ (8000ccc <SendFocusData+0x224>)
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	731a      	strb	r2, [r3, #12]
            SendType->data[9] = setFocusPos.u8t[0];
 8000b78:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <SendFocusData+0x224>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	735a      	strb	r2, [r3, #13]
            SendType->data[10] = 0x01;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	739a      	strb	r2, [r3, #14]
            SendType->data[11] = checkData(SendType->data, 11);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	210b      	movs	r1, #11
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff6b 	bl	8000a68 <checkData>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	73da      	strb	r2, [r3, #15]
        }break;
 8000b9a:	e073      	b.n	8000c84 <SendFocusData+0x1dc>
        case GetCurPos:{
            SendType->len = 0x08;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	789a      	ldrb	r2, [r3, #2]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = GetCurPos;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x01;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2107      	movs	r1, #7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff53 	bl	8000a68 <checkData>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bca:	e05b      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopRun:{
            SendType->len = 0x08;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2208      	movs	r2, #8
 8000bd0:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	789a      	ldrb	r2, [r3, #2]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopRun;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = 0x00;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2107      	movs	r1, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff3b 	bl	8000a68 <checkData>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	72da      	strb	r2, [r3, #11]
        }break;
 8000bfa:	e043      	b.n	8000c84 <SendFocusData+0x1dc>
        case MultiGetCurPos:{
            SendType->len = 0x08;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2208      	movs	r2, #8
 8000c00:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	789a      	ldrb	r2, [r3, #2]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = MultiGetCurPos;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	71da      	strb	r2, [r3, #7]
            SendType->data[6] = setFocusFreq;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <SendFocusData+0x228>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	729a      	strb	r2, [r3, #10]
            SendType->data[7] = checkData(SendType->data, 7);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff22 	bl	8000a68 <checkData>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	72da      	strb	r2, [r3, #11]
        }break;
 8000c2c:	e02a      	b.n	8000c84 <SendFocusData+0x1dc>
        case StopGetPos:{
            SendType->len = 0x06;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2206      	movs	r2, #6
 8000c32:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	789a      	ldrb	r2, [r3, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = StopGetPos;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2210      	movs	r2, #16
 8000c40:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2105      	movs	r1, #5
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff0d 	bl	8000a68 <checkData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	725a      	strb	r2, [r3, #9]
        }break;
 8000c56:	e015      	b.n	8000c84 <SendFocusData+0x1dc>
        case ClearPos:{
            SendType->len = 0x06;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	709a      	strb	r2, [r3, #2]
            SendType->data[2] = SendType->len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	789a      	ldrb	r2, [r3, #2]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	719a      	strb	r2, [r3, #6]
            SendType->data[3] = ClearPos;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	221b      	movs	r2, #27
 8000c6a:	71da      	strb	r2, [r3, #7]
            SendType->data[5] = checkData(SendType->data, 5);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	2105      	movs	r1, #5
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fef8 	bl	8000a68 <checkData>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	725a      	strb	r2, [r3, #9]
        }break;
 8000c80:	e000      	b.n	8000c84 <SendFocusData+0x1dc>
        default:
            break;
 8000c82:	bf00      	nop
    }
    for(int i = 0;i < SendType->len;i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e00b      	b.n	8000ca2 <SendFocusData+0x1fa>
    {
        // SendType->data[SendType->len] = SendType->check;
        uart_printf("%02x ", SendType->data[i]);
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	3304      	adds	r3, #4
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	480f      	ldr	r0, [pc, #60]	@ (8000cd4 <SendFocusData+0x22c>)
 8000c98:	f004 f938 	bl	8004f0c <uart_printf>
    for(int i = 0;i < SendType->len;i++)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	789b      	ldrb	r3, [r3, #2]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dbed      	blt.n	8000c8a <SendFocusData+0x1e2>
    }
    HAL_UART_Transmit(&huart6, SendType->data, SendType->len, HAL_MAX_DELAY);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1d19      	adds	r1, r3, #4
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	789b      	ldrb	r3, [r3, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <SendFocusData+0x230>)
 8000cbe:	f00e f835 	bl	800ed2c <HAL_UART_Transmit>
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	240003fc 	.word	0x240003fc
 8000cd0:	24000404 	.word	0x24000404
 8000cd4:	08029200 	.word	0x08029200
 8000cd8:	24000be0 	.word	0x24000be0

08000cdc <packData>:
        .Offset_Y = 0
};


void packData(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    switch (SendType->FuncCode) // 功能码
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	799b      	ldrb	r3, [r3, #6]
 8000cee:	3b06      	subs	r3, #6
 8000cf0:	2b0e      	cmp	r3, #14
 8000cf2:	f200 814e 	bhi.w	8000f92 <packData+0x2b6>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <packData+0x20>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000f93 	.word	0x08000f93
 8000d04:	08000e55 	.word	0x08000e55
 8000d08:	08000f93 	.word	0x08000f93
 8000d0c:	08000f93 	.word	0x08000f93
 8000d10:	08000f93 	.word	0x08000f93
 8000d14:	08000f93 	.word	0x08000f93
 8000d18:	08000f93 	.word	0x08000f93
 8000d1c:	08000f93 	.word	0x08000f93
 8000d20:	08000f93 	.word	0x08000f93
 8000d24:	08000f93 	.word	0x08000f93
 8000d28:	08000f93 	.word	0x08000f93
 8000d2c:	08000f93 	.word	0x08000f93
 8000d30:	08000f93 	.word	0x08000f93
 8000d34:	08000f41 	.word	0x08000f41
    {
        case SETTING_DEVICEPARAM: // 0x06
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	79db      	ldrb	r3, [r3, #7]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	f200 8086 	bhi.w	8000e50 <packData+0x174>
 8000d44:	a201      	add	r2, pc, #4	@ (adr r2, 8000d4c <packData+0x70>)
 8000d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4a:	bf00      	nop
 8000d4c:	08000d61 	.word	0x08000d61
 8000d50:	08000d93 	.word	0x08000d93
 8000d54:	08000dc5 	.word	0x08000dc5
 8000d58:	08000df7 	.word	0x08000df7
 8000d5c:	08000e49 	.word	0x08000e49
            {
                case FOCUS_ADJUST: // 0x03
                {
                	for(i = 0;i < 4;i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e00e      	b.n	8000d84 <packData+0xa8>
                	{
                		SendType->Data[10+i] = SendData->focusAdjust >> 8*(i);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	330a      	adds	r3, #10
 8000d74:	b2d1      	uxtb	r1, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	729a      	strb	r2, [r3, #10]
                	for(i = 0;i < 4;i++)
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d9ed      	bls.n	8000d66 <packData+0x8a>
                	}
                    SendType->DataLen = 6;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	805a      	strh	r2, [r3, #2]
                    break;
 8000d90:	e05f      	b.n	8000e52 <packData+0x176>
                }
                case ZOOM_ADJUST: // 0x04
                {
                    for(i = 0;i < 4;i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e00e      	b.n	8000db6 <packData+0xda>
                	{
                		SendType->Data[10+i] = SendData->zoomAdjust >> 8*(i);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	40da      	lsrs	r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	330a      	adds	r3, #10
 8000da6:	b2d1      	uxtb	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d9ed      	bls.n	8000d98 <packData+0xbc>
                	}
                    SendType->DataLen = 6;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	805a      	strh	r2, [r3, #2]
                    break;
 8000dc2:	e046      	b.n	8000e52 <packData+0x176>
                }
                case EXPOSURE: // 0x05
                {
                    for(i = 0;i < 4;i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e00e      	b.n	8000de8 <packData+0x10c>
                	{
                		SendType->Data[10+i] = SendData->exposure >> 8*(i);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	330a      	adds	r3, #10
 8000dd8:	b2d1      	uxtb	r1, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	460a      	mov	r2, r1
 8000de0:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	3301      	adds	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d9ed      	bls.n	8000dca <packData+0xee>
                	}
                    SendType->DataLen = 6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2206      	movs	r2, #6
 8000df2:	805a      	strh	r2, [r3, #2]
                    break;
 8000df4:	e02d      	b.n	8000e52 <packData+0x176>
                }
                case OPTICAL_CENTER: // 0x06
                {
                    for(i = 0;i < 4;i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e01e      	b.n	8000e3a <packData+0x15e>
                    {
                        SendType->Data[10+i] = SendData->offsetX >> 8*(3-i);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f1c3 0303 	rsb	r3, r3, #3
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	40da      	lsrs	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->offsetY >> 8*(3-i);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f1c3 0303 	rsb	r3, r3, #3
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	40da      	lsrs	r2, r3
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	330e      	adds	r3, #14
 8000e2a:	b2d1      	uxtb	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 4;i++)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9dd      	bls.n	8000dfc <packData+0x120>
                    }
                    SendType->DataLen = 10;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	220a      	movs	r2, #10
 8000e44:	805a      	strh	r2, [r3, #2]
                    break;
 8000e46:	e004      	b.n	8000e52 <packData+0x176>
                    // SendType->Data[17] = DeviceIPAddr.u8t[1];
                    // SendType->Data[18] = DeviceIPAddr.u8t[2];
                    // SendType->Data[19] = DeviceIPAddr.u8t[3];
                    // SendType->Data[20] = DevicePort >> 8;
                    // SendType->Data[21] = DevicePort;
                    SendType->DataLen = 14;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	220e      	movs	r2, #14
 8000e4c:	805a      	strh	r2, [r3, #2]
                    break;
 8000e4e:	e000      	b.n	8000e52 <packData+0x176>
                }
                default:
                {
                    break;
 8000e50:	bf00      	nop
                }
            }
        }break;
 8000e52:	e09e      	b.n	8000f92 <packData+0x2b6>
        case SETTING_TRACK: // 0x07
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d02e      	beq.n	8000eba <packData+0x1de>
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dc6d      	bgt.n	8000f3c <packData+0x260>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d002      	beq.n	8000e6a <packData+0x18e>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d004      	beq.n	8000e72 <packData+0x196>
                    SendType->DataLen = 10;
                    break;
                }
                default:
                {
                    break;
 8000e68:	e068      	b.n	8000f3c <packData+0x260>
                    SendType->DataLen = 2;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	805a      	strh	r2, [r3, #2]
                    break;
 8000e70:	e065      	b.n	8000f3e <packData+0x262>
                    SendType->Data[10] = SendData->AutoTracking.TrackingType;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	7d1a      	ldrb	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->AutoTracking.CaptureStrategy;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	7d5a      	ldrb	r2, [r3, #21]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->AutoTracking.OffsetX;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	8adb      	ldrh	r3, [r3, #22]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->AutoTracking.OffsetX >> 8;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	8adb      	ldrh	r3, [r3, #22]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->AutoTracking.OffsetY;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	8b1b      	ldrh	r3, [r3, #24]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	761a      	strb	r2, [r3, #24]
                    SendType->Data[15] = SendData->AutoTracking.OffsetY >> 8;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	8b1b      	ldrh	r3, [r3, #24]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	765a      	strb	r2, [r3, #25]
                    SendType->DataLen = 8;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	805a      	strh	r2, [r3, #2]
                    break;
 8000eb8:	e041      	b.n	8000f3e <packData+0x262>
                    for(i = 0;i < 2;i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e036      	b.n	8000f2e <packData+0x252>
                        SendType->Data[10+i] = SendData->ManualTracking.TrackingCenterX >> 8*(i);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	8b5b      	ldrh	r3, [r3, #26]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	411a      	asrs	r2, r3
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	330a      	adds	r3, #10
 8000ed0:	b2d1      	uxtb	r1, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	729a      	strb	r2, [r3, #10]
                        SendType->Data[12+i] = SendData->ManualTracking.TrackingCenterY >> 8*(i);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	8b9b      	ldrh	r3, [r3, #28]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	411a      	asrs	r2, r3
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	b2d1      	uxtb	r1, r2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	729a      	strb	r2, [r3, #10]
                        SendType->Data[14+i] = SendData->ManualTracking.TrackingWidth >> 8*(i);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	8bdb      	ldrh	r3, [r3, #30]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	411a      	asrs	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	330e      	adds	r3, #14
 8000f04:	b2d1      	uxtb	r1, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	729a      	strb	r2, [r3, #10]
                        SendType->Data[16+i] = SendData->ManualTracking.TrackingHeight >> 8*(i);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	8c1b      	ldrh	r3, [r3, #32]
 8000f12:	461a      	mov	r2, r3
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	411a      	asrs	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	b2d1      	uxtb	r1, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	729a      	strb	r2, [r3, #10]
                    for(i = 0;i < 2;i++)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d9c5      	bls.n	8000ec0 <packData+0x1e4>
                    SendType->DataLen = 10;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	220a      	movs	r2, #10
 8000f38:	805a      	strh	r2, [r3, #2]
                    break;
 8000f3a:	e000      	b.n	8000f3e <packData+0x262>
                    break;
 8000f3c:	bf00      	nop
                }
            }
        }break;
 8000f3e:	e028      	b.n	8000f92 <packData+0x2b6>


        }break;
        case SETTING_IMGTRANS: // 0x14
        {
            switch (SendType->FuncSubCode) // 功能码子项
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	79db      	ldrb	r3, [r3, #7]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d002      	beq.n	8000f4e <packData+0x272>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d121      	bne.n	8000f90 <packData+0x2b4>
            {
                case 0x02: // 停止传输图像
                {
                    break;
 8000f4c:	e020      	b.n	8000f90 <packData+0x2b4>
                }
                case 0x01: // 开始传输图像
                {
                    SendType->Data[10] = SendData->ImgTrans.ResolutionX;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	751a      	strb	r2, [r3, #20]
                    SendType->Data[11] = SendData->ImgTrans.ResolutionX >> 8;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	755a      	strb	r2, [r3, #21]
                    SendType->Data[12] = SendData->ImgTrans.ResolutionY;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	759a      	strb	r2, [r3, #22]
                    SendType->Data[13] = SendData->ImgTrans.ResolutionY >> 8;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	75da      	strb	r2, [r3, #23]
                    SendType->Data[14] = SendData->ImgTrans.OSDType;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	761a      	strb	r2, [r3, #24]
                    SendType->DataLen = 7;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	805a      	strh	r2, [r3, #2]
                    break;
 8000f8e:	bf00      	nop
                }
            }
        }break;
 8000f90:	bf00      	nop
    }


    SendType->Data[0] = SendType->Head1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	729a      	strb	r2, [r3, #10]
    SendType->Data[1] = SendType->Head2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	785a      	ldrb	r2, [r3, #1]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	72da      	strb	r2, [r3, #11]
    SendType->Data[2] = SendType->DataLen >> 8; //小端
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	731a      	strb	r2, [r3, #12]
    SendType->Data[3] = SendType->DataLen;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	885b      	ldrh	r3, [r3, #2]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	735a      	strb	r2, [r3, #13]
    SendType->Data[4] = SendType->FrameMark;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791a      	ldrb	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	739a      	strb	r2, [r3, #14]
    SendType->Data[5] = SendType->DeviceID;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	795a      	ldrb	r2, [r3, #5]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	73da      	strb	r2, [r3, #15]
    SendType->Data[6] = SendType->FuncCode;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	799a      	ldrb	r2, [r3, #6]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	741a      	strb	r2, [r3, #16]
    SendType->Data[7] = SendType->FuncSubCode;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	79da      	ldrb	r2, [r3, #7]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	745a      	strb	r2, [r3, #17]
    SendType->Data[8] = 0x00;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	749a      	strb	r2, [r3, #18]
    SendType->Data[9] = 0x00;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	74da      	strb	r2, [r3, #19]
    SendType->Data[TXDATA_LEN - 1] = SendType->Tail;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Send2ImgModule>:

void Send2ImgModule(ImgSendTypedef_t *SendType,ImgSendDataTypedef *SendData)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

		packData(SendType,SendData);
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fe65 	bl	8000cdc <packData>
		// memset(SendType->Data,0xff,64);
        // for(int i = 0;i < 64;i++)
        // {
        //     uart_printf("%02x ",SendType->Data[i]);
        // }
	switch(SendType->DeviceID)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <Send2ImgModule+0x20>
 800101a:	2b02      	cmp	r3, #2
 800101c:	d011      	beq.n	8001042 <Send2ImgModule+0x42>
		case TRACKING_JING:{
			// 串口4发送
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
            memset(SendType->Data,0xff,64);
		}break;
		default:break;
 800101e:	e021      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart3,SendType->Data,64, HAL_MAX_DELAY);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f103 010a 	add.w	r1, r3, #10
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <Send2ImgModule+0x6c>)
 800102e:	f00d fe7d 	bl	800ed2c <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330a      	adds	r3, #10
 8001036:	2240      	movs	r2, #64	@ 0x40
 8001038:	21ff      	movs	r1, #255	@ 0xff
 800103a:	4618      	mov	r0, r3
 800103c:	f024 fb06 	bl	802564c <memset>
		}break;
 8001040:	e010      	b.n	8001064 <Send2ImgModule+0x64>
            HAL_UART_Transmit(&huart4,SendType->Data,64, HAL_MAX_DELAY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 010a 	add.w	r1, r3, #10
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2240      	movs	r2, #64	@ 0x40
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <Send2ImgModule+0x70>)
 8001050:	f00d fe6c 	bl	800ed2c <HAL_UART_Transmit>
            memset(SendType->Data,0xff,64);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	330a      	adds	r3, #10
 8001058:	2240      	movs	r2, #64	@ 0x40
 800105a:	21ff      	movs	r1, #255	@ 0xff
 800105c:	4618      	mov	r0, r3
 800105e:	f024 faf5 	bl	802564c <memset>
		}break;
 8001062:	bf00      	nop
	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000b4c 	.word	0x24000b4c
 8001070:	24000868 	.word	0x24000868

08001074 <CheckSumRangefinder>:



// 校验和是将DeviceID、FuncCode、Param[4]相加取低8位
uint8_t CheckSumRangefinder(uint8_t *ptr,uint8_t len)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	e009      	b.n	800109e <CheckSumRangefinder+0x2a>
    {
        sum += ptr[i];
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4413      	add	r3, r2
 8001096:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf1      	blt.n	800108a <CheckSumRangefinder+0x16>
    }
    return sum;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <PackRangefinerData>:

void PackRangefinerData(RangefinderDataFrame_t *SendType)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    switch (SendType->FuncCode)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dc25      	bgt.n	8001110 <PackRangefinerData+0x5c>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc13      	bgt.n	80010f0 <PackRangefinerData+0x3c>
        {
            SendType->len = 0x02;
            break;
        }
        default:
            break;
 80010c8:	e06e      	b.n	80011a8 <PackRangefinerData+0xf4>
    switch (SendType->FuncCode)
 80010ca:	3ba0      	subs	r3, #160	@ 0xa0
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d86b      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010d0:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <PackRangefinerData+0x24>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	0800114b 	.word	0x0800114b
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001169 	.word	0x08001169
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001189 	.word	0x08001189
 80010ec:	080011a1 	.word	0x080011a1
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d858      	bhi.n	80011a8 <PackRangefinerData+0xf4>
 80010f6:	a201      	add	r2, pc, #4	@ (adr r2, 80010fc <PackRangefinerData+0x48>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	0800111b 	.word	0x0800111b
 8001100:	08001123 	.word	0x08001123
 8001104:	0800112b 	.word	0x0800112b
 8001108:	0800113b 	.word	0x0800113b
 800110c:	08001143 	.word	0x08001143
 8001110:	2ba5      	cmp	r3, #165	@ 0xa5
 8001112:	dc49      	bgt.n	80011a8 <PackRangefinerData+0xf4>
 8001114:	2ba0      	cmp	r3, #160	@ 0xa0
 8001116:	dad8      	bge.n	80010ca <PackRangefinerData+0x16>
            break;
 8001118:	e046      	b.n	80011a8 <PackRangefinerData+0xf4>
            SendType->len = 0x02;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2202      	movs	r2, #2
 800111e:	709a      	strb	r2, [r3, #2]
            break;
 8001120:	e043      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	709a      	strb	r2, [r3, #2]
            break;
 8001128:	e03f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x03;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetTarget;
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <PackRangefinerData+0x184>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	739a      	strb	r2, [r3, #14]
            break;
 8001138:	e037      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2202      	movs	r2, #2
 800113e:	709a      	strb	r2, [r3, #2]
            break;
 8001140:	e033      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	709a      	strb	r2, [r3, #2]
            break;
 8001148:	e02f      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x06;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2206      	movs	r2, #6
 800114e:	709a      	strb	r2, [r3, #2]
            break;
 8001150:	e02b      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2204      	movs	r2, #4
 8001156:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMultiFreq;
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <PackRangefinerData+0x188>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = 0x00;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	73da      	strb	r2, [r3, #15]
            break;
 8001166:	e020      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMinRange.data_u8[1];
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <PackRangefinerData+0x18c>)
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMinRange.data_u8[0];
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <PackRangefinerData+0x18c>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	73da      	strb	r2, [r3, #15]
            break;
 800117e:	e014      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	709a      	strb	r2, [r3, #2]
            break;
 8001186:	e010      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x04;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	709a      	strb	r2, [r3, #2]
            SendType->Data[5] = cSetMaxRange.data_u8[1];
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <PackRangefinerData+0x190>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	739a      	strb	r2, [r3, #14]
            SendType->Data[6] = cSetMaxRange.data_u8[0];
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <PackRangefinerData+0x190>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	73da      	strb	r2, [r3, #15]
            break;
 800119e:	e004      	b.n	80011aa <PackRangefinerData+0xf6>
            SendType->len = 0x02;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	709a      	strb	r2, [r3, #2]
            break;
 80011a6:	e000      	b.n	80011aa <PackRangefinerData+0xf6>
            break;
 80011a8:	bf00      	nop
    }
    SendType->Data[0] = SendType->head[0];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	725a      	strb	r2, [r3, #9]
    SendType->Data[1] = SendType->head[1];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	785a      	ldrb	r2, [r3, #1]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	729a      	strb	r2, [r3, #10]
    SendType->Data[2] = SendType->len;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	789a      	ldrb	r2, [r3, #2]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	72da      	strb	r2, [r3, #11]
    SendType->Data[3] = SendType->DeviceID; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	78da      	ldrb	r2, [r3, #3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	731a      	strb	r2, [r3, #12]
    SendType->Data[4] = SendType->FuncCode;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791a      	ldrb	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	735a      	strb	r2, [r3, #13]

    if(SendType->len == 0x02)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d10b      	bne.n	80011f2 <PackRangefinerData+0x13e>
    {
        SendType->Data[5] = CheckSumRangefinder(SendType->Data+3,2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3309      	adds	r3, #9
 80011de:	3303      	adds	r3, #3
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff46 	bl	8001074 <CheckSumRangefinder>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	739a      	strb	r2, [r3, #14]
    else if(SendType->len == 0x04)
    {
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
    }
    
}
 80011f0:	e01e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x03)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d10b      	bne.n	8001212 <PackRangefinerData+0x15e>
        SendType->Data[6] = CheckSumRangefinder(SendType->Data+3,3);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3309      	adds	r3, #9
 80011fe:	3303      	adds	r3, #3
 8001200:	2103      	movs	r1, #3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff36 	bl	8001074 <CheckSumRangefinder>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	73da      	strb	r2, [r3, #15]
}
 8001210:	e00e      	b.n	8001230 <PackRangefinerData+0x17c>
    else if(SendType->len == 0x04)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d10a      	bne.n	8001230 <PackRangefinerData+0x17c>
        SendType->Data[7] = CheckSumRangefinder(SendType->Data+3,4);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3309      	adds	r3, #9
 800121e:	3303      	adds	r3, #3
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff26 	bl	8001074 <CheckSumRangefinder>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	741a      	strb	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2400044c 	.word	0x2400044c
 800123c:	2400044d 	.word	0x2400044d
 8001240:	24000450 	.word	0x24000450
 8001244:	24000454 	.word	0x24000454

08001248 <Send2RangefinderModule>:


void Send2RangefinderModule(RangefinderDataFrame_t *SendType)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    PackRangefinerData(SendType);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff2f 	bl	80010b4 <PackRangefinerData>
    if(SendType->len == 0x02)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d109      	bne.n	8001272 <Send2RangefinderModule+0x2a>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 6, 0xffff);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0109 	add.w	r1, r3, #9
 8001264:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001268:	2206      	movs	r2, #6
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <Send2RangefinderModule+0x78>)
 800126c:	f00d fd5e 	bl	800ed2c <HAL_UART_Transmit>
 8001270:	e01a      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x03)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d109      	bne.n	800128e <Send2RangefinderModule+0x46>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 7, 0xffff);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f103 0109 	add.w	r1, r3, #9
 8001280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001284:	2207      	movs	r2, #7
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <Send2RangefinderModule+0x78>)
 8001288:	f00d fd50 	bl	800ed2c <HAL_UART_Transmit>
 800128c:	e00c      	b.n	80012a8 <Send2RangefinderModule+0x60>
    }
    else if(SendType->len == 0x04)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d108      	bne.n	80012a8 <Send2RangefinderModule+0x60>
    {
        HAL_UART_Transmit(&huart7, SendType->Data, 8, 0xffff);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0109 	add.w	r1, r3, #9
 800129c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a0:	2208      	movs	r2, #8
 80012a2:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <Send2RangefinderModule+0x78>)
 80012a4:	f00d fd42 	bl	800ed2c <HAL_UART_Transmit>
    }
    // for(int i = 0;i < 8;i++)
    // {
    //     uart_printf("%02x ", SendType->Data[i]);
    // }
    memset(SendType->Data, 0, 16);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3309      	adds	r3, #9
 80012ac:	2210      	movs	r2, #16
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f024 f9cb 	bl	802564c <memset>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000990 	.word	0x24000990

080012c4 <CheckSum>:
TrackingFaultCu_Typedef TrackingFaultCodeCu;
TrackingFaultJing_Typedef TrackingFaultCodeJing;

// 和校验
uint8_t CheckSum(uint8_t *ptr, uint8_t len)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	e009      	b.n	80012ee <CheckSum+0x2a>
    {
        sum += ptr[i];
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4413      	add	r3, r2
 80012e6:	73fb      	strb	r3, [r7, #15]
    for(int i = 0;i < len;i++)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <CheckSum+0x16>
    }
    return sum;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <ServoDataPack>:


void ServoDataPack(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    static uint8_t crc = 0;
    uint8_t check = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
    SendType->data[3] = ServoData->TurnMode;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	719a      	strb	r2, [r3, #6]
    SendType->data[4] = ServoData->MotorEnable;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	785a      	ldrb	r2, [r3, #1]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	71da      	strb	r2, [r3, #7]
    SendType->data[5] = ServoData->Turntable_Yaw >> 8;
    SendType->data[6] = ServoData->Turntable_Yaw;
    SendType->data[7] = ServoData->Turntable_Pitch >> 8;
    SendType->data[8] = ServoData->Turntable_Pitch;
    #else
    SendType->data[5] = ServoData->Turntable_Yaw;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	721a      	strb	r2, [r3, #8]
    SendType->data[6] = ServoData->Turntable_Yaw >> 8;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	b21b      	sxth	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	725a      	strb	r2, [r3, #9]
    SendType->data[7] = ServoData->Turntable_Pitch;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	729a      	strb	r2, [r3, #10]
    SendType->data[8] = ServoData->Turntable_Pitch >> 8;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	b21b      	sxth	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	72da      	strb	r2, [r3, #11]
    #endif

    SendType->data[9] = ServoData->TrackingDataValid;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	799a      	ldrb	r2, [r3, #6]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	731a      	strb	r2, [r3, #12]

    for(int i = 0;i < 4;i++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e018      	b.n	800139a <ServoDataPack+0x96>
    {
        #if BIG_ENDIAN
        SendType->data[10+i] = ServoData->TargetYaw.u8t[3-i];
        SendType->data[14+i] = ServoData->TargetPitch.u8t[3-i];
        #else
        SendType->data[10+i] = ServoData->TargetYaw.u8t[i];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	330a      	adds	r3, #10
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	440a      	add	r2, r1
 8001372:	3208      	adds	r2, #8
 8001374:	7811      	ldrb	r1, [r2, #0]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	460a      	mov	r2, r1
 800137c:	70da      	strb	r2, [r3, #3]
        SendType->data[14+i] = ServoData->TargetPitch.u8t[i];
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	330e      	adds	r3, #14
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	440a      	add	r2, r1
 8001388:	320c      	adds	r2, #12
 800138a:	7811      	ldrb	r1, [r2, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3301      	adds	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b03      	cmp	r3, #3
 800139e:	dde3      	ble.n	8001368 <ServoDataPack+0x64>
    //   else
    //   {
    //     ServoData->TrackingFaultCleanCu = 0x55;
    //     errorflag = 0;
    //   }
    if(ServoData->TrackingFaultCleanCu == 0x66)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	7c1b      	ldrb	r3, [r3, #16]
 80013a4:	2b66      	cmp	r3, #102	@ 0x66
 80013a6:	d107      	bne.n	80013b8 <ServoDataPack+0xb4>
    {
        SendType->data[18] = ServoData->TrackingFaultCleanCu;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	7c1a      	ldrb	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	755a      	strb	r2, [r3, #21]
        ServoData->TrackingFaultCleanCu = 0x55;     
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2255      	movs	r2, #85	@ 0x55
 80013b4:	741a      	strb	r2, [r3, #16]
 80013b6:	e002      	b.n	80013be <ServoDataPack+0xba>
    }else
    {
        SendType->data[18] = 0x55;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2255      	movs	r2, #85	@ 0x55
 80013bc:	755a      	strb	r2, [r3, #21]
    }

    // SendType->data[18] = ServoData->TrackingFaultCleanCu;
    SendType->data[19] = ServoData->FSMMode;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7c5a      	ldrb	r2, [r3, #17]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	759a      	strb	r2, [r3, #22]
    SendType->data[20] = ServoData->ControlEnableJing;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c9a      	ldrb	r2, [r3, #18]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	75da      	strb	r2, [r3, #23]

    for(int i = 0;i < 4;i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	e02e      	b.n	8001432 <ServoDataPack+0x12e>
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[3-i];
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[3-i];
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[3-i];
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[3-i];
        #else
        SendType->data[21+i] = ServoData->TargetFSMYaw.u8t[i];
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3315      	adds	r3, #21
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	440a      	add	r2, r1
 80013de:	3214      	adds	r2, #20
 80013e0:	7811      	ldrb	r1, [r2, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	460a      	mov	r2, r1
 80013e8:	70da      	strb	r2, [r3, #3]
        SendType->data[25+i] = ServoData->TargetFSMPitch.u8t[i];
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3319      	adds	r3, #25
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	440a      	add	r2, r1
 80013f4:	3218      	adds	r2, #24
 80013f6:	7811      	ldrb	r1, [r2, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	460a      	mov	r2, r1
 80013fe:	70da      	strb	r2, [r3, #3]
        SendType->data[29+i] = ServoData->ZeroCorrectionFSMX.u8t[i];
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	331d      	adds	r3, #29
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	440a      	add	r2, r1
 800140a:	321c      	adds	r2, #28
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	460a      	mov	r2, r1
 8001414:	70da      	strb	r2, [r3, #3]
        SendType->data[33+i] = ServoData->ZeroCorrectionFSMY.u8t[i];
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	3321      	adds	r3, #33	@ 0x21
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	440a      	add	r2, r1
 8001420:	3220      	adds	r2, #32
 8001422:	7811      	ldrb	r1, [r2, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3301      	adds	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b03      	cmp	r3, #3
 8001436:	ddcd      	ble.n	80013d4 <ServoDataPack+0xd0>
        #endif
    }

    for(int i = 0;i < 2;i++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e01c      	b.n	8001478 <ServoDataPack+0x174>
    {
        #if BIG_ENDIAN
        SendType->data[37+i] = ServoData->MousePointX >> 8*(1-i);
        SendType->data[39+i] = ServoData->MousePointY >> 8*(1-i);
        #else
        SendType->data[37+i] = ServoData->MousePointX >> 8*i;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001442:	461a      	mov	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	411a      	asrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3325      	adds	r3, #37	@ 0x25
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	70da      	strb	r2, [r3, #3]
        SendType->data[39+i] = ServoData->MousePointY >> 8*i;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800145c:	461a      	mov	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	411a      	asrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3327      	adds	r3, #39	@ 0x27
 8001468:	b2d1      	uxtb	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 2;i++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	dddf      	ble.n	800143e <ServoDataPack+0x13a>
        #endif
    }

    SendType->data[41] = ServoData->MousePointJing;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    //   else
    //   {
    //     errorflag = 0;
    //     ServoData->TrackingFaultCleanJing = 0x55;
    //   }
    if(ServoData->TrackingFaultCleanJing == 0x33)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001490:	2b33      	cmp	r3, #51	@ 0x33
 8001492:	d10a      	bne.n	80014aa <ServoDataPack+0x1a6>
    {
        SendType->data[42] = ServoData->TrackingFaultCleanJing;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        ServoData->TrackingFaultCleanJing = 0x55;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2255      	movs	r2, #85	@ 0x55
 80014a4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80014a8:	e003      	b.n	80014b2 <ServoDataPack+0x1ae>
    }else
    {
        SendType->data[42] = 0x55;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2255      	movs	r2, #85	@ 0x55
 80014ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
    // SendType->data[42] = ServoData->TrackingFaultCleanJing;

    for(int i = 0;i < 4;i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e00d      	b.n	80014d4 <ServoDataPack+0x1d0>
    {
        #if BIG_ENDIAN
        SendType->data[43+i] = ServoData->AngleJing.u8t[3-i];
        #else
        SendType->data[43+i] = ServoData->AngleJing.u8t[i];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	332b      	adds	r3, #43	@ 0x2b
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	440a      	add	r2, r1
 80014c2:	322c      	adds	r2, #44	@ 0x2c
 80014c4:	7811      	ldrb	r1, [r2, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	70da      	strb	r2, [r3, #3]
    for(int i = 0;i < 4;i++)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3301      	adds	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	ddee      	ble.n	80014b8 <ServoDataPack+0x1b4>
        #endif
    }
    SendType->crc = crc;
 80014da:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <ServoDataPack+0x23c>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    SendType->data[0] = SendType->head[0];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	70da      	strb	r2, [r3, #3]
    SendType->data[1] = SendType->head[1];
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	785a      	ldrb	r2, [r3, #1]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	711a      	strb	r2, [r3, #4]
    SendType->data[2] = SendType->len;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	789a      	ldrb	r2, [r3, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	715a      	strb	r2, [r3, #5]
    SendType->data[47] = crc;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <ServoDataPack+0x23c>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    check = CheckSum(SendType->data, 48);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3303      	adds	r3, #3
 800150a:	2130      	movs	r1, #48	@ 0x30
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fed9 	bl	80012c4 <CheckSum>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
    SendType->data[48] = check;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    SendType->data[49] = SendType->end;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 2037 	ldrb.w	r2, [r3, #55]	@ 0x37
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    crc++;
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <ServoDataPack+0x23c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <ServoDataPack+0x23c>)
 8001534:	701a      	strb	r2, [r3, #0]

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240004b5 	.word	0x240004b5

08001544 <ServoDataSend>:

void ServoDataSend(SendCmd_Typedef *SendType,ServoSendData_Typedef *ServoData)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
        ServoDataPack(SendType, ServoData);
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fed7 	bl	8001304 <ServoDataPack>
        // {
        //     uart_printf("%02x ", SendType->data[i]);
        //     // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
        // }
        // uart_printf("\r\n");
        if(errorflag)
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <ServoDataSend+0x38>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <ServoDataSend+0x20>
        {
            // HAL_UART_Transmit(&huart5, SendType->data, 50, 0xffff);
            errorflag = 0;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <ServoDataSend+0x38>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
        }
        // uart_printf("errorflag = %d\r\n",errorflag);
        HAL_UART_Transmit(&huart5, SendType->data, 50, HAL_MAX_DELAY);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	1cd9      	adds	r1, r3, #3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	2232      	movs	r2, #50	@ 0x32
 800156e:	4804      	ldr	r0, [pc, #16]	@ (8001580 <ServoDataSend+0x3c>)
 8001570:	f00d fbdc 	bl	800ed2c <HAL_UART_Transmit>
        // memset(SendType->data, 0, 50);
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	24000456 	.word	0x24000456
 8001580:	240008fc 	.word	0x240008fc

08001584 <processControl>:
uint8_t offset_flag = 0;
uint8_t laserChange = 0;
uint8_t imgFlag[2] = {0};

void processControl()
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b087      	sub	sp, #28
 8001588:	af06      	add	r7, sp, #24
    if(state == STATE_INIT){
 800158a:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <processControl+0x8c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d111      	bne.n	80015b6 <processControl+0x32>
        
        RangefinderDataFrameSend.FuncCode = SetMultiFreq;
 8001592:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <processControl+0x90>)
 8001594:	22a1      	movs	r2, #161	@ 0xa1
 8001596:	711a      	strb	r2, [r3, #4]
        cSetMultiFreq = 0x0A;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <processControl+0x94>)
 800159a:	220a      	movs	r2, #10
 800159c:	701a      	strb	r2, [r3, #0]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 800159e:	481d      	ldr	r0, [pc, #116]	@ (8001614 <processControl+0x90>)
 80015a0:	f7ff fe52 	bl	8001248 <Send2RangefinderModule>
        state = STATE_STANDBY;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <processControl+0x8c>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]

//        setFocusPos.f = 0;
//        SendFocusFrame.func = SetPos;
//        SendFocusData(&SendFocusFrame);
         SendFocusFrame.func = ClearPos;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <processControl+0x98>)
 80015ac:	221b      	movs	r2, #27
 80015ae:	70da      	strb	r2, [r3, #3]
         SendFocusData(&SendFocusFrame);
 80015b0:	481a      	ldr	r0, [pc, #104]	@ (800161c <processControl+0x98>)
 80015b2:	f7ff fa79 	bl	8000aa8 <SendFocusData>
    }



    // 系统状态 
    if(stateChange == 1)
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <processControl+0x9c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d141      	bne.n	8001642 <processControl+0xbe>
    {
        stateChange = 0;
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <processControl+0x9c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.go2Zero == 1)
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <processControl+0xa0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d103      	bne.n	80015d4 <processControl+0x50>
            // go2Zero(); //! 还没定下零位
        // HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
        // RangefinderDataFrameSend.FuncCode = SetMultiFreq;
        // cSetMultiFreq = 0x0A;
        // Send2RangefinderModule(&RangefinderDataFrameSend);
            state = STATE_ZERO;
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <processControl+0x8c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e036      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.standbyEnable == 1)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <processControl+0xa0>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <processControl+0x64>
        {
            standbyEnable();
 80015dc:	f000 fada 	bl	8001b94 <standbyEnable>
            state = STATE_STANDBY;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <processControl+0x8c>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e02c      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.catchEnable == 1)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <processControl+0xa0>)
 80015ea:	795b      	ldrb	r3, [r3, #5]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <processControl+0x78>
        {
            catchEnable();
 80015f0:	f000 fb94 	bl	8001d1c <catchEnable>
            state = STATE_CATCH;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <processControl+0x8c>)
 80015f6:	2206      	movs	r2, #6
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e022      	b.n	8001642 <processControl+0xbe>
        }
        else if(CommandTypedef.guideEnable == 1)
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <processControl+0xa0>)
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d111      	bne.n	8001628 <processControl+0xa4>
        {
            guideEnable();
 8001604:	f000 fb3e 	bl	8001c84 <guideEnable>
            state = STATE_GUIDE;
 8001608:	4b01      	ldr	r3, [pc, #4]	@ (8001610 <processControl+0x8c>)
 800160a:	2204      	movs	r2, #4
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e018      	b.n	8001642 <processControl+0xbe>
 8001610:	240004b6 	.word	0x240004b6
 8001614:	24000100 	.word	0x24000100
 8001618:	2400044d 	.word	0x2400044d
 800161c:	24000000 	.word	0x24000000
 8001620:	240004b7 	.word	0x240004b7
 8001624:	24000184 	.word	0x24000184
        }
        else if(CommandTypedef.standbyDisable == 1 && state == STATE_STANDBY)
 8001628:	4b95      	ldr	r3, [pc, #596]	@ (8001880 <processControl+0x2fc>)
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <processControl+0xbe>
 8001630:	4b94      	ldr	r3, [pc, #592]	@ (8001884 <processControl+0x300>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d104      	bne.n	8001642 <processControl+0xbe>
        {
            standbyDisable();
 8001638:	f000 fb0e 	bl	8001c58 <standbyDisable>
            state = STATE_STANDBYDISABLE; // 待机状态进入待机禁止状态
 800163c:	4b91      	ldr	r3, [pc, #580]	@ (8001884 <processControl+0x300>)
 800163e:	2203      	movs	r2, #3
 8001640:	701a      	strb	r2, [r3, #0]
        }
    }

    // 伺服状态
    if((servo_flag == 1) || (sifuFlag.turnStateFlag == 1) || (sifuFlag.FSMModeFlag == 1) || (sifuFlag.controlEnableJingFlag == 1) || (sifuFlag.motorEnableFlag == 1) || (sifuFlag.dgFlag == 1))
 8001642:	4b91      	ldr	r3, [pc, #580]	@ (8001888 <processControl+0x304>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d014      	beq.n	8001674 <processControl+0xf0>
 800164a:	4b90      	ldr	r3, [pc, #576]	@ (800188c <processControl+0x308>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d010      	beq.n	8001674 <processControl+0xf0>
 8001652:	4b8e      	ldr	r3, [pc, #568]	@ (800188c <processControl+0x308>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00c      	beq.n	8001674 <processControl+0xf0>
 800165a:	4b8c      	ldr	r3, [pc, #560]	@ (800188c <processControl+0x308>)
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d008      	beq.n	8001674 <processControl+0xf0>
 8001662:	4b8a      	ldr	r3, [pc, #552]	@ (800188c <processControl+0x308>)
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d004      	beq.n	8001674 <processControl+0xf0>
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <processControl+0x308>)
 800166c:	795b      	ldrb	r3, [r3, #5]
 800166e:	2b01      	cmp	r3, #1
 8001670:	f040 809c 	bne.w	80017ac <processControl+0x228>
    {
        if(servo_flag == 1 && state == STATE_GUIDE)
 8001674:	4b84      	ldr	r3, [pc, #528]	@ (8001888 <processControl+0x304>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d135      	bne.n	80016e8 <processControl+0x164>
 800167c:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <processControl+0x300>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d131      	bne.n	80016e8 <processControl+0x164>
        {
            servo_flag = 0;
 8001684:	4b80      	ldr	r3, [pc, #512]	@ (8001888 <processControl+0x304>)
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TargetYaw = CommandTypedef.turnYaw;
 800168a:	4a81      	ldr	r2, [pc, #516]	@ (8001890 <processControl+0x30c>)
 800168c:	4b7c      	ldr	r3, [pc, #496]	@ (8001880 <processControl+0x2fc>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	6093      	str	r3, [r2, #8]
            ServoDataSendTypedef.TargetPitch = CommandTypedef.turnPitch;
 8001692:	4a7f      	ldr	r2, [pc, #508]	@ (8001890 <processControl+0x30c>)
 8001694:	4b7a      	ldr	r3, [pc, #488]	@ (8001880 <processControl+0x2fc>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	60d3      	str	r3, [r2, #12]
            ServoDataSendTypedef.TargetFSMYaw = CommandTypedef.FSM_Yaw;
 800169a:	4a7d      	ldr	r2, [pc, #500]	@ (8001890 <processControl+0x30c>)
 800169c:	4b78      	ldr	r3, [pc, #480]	@ (8001880 <processControl+0x2fc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	6153      	str	r3, [r2, #20]
            ServoDataSendTypedef.TargetFSMPitch = CommandTypedef.FSM_Pitch;
 80016a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001890 <processControl+0x30c>)
 80016a4:	4b76      	ldr	r3, [pc, #472]	@ (8001880 <processControl+0x2fc>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	6193      	str	r3, [r2, #24]
            uart_printf("TargetYaw:%f,TargetPitch:%f,TargetFSMYaw:%f,TargetFSMPitch:%f\n",CommandTypedef.turnYaw.f,CommandTypedef.turnPitch.f,CommandTypedef.FSM_Yaw.f,CommandTypedef.FSM_Pitch.f);
 80016aa:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <processControl+0x2fc>)
 80016ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80016b0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80016b4:	4b72      	ldr	r3, [pc, #456]	@ (8001880 <processControl+0x2fc>)
 80016b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016be:	4b70      	ldr	r3, [pc, #448]	@ (8001880 <processControl+0x2fc>)
 80016c0:	edd3 6a06 	vldr	s13, [r3, #24]
 80016c4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001880 <processControl+0x2fc>)
 80016ca:	edd3 5a07 	vldr	s11, [r3, #28]
 80016ce:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80016d2:	ed8d 5b04 	vstr	d5, [sp, #16]
 80016d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80016da:	ed8d 7b00 	vstr	d7, [sp]
 80016de:	ec53 2b14 	vmov	r2, r3, d4
 80016e2:	486c      	ldr	r0, [pc, #432]	@ (8001894 <processControl+0x310>)
 80016e4:	f003 fc12 	bl	8004f0c <uart_printf>
        }
        if(sifuFlag.turnStateFlag == 1) // 设置转台工作模式
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <processControl+0x308>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d11b      	bne.n	8001728 <processControl+0x1a4>
        {
            sifuFlag.turnStateFlag = 0;
 80016f0:	4b66      	ldr	r3, [pc, #408]	@ (800188c <processControl+0x308>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
            ServoDataSendTypedef.TurnMode = CommandTypedef.setTurnState;
 80016f6:	4b62      	ldr	r3, [pc, #392]	@ (8001880 <processControl+0x2fc>)
 80016f8:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80016fc:	4b64      	ldr	r3, [pc, #400]	@ (8001890 <processControl+0x30c>)
 80016fe:	701a      	strb	r2, [r3, #0]
            if(ServoDataSendTypedef.TurnMode == TurntableTrackingState_GUIDE)
 8001700:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <processControl+0x30c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2bb2      	cmp	r3, #178	@ 0xb2
 8001706:	d10f      	bne.n	8001728 <processControl+0x1a4>
            {
                ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001708:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <processControl+0x314>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <processControl+0x30c>)
 800170e:	60d3      	str	r3, [r2, #12]
                ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001710:	4b61      	ldr	r3, [pc, #388]	@ (8001898 <processControl+0x314>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <processControl+0x30c>)
 8001716:	6093      	str	r3, [r2, #8]
                ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001718:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <processControl+0x314>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4a5c      	ldr	r2, [pc, #368]	@ (8001890 <processControl+0x30c>)
 800171e:	6153      	str	r3, [r2, #20]
                ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001720:	4b5d      	ldr	r3, [pc, #372]	@ (8001898 <processControl+0x314>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a5a      	ldr	r2, [pc, #360]	@ (8001890 <processControl+0x30c>)
 8001726:	6193      	str	r3, [r2, #24]
            }
        }
        if(sifuFlag.FSMModeFlag == 1)
 8001728:	4b58      	ldr	r3, [pc, #352]	@ (800188c <processControl+0x308>)
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <processControl+0x1bc>
        {
            sifuFlag.FSMModeFlag = 0;
 8001730:	4b56      	ldr	r3, [pc, #344]	@ (800188c <processControl+0x308>)
 8001732:	2200      	movs	r2, #0
 8001734:	70da      	strb	r2, [r3, #3]
            ServoDataSendTypedef.FSMMode = CommandTypedef.setFSMState;
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <processControl+0x2fc>)
 8001738:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800173c:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <processControl+0x30c>)
 800173e:	745a      	strb	r2, [r3, #17]
        }
        if(sifuFlag.controlEnableJingFlag == 1)
 8001740:	4b52      	ldr	r3, [pc, #328]	@ (800188c <processControl+0x308>)
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10c      	bne.n	8001762 <processControl+0x1de>
        {
            sifuFlag.controlEnableJingFlag = 0;
 8001748:	4b50      	ldr	r3, [pc, #320]	@ (800188c <processControl+0x308>)
 800174a:	2200      	movs	r2, #0
 800174c:	711a      	strb	r2, [r3, #4]
            ServoDataSendTypedef.ControlEnableJing = CommandTypedef.trackJingEnable;
 800174e:	4b4c      	ldr	r3, [pc, #304]	@ (8001880 <processControl+0x2fc>)
 8001750:	7a5a      	ldrb	r2, [r3, #9]
 8001752:	4b4f      	ldr	r3, [pc, #316]	@ (8001890 <processControl+0x30c>)
 8001754:	749a      	strb	r2, [r3, #18]
            uart_printf("trackJingEnable:%d\n",CommandTypedef.trackJingEnable);
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <processControl+0x2fc>)
 8001758:	7a5b      	ldrb	r3, [r3, #9]
 800175a:	4619      	mov	r1, r3
 800175c:	484f      	ldr	r0, [pc, #316]	@ (800189c <processControl+0x318>)
 800175e:	f003 fbd5 	bl	8004f0c <uart_printf>
        }
        if(sifuFlag.motorEnableFlag == 1) // 设置转台电机使能
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <processControl+0x308>)
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <processControl+0x1f6>
        {
            sifuFlag.motorEnableFlag = 0;
 800176a:	4b48      	ldr	r3, [pc, #288]	@ (800188c <processControl+0x308>)
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
            ServoDataSendTypedef.MotorEnable = CommandTypedef.motorEnable;
 8001770:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <processControl+0x2fc>)
 8001772:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8001776:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <processControl+0x30c>)
 8001778:	705a      	strb	r2, [r3, #1]
        }
        if(ServoDataSendTypedef.TurnMode == TurntableTrackingState_CLOSE_LOOP && sifuFlag.dgFlag == 1)
 800177a:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <processControl+0x30c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001780:	d110      	bne.n	80017a4 <processControl+0x220>
 8001782:	4b42      	ldr	r3, [pc, #264]	@ (800188c <processControl+0x308>)
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d10c      	bne.n	80017a4 <processControl+0x220>
        {
            sifuFlag.dgFlag = 0;
 800178a:	4b40      	ldr	r3, [pc, #256]	@ (800188c <processControl+0x308>)
 800178c:	2200      	movs	r2, #0
 800178e:	715a      	strb	r2, [r3, #5]
            ServoDataSendTypedef.Turntable_Pitch = CommandTypedef.dgPitch;
 8001790:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <processControl+0x2fc>)
 8001792:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <processControl+0x30c>)
 8001798:	809a      	strh	r2, [r3, #4]
            ServoDataSendTypedef.Turntable_Yaw = CommandTypedef.dgYaw;
 800179a:	4b39      	ldr	r3, [pc, #228]	@ (8001880 <processControl+0x2fc>)
 800179c:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 80017a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <processControl+0x30c>)
 80017a2:	805a      	strh	r2, [r3, #2]
            // uart_printf("dgPitch:%d,dgYaw:%d\n",CommandTypedef.dgPitch,CommandTypedef.dgYaw);
        }
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 80017a4:	493a      	ldr	r1, [pc, #232]	@ (8001890 <processControl+0x30c>)
 80017a6:	483e      	ldr	r0, [pc, #248]	@ (80018a0 <processControl+0x31c>)
 80017a8:	f7ff fecc 	bl	8001544 <ServoDataSend>
    }

    if(laserChange == 1)
 80017ac:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <processControl+0x320>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d112      	bne.n	80017da <processControl+0x256>
    {
        laserChange = 0;
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <processControl+0x320>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
        setFocusPos.f = (float)CommandTypedef.laserAdjust;
 80017ba:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <processControl+0x2fc>)
 80017bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <processControl+0x324>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
        SendFocusFrame.func = SetPos;
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <processControl+0x328>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	70da      	strb	r2, [r3, #3]
        SendFocusData(&SendFocusFrame);
 80017d4:	4835      	ldr	r0, [pc, #212]	@ (80018ac <processControl+0x328>)
 80017d6:	f7ff f967 	bl	8000aa8 <SendFocusData>
    }

    if(manual_flag == 1 && state == STATE_CATCH) //手动模式
 80017da:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <processControl+0x32c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 80a7 	bne.w	8001932 <processControl+0x3ae>
 80017e4:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <processControl+0x300>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	f040 80a2 	bne.w	8001932 <processControl+0x3ae>
    {
        manual_flag = 0;
 80017ee:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <processControl+0x32c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
        if(CommandTypedef.manual_cj == 1)
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <processControl+0x2fc>)
 80017f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d11d      	bne.n	800183a <processControl+0x2b6>
        {
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <processControl+0x330>)
 8001800:	2208      	movs	r2, #8
 8001802:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <processControl+0x330>)
 8001806:	2203      	movs	r2, #3
 8001808:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <processControl+0x2fc>)
 800180c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800180e:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <processControl+0x334>)
 8001810:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_CU.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <processControl+0x2fc>)
 8001814:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8001816:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <processControl+0x334>)
 8001818:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_CU.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <processControl+0x2fc>)
 800181c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800181e:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <processControl+0x334>)
 8001820:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_CU.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <processControl+0x2fc>)
 8001824:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <processControl+0x334>)
 8001828:	841a      	strh	r2, [r3, #32]
            uart_printf("cu\n");
 800182a:	4824      	ldr	r0, [pc, #144]	@ (80018bc <processControl+0x338>)
 800182c:	f003 fb6e 	bl	8004f0c <uart_printf>
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001830:	4921      	ldr	r1, [pc, #132]	@ (80018b8 <processControl+0x334>)
 8001832:	4820      	ldr	r0, [pc, #128]	@ (80018b4 <processControl+0x330>)
 8001834:	f7ff fbe4 	bl	8001000 <Send2ImgModule>
 8001838:	e064      	b.n	8001904 <processControl+0x380>
        }else if(CommandTypedef.manual_cj == 2){
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <processControl+0x2fc>)
 800183c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001840:	2b02      	cmp	r3, #2
 8001842:	d143      	bne.n	80018cc <processControl+0x348>
            // TODO: 参数还需要改 这是粗相机的参数

            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <processControl+0x33c>)
 8001846:	2208      	movs	r2, #8
 8001848:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = MANUAL_TRACK;
 800184a:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <processControl+0x33c>)
 800184c:	2203      	movs	r2, #3
 800184e:	71da      	strb	r2, [r3, #7]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterX = CommandTypedef.manual_center_x;
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <processControl+0x2fc>)
 8001852:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <processControl+0x340>)
 8001856:	835a      	strh	r2, [r3, #26]
            ImgSendDataTypedef_JING.ManualTracking.TrackingCenterY = CommandTypedef.manual_center_y;
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <processControl+0x2fc>)
 800185a:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <processControl+0x340>)
 800185e:	839a      	strh	r2, [r3, #28]
            ImgSendDataTypedef_JING.ManualTracking.TrackingWidth = CommandTypedef.manual_width;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <processControl+0x2fc>)
 8001862:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <processControl+0x340>)
 8001866:	83da      	strh	r2, [r3, #30]
            ImgSendDataTypedef_JING.ManualTracking.TrackingHeight = CommandTypedef.manual_height;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <processControl+0x2fc>)
 800186a:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <processControl+0x340>)
 800186e:	841a      	strh	r2, [r3, #32]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001870:	4914      	ldr	r1, [pc, #80]	@ (80018c4 <processControl+0x340>)
 8001872:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <processControl+0x33c>)
 8001874:	f7ff fbc4 	bl	8001000 <Send2ImgModule>
            uart_printf("jing\n");
 8001878:	4813      	ldr	r0, [pc, #76]	@ (80018c8 <processControl+0x344>)
 800187a:	f003 fb47 	bl	8004f0c <uart_printf>
 800187e:	e041      	b.n	8001904 <processControl+0x380>
 8001880:	24000184 	.word	0x24000184
 8001884:	240004b6 	.word	0x240004b6
 8001888:	240004c2 	.word	0x240004c2
 800188c:	240004b8 	.word	0x240004b8
 8001890:	24000154 	.word	0x24000154
 8001894:	08029208 	.word	0x08029208
 8001898:	24000458 	.word	0x24000458
 800189c:	08029248 	.word	0x08029248
 80018a0:	2400011c 	.word	0x2400011c
 80018a4:	240004c8 	.word	0x240004c8
 80018a8:	240003fc 	.word	0x240003fc
 80018ac:	24000000 	.word	0x24000000
 80018b0:	240001d8 	.word	0x240001d8
 80018b4:	24000018 	.word	0x24000018
 80018b8:	24000064 	.word	0x24000064
 80018bc:	0802925c 	.word	0x0802925c
 80018c0:	2400008c 	.word	0x2400008c
 80018c4:	240000d8 	.word	0x240000d8
 80018c8:	08029260 	.word	0x08029260
        }
        else if(CommandTypedef.manual_cj == 3)
 80018cc:	4b98      	ldr	r3, [pc, #608]	@ (8001b30 <processControl+0x5ac>)
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d116      	bne.n	8001904 <processControl+0x380>
        {
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 80018d6:	4b97      	ldr	r3, [pc, #604]	@ (8001b34 <processControl+0x5b0>)
 80018d8:	2208      	movs	r2, #8
 80018da:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 80018dc:	4b95      	ldr	r3, [pc, #596]	@ (8001b34 <processControl+0x5b0>)
 80018de:	2201      	movs	r2, #1
 80018e0:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80018e2:	4995      	ldr	r1, [pc, #596]	@ (8001b38 <processControl+0x5b4>)
 80018e4:	4893      	ldr	r0, [pc, #588]	@ (8001b34 <processControl+0x5b0>)
 80018e6:	f7ff fb8b 	bl	8001000 <Send2ImgModule>
            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 80018ea:	4b94      	ldr	r3, [pc, #592]	@ (8001b3c <processControl+0x5b8>)
 80018ec:	2208      	movs	r2, #8
 80018ee:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 80018f0:	4b92      	ldr	r3, [pc, #584]	@ (8001b3c <processControl+0x5b8>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80018f6:	4992      	ldr	r1, [pc, #584]	@ (8001b40 <processControl+0x5bc>)
 80018f8:	4890      	ldr	r0, [pc, #576]	@ (8001b3c <processControl+0x5b8>)
 80018fa:	f7ff fb81 	bl	8001000 <Send2ImgModule>
            uart_printf("out\r\n");
 80018fe:	4891      	ldr	r0, [pc, #580]	@ (8001b44 <processControl+0x5c0>)
 8001900:	f003 fb04 	bl	8004f0c <uart_printf>
        }
//                uart_printf("%d,%d",CommandTypedef.trackCuEnable,CommandTypedef.trackJingEnable);
        uart_printf("manual_cj:%d,TrackingCenterX:%d,TrackingCenterY:%d,TrackingWidth:%d,TrackingHeight:%d\n",CommandTypedef.manual_cj,CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
 8001904:	4b8a      	ldr	r3, [pc, #552]	@ (8001b30 <processControl+0x5ac>)
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	4619      	mov	r1, r3
 800190c:	4b88      	ldr	r3, [pc, #544]	@ (8001b30 <processControl+0x5ac>)
 800190e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8001910:	4618      	mov	r0, r3
 8001912:	4b87      	ldr	r3, [pc, #540]	@ (8001b30 <processControl+0x5ac>)
 8001914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001916:	461c      	mov	r4, r3
 8001918:	4b85      	ldr	r3, [pc, #532]	@ (8001b30 <processControl+0x5ac>)
 800191a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800191c:	461a      	mov	r2, r3
 800191e:	4b84      	ldr	r3, [pc, #528]	@ (8001b30 <processControl+0x5ac>)
 8001920:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	4602      	mov	r2, r0
 800192a:	4887      	ldr	r0, [pc, #540]	@ (8001b48 <processControl+0x5c4>)
 800192c:	f003 faee 	bl	8004f0c <uart_printf>
 8001930:	e033      	b.n	800199a <processControl+0x416>
    }
    else if(manual_flag == 2 && state == STATE_CATCH) //自动模式
 8001932:	4b86      	ldr	r3, [pc, #536]	@ (8001b4c <processControl+0x5c8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d12f      	bne.n	800199a <processControl+0x416>
 800193a:	4b85      	ldr	r3, [pc, #532]	@ (8001b50 <processControl+0x5cc>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b06      	cmp	r3, #6
 8001940:	d12b      	bne.n	800199a <processControl+0x416>
    {
        // manual_flag = 0;
        if(CommandTypedef.imgEnableCu == 1 && imgFlag[0] == 1) //!:条件待修改
 8001942:	4b7b      	ldr	r3, [pc, #492]	@ (8001b30 <processControl+0x5ac>)
 8001944:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001948:	2b01      	cmp	r3, #1
 800194a:	d110      	bne.n	800196e <processControl+0x3ea>
 800194c:	4b81      	ldr	r3, [pc, #516]	@ (8001b54 <processControl+0x5d0>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10c      	bne.n	800196e <processControl+0x3ea>
        {
            imgFlag[0] = 0;
 8001954:	4b7f      	ldr	r3, [pc, #508]	@ (8001b54 <processControl+0x5d0>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
            ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 800195a:	4b76      	ldr	r3, [pc, #472]	@ (8001b34 <processControl+0x5b0>)
 800195c:	2208      	movs	r2, #8
 800195e:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;
 8001960:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <processControl+0x5b0>)
 8001962:	2202      	movs	r2, #2
 8001964:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001966:	4974      	ldr	r1, [pc, #464]	@ (8001b38 <processControl+0x5b4>)
 8001968:	4872      	ldr	r0, [pc, #456]	@ (8001b34 <processControl+0x5b0>)
 800196a:	f7ff fb49 	bl	8001000 <Send2ImgModule>
        }
        if(CommandTypedef.imgEnableJing == 1 && imgFlag[1] == 1) //!:条件待修改
 800196e:	4b70      	ldr	r3, [pc, #448]	@ (8001b30 <processControl+0x5ac>)
 8001970:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001974:	2b01      	cmp	r3, #1
 8001976:	d110      	bne.n	800199a <processControl+0x416>
 8001978:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <processControl+0x5d0>)
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10c      	bne.n	800199a <processControl+0x416>
        {
            imgFlag[1] = 0;
 8001980:	4b74      	ldr	r3, [pc, #464]	@ (8001b54 <processControl+0x5d0>)
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
            ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001986:	4b6d      	ldr	r3, [pc, #436]	@ (8001b3c <processControl+0x5b8>)
 8001988:	2208      	movs	r2, #8
 800198a:	719a      	strb	r2, [r3, #6]
            ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 800198c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b3c <processControl+0x5b8>)
 800198e:	2202      	movs	r2, #2
 8001990:	71da      	strb	r2, [r3, #7]
            Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001992:	496b      	ldr	r1, [pc, #428]	@ (8001b40 <processControl+0x5bc>)
 8001994:	4869      	ldr	r0, [pc, #420]	@ (8001b3c <processControl+0x5b8>)
 8001996:	f7ff fb33 	bl	8001000 <Send2ImgModule>
        
    }


    // 曝光调节
    if(expose_flag == 1)
 800199a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b58 <processControl+0x5d4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d116      	bne.n	80019d0 <processControl+0x44c>
    {
        // 粗电视曝光调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM; 
 80019a2:	4b64      	ldr	r3, [pc, #400]	@ (8001b34 <processControl+0x5b0>)
 80019a4:	2206      	movs	r2, #6
 80019a6:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.exposure = CommandTypedef.exposureCU;
 80019a8:	4b61      	ldr	r3, [pc, #388]	@ (8001b30 <processControl+0x5ac>)
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	4a62      	ldr	r2, [pc, #392]	@ (8001b38 <processControl+0x5b4>)
 80019ae:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_CU.FuncSubCode = EXPOSURE;
 80019b0:	4b60      	ldr	r3, [pc, #384]	@ (8001b34 <processControl+0x5b0>)
 80019b2:	2205      	movs	r2, #5
 80019b4:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 80019b6:	4960      	ldr	r1, [pc, #384]	@ (8001b38 <processControl+0x5b4>)
 80019b8:	485e      	ldr	r0, [pc, #376]	@ (8001b34 <processControl+0x5b0>)
 80019ba:	f7ff fb21 	bl	8001000 <Send2ImgModule>
        uart_printf("exposureCU:%ld\n",CommandTypedef.exposureCU);
 80019be:	4b5c      	ldr	r3, [pc, #368]	@ (8001b30 <processControl+0x5ac>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4865      	ldr	r0, [pc, #404]	@ (8001b5c <processControl+0x5d8>)
 80019c6:	f003 faa1 	bl	8004f0c <uart_printf>
        
        expose_flag = 0;
 80019ca:	4b63      	ldr	r3, [pc, #396]	@ (8001b58 <processControl+0x5d4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
    }
    if(exposeJing_flag == 1)
 80019d0:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <processControl+0x5dc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d110      	bne.n	80019fa <processControl+0x476>
    {
        ImgSendTypedef_JING.FuncCode = SETTING_DEVICEPARAM;
 80019d8:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <processControl+0x5b8>)
 80019da:	2206      	movs	r2, #6
 80019dc:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_JING.exposure = CommandTypedef.exposureJING;
 80019de:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <processControl+0x5ac>)
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	4a57      	ldr	r2, [pc, #348]	@ (8001b40 <processControl+0x5bc>)
 80019e4:	6093      	str	r3, [r2, #8]
        ImgSendTypedef_JING.FuncSubCode = EXPOSURE;
 80019e6:	4b55      	ldr	r3, [pc, #340]	@ (8001b3c <processControl+0x5b8>)
 80019e8:	2205      	movs	r2, #5
 80019ea:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 80019ec:	4954      	ldr	r1, [pc, #336]	@ (8001b40 <processControl+0x5bc>)
 80019ee:	4853      	ldr	r0, [pc, #332]	@ (8001b3c <processControl+0x5b8>)
 80019f0:	f7ff fb06 	bl	8001000 <Send2ImgModule>
        exposeJing_flag = 0;
 80019f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b60 <processControl+0x5dc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    }

    if(focus_flag == 1)
 80019fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001b64 <processControl+0x5e0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d110      	bne.n	8001a24 <processControl+0x4a0>
    {
        // 粗电视调焦
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001a02:	4b4c      	ldr	r3, [pc, #304]	@ (8001b34 <processControl+0x5b0>)
 8001a04:	2206      	movs	r2, #6
 8001a06:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.focusAdjust = CommandTypedef.cuFocusAdjust;
 8001a08:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <processControl+0x5ac>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <processControl+0x5b4>)
 8001a0e:	6013      	str	r3, [r2, #0]
        ImgSendTypedef_CU.FuncSubCode = FOCUS_ADJUST;
 8001a10:	4b48      	ldr	r3, [pc, #288]	@ (8001b34 <processControl+0x5b0>)
 8001a12:	2203      	movs	r2, #3
 8001a14:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001a16:	4948      	ldr	r1, [pc, #288]	@ (8001b38 <processControl+0x5b4>)
 8001a18:	4846      	ldr	r0, [pc, #280]	@ (8001b34 <processControl+0x5b0>)
 8001a1a:	f7ff faf1 	bl	8001000 <Send2ImgModule>
        focus_flag = 0;
 8001a1e:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <processControl+0x5e0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    }
    if(zoom_flag == 1)
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <processControl+0x5e4>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d116      	bne.n	8001a5a <processControl+0x4d6>
    {
        // 粗电视变倍调节
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001a2c:	4b41      	ldr	r3, [pc, #260]	@ (8001b34 <processControl+0x5b0>)
 8001a2e:	2206      	movs	r2, #6
 8001a30:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.zoomAdjust = CommandTypedef.zoomAdjust;
 8001a32:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <processControl+0x5ac>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	4a40      	ldr	r2, [pc, #256]	@ (8001b38 <processControl+0x5b4>)
 8001a38:	6053      	str	r3, [r2, #4]
        ImgSendTypedef_CU.FuncSubCode = ZOOM_ADJUST;
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <processControl+0x5b0>)
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	71da      	strb	r2, [r3, #7]
        uart_printf("zoomAdjust:%ld\n",CommandTypedef.zoomAdjust);
 8001a40:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <processControl+0x5ac>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	4849      	ldr	r0, [pc, #292]	@ (8001b6c <processControl+0x5e8>)
 8001a48:	f003 fa60 	bl	8004f0c <uart_printf>
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001a4c:	493a      	ldr	r1, [pc, #232]	@ (8001b38 <processControl+0x5b4>)
 8001a4e:	4839      	ldr	r0, [pc, #228]	@ (8001b34 <processControl+0x5b0>)
 8001a50:	f7ff fad6 	bl	8001000 <Send2ImgModule>
        zoom_flag = 0;
 8001a54:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <processControl+0x5e4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    }
    if(offset_flag == 1)
 8001a5a:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <processControl+0x5ec>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11e      	bne.n	8001aa0 <processControl+0x51c>
    {
        // 粗电视光学中心设置
        ImgSendTypedef_CU.FuncCode = SETTING_DEVICEPARAM;
 8001a62:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <processControl+0x5b0>)
 8001a64:	2206      	movs	r2, #6
 8001a66:	719a      	strb	r2, [r3, #6]
        ImgSendDataTypedef_CU.offsetX = CommandTypedef.x_offset.u32t * 1024 / 640;
 8001a68:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <processControl+0x5ac>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	029b      	lsls	r3, r3, #10
 8001a6e:	4a41      	ldr	r2, [pc, #260]	@ (8001b74 <processControl+0x5f0>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0a5b      	lsrs	r3, r3, #9
 8001a76:	4a30      	ldr	r2, [pc, #192]	@ (8001b38 <processControl+0x5b4>)
 8001a78:	60d3      	str	r3, [r2, #12]
        ImgSendDataTypedef_CU.offsetY = CommandTypedef.y_offset.u32t * 1024 / 640;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <processControl+0x5ac>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4a3c      	ldr	r2, [pc, #240]	@ (8001b74 <processControl+0x5f0>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	4a2b      	ldr	r2, [pc, #172]	@ (8001b38 <processControl+0x5b4>)
 8001a8a:	6113      	str	r3, [r2, #16]
        ImgSendTypedef_CU.FuncSubCode = OPTICAL_CENTER;
 8001a8c:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <processControl+0x5b0>)
 8001a8e:	2206      	movs	r2, #6
 8001a90:	71da      	strb	r2, [r3, #7]
        Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001a92:	4929      	ldr	r1, [pc, #164]	@ (8001b38 <processControl+0x5b4>)
 8001a94:	4827      	ldr	r0, [pc, #156]	@ (8001b34 <processControl+0x5b0>)
 8001a96:	f7ff fab3 	bl	8001000 <Send2ImgModule>
        offset_flag = 0;
 8001a9a:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <processControl+0x5ec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
    }

    // 测距机测距开启关闭
    if(rangefander_flag == 1)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <processControl+0x5f4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d109      	bne.n	8001abc <processControl+0x538>
    {
        RangefinderDataFrameSend.FuncCode = MultiMeasure;
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <processControl+0x5f8>)
 8001aaa:	2204      	movs	r2, #4
 8001aac:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 8001aae:	4833      	ldr	r0, [pc, #204]	@ (8001b7c <processControl+0x5f8>)
 8001ab0:	f7ff fbca 	bl	8001248 <Send2RangefinderModule>
        rangefander_flag = 0;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <processControl+0x5f4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e00c      	b.n	8001ad6 <processControl+0x552>
    }else if(rangefinder_close == 1)
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <processControl+0x5fc>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <processControl+0x552>
    {
        RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <processControl+0x5f8>)
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	711a      	strb	r2, [r3, #4]
        Send2RangefinderModule(&RangefinderDataFrameSend);
 8001aca:	482c      	ldr	r0, [pc, #176]	@ (8001b7c <processControl+0x5f8>)
 8001acc:	f7ff fbbc 	bl	8001248 <Send2RangefinderModule>
        rangefinder_close = 0;
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <processControl+0x5fc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
    }

    // 清除故障
    if(clearerror_flag == 1 && error_cnt < 2)
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <processControl+0x600>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d123      	bne.n	8001b26 <processControl+0x5a2>
 8001ade:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <processControl+0x604>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d81f      	bhi.n	8001b26 <processControl+0x5a2>
    {
        error_cnt++;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <processControl+0x604>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <processControl+0x604>)
 8001af0:	701a      	strb	r2, [r3, #0]
        if(error_cnt == 1)
 8001af2:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <processControl+0x604>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <processControl+0x586>
        {
            ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <processControl+0x608>)
 8001afc:	2266      	movs	r2, #102	@ 0x66
 8001afe:	741a      	strb	r2, [r3, #16]
            ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <processControl+0x608>)
 8001b02:	2233      	movs	r2, #51	@ 0x33
 8001b04:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001b08:	e009      	b.n	8001b1e <processControl+0x59a>
        }else if(error_cnt == 2)
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <processControl+0x604>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d105      	bne.n	8001b1e <processControl+0x59a>
        {
            clearerror_flag = 0;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <processControl+0x600>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
            error_cnt = 0;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <processControl+0x604>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
        }
        ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001b1e:	491b      	ldr	r1, [pc, #108]	@ (8001b8c <processControl+0x608>)
 8001b20:	481b      	ldr	r0, [pc, #108]	@ (8001b90 <processControl+0x60c>)
 8001b22:	f7ff fd0f 	bl	8001544 <ServoDataSend>
    // else if(state == STATE_STANDBYDISABLE)
    // {
    //     // ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
    //     // ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
    // }
}
 8001b26:	bf00      	nop
 8001b28:	3704      	adds	r7, #4
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	24000184 	.word	0x24000184
 8001b34:	24000018 	.word	0x24000018
 8001b38:	24000064 	.word	0x24000064
 8001b3c:	2400008c 	.word	0x2400008c
 8001b40:	240000d8 	.word	0x240000d8
 8001b44:	08029268 	.word	0x08029268
 8001b48:	08029270 	.word	0x08029270
 8001b4c:	240001d8 	.word	0x240001d8
 8001b50:	240004b6 	.word	0x240004b6
 8001b54:	240004cc 	.word	0x240004cc
 8001b58:	240004be 	.word	0x240004be
 8001b5c:	080292c8 	.word	0x080292c8
 8001b60:	240004bf 	.word	0x240004bf
 8001b64:	240004c4 	.word	0x240004c4
 8001b68:	240004c3 	.word	0x240004c3
 8001b6c:	080292d8 	.word	0x080292d8
 8001b70:	240004c7 	.word	0x240004c7
 8001b74:	cccccccd 	.word	0xcccccccd
 8001b78:	240004c0 	.word	0x240004c0
 8001b7c:	24000100 	.word	0x24000100
 8001b80:	240004c1 	.word	0x240004c1
 8001b84:	240004c5 	.word	0x240004c5
 8001b88:	240004c6 	.word	0x240004c6
 8001b8c:	24000154 	.word	0x24000154
 8001b90:	2400011c 	.word	0x2400011c

08001b94 <standbyEnable>:
    Send2RangefinderModule(&RangefinderDataFrameSend);

}

void standbyEnable()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <standbyEnable+0xa4>)
 8001b9a:	22b2      	movs	r2, #178	@ 0xb2
 8001b9c:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <standbyEnable+0xa4>)
 8001ba0:	2266      	movs	r2, #102	@ 0x66
 8001ba2:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw = 0;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <standbyEnable+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch = 0;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <standbyEnable+0xa4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <standbyEnable+0xa4>)
 8001bb2:	2233      	movs	r2, #51	@ 0x33
 8001bb4:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <standbyEnable+0xa8>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <standbyEnable+0xa4>)
 8001bbc:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <standbyEnable+0xa8>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <standbyEnable+0xa4>)
 8001bc4:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <standbyEnable+0xa4>)
 8001bc8:	22c1      	movs	r2, #193	@ 0xc1
 8001bca:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <standbyEnable+0xa4>)
 8001bce:	2266      	movs	r2, #102	@ 0x66
 8001bd0:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <standbyEnable+0xa8>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <standbyEnable+0xa4>)
 8001bd8:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <standbyEnable+0xa8>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <standbyEnable+0xa4>)
 8001be0:	6193      	str	r3, [r2, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f = 0.f;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <standbyEnable+0xa4>)
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f = 0.f;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <standbyEnable+0xa4>)
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001bf2:	4911      	ldr	r1, [pc, #68]	@ (8001c38 <standbyEnable+0xa4>)
 8001bf4:	4812      	ldr	r0, [pc, #72]	@ (8001c40 <standbyEnable+0xac>)
 8001bf6:	f7ff fca5 	bl	8001544 <ServoDataSend>


    // 粗电视待机
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <standbyEnable+0xb0>)
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_CU.FuncSubCode = STANDBY_MODE;
 8001c00:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <standbyEnable+0xb0>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001c06:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <standbyEnable+0xb4>)
 8001c08:	480e      	ldr	r0, [pc, #56]	@ (8001c44 <standbyEnable+0xb0>)
 8001c0a:	f7ff f9f9 	bl	8001000 <Send2ImgModule>
    DelayMs(2);
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f003 f9a0 	bl	8004f54 <DelayMs>

    // 精电视待机
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001c14:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <standbyEnable+0xb8>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = STANDBY_MODE;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <standbyEnable+0xb8>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001c20:	490b      	ldr	r1, [pc, #44]	@ (8001c50 <standbyEnable+0xbc>)
 8001c22:	480a      	ldr	r0, [pc, #40]	@ (8001c4c <standbyEnable+0xb8>)
 8001c24:	f7ff f9ec 	bl	8001000 <Send2ImgModule>
    // setFocusPos.f = 4000.f;
    // SendFocusFrame.func = SetPos;
    // SendFocusData(&SendFocusFrame);

    // 测距机回零
    RangefinderDataFrameSend.FuncCode = StopMeasure;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <standbyEnable+0xc0>)
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	711a      	strb	r2, [r3, #4]
    Send2RangefinderModule(&RangefinderDataFrameSend);
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <standbyEnable+0xc0>)
 8001c30:	f7ff fb0a 	bl	8001248 <Send2RangefinderModule>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000154 	.word	0x24000154
 8001c3c:	24000458 	.word	0x24000458
 8001c40:	2400011c 	.word	0x2400011c
 8001c44:	24000018 	.word	0x24000018
 8001c48:	24000064 	.word	0x24000064
 8001c4c:	2400008c 	.word	0x2400008c
 8001c50:	240000d8 	.word	0x240000d8
 8001c54:	24000100 	.word	0x24000100

08001c58 <standbyDisable>:

void standbyDisable()
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    // 电机失能
    ServoDataSendTypedef.TurnMode = TURNTABLE_OPEN_LOOP;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <standbyDisable+0x24>)
 8001c5e:	22b1      	movs	r2, #177	@ 0xb1
 8001c60:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOff;
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <standbyDisable+0x24>)
 8001c64:	2233      	movs	r2, #51	@ 0x33
 8001c66:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = DISABLE_JING;
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <standbyDisable+0x24>)
 8001c6a:	2233      	movs	r2, #51	@ 0x33
 8001c6c:	749a      	strb	r2, [r3, #18]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001c6e:	4903      	ldr	r1, [pc, #12]	@ (8001c7c <standbyDisable+0x24>)
 8001c70:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <standbyDisable+0x28>)
 8001c72:	f7ff fc67 	bl	8001544 <ServoDataSend>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	24000154 	.word	0x24000154
 8001c80:	2400011c 	.word	0x2400011c

08001c84 <guideEnable>:

void guideEnable()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <guideEnable+0x7c>)
 8001c8a:	22b2      	movs	r2, #178	@ 0xb2
 8001c8c:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <guideEnable+0x7c>)
 8001c90:	2266      	movs	r2, #102	@ 0x66
 8001c92:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <guideEnable+0x7c>)
 8001c96:	2266      	movs	r2, #102	@ 0x66
 8001c98:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <guideEnable+0x80>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <guideEnable+0x7c>)
 8001ca0:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <guideEnable+0x80>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <guideEnable+0x7c>)
 8001ca8:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <guideEnable+0x7c>)
 8001cac:	2233      	movs	r2, #51	@ 0x33
 8001cae:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <guideEnable+0x7c>)
 8001cb2:	22c1      	movs	r2, #193	@ 0xc1
 8001cb4:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <guideEnable+0x7c>)
 8001cb8:	2266      	movs	r2, #102	@ 0x66
 8001cba:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <guideEnable+0x80>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <guideEnable+0x7c>)
 8001cc2:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <guideEnable+0x80>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <guideEnable+0x7c>)
 8001cca:	6193      	str	r3, [r2, #24]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <guideEnable+0x7c>)
 8001cce:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <guideEnable+0x84>)
 8001cd0:	f7ff fc38 	bl	8001544 <ServoDataSend>

    // 粗电视引导  
    ImgSendTypedef_CU.FuncCode = SETTING_TRACK;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <guideEnable+0x88>)
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	719a      	strb	r2, [r3, #6]
    // ImgSendTypedef_CU.FuncSubCode = MANUAL_TRACK;  //TODO: 数据来源于上位机 待修改
    
    ImgSendTypedef_CU.FuncSubCode = AUTO_TRACK;  //TODO: 数据来源于上位机 待修改
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <guideEnable+0x88>)
 8001cdc:	2202      	movs	r2, #2
 8001cde:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_CU,&ImgSendDataTypedef_CU);
 8001ce0:	490b      	ldr	r1, [pc, #44]	@ (8001d10 <guideEnable+0x8c>)
 8001ce2:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <guideEnable+0x88>)
 8001ce4:	f7ff f98c 	bl	8001000 <Send2ImgModule>

    // 精电视引导
    ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <guideEnable+0x90>)
 8001cea:	2208      	movs	r2, #8
 8001cec:	719a      	strb	r2, [r3, #6]
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <guideEnable+0x90>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	71da      	strb	r2, [r3, #7]
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8001cf4:	4908      	ldr	r1, [pc, #32]	@ (8001d18 <guideEnable+0x94>)
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <guideEnable+0x90>)
 8001cf8:	f7ff f982 	bl	8001000 <Send2ImgModule>
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	24000154 	.word	0x24000154
 8001d04:	24000458 	.word	0x24000458
 8001d08:	2400011c 	.word	0x2400011c
 8001d0c:	24000018 	.word	0x24000018
 8001d10:	24000064 	.word	0x24000064
 8001d14:	2400008c 	.word	0x2400008c
 8001d18:	240000d8 	.word	0x240000d8

08001d1c <catchEnable>:
    ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
    Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
}

void catchEnable()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    // ImgSendTypedef_JING.FuncCode = SETTING_TRACK;
    // ImgSendTypedef_JING.FuncSubCode = AUTO_TRACK;
    // Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);

    // 电机使能
    ServoDataSendTypedef.TurnMode = TURNTABLE_GUIDE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <catchEnable+0x6c>)
 8001d22:	22b2      	movs	r2, #178	@ 0xb2
 8001d24:	701a      	strb	r2, [r3, #0]
    ServoDataSendTypedef.MotorEnable = MotorPowerOn;
 8001d26:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <catchEnable+0x6c>)
 8001d28:	2266      	movs	r2, #102	@ 0x66
 8001d2a:	705a      	strb	r2, [r3, #1]
    ServoDataSendTypedef.Turntable_Yaw = 0;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <catchEnable+0x6c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	805a      	strh	r2, [r3, #2]
    ServoDataSendTypedef.Turntable_Pitch = 0;
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <catchEnable+0x6c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	809a      	strh	r2, [r3, #4]
    ServoDataSendTypedef.TrackingDataValid = DATA_VALID;
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <catchEnable+0x6c>)
 8001d3a:	2233      	movs	r2, #51	@ 0x33
 8001d3c:	719a      	strb	r2, [r3, #6]
    ServoDataSendTypedef.TargetYaw.f = ServoRevTypedef.ServoYawPos.f;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <catchEnable+0x70>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <catchEnable+0x6c>)
 8001d44:	6093      	str	r3, [r2, #8]
    ServoDataSendTypedef.TargetPitch.f = ServoRevTypedef.ServoPitchPos.f;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <catchEnable+0x70>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <catchEnable+0x6c>)
 8001d4c:	60d3      	str	r3, [r2, #12]
    ServoDataSendTypedef.FSMMode = FSM_DIRECTION;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <catchEnable+0x6c>)
 8001d50:	22c1      	movs	r2, #193	@ 0xc1
 8001d52:	745a      	strb	r2, [r3, #17]
    ServoDataSendTypedef.ControlEnableJing = ENABLE_JING;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <catchEnable+0x6c>)
 8001d56:	2266      	movs	r2, #102	@ 0x66
 8001d58:	749a      	strb	r2, [r3, #18]
    ServoDataSendTypedef.TargetFSMYaw.f = ServoRevTypedef.FSMXPos.f;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <catchEnable+0x70>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <catchEnable+0x6c>)
 8001d60:	6153      	str	r3, [r2, #20]
    ServoDataSendTypedef.TargetFSMPitch.f = ServoRevTypedef.FSMYPos.f;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <catchEnable+0x70>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <catchEnable+0x6c>)
 8001d68:	6193      	str	r3, [r2, #24]
    ServoDataSendTypedef.ZeroCorrectionFSMX.f = 0.f;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <catchEnable+0x6c>)
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
    ServoDataSendTypedef.ZeroCorrectionFSMY.f = 0.f;
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <catchEnable+0x6c>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
    ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 8001d7a:	4903      	ldr	r1, [pc, #12]	@ (8001d88 <catchEnable+0x6c>)
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <catchEnable+0x74>)
 8001d7e:	f7ff fbe1 	bl	8001544 <ServoDataSend>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24000154 	.word	0x24000154
 8001d8c:	24000458 	.word	0x24000458
 8001d90:	2400011c 	.word	0x2400011c

08001d94 <udpecho_thread>:
    .cuOffsetState = 0,
    .jingOffsetState = 0
};

static void udpecho_thread(void *arg)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]
//    socklen_t addrlen;


    while (1)
    {
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 8001d9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001da0:	f013 faec 	bl	801537c <pvPortMalloc>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a81      	ldr	r2, [pc, #516]	@ (8001fac <udpecho_thread+0x218>)
 8001da8:	6013      	str	r3, [r2, #0]
//        senddata = (char *)pvPortMalloc(128);
        if (recv_data == NULL)
 8001daa:	4b80      	ldr	r3, [pc, #512]	@ (8001fac <udpecho_thread+0x218>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 83b5 	beq.w	800251e <udpecho_thread+0x78a>
        {
            // uart_printf("No memory\n");
            goto __exit;
        }

        sock = socket(AF_INET, SOCK_DGRAM, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2102      	movs	r1, #2
 8001db8:	2002      	movs	r0, #2
 8001dba:	f016 fb8d 	bl	80184d8 <lwip_socket>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a7b      	ldr	r2, [pc, #492]	@ (8001fb0 <udpecho_thread+0x21c>)
 8001dc2:	6013      	str	r3, [r2, #0]
        if (sock < 0)
 8001dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb0 <udpecho_thread+0x21c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f2c0 83aa 	blt.w	8002522 <udpecho_thread+0x78e>
        {
        	// uart_printf("Socket error\n");
            goto __exit;
        }
        addrlen = sizeof(struct sockaddr);
 8001dce:	4b79      	ldr	r3, [pc, #484]	@ (8001fb4 <udpecho_thread+0x220>)
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	601a      	str	r2, [r3, #0]
        udp_addr.sin_family = AF_INET;
 8001dd4:	4b78      	ldr	r3, [pc, #480]	@ (8001fb8 <udpecho_thread+0x224>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	705a      	strb	r2, [r3, #1]
        udp_addr.sin_addr.s_addr = INADDR_ANY;
 8001dda:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <udpecho_thread+0x224>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
        udp_addr.sin_port = htons(PORT);
 8001de0:	f241 3089 	movw	r0, #5001	@ 0x1389
 8001de4:	f016 ff1c 	bl	8018c20 <lwip_htons>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b72      	ldr	r3, [pc, #456]	@ (8001fb8 <udpecho_thread+0x224>)
 8001dee:	805a      	strh	r2, [r3, #2]
        memset(&(udp_addr.sin_zero), 0, sizeof(udp_addr.sin_zero));
 8001df0:	2208      	movs	r2, #8
 8001df2:	2100      	movs	r1, #0
 8001df4:	4871      	ldr	r0, [pc, #452]	@ (8001fbc <udpecho_thread+0x228>)
 8001df6:	f023 fc29 	bl	802564c <memset>

        if (bind(sock, (struct sockaddr *)&udp_addr, sizeof(struct sockaddr)) == -1)
 8001dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb0 <udpecho_thread+0x21c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2210      	movs	r2, #16
 8001e00:	496d      	ldr	r1, [pc, #436]	@ (8001fb8 <udpecho_thread+0x224>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f015 fe7e 	bl	8017b04 <lwip_bind>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	f000 838a 	beq.w	8002526 <udpecho_thread+0x792>
        }

        while (1)
        {
//        	test++;
             recv_data_len=recvfrom(sock,recv_data,
 8001e12:	4b67      	ldr	r3, [pc, #412]	@ (8001fb0 <udpecho_thread+0x21c>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	4b65      	ldr	r3, [pc, #404]	@ (8001fac <udpecho_thread+0x218>)
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <udpecho_thread+0x220>)
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	4b68      	ldr	r3, [pc, #416]	@ (8001fc0 <udpecho_thread+0x22c>)
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e28:	f016 f9b4 	bl	8018194 <lwip_recvfrom>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <udpecho_thread+0x230>)
 8001e30:	6013      	str	r3, [r2, #0]
             /*显示发送端的IP地址*/
            //  uart_printf("receive from %s\n",inet_ntoa(seraddr.sin_addr));

             /*显示发送端发来的字串*/
            //  uart_printf("recevce:%s\n",recv_data);
            for(int i = 0;i < recv_data_len;i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	e00b      	b.n	8001e50 <udpecho_thread+0xbc>
            {
                uart_printf("%02x ",recv_data[i]);
 8001e38:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <udpecho_thread+0x218>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4860      	ldr	r0, [pc, #384]	@ (8001fc8 <udpecho_thread+0x234>)
 8001e46:	f003 f861 	bl	8004f0c <uart_printf>
            for(int i = 0;i < recv_data_len;i++)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <udpecho_thread+0x230>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbee      	blt.n	8001e38 <udpecho_thread+0xa4>
            }       
            HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	485b      	ldr	r0, [pc, #364]	@ (8001fcc <udpecho_thread+0x238>)
 8001e5e:	f009 fd9e 	bl	800b99e <HAL_GPIO_TogglePin>
            //  uart_printf("recevce:%s,len:%d",mes,recv_data_len);

            if(recv_data[0] == 0x90 && recv_data[1] == 0x60 && recv_data[recv_data_len - 1] == 0xee)
 8001e62:	4b52      	ldr	r3, [pc, #328]	@ (8001fac <udpecho_thread+0x218>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b90      	cmp	r3, #144	@ 0x90
 8001e6a:	f040 8354 	bne.w	8002516 <udpecho_thread+0x782>
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <udpecho_thread+0x218>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b60      	cmp	r3, #96	@ 0x60
 8001e78:	f040 834d 	bne.w	8002516 <udpecho_thread+0x782>
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <udpecho_thread+0x218>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b50      	ldr	r3, [pc, #320]	@ (8001fc4 <udpecho_thread+0x230>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2bee      	cmp	r3, #238	@ 0xee
 8001e8c:	f040 8343 	bne.w	8002516 <udpecho_thread+0x782>
            {
                #if testcode
                // --------------------------------------------------
                if(CommandTypedef.state != recv_data[3])
 8001e90:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001e92:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8001e96:	4b45      	ldr	r3, [pc, #276]	@ (8001fac <udpecho_thread+0x218>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d002      	beq.n	8001ea8 <udpecho_thread+0x114>
                {
                    stateChange = 1;
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <udpecho_thread+0x240>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.go2Zero          = recv_data[3] & bit(0) ? 1 : 0;
 8001ea8:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <udpecho_thread+0x218>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3303      	adds	r3, #3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b46      	ldr	r3, [pc, #280]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001eb8:	701a      	strb	r2, [r3, #0]
                CommandTypedef.standbyEnable    = recv_data[3] & bit(1) ? 1 : 0;
 8001eba:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <udpecho_thread+0x218>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	105b      	asrs	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001ece:	705a      	strb	r2, [r3, #1]
                CommandTypedef.standbyDisable   = recv_data[3] & bit(2) ? 1 : 0;
 8001ed0:	4b36      	ldr	r3, [pc, #216]	@ (8001fac <udpecho_thread+0x218>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	109b      	asrs	r3, r3, #2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001ee4:	709a      	strb	r2, [r3, #2]
                CommandTypedef.guideEnable      = recv_data[3] & bit(3) ? 1 : 0;
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <udpecho_thread+0x218>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3303      	adds	r3, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	10db      	asrs	r3, r3, #3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b35      	ldr	r3, [pc, #212]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001efa:	711a      	strb	r2, [r3, #4]
                CommandTypedef.catchEnable      = recv_data[3] & bit(4) ? 1 : 0;
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <udpecho_thread+0x218>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3303      	adds	r3, #3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	111b      	asrs	r3, r3, #4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b30      	ldr	r3, [pc, #192]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f10:	715a      	strb	r2, [r3, #5]
                CommandTypedef.state = recv_data[3];
 8001f12:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <udpecho_thread+0x218>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3303      	adds	r3, #3
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                

                // uart_printf("gozeor:%d,standbyEnable:%d,standbyDisable:%d,guideEnable:%d,catchEnable:%d\n",CommandTypedef.go2Zero,CommandTypedef.standbyEnable,CommandTypedef.standbyDisable,CommandTypedef.guideEnable,CommandTypedef.catchEnable);

                if(CommandTypedef.rangefinderOpen == 0 && recv_data[4] == 1)
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f22:	7a9b      	ldrb	r3, [r3, #10]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <udpecho_thread+0x1a6>
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <udpecho_thread+0x218>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <udpecho_thread+0x1a6>
                {
                    rangefander_flag = 1;
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <udpecho_thread+0x244>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.rangefinderOpen == 1 && recv_data[4] == 0)
 8001f3a:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f3c:	7a9b      	ldrb	r3, [r3, #10]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <udpecho_thread+0x1c0>
 8001f42:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <udpecho_thread+0x218>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3304      	adds	r3, #4
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <udpecho_thread+0x1c0>
                {
                    rangefinder_close = 1;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <udpecho_thread+0x248>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.laserAdjust != ((recv_data[6] << 8) | recv_data[5]))
 8001f54:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <udpecho_thread+0x218>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3306      	adds	r3, #6
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <udpecho_thread+0x218>)
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	3205      	adds	r2, #5
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	4299      	cmp	r1, r3
 8001f72:	d002      	beq.n	8001f7a <udpecho_thread+0x1e6>
                {
                    laserChange = 1;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <udpecho_thread+0x24c>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.rangefinderOpen  = recv_data[4];
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <udpecho_thread+0x218>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001f84:	729a      	strb	r2, [r3, #10]
                // 数据是低位在前高为在后
                CommandTypedef.laserAdjust = (recv_data[6] << 8) | recv_data[5];
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <udpecho_thread+0x218>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <udpecho_thread+0x218>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3305      	adds	r3, #5
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <udpecho_thread+0x23c>)
 8001fa2:	819a      	strh	r2, [r3, #12]
                // uart_printf("laserAdjust:%d\n",CommandTypedef.laserAdjust);
                for(int i = 0;i < 4;i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	e04e      	b.n	8002048 <udpecho_thread+0x2b4>
 8001faa:	bf00      	nop
 8001fac:	240004d0 	.word	0x240004d0
 8001fb0:	240001dc 	.word	0x240001dc
 8001fb4:	24000508 	.word	0x24000508
 8001fb8:	240004d4 	.word	0x240004d4
 8001fbc:	240004dc 	.word	0x240004dc
 8001fc0:	240004e4 	.word	0x240004e4
 8001fc4:	24000504 	.word	0x24000504
 8001fc8:	080292e8 	.word	0x080292e8
 8001fcc:	58021800 	.word	0x58021800
 8001fd0:	24000184 	.word	0x24000184
 8001fd4:	240004b7 	.word	0x240004b7
 8001fd8:	240004c0 	.word	0x240004c0
 8001fdc:	240004c1 	.word	0x240004c1
 8001fe0:	240004c8 	.word	0x240004c8
                {
                    angle[0].u8t[i] = recv_data[7 + i];
 8001fe4:	4b56      	ldr	r3, [pc, #344]	@ (8002140 <udpecho_thread+0x3ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	3207      	adds	r2, #7
 8001fec:	4413      	add	r3, r2
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	4a54      	ldr	r2, [pc, #336]	@ (8002144 <udpecho_thread+0x3b0>)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
                    angle[1].u8t[i] = recv_data[11 + i];
 8001ffa:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <udpecho_thread+0x3ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	320b      	adds	r2, #11
 8002002:	4413      	add	r3, r2
 8002004:	7819      	ldrb	r1, [r3, #0]
 8002006:	4a4f      	ldr	r2, [pc, #316]	@ (8002144 <udpecho_thread+0x3b0>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	460a      	mov	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
                    angle[2].u8t[i] = recv_data[15 + i];
 8002012:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <udpecho_thread+0x3ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	320f      	adds	r2, #15
 800201a:	4413      	add	r3, r2
 800201c:	7819      	ldrb	r1, [r3, #0]
 800201e:	4a49      	ldr	r2, [pc, #292]	@ (8002144 <udpecho_thread+0x3b0>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4413      	add	r3, r2
 8002024:	3308      	adds	r3, #8
 8002026:	460a      	mov	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
                    angle[3].u8t[i] = recv_data[19 + i];
 800202a:	4b45      	ldr	r3, [pc, #276]	@ (8002140 <udpecho_thread+0x3ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	3213      	adds	r2, #19
 8002032:	4413      	add	r3, r2
 8002034:	7819      	ldrb	r1, [r3, #0]
 8002036:	4a43      	ldr	r2, [pc, #268]	@ (8002144 <udpecho_thread+0x3b0>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4413      	add	r3, r2
 800203c:	330c      	adds	r3, #12
 800203e:	460a      	mov	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
                for(int i = 0;i < 4;i++)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3301      	adds	r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2b03      	cmp	r3, #3
 800204c:	ddca      	ble.n	8001fe4 <udpecho_thread+0x250>
                }
                if((CommandTypedef.turnYaw.f != angle[0].f) || (CommandTypedef.turnPitch.f != angle[1].f) || (CommandTypedef.FSM_Yaw.f != angle[2].f) || (CommandTypedef.FSM_Pitch.f != angle[3].f))
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <udpecho_thread+0x3b4>)
 8002050:	ed93 7a04 	vldr	s14, [r3, #16]
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <udpecho_thread+0x3b0>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eeb4 7a67 	vcmp.f32	s14, s15
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	d120      	bne.n	80020a6 <udpecho_thread+0x312>
 8002064:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <udpecho_thread+0x3b4>)
 8002066:	ed93 7a05 	vldr	s14, [r3, #20]
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <udpecho_thread+0x3b0>)
 800206c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002070:	eeb4 7a67 	vcmp.f32	s14, s15
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	d115      	bne.n	80020a6 <udpecho_thread+0x312>
 800207a:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <udpecho_thread+0x3b4>)
 800207c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <udpecho_thread+0x3b0>)
 8002082:	edd3 7a02 	vldr	s15, [r3, #8]
 8002086:	eeb4 7a67 	vcmp.f32	s14, s15
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	d10a      	bne.n	80020a6 <udpecho_thread+0x312>
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <udpecho_thread+0x3b4>)
 8002092:	ed93 7a07 	vldr	s14, [r3, #28]
 8002096:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <udpecho_thread+0x3b0>)
 8002098:	edd3 7a03 	vldr	s15, [r3, #12]
 800209c:	eeb4 7a67 	vcmp.f32	s14, s15
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d002      	beq.n	80020ac <udpecho_thread+0x318>
                {
                    servo_flag = 1;
 80020a6:	4b29      	ldr	r3, [pc, #164]	@ (800214c <udpecho_thread+0x3b8>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
                }

                CommandTypedef.turnYaw.f        = angle[0].f;
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <udpecho_thread+0x3b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a25      	ldr	r2, [pc, #148]	@ (8002148 <udpecho_thread+0x3b4>)
 80020b2:	6113      	str	r3, [r2, #16]
                CommandTypedef.turnPitch.f      = angle[1].f;
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <udpecho_thread+0x3b0>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a23      	ldr	r2, [pc, #140]	@ (8002148 <udpecho_thread+0x3b4>)
 80020ba:	6153      	str	r3, [r2, #20]
                CommandTypedef.FSM_Yaw.f        = angle[2].f;
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <udpecho_thread+0x3b0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a21      	ldr	r2, [pc, #132]	@ (8002148 <udpecho_thread+0x3b4>)
 80020c2:	6193      	str	r3, [r2, #24]
                CommandTypedef.FSM_Pitch.f      = angle[3].f;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <udpecho_thread+0x3b0>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <udpecho_thread+0x3b4>)
 80020ca:	61d3      	str	r3, [r2, #28]
                static uint32_t temp[2];
                static uint32_t exp_temp[2];
                static short dg_temp[2];
                static uint32_t offset[2];

                temp[0] = (recv_data[26]<<24) | (recv_data[25]<<16) | (recv_data[24]<<8) | recv_data[23];
 80020cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <udpecho_thread+0x3ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	331a      	adds	r3, #26
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	061a      	lsls	r2, r3, #24
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <udpecho_thread+0x3ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3319      	adds	r3, #25
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	431a      	orrs	r2, r3
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <udpecho_thread+0x3ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3318      	adds	r3, #24
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	4313      	orrs	r3, r2
 80020ee:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <udpecho_thread+0x3ac>)
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	3217      	adds	r2, #23
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <udpecho_thread+0x3bc>)
 80020fc:	601a      	str	r2, [r3, #0]
                if(CommandTypedef.zoomAdjust != temp[0])
 80020fe:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <udpecho_thread+0x3b4>)
 8002100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <udpecho_thread+0x3bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d002      	beq.n	8002110 <udpecho_thread+0x37c>
                {
                    // uart_printf("zoomAdjust:%ld,temp:%ld\n",CommandTypedef.zoomAdjust,temp[0]);
                    zoom_flag = 1;
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <udpecho_thread+0x3c0>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.zoomAdjust = temp[0];
 8002110:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <udpecho_thread+0x3bc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <udpecho_thread+0x3b4>)
 8002116:	6253      	str	r3, [r2, #36]	@ 0x24
                CommandTypedef.clearerror = recv_data[27];
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <udpecho_thread+0x3ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	331b      	adds	r3, #27
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <udpecho_thread+0x3b4>)
 8002122:	71da      	strb	r2, [r3, #7]
                CommandTypedef.manualEnable = recv_data[28];
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <udpecho_thread+0x3ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	331c      	adds	r3, #28
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <udpecho_thread+0x3b4>)
 800212e:	719a      	strb	r2, [r3, #6]
                if(CommandTypedef.manualEnable == 1)
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <udpecho_thread+0x3b4>)
 8002132:	799b      	ldrb	r3, [r3, #6]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d111      	bne.n	800215c <udpecho_thread+0x3c8>
                {
                    manual_flag = 1;
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <udpecho_thread+0x3c4>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e014      	b.n	800216a <udpecho_thread+0x3d6>
 8002140:	240004d0 	.word	0x240004d0
 8002144:	2400050c 	.word	0x2400050c
 8002148:	24000184 	.word	0x24000184
 800214c:	240004c2 	.word	0x240004c2
 8002150:	2400054c 	.word	0x2400054c
 8002154:	240004c3 	.word	0x240004c3
 8002158:	240001d8 	.word	0x240001d8
                }else if(CommandTypedef.manualEnable == 2)
 800215c:	4b9a      	ldr	r3, [pc, #616]	@ (80023c8 <udpecho_thread+0x634>)
 800215e:	799b      	ldrb	r3, [r3, #6]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <udpecho_thread+0x3d6>
                {
                    manual_flag = 2;
 8002164:	4b99      	ldr	r3, [pc, #612]	@ (80023cc <udpecho_thread+0x638>)
 8002166:	2202      	movs	r2, #2
 8002168:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.clearerror == 1)
 800216a:	4b97      	ldr	r3, [pc, #604]	@ (80023c8 <udpecho_thread+0x634>)
 800216c:	79db      	ldrb	r3, [r3, #7]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <udpecho_thread+0x3e4>
                {
                    clearerror_flag = 1;
 8002172:	4b97      	ldr	r3, [pc, #604]	@ (80023d0 <udpecho_thread+0x63c>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.manual_center_x = (recv_data[30] << 8) | recv_data[29];
 8002178:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <udpecho_thread+0x640>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	331e      	adds	r3, #30
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b93      	ldr	r3, [pc, #588]	@ (80023d4 <udpecho_thread+0x640>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	331d      	adds	r3, #29
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b8c      	ldr	r3, [pc, #560]	@ (80023c8 <udpecho_thread+0x634>)
 8002196:	869a      	strh	r2, [r3, #52]	@ 0x34
                CommandTypedef.manual_center_y = (recv_data[32] << 8) | recv_data[31];
 8002198:	4b8e      	ldr	r3, [pc, #568]	@ (80023d4 <udpecho_thread+0x640>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3320      	adds	r3, #32
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b8b      	ldr	r3, [pc, #556]	@ (80023d4 <udpecho_thread+0x640>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	331f      	adds	r3, #31
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	4b84      	ldr	r3, [pc, #528]	@ (80023c8 <udpecho_thread+0x634>)
 80021b6:	86da      	strh	r2, [r3, #54]	@ 0x36
                CommandTypedef.manual_width = (recv_data[34] << 8) | recv_data[33];
 80021b8:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <udpecho_thread+0x640>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3322      	adds	r3, #34	@ 0x22
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	4b83      	ldr	r3, [pc, #524]	@ (80023d4 <udpecho_thread+0x640>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3321      	adds	r3, #33	@ 0x21
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b7c      	ldr	r3, [pc, #496]	@ (80023c8 <udpecho_thread+0x634>)
 80021d6:	871a      	strh	r2, [r3, #56]	@ 0x38
                CommandTypedef.manual_height = (recv_data[36] << 8) | recv_data[35];
 80021d8:	4b7e      	ldr	r3, [pc, #504]	@ (80023d4 <udpecho_thread+0x640>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3324      	adds	r3, #36	@ 0x24
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b21a      	sxth	r2, r3
 80021e4:	4b7b      	ldr	r3, [pc, #492]	@ (80023d4 <udpecho_thread+0x640>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3323      	adds	r3, #35	@ 0x23
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b74      	ldr	r3, [pc, #464]	@ (80023c8 <udpecho_thread+0x634>)
 80021f6:	875a      	strh	r2, [r3, #58]	@ 0x3a
                // uart_printf("manual_center_x:%d,manual_center_y:%d,manual_width:%d,manual_height:%d\n",CommandTypedef.manual_center_x,CommandTypedef.manual_center_y,CommandTypedef.manual_width,CommandTypedef.manual_height);
                CommandTypedef.manual_cj = recv_data[37];
 80021f8:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <udpecho_thread+0x640>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3325      	adds	r3, #37	@ 0x25
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b71      	ldr	r3, [pc, #452]	@ (80023c8 <udpecho_thread+0x634>)
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                if(CommandTypedef.setTurnState != recv_data[38])
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <udpecho_thread+0x634>)
 8002208:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <udpecho_thread+0x640>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3326      	adds	r3, #38	@ 0x26
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d002      	beq.n	800221e <udpecho_thread+0x48a>
                {
                    sifuFlag.turnStateFlag = 1;
 8002218:	4b6f      	ldr	r3, [pc, #444]	@ (80023d8 <udpecho_thread+0x644>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.setFSMState != recv_data[39])
 800221e:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <udpecho_thread+0x634>)
 8002220:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 8002224:	4b6b      	ldr	r3, [pc, #428]	@ (80023d4 <udpecho_thread+0x640>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3327      	adds	r3, #39	@ 0x27
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d002      	beq.n	8002236 <udpecho_thread+0x4a2>
                {
                    sifuFlag.FSMModeFlag = 1;
 8002230:	4b69      	ldr	r3, [pc, #420]	@ (80023d8 <udpecho_thread+0x644>)
 8002232:	2201      	movs	r2, #1
 8002234:	70da      	strb	r2, [r3, #3]
                }
                if(CommandTypedef.trackJingEnable != recv_data[40])
 8002236:	4b64      	ldr	r3, [pc, #400]	@ (80023c8 <udpecho_thread+0x634>)
 8002238:	7a5a      	ldrb	r2, [r3, #9]
 800223a:	4b66      	ldr	r3, [pc, #408]	@ (80023d4 <udpecho_thread+0x640>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3328      	adds	r3, #40	@ 0x28
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d002      	beq.n	800224c <udpecho_thread+0x4b8>
                {
                    sifuFlag.controlEnableJingFlag = 1;
 8002246:	4b64      	ldr	r3, [pc, #400]	@ (80023d8 <udpecho_thread+0x644>)
 8002248:	2201      	movs	r2, #1
 800224a:	711a      	strb	r2, [r3, #4]
                }
                if(ServoDataSendTypedef.MotorEnable != recv_data[41])
 800224c:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <udpecho_thread+0x648>)
 800224e:	785a      	ldrb	r2, [r3, #1]
 8002250:	4b60      	ldr	r3, [pc, #384]	@ (80023d4 <udpecho_thread+0x640>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3329      	adds	r3, #41	@ 0x29
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d002      	beq.n	8002262 <udpecho_thread+0x4ce>
                {
                    sifuFlag.motorEnableFlag = 1;
 800225c:	4b5e      	ldr	r3, [pc, #376]	@ (80023d8 <udpecho_thread+0x644>)
 800225e:	2201      	movs	r2, #1
 8002260:	705a      	strb	r2, [r3, #1]
                }
                CommandTypedef.setTurnState = recv_data[38];
 8002262:	4b5c      	ldr	r3, [pc, #368]	@ (80023d4 <udpecho_thread+0x640>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3326      	adds	r3, #38	@ 0x26
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b57      	ldr	r3, [pc, #348]	@ (80023c8 <udpecho_thread+0x634>)
 800226c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                CommandTypedef.setFSMState = recv_data[39];
 8002270:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <udpecho_thread+0x640>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3327      	adds	r3, #39	@ 0x27
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b53      	ldr	r3, [pc, #332]	@ (80023c8 <udpecho_thread+0x634>)
 800227a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
                CommandTypedef.trackJingEnable = recv_data[40];
 800227e:	4b55      	ldr	r3, [pc, #340]	@ (80023d4 <udpecho_thread+0x640>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3328      	adds	r3, #40	@ 0x28
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	4b50      	ldr	r3, [pc, #320]	@ (80023c8 <udpecho_thread+0x634>)
 8002288:	725a      	strb	r2, [r3, #9]
                CommandTypedef.motorEnable = recv_data[41];
 800228a:	4b52      	ldr	r3, [pc, #328]	@ (80023d4 <udpecho_thread+0x640>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3329      	adds	r3, #41	@ 0x29
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b4d      	ldr	r3, [pc, #308]	@ (80023c8 <udpecho_thread+0x634>)
 8002294:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
                ServoDataSendTypedef.TrackingDataValid = recv_data[42];
 8002298:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <udpecho_thread+0x640>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	332a      	adds	r3, #42	@ 0x2a
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <udpecho_thread+0x648>)
 80022a2:	719a      	strb	r2, [r3, #6]
                exp_temp[0] = recv_data[43] | (recv_data[44] << 8) | (recv_data[45] << 16) | (recv_data[46] << 24);
 80022a4:	4b4b      	ldr	r3, [pc, #300]	@ (80023d4 <udpecho_thread+0x640>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	332b      	adds	r3, #43	@ 0x2b
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b49      	ldr	r3, [pc, #292]	@ (80023d4 <udpecho_thread+0x640>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	332c      	adds	r3, #44	@ 0x2c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	431a      	orrs	r2, r3
 80022ba:	4b46      	ldr	r3, [pc, #280]	@ (80023d4 <udpecho_thread+0x640>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	332d      	adds	r3, #45	@ 0x2d
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <udpecho_thread+0x640>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	332e      	adds	r3, #46	@ 0x2e
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	4313      	orrs	r3, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b42      	ldr	r3, [pc, #264]	@ (80023e0 <udpecho_thread+0x64c>)
 80022d6:	601a      	str	r2, [r3, #0]
                exp_temp[1] = recv_data[47] | (recv_data[48] << 8) | (recv_data[49] << 16) | (recv_data[50] << 24);
 80022d8:	4b3e      	ldr	r3, [pc, #248]	@ (80023d4 <udpecho_thread+0x640>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	332f      	adds	r3, #47	@ 0x2f
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b3c      	ldr	r3, [pc, #240]	@ (80023d4 <udpecho_thread+0x640>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3330      	adds	r3, #48	@ 0x30
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	431a      	orrs	r2, r3
 80022ee:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <udpecho_thread+0x640>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3331      	adds	r3, #49	@ 0x31
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <udpecho_thread+0x640>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3332      	adds	r3, #50	@ 0x32
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	4313      	orrs	r3, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <udpecho_thread+0x64c>)
 800230a:	605a      	str	r2, [r3, #4]
                if(CommandTypedef.exposureCU != exp_temp[0])
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <udpecho_thread+0x634>)
 800230e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002310:	4b33      	ldr	r3, [pc, #204]	@ (80023e0 <udpecho_thread+0x64c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d002      	beq.n	800231e <udpecho_thread+0x58a>
                {
                    expose_flag = 1;
 8002318:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <udpecho_thread+0x650>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.exposureJING != exp_temp[1])
 800231e:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <udpecho_thread+0x634>)
 8002320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002322:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <udpecho_thread+0x64c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d002      	beq.n	8002330 <udpecho_thread+0x59c>
                {
                    exposeJing_flag = 1;
 800232a:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <udpecho_thread+0x654>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.exposureCU = exp_temp[0];
 8002330:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <udpecho_thread+0x64c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a24      	ldr	r2, [pc, #144]	@ (80023c8 <udpecho_thread+0x634>)
 8002336:	6293      	str	r3, [r2, #40]	@ 0x28
                CommandTypedef.exposureJING = exp_temp[1];
 8002338:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <udpecho_thread+0x64c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <udpecho_thread+0x634>)
 800233e:	62d3      	str	r3, [r2, #44]	@ 0x2c
                dg_temp[0] = (recv_data[51] << 8) | recv_data[52];
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <udpecho_thread+0x640>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3333      	adds	r3, #51	@ 0x33
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <udpecho_thread+0x640>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3334      	adds	r3, #52	@ 0x34
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b21b      	sxth	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b24      	ldr	r3, [pc, #144]	@ (80023ec <udpecho_thread+0x658>)
 800235c:	801a      	strh	r2, [r3, #0]
                dg_temp[1] = (recv_data[53] << 8) | recv_data[54];
 800235e:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <udpecho_thread+0x640>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3335      	adds	r3, #53	@ 0x35
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <udpecho_thread+0x640>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3336      	adds	r3, #54	@ 0x36
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b21b      	sxth	r3, r3
 8002374:	4313      	orrs	r3, r2
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <udpecho_thread+0x658>)
 800237a:	805a      	strh	r2, [r3, #2]
                if(CommandTypedef.dgPitch != dg_temp[0] || CommandTypedef.dgYaw != dg_temp[1])
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <udpecho_thread+0x634>)
 800237e:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	@ 0x4c
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <udpecho_thread+0x658>)
 8002384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <udpecho_thread+0x608>
 800238c:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <udpecho_thread+0x634>)
 800238e:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	@ 0x4e
 8002392:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <udpecho_thread+0x658>)
 8002394:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002398:	429a      	cmp	r2, r3
 800239a:	d00d      	beq.n	80023b8 <udpecho_thread+0x624>
                {
                    uart_printf("dgPitch:%d,dgYaw:%d\n",CommandTypedef.dgPitch,CommandTypedef.dgYaw);
 800239c:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <udpecho_thread+0x634>)
 800239e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <udpecho_thread+0x634>)
 80023a6:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 80023aa:	461a      	mov	r2, r3
 80023ac:	4810      	ldr	r0, [pc, #64]	@ (80023f0 <udpecho_thread+0x65c>)
 80023ae:	f002 fdad 	bl	8004f0c <uart_printf>
                    sifuFlag.dgFlag = 1;
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <udpecho_thread+0x644>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	715a      	strb	r2, [r3, #5]
                }
                CommandTypedef.dgPitch = (recv_data[52] << 8) | recv_data[51];
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <udpecho_thread+0x640>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3334      	adds	r3, #52	@ 0x34
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	e016      	b.n	80023f4 <udpecho_thread+0x660>
 80023c6:	bf00      	nop
 80023c8:	24000184 	.word	0x24000184
 80023cc:	240001d8 	.word	0x240001d8
 80023d0:	240004c5 	.word	0x240004c5
 80023d4:	240004d0 	.word	0x240004d0
 80023d8:	240004b8 	.word	0x240004b8
 80023dc:	24000154 	.word	0x24000154
 80023e0:	24000554 	.word	0x24000554
 80023e4:	240004be 	.word	0x240004be
 80023e8:	240004bf 	.word	0x240004bf
 80023ec:	2400055c 	.word	0x2400055c
 80023f0:	080292f0 	.word	0x080292f0
 80023f4:	4b56      	ldr	r3, [pc, #344]	@ (8002550 <udpecho_thread+0x7bc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3333      	adds	r3, #51	@ 0x33
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	b21a      	sxth	r2, r3
 8002402:	4b54      	ldr	r3, [pc, #336]	@ (8002554 <udpecho_thread+0x7c0>)
 8002404:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
                CommandTypedef.dgYaw = (recv_data[54] << 8) | recv_data[53];
 8002408:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <udpecho_thread+0x7bc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3336      	adds	r3, #54	@ 0x36
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <udpecho_thread+0x7bc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3335      	adds	r3, #53	@ 0x35
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b4c      	ldr	r3, [pc, #304]	@ (8002554 <udpecho_thread+0x7c0>)
 8002424:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
                
                if(CommandTypedef.imgEnableCu != recv_data[55])
 8002428:	4b4a      	ldr	r3, [pc, #296]	@ (8002554 <udpecho_thread+0x7c0>)
 800242a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800242e:	4b48      	ldr	r3, [pc, #288]	@ (8002550 <udpecho_thread+0x7bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3337      	adds	r3, #55	@ 0x37
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d002      	beq.n	8002440 <udpecho_thread+0x6ac>
                {
                    imgFlag[0] = 1;
 800243a:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <udpecho_thread+0x7c4>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
                }
                if(CommandTypedef.imgEnableJing != recv_data[56])
 8002440:	4b44      	ldr	r3, [pc, #272]	@ (8002554 <udpecho_thread+0x7c0>)
 8002442:	f893 2051 	ldrb.w	r2, [r3, #81]	@ 0x51
 8002446:	4b42      	ldr	r3, [pc, #264]	@ (8002550 <udpecho_thread+0x7bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3338      	adds	r3, #56	@ 0x38
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d002      	beq.n	8002458 <udpecho_thread+0x6c4>
                {
                    imgFlag[1] = 1;
 8002452:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <udpecho_thread+0x7c4>)
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
                }
                CommandTypedef.imgEnableCu = recv_data[55];
 8002458:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <udpecho_thread+0x7bc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3337      	adds	r3, #55	@ 0x37
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <udpecho_thread+0x7c0>)
 8002462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                CommandTypedef.imgEnableJing = recv_data[56];
 8002466:	4b3a      	ldr	r3, [pc, #232]	@ (8002550 <udpecho_thread+0x7bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3338      	adds	r3, #56	@ 0x38
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <udpecho_thread+0x7c0>)
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                offset[0] = (recv_data[60] << 24) | (recv_data[59] << 16) | (recv_data[58] << 8) | recv_data[57];
 8002474:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <udpecho_thread+0x7bc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	333c      	adds	r3, #60	@ 0x3c
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	061a      	lsls	r2, r3, #24
 800247e:	4b34      	ldr	r3, [pc, #208]	@ (8002550 <udpecho_thread+0x7bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	333b      	adds	r3, #59	@ 0x3b
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431a      	orrs	r2, r3
 800248a:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <udpecho_thread+0x7bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	333a      	adds	r3, #58	@ 0x3a
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	4a2e      	ldr	r2, [pc, #184]	@ (8002550 <udpecho_thread+0x7bc>)
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	3239      	adds	r2, #57	@ 0x39
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b2e      	ldr	r3, [pc, #184]	@ (800255c <udpecho_thread+0x7c8>)
 80024a4:	601a      	str	r2, [r3, #0]
                offset[1] = (recv_data[64] << 24) | (recv_data[63] << 16) | (recv_data[62] << 8) | recv_data[61];
 80024a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <udpecho_thread+0x7bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3340      	adds	r3, #64	@ 0x40
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	061a      	lsls	r2, r3, #24
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <udpecho_thread+0x7bc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	333f      	adds	r3, #63	@ 0x3f
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <udpecho_thread+0x7bc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	333e      	adds	r3, #62	@ 0x3e
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4313      	orrs	r3, r2
 80024c8:	4a21      	ldr	r2, [pc, #132]	@ (8002550 <udpecho_thread+0x7bc>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	323d      	adds	r2, #61	@ 0x3d
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b21      	ldr	r3, [pc, #132]	@ (800255c <udpecho_thread+0x7c8>)
 80024d6:	605a      	str	r2, [r3, #4]
                if(CommandTypedef.x_offset.u32t != offset[0] || CommandTypedef.y_offset.u32t != offset[1])
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <udpecho_thread+0x7c0>)
 80024da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <udpecho_thread+0x7c8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d105      	bne.n	80024f0 <udpecho_thread+0x75c>
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <udpecho_thread+0x7c0>)
 80024e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <udpecho_thread+0x7c8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d002      	beq.n	80024f6 <udpecho_thread+0x762>
                {
                    offset_flag = 1;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <udpecho_thread+0x7cc>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
                }
                CommandTypedef.x_offset.u32t = offset[0];
 80024f6:	4b19      	ldr	r3, [pc, #100]	@ (800255c <udpecho_thread+0x7c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <udpecho_thread+0x7c0>)
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
                CommandTypedef.y_offset.u32t = offset[1];
 80024fe:	4b17      	ldr	r3, [pc, #92]	@ (800255c <udpecho_thread+0x7c8>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <udpecho_thread+0x7c0>)
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
                uart_printf("x_offset:%ld,y_offset:%ld\n",CommandTypedef.x_offset.u32t,CommandTypedef.y_offset.u32t);
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <udpecho_thread+0x7c0>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <udpecho_thread+0x7c0>)
 800250c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800250e:	4619      	mov	r1, r3
 8002510:	4814      	ldr	r0, [pc, #80]	@ (8002564 <udpecho_thread+0x7d0>)
 8002512:	f002 fcfb 	bl	8004f0c <uart_printf>
//           }
//           sendto(sock,recv_data,
//               recv_data_len,0,
//               (struct sockaddr*)&seraddr,
//               addrlen);
             osDelay(10);
 8002516:	200a      	movs	r0, #10
 8002518:	f010 f90c 	bl	8012734 <osDelay>
             recv_data_len=recvfrom(sock,recv_data,
 800251c:	e479      	b.n	8001e12 <udpecho_thread+0x7e>
            goto __exit;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <udpecho_thread+0x794>
            goto __exit;
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <udpecho_thread+0x794>
            goto __exit;
 8002526:	bf00      	nop
        }

__exit:
        if (sock >= 0) closesocket(sock);
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <udpecho_thread+0x7d4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db04      	blt.n	800253a <udpecho_thread+0x7a6>
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <udpecho_thread+0x7d4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f015 fb53 	bl	8017be0 <lwip_close>
        if (recv_data) free(recv_data);
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <udpecho_thread+0x7bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f43f ac2c 	beq.w	8001d9c <udpecho_thread+0x8>
 8002544:	4b02      	ldr	r3, [pc, #8]	@ (8002550 <udpecho_thread+0x7bc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f021 ff1f 	bl	802438c <free>
        recv_data = (char *)pvPortMalloc(RECV_DATA);
 800254e:	e425      	b.n	8001d9c <udpecho_thread+0x8>
 8002550:	240004d0 	.word	0x240004d0
 8002554:	24000184 	.word	0x24000184
 8002558:	240004cc 	.word	0x240004cc
 800255c:	24000560 	.word	0x24000560
 8002560:	240004c7 	.word	0x240004c7
 8002564:	08029308 	.word	0x08029308
 8002568:	240001dc 	.word	0x240001dc

0800256c <WriteEthTask>:
}

// char data[256];

static void WriteEthTask(void *thread_param)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
    //         senddata[i] = i;
    //  }
     while(1)
     {
        //  senddata = (char *)pvPortMalloc(128);
        sockw = socket(AF_INET, SOCK_DGRAM, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2102      	movs	r1, #2
 8002578:	2002      	movs	r0, #2
 800257a:	f015 ffad 	bl	80184d8 <lwip_socket>
 800257e:	4603      	mov	r3, r0
 8002580:	4a95      	ldr	r2, [pc, #596]	@ (80027d8 <WriteEthTask+0x26c>)
 8002582:	6013      	str	r3, [r2, #0]
        // {
        //     // uart_printf("No memory\n");
        //     goto __exit;
        // }
        
        addrlen = sizeof(struct sockaddr);
 8002584:	4b95      	ldr	r3, [pc, #596]	@ (80027dc <WriteEthTask+0x270>)
 8002586:	2210      	movs	r2, #16
 8002588:	601a      	str	r2, [r3, #0]
        sendaddr.sin_family = AF_INET;
 800258a:	4b95      	ldr	r3, [pc, #596]	@ (80027e0 <WriteEthTask+0x274>)
 800258c:	2202      	movs	r2, #2
 800258e:	705a      	strb	r2, [r3, #1]
        sendaddr.sin_addr.s_addr = inet_addr(IP_ADDR);
 8002590:	4894      	ldr	r0, [pc, #592]	@ (80027e4 <WriteEthTask+0x278>)
 8002592:	f020 fcbe 	bl	8022f12 <ipaddr_addr>
 8002596:	4603      	mov	r3, r0
 8002598:	4a91      	ldr	r2, [pc, #580]	@ (80027e0 <WriteEthTask+0x274>)
 800259a:	6053      	str	r3, [r2, #4]
        sendaddr.sin_port = htons(10802);
 800259c:	f642 2032 	movw	r0, #10802	@ 0x2a32
 80025a0:	f016 fb3e 	bl	8018c20 <lwip_htons>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b8d      	ldr	r3, [pc, #564]	@ (80027e0 <WriteEthTask+0x274>)
 80025aa:	805a      	strh	r2, [r3, #2]
//        if (bind(sock, (struct sockaddr *)&sendaddr, sizeof(struct sockaddr)) == -1)
//        {
//            // uart_printf("Unable to bind\n");
//            goto __exit;
//        }
        memset(&(sendaddr.sin_zero), 0, sizeof(sendaddr.sin_zero));
 80025ac:	2208      	movs	r2, #8
 80025ae:	2100      	movs	r1, #0
 80025b0:	488d      	ldr	r0, [pc, #564]	@ (80027e8 <WriteEthTask+0x27c>)
 80025b2:	f023 f84b 	bl	802564c <memset>
        while(1)
        {
            senddata[0] = 0x90;
 80025b6:	4b8d      	ldr	r3, [pc, #564]	@ (80027ec <WriteEthTask+0x280>)
 80025b8:	2290      	movs	r2, #144	@ 0x90
 80025ba:	701a      	strb	r2, [r3, #0]
            senddata[1] = 0x60;
 80025bc:	4b8b      	ldr	r3, [pc, #556]	@ (80027ec <WriteEthTask+0x280>)
 80025be:	2260      	movs	r2, #96	@ 0x60
 80025c0:	705a      	strb	r2, [r3, #1]
            pcSend.XoffsetCu.f = ImgRecvDataTypedef_CU.Offset_X;
 80025c2:	4b8b      	ldr	r3, [pc, #556]	@ (80027f0 <WriteEthTask+0x284>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4a8b      	ldr	r2, [pc, #556]	@ (80027f4 <WriteEthTask+0x288>)
 80025c8:	6013      	str	r3, [r2, #0]
            pcSend.YoffsetCu.f = ImgRecvDataTypedef_CU.Offset_Y;
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <WriteEthTask+0x284>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4a89      	ldr	r2, [pc, #548]	@ (80027f4 <WriteEthTask+0x288>)
 80025d0:	6053      	str	r3, [r2, #4]
            pcSend.XoffsetJing.f = ImgRecvDataTypedef_JING.Offset_X;
 80025d2:	4b89      	ldr	r3, [pc, #548]	@ (80027f8 <WriteEthTask+0x28c>)
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4a87      	ldr	r2, [pc, #540]	@ (80027f4 <WriteEthTask+0x288>)
 80025d8:	6093      	str	r3, [r2, #8]
            pcSend.YoffsetJing.f = ImgRecvDataTypedef_JING.Offset_Y;
 80025da:	4b87      	ldr	r3, [pc, #540]	@ (80027f8 <WriteEthTask+0x28c>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4a85      	ldr	r2, [pc, #532]	@ (80027f4 <WriteEthTask+0x288>)
 80025e0:	60d3      	str	r3, [r2, #12]
            pcSend.rangefinder.f = RangeFinderRevData.Distance;
 80025e2:	4b86      	ldr	r3, [pc, #536]	@ (80027fc <WriteEthTask+0x290>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a83      	ldr	r2, [pc, #524]	@ (80027f4 <WriteEthTask+0x288>)
 80025e8:	6113      	str	r3, [r2, #16]
            pcSend.ServoYaw.f = ServoRevTypedef.ServoYawPos.f;
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <WriteEthTask+0x294>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a81      	ldr	r2, [pc, #516]	@ (80027f4 <WriteEthTask+0x288>)
 80025f0:	6153      	str	r3, [r2, #20]
            // pcSend.ServoYaw.f += 0.01;
            pcSend.ServoPitch.f = ServoRevTypedef.ServoPitchPos.f;
 80025f2:	4b83      	ldr	r3, [pc, #524]	@ (8002800 <WriteEthTask+0x294>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a7f      	ldr	r2, [pc, #508]	@ (80027f4 <WriteEthTask+0x288>)
 80025f8:	6193      	str	r3, [r2, #24]
            // pcSend.state = state;
            // pcSend.cuEnable = 0;
            // pcSend.jingEnable = 0;
            for(int i = 0;i < 4;i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e040      	b.n	8002682 <WriteEthTask+0x116>
            {
                senddata[2+i] = pcSend.XoffsetCu.u8t[i];
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3302      	adds	r3, #2
 8002604:	497b      	ldr	r1, [pc, #492]	@ (80027f4 <WriteEthTask+0x288>)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	440a      	add	r2, r1
 800260a:	7811      	ldrb	r1, [r2, #0]
 800260c:	4a77      	ldr	r2, [pc, #476]	@ (80027ec <WriteEthTask+0x280>)
 800260e:	54d1      	strb	r1, [r2, r3]
                senddata[6+i] = pcSend.YoffsetCu.u8t[i];
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3306      	adds	r3, #6
 8002614:	4977      	ldr	r1, [pc, #476]	@ (80027f4 <WriteEthTask+0x288>)
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	440a      	add	r2, r1
 800261a:	3204      	adds	r2, #4
 800261c:	7811      	ldrb	r1, [r2, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	@ (80027ec <WriteEthTask+0x280>)
 8002620:	54d1      	strb	r1, [r2, r3]
                senddata[10+i] = pcSend.XoffsetJing.u8t[i];
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	330a      	adds	r3, #10
 8002626:	4973      	ldr	r1, [pc, #460]	@ (80027f4 <WriteEthTask+0x288>)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	440a      	add	r2, r1
 800262c:	3208      	adds	r2, #8
 800262e:	7811      	ldrb	r1, [r2, #0]
 8002630:	4a6e      	ldr	r2, [pc, #440]	@ (80027ec <WriteEthTask+0x280>)
 8002632:	54d1      	strb	r1, [r2, r3]
                senddata[14+i] = pcSend.YoffsetJing.u8t[i];
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	330e      	adds	r3, #14
 8002638:	496e      	ldr	r1, [pc, #440]	@ (80027f4 <WriteEthTask+0x288>)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	440a      	add	r2, r1
 800263e:	320c      	adds	r2, #12
 8002640:	7811      	ldrb	r1, [r2, #0]
 8002642:	4a6a      	ldr	r2, [pc, #424]	@ (80027ec <WriteEthTask+0x280>)
 8002644:	54d1      	strb	r1, [r2, r3]
                senddata[18+i] = pcSend.rangefinder.u8t[i];
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3312      	adds	r3, #18
 800264a:	496a      	ldr	r1, [pc, #424]	@ (80027f4 <WriteEthTask+0x288>)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	440a      	add	r2, r1
 8002650:	3210      	adds	r2, #16
 8002652:	7811      	ldrb	r1, [r2, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	@ (80027ec <WriteEthTask+0x280>)
 8002656:	54d1      	strb	r1, [r2, r3]
                senddata[22+i] = pcSend.ServoYaw.u8t[i];
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3316      	adds	r3, #22
 800265c:	4965      	ldr	r1, [pc, #404]	@ (80027f4 <WriteEthTask+0x288>)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	440a      	add	r2, r1
 8002662:	3214      	adds	r2, #20
 8002664:	7811      	ldrb	r1, [r2, #0]
 8002666:	4a61      	ldr	r2, [pc, #388]	@ (80027ec <WriteEthTask+0x280>)
 8002668:	54d1      	strb	r1, [r2, r3]
                senddata[26+i] = pcSend.ServoPitch.u8t[i];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	331a      	adds	r3, #26
 800266e:	4961      	ldr	r1, [pc, #388]	@ (80027f4 <WriteEthTask+0x288>)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	440a      	add	r2, r1
 8002674:	3218      	adds	r2, #24
 8002676:	7811      	ldrb	r1, [r2, #0]
 8002678:	4a5c      	ldr	r2, [pc, #368]	@ (80027ec <WriteEthTask+0x280>)
 800267a:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b03      	cmp	r3, #3
 8002686:	ddbb      	ble.n	8002600 <WriteEthTask+0x94>
            }
            // senddata[30] = pcSend.state;
            switch(state){
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <WriteEthTask+0x298>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	2b05      	cmp	r3, #5
 8002690:	d822      	bhi.n	80026d8 <WriteEthTask+0x16c>
 8002692:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <WriteEthTask+0x12c>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026c1 	.word	0x080026c1
 80026a0:	080026c9 	.word	0x080026c9
 80026a4:	080026b1 	.word	0x080026b1
 80026a8:	080026d9 	.word	0x080026d9
 80026ac:	080026b9 	.word	0x080026b9
                case STATE_GUIDE:
                    senddata[30] = bit(3);
 80026b0:	4b4e      	ldr	r3, [pc, #312]	@ (80027ec <WriteEthTask+0x280>)
 80026b2:	2208      	movs	r2, #8
 80026b4:	779a      	strb	r2, [r3, #30]
                    break;
 80026b6:	e00f      	b.n	80026d8 <WriteEthTask+0x16c>
                case STATE_CATCH:
                    senddata[30] = bit(4);
 80026b8:	4b4c      	ldr	r3, [pc, #304]	@ (80027ec <WriteEthTask+0x280>)
 80026ba:	2210      	movs	r2, #16
 80026bc:	779a      	strb	r2, [r3, #30]
                    break;
 80026be:	e00b      	b.n	80026d8 <WriteEthTask+0x16c>
                case STATE_STANDBY:
                    senddata[30] = bit(1);
 80026c0:	4b4a      	ldr	r3, [pc, #296]	@ (80027ec <WriteEthTask+0x280>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	779a      	strb	r2, [r3, #30]
                    break;
 80026c6:	e007      	b.n	80026d8 <WriteEthTask+0x16c>
                case STATE_STANDBYDISABLE:
                    senddata[30] = bit(2);
 80026c8:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <WriteEthTask+0x280>)
 80026ca:	2204      	movs	r2, #4
 80026cc:	779a      	strb	r2, [r3, #30]
                    break;
 80026ce:	e003      	b.n	80026d8 <WriteEthTask+0x16c>
                case STATE_ZERO:
                    senddata[30] = bit(0);
 80026d0:	4b46      	ldr	r3, [pc, #280]	@ (80027ec <WriteEthTask+0x280>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	779a      	strb	r2, [r3, #30]
                    break;
 80026d6:	bf00      	nop
            }
            senddata[31] = pcSend.cuEnable; 
 80026d8:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <WriteEthTask+0x288>)
 80026da:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80026de:	4b43      	ldr	r3, [pc, #268]	@ (80027ec <WriteEthTask+0x280>)
 80026e0:	77da      	strb	r2, [r3, #31]
            senddata[32] = pcSend.jingEnable;
 80026e2:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <WriteEthTask+0x288>)
 80026e4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80026e8:	4b40      	ldr	r3, [pc, #256]	@ (80027ec <WriteEthTask+0x280>)
 80026ea:	f883 2020 	strb.w	r2, [r3, #32]
            
            pcSend.FSM_Yaw.f = ServoRevTypedef.FSMXPos.f;
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <WriteEthTask+0x294>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4a40      	ldr	r2, [pc, #256]	@ (80027f4 <WriteEthTask+0x288>)
 80026f4:	6213      	str	r3, [r2, #32]
            pcSend.FSM_Pitch.f = ServoRevTypedef.FSMYPos.f;
 80026f6:	4b42      	ldr	r3, [pc, #264]	@ (8002800 <WriteEthTask+0x294>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	@ (80027f4 <WriteEthTask+0x288>)
 80026fc:	61d3      	str	r3, [r2, #28]

            for(int i = 0;i < 4;i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e014      	b.n	800272e <WriteEthTask+0x1c2>
            {
                senddata[33+i] = pcSend.FSM_Yaw.u8t[i];
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3321      	adds	r3, #33	@ 0x21
 8002708:	493a      	ldr	r1, [pc, #232]	@ (80027f4 <WriteEthTask+0x288>)
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	440a      	add	r2, r1
 800270e:	3220      	adds	r2, #32
 8002710:	7811      	ldrb	r1, [r2, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	@ (80027ec <WriteEthTask+0x280>)
 8002714:	54d1      	strb	r1, [r2, r3]
                senddata[37+i] = pcSend.FSM_Pitch.u8t[i];
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3325      	adds	r3, #37	@ 0x25
 800271a:	4936      	ldr	r1, [pc, #216]	@ (80027f4 <WriteEthTask+0x288>)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	321c      	adds	r2, #28
 8002722:	7811      	ldrb	r1, [r2, #0]
 8002724:	4a31      	ldr	r2, [pc, #196]	@ (80027ec <WriteEthTask+0x280>)
 8002726:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 4;i++)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	3301      	adds	r3, #1
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b03      	cmp	r3, #3
 8002732:	dde7      	ble.n	8002704 <WriteEthTask+0x198>
            }
            pcSend.servoTrackingState = ServoRevTypedef.cTurnTableTrackState;
 8002734:	4b32      	ldr	r3, [pc, #200]	@ (8002800 <WriteEthTask+0x294>)
 8002736:	7b1a      	ldrb	r2, [r3, #12]
 8002738:	4b2e      	ldr	r3, [pc, #184]	@ (80027f4 <WriteEthTask+0x288>)
 800273a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
            pcSend.FSMTrackingState = ServoRevTypedef.cFSMTrackState;
 800273e:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <WriteEthTask+0x294>)
 8002740:	7b5a      	ldrb	r2, [r3, #13]
 8002742:	4b2c      	ldr	r3, [pc, #176]	@ (80027f4 <WriteEthTask+0x288>)
 8002744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            // senddata[41] = pcSend.servoTrackingState;
            // senddata[42] = pcSend.FSMTrackingState;
            senddata[41] = pcSend.servoTrackingState;
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <WriteEthTask+0x288>)
 800274a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <WriteEthTask+0x280>)
 8002750:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            senddata[42] = pcSend.FSMTrackingState;
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <WriteEthTask+0x288>)
 8002756:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800275a:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <WriteEthTask+0x280>)
 800275c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            for(int i = 0;i < 2;i++)
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e014      	b.n	8002790 <WriteEthTask+0x224>
            {
                senddata[43+i] = pcSend.cuErrorCode[i];
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	332b      	adds	r3, #43	@ 0x2b
 800276a:	4922      	ldr	r1, [pc, #136]	@ (80027f4 <WriteEthTask+0x288>)
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	440a      	add	r2, r1
 8002770:	3229      	adds	r2, #41	@ 0x29
 8002772:	7811      	ldrb	r1, [r2, #0]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <WriteEthTask+0x280>)
 8002776:	54d1      	strb	r1, [r2, r3]
                senddata[45+i] = pcSend.jingErrorCode[i];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	332d      	adds	r3, #45	@ 0x2d
 800277c:	491d      	ldr	r1, [pc, #116]	@ (80027f4 <WriteEthTask+0x288>)
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	440a      	add	r2, r1
 8002782:	322b      	adds	r2, #43	@ 0x2b
 8002784:	7811      	ldrb	r1, [r2, #0]
 8002786:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <WriteEthTask+0x280>)
 8002788:	54d1      	strb	r1, [r2, r3]
            for(int i = 0;i < 2;i++)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3301      	adds	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	dde7      	ble.n	8002766 <WriteEthTask+0x1fa>
            }
            senddata[47] = pcSend.cuOffsetState;
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <WriteEthTask+0x288>)
 8002798:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800279c:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <WriteEthTask+0x280>)
 800279e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            senddata[48] = pcSend.jingOffsetState; 
 80027a2:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <WriteEthTask+0x288>)
 80027a4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <WriteEthTask+0x280>)
 80027aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            // senddata[49] = TrackingFaultCodeCu.errorCode[0];
            // senddata[50] = TrackingFaultCodeCu.errorCode[1];
            // senddata[51] = TrackingFaultCodeJing.errorCode[0];
            // senddata[52] = TrackingFaultCodeJing.errorCode[1];

            senddata[53] = 0xee;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <WriteEthTask+0x280>)
 80027b0:	22ee      	movs	r2, #238	@ 0xee
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            sendto(sockw,senddata,54,0,(struct sockaddr*)&sendaddr,addrlen);
 80027b6:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <WriteEthTask+0x26c>)
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <WriteEthTask+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <WriteEthTask+0x274>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	2236      	movs	r2, #54	@ 0x36
 80027c8:	4908      	ldr	r1, [pc, #32]	@ (80027ec <WriteEthTask+0x280>)
 80027ca:	f015 fdd3 	bl	8018374 <lwip_sendto>
            // }
            // if(sendto(sockw,data,128,0,(struct sockaddr*)&sendaddr,addrlen) > 0)
            // {
//                HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
            // }
            osDelay(50);
 80027ce:	2032      	movs	r0, #50	@ 0x32
 80027d0:	f00f ffb0 	bl	8012734 <osDelay>
            senddata[0] = 0x90;
 80027d4:	e6ef      	b.n	80025b6 <WriteEthTask+0x4a>
 80027d6:	bf00      	nop
 80027d8:	240001e0 	.word	0x240001e0
 80027dc:	24000508 	.word	0x24000508
 80027e0:	240004f4 	.word	0x240004f4
 80027e4:	08029324 	.word	0x08029324
 80027e8:	240004fc 	.word	0x240004fc
 80027ec:	30004a84 	.word	0x30004a84
 80027f0:	24000408 	.word	0x24000408
 80027f4:	2400051c 	.word	0x2400051c
 80027f8:	24000424 	.word	0x24000424
 80027fc:	24000440 	.word	0x24000440
 8002800:	24000458 	.word	0x24000458
 8002804:	240004b6 	.word	0x240004b6

08002808 <udpecho_init>:
}


/*---------------------------------------------------------------------*/
void udpecho_init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af02      	add	r7, sp, #8
    sys_thread_new("udpecho_thread", udpecho_thread, NULL, 2048, osPriorityAboveNormal);
 800280e:	2301      	movs	r3, #1
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002816:	2200      	movs	r2, #0
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <udpecho_init+0x30>)
 800281a:	4808      	ldr	r0, [pc, #32]	@ (800283c <udpecho_init+0x34>)
 800281c:	f021 fd6a 	bl	80242f4 <sys_thread_new>
    sys_thread_new("writeEthTask", WriteEthTask, NULL, 1024, osPriorityAboveNormal);
 8002820:	2301      	movs	r3, #1
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002828:	2200      	movs	r2, #0
 800282a:	4905      	ldr	r1, [pc, #20]	@ (8002840 <udpecho_init+0x38>)
 800282c:	4805      	ldr	r0, [pc, #20]	@ (8002844 <udpecho_init+0x3c>)
 800282e:	f021 fd61 	bl	80242f4 <sys_thread_new>
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	08001d95 	.word	0x08001d95
 800283c:	08029334 	.word	0x08029334
 8002840:	0800256d 	.word	0x0800256d
 8002844:	08029344 	.word	0x08029344

08002848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <MX_DMA_Init+0x10c>)
 8002850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002854:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <MX_DMA_Init+0x10c>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <MX_DMA_Init+0x10c>)
 8002860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800286c:	4b39      	ldr	r3, [pc, #228]	@ (8002954 <MX_DMA_Init+0x10c>)
 800286e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002872:	4a38      	ldr	r2, [pc, #224]	@ (8002954 <MX_DMA_Init+0x10c>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <MX_DMA_Init+0x10c>)
 800287e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2105      	movs	r1, #5
 800288e:	200b      	movs	r0, #11
 8002890:	f004 fa78 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002894:	200b      	movs	r0, #11
 8002896:	f004 fa8f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2105      	movs	r1, #5
 800289e:	200c      	movs	r0, #12
 80028a0:	f004 fa70 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028a4:	200c      	movs	r0, #12
 80028a6:	f004 fa87 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	200d      	movs	r0, #13
 80028b0:	f004 fa68 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80028b4:	200d      	movs	r0, #13
 80028b6:	f004 fa7f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	200e      	movs	r0, #14
 80028c0:	f004 fa60 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028c4:	200e      	movs	r0, #14
 80028c6:	f004 fa77 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	200f      	movs	r0, #15
 80028d0:	f004 fa58 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028d4:	200f      	movs	r0, #15
 80028d6:	f004 fa6f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	2010      	movs	r0, #16
 80028e0:	f004 fa50 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028e4:	2010      	movs	r0, #16
 80028e6:	f004 fa67 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2105      	movs	r1, #5
 80028ee:	2011      	movs	r0, #17
 80028f0:	f004 fa48 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80028f4:	2011      	movs	r0, #17
 80028f6:	f004 fa5f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2105      	movs	r1, #5
 80028fe:	202f      	movs	r0, #47	@ 0x2f
 8002900:	f004 fa40 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002904:	202f      	movs	r0, #47	@ 0x2f
 8002906:	f004 fa57 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	2038      	movs	r0, #56	@ 0x38
 8002910:	f004 fa38 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002914:	2038      	movs	r0, #56	@ 0x38
 8002916:	f004 fa4f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2105      	movs	r1, #5
 800291e:	2039      	movs	r0, #57	@ 0x39
 8002920:	f004 fa30 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002924:	2039      	movs	r0, #57	@ 0x39
 8002926:	f004 fa47 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2105      	movs	r1, #5
 800292e:	203a      	movs	r0, #58	@ 0x3a
 8002930:	f004 fa28 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002934:	203a      	movs	r0, #58	@ 0x3a
 8002936:	f004 fa3f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	203b      	movs	r0, #59	@ 0x3b
 8002940:	f004 fa20 	bl	8006d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002944:	203b      	movs	r0, #59	@ 0x3b
 8002946:	f004 fa37 	bl	8006db8 <HAL_NVIC_EnableIRQ>

}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400

08002958 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <vApplicationGetIdleTaskMemory+0x2c>)
 8002968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <vApplicationGetIdleTaskMemory+0x30>)
 800296e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	240005b0 	.word	0x240005b0
 8002988:	24000604 	.word	0x24000604

0800298c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b0bc      	sub	sp, #240	@ 0xf0
 8002990:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinaryServo */
  osSemaphoreDef(BinaryServo);
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  BinaryServoHandle = osSemaphoreCreate(osSemaphore(BinaryServo), 1);
 800299e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00f ff75 	bl	8012894 <osSemaphoreCreate>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a62      	ldr	r2, [pc, #392]	@ (8002b38 <MX_FREERTOS_Init+0x1ac>)
 80029ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryCu */
  osSemaphoreDef(BinaryCu);
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  BinaryCuHandle = osSemaphoreCreate(osSemaphore(BinaryCu), 1);
 80029bc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f00f ff66 	bl	8012894 <osSemaphoreCreate>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a5c      	ldr	r2, [pc, #368]	@ (8002b3c <MX_FREERTOS_Init+0x1b0>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryJing */
  osSemaphoreDef(BinaryJing);
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  BinaryJingHandle = osSemaphoreCreate(osSemaphore(BinaryJing), 1);
 80029da:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f00f ff57 	bl	8012894 <osSemaphoreCreate>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a55      	ldr	r2, [pc, #340]	@ (8002b40 <MX_FREERTOS_Init+0x1b4>)
 80029ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryFocus */
  osSemaphoreDef(BinaryFocus);
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  BinaryFocusHandle = osSemaphoreCreate(osSemaphore(BinaryFocus), 1);
 80029f8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00f ff48 	bl	8012894 <osSemaphoreCreate>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a4f      	ldr	r2, [pc, #316]	@ (8002b44 <MX_FREERTOS_Init+0x1b8>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* definition and creation of BinaryRangefinder */
  osSemaphoreDef(BinaryRangefinder);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  BinaryRangefinderHandle = osSemaphoreCreate(osSemaphore(BinaryRangefinder), 1);
 8002a16:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00f ff39 	bl	8012894 <osSemaphoreCreate>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a48      	ldr	r2, [pc, #288]	@ (8002b48 <MX_FREERTOS_Init+0x1bc>)
 8002a26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8002a28:	4b48      	ldr	r3, [pc, #288]	@ (8002b4c <MX_FREERTOS_Init+0x1c0>)
 8002a2a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8002a2e:	461d      	mov	r5, r3
 8002a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00f fe2a 	bl	801269c <osThreadCreate>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a41      	ldr	r2, [pc, #260]	@ (8002b50 <MX_FREERTOS_Init+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of turn */
  osThreadDef(turn, TurnTask, osPriorityBelowNormal, 0, 256);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	@ (8002b54 <MX_FREERTOS_Init+0x1c8>)
 8002a50:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002a54:	461d      	mov	r5, r3
 8002a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  turnHandle = osThreadCreate(osThread(turn), NULL);
 8002a62:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f fe17 	bl	801269c <osThreadCreate>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <MX_FREERTOS_Init+0x1cc>)
 8002a72:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgcu */
  osThreadDef(imgcu, ImgCuTask, osPriorityBelowNormal, 0, 256);
 8002a74:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <MX_FREERTOS_Init+0x1d0>)
 8002a76:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgcuHandle = osThreadCreate(osThread(imgcu), NULL);
 8002a88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f00f fe04 	bl	801269c <osThreadCreate>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a32      	ldr	r2, [pc, #200]	@ (8002b60 <MX_FREERTOS_Init+0x1d4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* definition and creation of imgjing */
  osThreadDef(imgjing, ImgJingTask, osPriorityBelowNormal, 0, 256);
 8002a9a:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <MX_FREERTOS_Init+0x1d8>)
 8002a9c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imgjingHandle = osThreadCreate(osThread(imgjing), NULL);
 8002aae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00f fdf1 	bl	801269c <osThreadCreate>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b68 <MX_FREERTOS_Init+0x1dc>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* definition and creation of focus */
  osThreadDef(focus, FocusTask, osPriorityBelowNormal, 0, 256);
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <MX_FREERTOS_Init+0x1e0>)
 8002ac2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002acc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  focusHandle = osThreadCreate(osThread(focus), NULL);
 8002ad4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00f fdde 	bl	801269c <osThreadCreate>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <MX_FREERTOS_Init+0x1e4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* definition and creation of rangefinder */
  osThreadDef(rangefinder, RangefinderTask, osPriorityBelowNormal, 0, 256);
 8002ae6:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <MX_FREERTOS_Init+0x1e8>)
 8002ae8:	f107 0420 	add.w	r4, r7, #32
 8002aec:	461d      	mov	r5, r3
 8002aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rangefinderHandle = osThreadCreate(osThread(rangefinder), NULL);
 8002afa:	f107 0320 	add.w	r3, r7, #32
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00f fdcb 	bl	801269c <osThreadCreate>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <MX_FREERTOS_Init+0x1ec>)
 8002b0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(mytask, mytask, osPriorityNormal, 0, 256);
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <MX_FREERTOS_Init+0x1f0>)
 8002b0e:	1d3c      	adds	r4, r7, #4
 8002b10:	461d      	mov	r5, r3
 8002b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mytaskHandle = osThreadCreate(osThread(mytask), NULL);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00f fdba 	bl	801269c <osThreadCreate>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <MX_FREERTOS_Init+0x1f4>)
 8002b2c:	6013      	str	r3, [r2, #0]



  /* USER CODE END RTOS_THREADS */

}
 8002b2e:	bf00      	nop
 8002b30:	37f0      	adds	r7, #240	@ 0xf0
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bdb0      	pop	{r4, r5, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	24000598 	.word	0x24000598
 8002b3c:	2400059c 	.word	0x2400059c
 8002b40:	240005a0 	.word	0x240005a0
 8002b44:	240005a4 	.word	0x240005a4
 8002b48:	240005a8 	.word	0x240005a8
 8002b4c:	08029428 	.word	0x08029428
 8002b50:	24000580 	.word	0x24000580
 8002b54:	0802944c 	.word	0x0802944c
 8002b58:	24000584 	.word	0x24000584
 8002b5c:	08029470 	.word	0x08029470
 8002b60:	24000588 	.word	0x24000588
 8002b64:	08029494 	.word	0x08029494
 8002b68:	2400058c 	.word	0x2400058c
 8002b6c:	080294b8 	.word	0x080294b8
 8002b70:	24000590 	.word	0x24000590
 8002b74:	080294e0 	.word	0x080294e0
 8002b78:	24000594 	.word	0x24000594
 8002b7c:	08029504 	.word	0x08029504
 8002b80:	240005ac 	.word	0x240005ac

08002b84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  memset(ImgSendTypedef_CU.Data,0xff,64);
 8002b8c:	2240      	movs	r2, #64	@ 0x40
 8002b8e:	21ff      	movs	r1, #255	@ 0xff
 8002b90:	4867      	ldr	r0, [pc, #412]	@ (8002d30 <StartDefaultTask+0x1ac>)
 8002b92:	f022 fd5b 	bl	802564c <memset>
  memset(ImgSendTypedef_JING.Data,0xff,64);
 8002b96:	2240      	movs	r2, #64	@ 0x40
 8002b98:	21ff      	movs	r1, #255	@ 0xff
 8002b9a:	4866      	ldr	r0, [pc, #408]	@ (8002d34 <StartDefaultTask+0x1b0>)
 8002b9c:	f022 fd56 	bl	802564c <memset>
  MX_LWIP_Init();
 8002ba0:	f00e fed2 	bl	8011948 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
//  client_init();
  udpecho_init();
 8002ba4:	f7ff fe30 	bl	8002808 <udpecho_init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	4963      	ldr	r1, [pc, #396]	@ (8002d38 <StartDefaultTask+0x1b4>)
 8002bac:	4863      	ldr	r0, [pc, #396]	@ (8002d3c <StartDefaultTask+0x1b8>)
 8002bae:	f00e fe28 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 8002bb2:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a63      	ldr	r2, [pc, #396]	@ (8002d44 <StartDefaultTask+0x1c0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bbc:	4b60      	ldr	r3, [pc, #384]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a61      	ldr	r2, [pc, #388]	@ (8002d48 <StartDefaultTask+0x1c4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a60      	ldr	r2, [pc, #384]	@ (8002d4c <StartDefaultTask+0x1c8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d50 <StartDefaultTask+0x1cc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bda:	4b59      	ldr	r3, [pc, #356]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5d      	ldr	r2, [pc, #372]	@ (8002d54 <StartDefaultTask+0x1d0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002be4:	4b56      	ldr	r3, [pc, #344]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5b      	ldr	r2, [pc, #364]	@ (8002d58 <StartDefaultTask+0x1d4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bee:	4b54      	ldr	r3, [pc, #336]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8002d5c <StartDefaultTask+0x1d8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002bf8:	4b51      	ldr	r3, [pc, #324]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	@ (8002d60 <StartDefaultTask+0x1dc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c02:	4b4f      	ldr	r3, [pc, #316]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <StartDefaultTask+0x1e0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a55      	ldr	r2, [pc, #340]	@ (8002d68 <StartDefaultTask+0x1e4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c16:	4b4a      	ldr	r3, [pc, #296]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <StartDefaultTask+0x1e8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c20:	4b47      	ldr	r3, [pc, #284]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <StartDefaultTask+0x1ec>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c2a:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a51      	ldr	r2, [pc, #324]	@ (8002d74 <StartDefaultTask+0x1f0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c34:	4b42      	ldr	r3, [pc, #264]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4f      	ldr	r2, [pc, #316]	@ (8002d78 <StartDefaultTask+0x1f4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c3e:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a4e      	ldr	r2, [pc, #312]	@ (8002d7c <StartDefaultTask+0x1f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <StartDefaultTask+0xce>
 8002c48:	4b3d      	ldr	r3, [pc, #244]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d80 <StartDefaultTask+0x1fc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <StartDefaultTask+0xe0>
 8002c52:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e007      	b.n	8002c74 <StartDefaultTask+0xf0>
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b35      	ldr	r3, [pc, #212]	@ (8002d40 <StartDefaultTask+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	4943      	ldr	r1, [pc, #268]	@ (8002d84 <StartDefaultTask+0x200>)
 8002c78:	4843      	ldr	r0, [pc, #268]	@ (8002d88 <StartDefaultTask+0x204>)
 8002c7a:	f00e fdc2 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002c7e:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <StartDefaultTask+0x208>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <StartDefaultTask+0x1c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002c88:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <StartDefaultTask+0x208>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d48 <StartDefaultTask+0x1c4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002c92:	4b3e      	ldr	r3, [pc, #248]	@ (8002d8c <StartDefaultTask+0x208>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <StartDefaultTask+0x1c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <StartDefaultTask+0x208>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <StartDefaultTask+0x1cc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002ca6:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <StartDefaultTask+0x208>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <StartDefaultTask+0x1d0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cb0:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	@ (8002d58 <StartDefaultTask+0x1d4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cba:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a27      	ldr	r2, [pc, #156]	@ (8002d5c <StartDefaultTask+0x1d8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cc4:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <StartDefaultTask+0x1dc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <StartDefaultTask+0x1e0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <StartDefaultTask+0x1e4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d8c <StartDefaultTask+0x208>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <StartDefaultTask+0x1e8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cec:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <StartDefaultTask+0x1ec>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002cf6:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <StartDefaultTask+0x208>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <StartDefaultTask+0x1f0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <StartDefaultTask+0x208>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <StartDefaultTask+0x1f4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <StartDefaultTask+0x208>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <StartDefaultTask+0x1f8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <StartDefaultTask+0x19a>
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <StartDefaultTask+0x208>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a19      	ldr	r2, [pc, #100]	@ (8002d80 <StartDefaultTask+0x1fc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d138      	bne.n	8002d90 <StartDefaultTask+0x20c>
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <StartDefaultTask+0x208>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <StartDefaultTask+0x208>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0208 	bic.w	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e037      	b.n	8002da0 <StartDefaultTask+0x21c>
 8002d30:	24000022 	.word	0x24000022
 8002d34:	24000096 	.word	0x24000096
 8002d38:	30004b84 	.word	0x30004b84
 8002d3c:	240008fc 	.word	0x240008fc
 8002d40:	24000d64 	.word	0x24000d64
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	30004d84 	.word	0x30004d84
 8002d88:	24000b4c 	.word	0x24000b4c
 8002d8c:	24001034 	.word	0x24001034
 8002d90:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <StartDefaultTask+0x3a4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b64      	ldr	r3, [pc, #400]	@ (8002f28 <StartDefaultTask+0x3a4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	4962      	ldr	r1, [pc, #392]	@ (8002f2c <StartDefaultTask+0x3a8>)
 8002da4:	4862      	ldr	r0, [pc, #392]	@ (8002f30 <StartDefaultTask+0x3ac>)
 8002da6:	f00e fd2c 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8002daa:	4b62      	ldr	r3, [pc, #392]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a62      	ldr	r2, [pc, #392]	@ (8002f38 <StartDefaultTask+0x3b4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002db4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a60      	ldr	r2, [pc, #384]	@ (8002f3c <StartDefaultTask+0x3b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f40 <StartDefaultTask+0x3bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f44 <StartDefaultTask+0x3c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002dd2:	4b58      	ldr	r3, [pc, #352]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f48 <StartDefaultTask+0x3c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002ddc:	4b55      	ldr	r3, [pc, #340]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f4c <StartDefaultTask+0x3c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002de6:	4b53      	ldr	r3, [pc, #332]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a59      	ldr	r2, [pc, #356]	@ (8002f50 <StartDefaultTask+0x3cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002df0:	4b50      	ldr	r3, [pc, #320]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a57      	ldr	r2, [pc, #348]	@ (8002f54 <StartDefaultTask+0x3d0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <StartDefaultTask+0x3d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e04:	4b4b      	ldr	r3, [pc, #300]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a54      	ldr	r2, [pc, #336]	@ (8002f5c <StartDefaultTask+0x3d8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e0e:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a53      	ldr	r2, [pc, #332]	@ (8002f60 <StartDefaultTask+0x3dc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e18:	4b46      	ldr	r3, [pc, #280]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	@ (8002f64 <StartDefaultTask+0x3e0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e22:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a50      	ldr	r2, [pc, #320]	@ (8002f68 <StartDefaultTask+0x3e4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e2c:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4e      	ldr	r2, [pc, #312]	@ (8002f6c <StartDefaultTask+0x3e8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e36:	4b3f      	ldr	r3, [pc, #252]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f70 <StartDefaultTask+0x3ec>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <StartDefaultTask+0x2c6>
 8002e40:	4b3c      	ldr	r3, [pc, #240]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	@ (8002f74 <StartDefaultTask+0x3f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <StartDefaultTask+0x2d8>
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b38      	ldr	r3, [pc, #224]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e007      	b.n	8002e6c <StartDefaultTask+0x2e8>
 8002e5c:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <StartDefaultTask+0x3b0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0204 	bic.w	r2, r2, #4
 8002e6a:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 8002e6c:	220b      	movs	r2, #11
 8002e6e:	4942      	ldr	r1, [pc, #264]	@ (8002f78 <StartDefaultTask+0x3f4>)
 8002e70:	4842      	ldr	r0, [pc, #264]	@ (8002f7c <StartDefaultTask+0x3f8>)
 8002e72:	f00e fcc6 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8002e76:	4b42      	ldr	r3, [pc, #264]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f38 <StartDefaultTask+0x3b4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04a      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002e80:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2d      	ldr	r2, [pc, #180]	@ (8002f3c <StartDefaultTask+0x3b8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d045      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f40 <StartDefaultTask+0x3bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d040      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002e94:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <StartDefaultTask+0x3c0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d03b      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002e9e:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <StartDefaultTask+0x3c4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d036      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ea8:	4b35      	ldr	r3, [pc, #212]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <StartDefaultTask+0x3c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d031      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002eb2:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <StartDefaultTask+0x3cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d02c      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ebc:	4b30      	ldr	r3, [pc, #192]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <StartDefaultTask+0x3d0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d027      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a23      	ldr	r2, [pc, #140]	@ (8002f58 <StartDefaultTask+0x3d4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d022      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	@ (8002f5c <StartDefaultTask+0x3d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002eda:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <StartDefaultTask+0x3dc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d018      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <StartDefaultTask+0x3e0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002eee:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <StartDefaultTask+0x3e4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002ef8:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <StartDefaultTask+0x3e8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002f02:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1a      	ldr	r2, [pc, #104]	@ (8002f70 <StartDefaultTask+0x3ec>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <StartDefaultTask+0x392>
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <StartDefaultTask+0x3f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d136      	bne.n	8002f84 <StartDefaultTask+0x400>
 8002f16:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <StartDefaultTask+0x3fc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0208 	bic.w	r2, r2, #8
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e035      	b.n	8002f94 <StartDefaultTask+0x410>
 8002f28:	24001034 	.word	0x24001034
 8002f2c:	30004e84 	.word	0x30004e84
 8002f30:	24000868 	.word	0x24000868
 8002f34:	24000c74 	.word	0x24000c74
 8002f38:	40020010 	.word	0x40020010
 8002f3c:	40020028 	.word	0x40020028
 8002f40:	40020040 	.word	0x40020040
 8002f44:	40020058 	.word	0x40020058
 8002f48:	40020070 	.word	0x40020070
 8002f4c:	40020088 	.word	0x40020088
 8002f50:	400200a0 	.word	0x400200a0
 8002f54:	400200b8 	.word	0x400200b8
 8002f58:	40020410 	.word	0x40020410
 8002f5c:	40020428 	.word	0x40020428
 8002f60:	40020440 	.word	0x40020440
 8002f64:	40020458 	.word	0x40020458
 8002f68:	40020470 	.word	0x40020470
 8002f6c:	40020488 	.word	0x40020488
 8002f70:	400204a0 	.word	0x400204a0
 8002f74:	400204b8 	.word	0x400204b8
 8002f78:	30004f10 	.word	0x30004f10
 8002f7c:	24000be0 	.word	0x24000be0
 8002f80:	24001124 	.word	0x24001124
 8002f84:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <StartDefaultTask+0x600>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8003184 <StartDefaultTask+0x600>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	497c      	ldr	r1, [pc, #496]	@ (8003188 <StartDefaultTask+0x604>)
 8002f98:	487c      	ldr	r0, [pc, #496]	@ (800318c <StartDefaultTask+0x608>)
 8002f9a:	f00e fc32 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8003194 <StartDefaultTask+0x610>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d04a      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fa8:	4b79      	ldr	r3, [pc, #484]	@ (8003190 <StartDefaultTask+0x60c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7a      	ldr	r2, [pc, #488]	@ (8003198 <StartDefaultTask+0x614>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d045      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fb2:	4b77      	ldr	r3, [pc, #476]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	@ (800319c <StartDefaultTask+0x618>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d040      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fbc:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	@ (80031a0 <StartDefaultTask+0x61c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d03b      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fc6:	4b72      	ldr	r3, [pc, #456]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a76      	ldr	r2, [pc, #472]	@ (80031a4 <StartDefaultTask+0x620>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d036      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a74      	ldr	r2, [pc, #464]	@ (80031a8 <StartDefaultTask+0x624>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d031      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fda:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a73      	ldr	r2, [pc, #460]	@ (80031ac <StartDefaultTask+0x628>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d02c      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <StartDefaultTask+0x60c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a71      	ldr	r2, [pc, #452]	@ (80031b0 <StartDefaultTask+0x62c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d027      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002fee:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <StartDefaultTask+0x60c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a70      	ldr	r2, [pc, #448]	@ (80031b4 <StartDefaultTask+0x630>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <StartDefaultTask+0x4ba>
 8002ff8:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <StartDefaultTask+0x60c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80031b8 <StartDefaultTask+0x634>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <StartDefaultTask+0x4ba>
 8003002:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <StartDefaultTask+0x60c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6d      	ldr	r2, [pc, #436]	@ (80031bc <StartDefaultTask+0x638>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <StartDefaultTask+0x4ba>
 800300c:	4b60      	ldr	r3, [pc, #384]	@ (8003190 <StartDefaultTask+0x60c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6b      	ldr	r2, [pc, #428]	@ (80031c0 <StartDefaultTask+0x63c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <StartDefaultTask+0x4ba>
 8003016:	4b5e      	ldr	r3, [pc, #376]	@ (8003190 <StartDefaultTask+0x60c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6a      	ldr	r2, [pc, #424]	@ (80031c4 <StartDefaultTask+0x640>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <StartDefaultTask+0x4ba>
 8003020:	4b5b      	ldr	r3, [pc, #364]	@ (8003190 <StartDefaultTask+0x60c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a68      	ldr	r2, [pc, #416]	@ (80031c8 <StartDefaultTask+0x644>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <StartDefaultTask+0x4ba>
 800302a:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <StartDefaultTask+0x60c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a67      	ldr	r2, [pc, #412]	@ (80031cc <StartDefaultTask+0x648>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <StartDefaultTask+0x4ba>
 8003034:	4b56      	ldr	r3, [pc, #344]	@ (8003190 <StartDefaultTask+0x60c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <StartDefaultTask+0x64c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <StartDefaultTask+0x4cc>
 800303e:	4b54      	ldr	r3, [pc, #336]	@ (8003190 <StartDefaultTask+0x60c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b52      	ldr	r3, [pc, #328]	@ (8003190 <StartDefaultTask+0x60c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0208 	bic.w	r2, r2, #8
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e007      	b.n	8003060 <StartDefaultTask+0x4dc>
 8003050:	4b4f      	ldr	r3, [pc, #316]	@ (8003190 <StartDefaultTask+0x60c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <StartDefaultTask+0x60c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 8003060:	2240      	movs	r2, #64	@ 0x40
 8003062:	495c      	ldr	r1, [pc, #368]	@ (80031d4 <StartDefaultTask+0x650>)
 8003064:	485c      	ldr	r0, [pc, #368]	@ (80031d8 <StartDefaultTask+0x654>)
 8003066:	f00e fbcc 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800306a:	4b5c      	ldr	r3, [pc, #368]	@ (80031dc <StartDefaultTask+0x658>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a49      	ldr	r2, [pc, #292]	@ (8003194 <StartDefaultTask+0x610>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <StartDefaultTask+0x586>
 8003074:	4b59      	ldr	r3, [pc, #356]	@ (80031dc <StartDefaultTask+0x658>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a47      	ldr	r2, [pc, #284]	@ (8003198 <StartDefaultTask+0x614>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <StartDefaultTask+0x586>
 800307e:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <StartDefaultTask+0x658>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a46      	ldr	r2, [pc, #280]	@ (800319c <StartDefaultTask+0x618>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <StartDefaultTask+0x586>
 8003088:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <StartDefaultTask+0x658>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a44      	ldr	r2, [pc, #272]	@ (80031a0 <StartDefaultTask+0x61c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <StartDefaultTask+0x586>
 8003092:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <StartDefaultTask+0x658>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a43      	ldr	r2, [pc, #268]	@ (80031a4 <StartDefaultTask+0x620>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <StartDefaultTask+0x586>
 800309c:	4b4f      	ldr	r3, [pc, #316]	@ (80031dc <StartDefaultTask+0x658>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <StartDefaultTask+0x624>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <StartDefaultTask+0x586>
 80030a6:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <StartDefaultTask+0x658>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a40      	ldr	r2, [pc, #256]	@ (80031ac <StartDefaultTask+0x628>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <StartDefaultTask+0x586>
 80030b0:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <StartDefaultTask+0x658>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3e      	ldr	r2, [pc, #248]	@ (80031b0 <StartDefaultTask+0x62c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <StartDefaultTask+0x586>
 80030ba:	4b48      	ldr	r3, [pc, #288]	@ (80031dc <StartDefaultTask+0x658>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a3d      	ldr	r2, [pc, #244]	@ (80031b4 <StartDefaultTask+0x630>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <StartDefaultTask+0x586>
 80030c4:	4b45      	ldr	r3, [pc, #276]	@ (80031dc <StartDefaultTask+0x658>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3b      	ldr	r2, [pc, #236]	@ (80031b8 <StartDefaultTask+0x634>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <StartDefaultTask+0x586>
 80030ce:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <StartDefaultTask+0x658>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <StartDefaultTask+0x638>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <StartDefaultTask+0x586>
 80030d8:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <StartDefaultTask+0x658>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a38      	ldr	r2, [pc, #224]	@ (80031c0 <StartDefaultTask+0x63c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <StartDefaultTask+0x586>
 80030e2:	4b3e      	ldr	r3, [pc, #248]	@ (80031dc <StartDefaultTask+0x658>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a37      	ldr	r2, [pc, #220]	@ (80031c4 <StartDefaultTask+0x640>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <StartDefaultTask+0x586>
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <StartDefaultTask+0x658>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a35      	ldr	r2, [pc, #212]	@ (80031c8 <StartDefaultTask+0x644>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <StartDefaultTask+0x586>
 80030f6:	4b39      	ldr	r3, [pc, #228]	@ (80031dc <StartDefaultTask+0x658>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <StartDefaultTask+0x648>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <StartDefaultTask+0x586>
 8003100:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <StartDefaultTask+0x658>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <StartDefaultTask+0x64c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d108      	bne.n	800311c <StartDefaultTask+0x598>
 800310a:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <StartDefaultTask+0x658>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b32      	ldr	r3, [pc, #200]	@ (80031dc <StartDefaultTask+0x658>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0208 	bic.w	r2, r2, #8
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <StartDefaultTask+0x5a8>
 800311c:	4b2f      	ldr	r3, [pc, #188]	@ (80031dc <StartDefaultTask+0x658>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <StartDefaultTask+0x658>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(RF_PWD_GPIO_Port,RF_PWD_Pin,GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003132:	482b      	ldr	r0, [pc, #172]	@ (80031e0 <StartDefaultTask+0x65c>)
 8003134:	f008 fc1a 	bl	800b96c <HAL_GPIO_WritePin>
	// go2init();
	osDelay(1000);
 8003138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800313c:	f00f fafa 	bl	8012734 <osDelay>
	RangefinderDataFrameSend.FuncCode = SetMultiFreq;
 8003140:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <StartDefaultTask+0x660>)
 8003142:	22a1      	movs	r2, #161	@ 0xa1
 8003144:	711a      	strb	r2, [r3, #4]
	cSetMultiFreq = 0x0A;
 8003146:	4b28      	ldr	r3, [pc, #160]	@ (80031e8 <StartDefaultTask+0x664>)
 8003148:	220a      	movs	r2, #10
 800314a:	701a      	strb	r2, [r3, #0]
	Send2RangefinderModule(&RangefinderDataFrameSend);
 800314c:	4825      	ldr	r0, [pc, #148]	@ (80031e4 <StartDefaultTask+0x660>)
 800314e:	f7fe f87b 	bl	8001248 <Send2RangefinderModule>
	osDelay(100);
 8003152:	2064      	movs	r0, #100	@ 0x64
 8003154:	f00f faee 	bl	8012734 <osDelay>
	RangefinderDataFrameSend.FuncCode = SetTarget;
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <StartDefaultTask+0x660>)
 800315a:	2203      	movs	r2, #3
 800315c:	711a      	strb	r2, [r3, #4]
	cSetTarget = 0x01;
 800315e:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <StartDefaultTask+0x668>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
	Send2RangefinderModule(&RangefinderDataFrameSend);
 8003164:	481f      	ldr	r0, [pc, #124]	@ (80031e4 <StartDefaultTask+0x660>)
 8003166:	f7fe f86f 	bl	8001248 <Send2RangefinderModule>
//	osDelay(2000);
	vTaskSuspend(mytaskHandle);
 800316a:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <StartDefaultTask+0x66c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f010 ffc8 	bl	8014104 <vTaskSuspend>
//	  if(InitFlag == 1)
//	  {
//		  go2init();
//		  InitFlag = 0;
//	  }
		processControl();
 8003174:	f7fe fa06 	bl	8001584 <processControl>

//	state = STATE_GUIDE;
//	CommandTypedef.turnYaw.f = 30.f;
//	CommandTypedef.turnPitch.f = 60.f;
//	processControl();
    osDelay(20);
 8003178:	2014      	movs	r0, #20
 800317a:	f00f fadb 	bl	8012734 <osDelay>
		processControl();
 800317e:	bf00      	nop
 8003180:	e7f8      	b.n	8003174 <StartDefaultTask+0x5f0>
 8003182:	bf00      	nop
 8003184:	24001124 	.word	0x24001124
 8003188:	30004f9c 	.word	0x30004f9c
 800318c:	24000990 	.word	0x24000990
 8003190:	24000e54 	.word	0x24000e54
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	3000501c 	.word	0x3000501c
 80031d8:	24000ab8 	.word	0x24000ab8
 80031dc:	24000f44 	.word	0x24000f44
 80031e0:	58021400 	.word	0x58021400
 80031e4:	24000100 	.word	0x24000100
 80031e8:	2400044d 	.word	0x2400044d
 80031ec:	2400044c 	.word	0x2400044c
 80031f0:	240005ac 	.word	0x240005ac

080031f4 <TurnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TurnTask */
void TurnTask(void const * argument)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TurnTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 80031fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003430 <TurnTask+0x23c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	210a      	movs	r1, #10
 8003202:	4618      	mov	r0, r3
 8003204:	f00f fb78 	bl	80128f8 <osSemaphoreWait>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 81ad 	bne.w	800356a <TurnTask+0x376>
 8003210:	4b88      	ldr	r3, [pc, #544]	@ (8003434 <TurnTask+0x240>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 81a8 	bne.w	800356a <TurnTask+0x376>
	  {
		 pcSend.cuErrorCode[0]             			  = rxdata_servo[3];
 800321a:	4b87      	ldr	r3, [pc, #540]	@ (8003438 <TurnTask+0x244>)
 800321c:	78da      	ldrb	r2, [r3, #3]
 800321e:	4b87      	ldr	r3, [pc, #540]	@ (800343c <TurnTask+0x248>)
 8003220:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		 pcSend.cuErrorCode[1]             			  = rxdata_servo[4];
 8003224:	4b84      	ldr	r3, [pc, #528]	@ (8003438 <TurnTask+0x244>)
 8003226:	791a      	ldrb	r2, [r3, #4]
 8003228:	4b84      	ldr	r3, [pc, #528]	@ (800343c <TurnTask+0x248>)
 800322a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		 
		 TrackingFaultCodeCu.CommunicationFault       = (rxdata_servo[3] & bit(0)) ? 1 : 0;
 800322e:	4b82      	ldr	r3, [pc, #520]	@ (8003438 <TurnTask+0x244>)
 8003230:	78db      	ldrb	r3, [r3, #3]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b81      	ldr	r3, [pc, #516]	@ (8003440 <TurnTask+0x24c>)
 800323a:	701a      	strb	r2, [r3, #0]
		 TrackingFaultCodeCu.EncoderFault             = (rxdata_servo[3] & bit(1)) ? 1 : 0;
 800323c:	4b7e      	ldr	r3, [pc, #504]	@ (8003438 <TurnTask+0x244>)
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	105b      	asrs	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b7d      	ldr	r3, [pc, #500]	@ (8003440 <TurnTask+0x24c>)
 800324c:	705a      	strb	r2, [r3, #1]
		 TrackingFaultCodeCu.DriverFaultA             = (rxdata_servo[3] & bit(2)) ? 1 : 0;
 800324e:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <TurnTask+0x244>)
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	109b      	asrs	r3, r3, #2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b78      	ldr	r3, [pc, #480]	@ (8003440 <TurnTask+0x24c>)
 800325e:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeCu.DriverFaultE             = (rxdata_servo[3] & bit(3)) ? 1 : 0;
 8003260:	4b75      	ldr	r3, [pc, #468]	@ (8003438 <TurnTask+0x244>)
 8003262:	78db      	ldrb	r3, [r3, #3]
 8003264:	10db      	asrs	r3, r3, #3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <TurnTask+0x24c>)
 8003270:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeCu.OverSpeedA               = (rxdata_servo[3] & bit(4)) ? 1 : 0;
 8003272:	4b71      	ldr	r3, [pc, #452]	@ (8003438 <TurnTask+0x244>)
 8003274:	78db      	ldrb	r3, [r3, #3]
 8003276:	111b      	asrs	r3, r3, #4
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b6f      	ldr	r3, [pc, #444]	@ (8003440 <TurnTask+0x24c>)
 8003282:	711a      	strb	r2, [r3, #4]
		 TrackingFaultCodeCu.OverSpeedE               = (rxdata_servo[3] & bit(5)) ? 1 : 0;
 8003284:	4b6c      	ldr	r3, [pc, #432]	@ (8003438 <TurnTask+0x244>)
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	115b      	asrs	r3, r3, #5
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b6b      	ldr	r3, [pc, #428]	@ (8003440 <TurnTask+0x24c>)
 8003294:	715a      	strb	r2, [r3, #5]
		 TrackingFaultCodeCu.ControlOverLimitA        = (rxdata_servo[3] & bit(6)) ? 1 : 0;
 8003296:	4b68      	ldr	r3, [pc, #416]	@ (8003438 <TurnTask+0x244>)
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	119b      	asrs	r3, r3, #6
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <TurnTask+0x24c>)
 80032a6:	719a      	strb	r2, [r3, #6]
		 TrackingFaultCodeCu.ControlOverLimitE        = (rxdata_servo[3] & bit(7)) ? 1 : 0;
 80032a8:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <TurnTask+0x244>)
 80032aa:	78db      	ldrb	r3, [r3, #3]
 80032ac:	09db      	lsrs	r3, r3, #7
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b63      	ldr	r3, [pc, #396]	@ (8003440 <TurnTask+0x24c>)
 80032b2:	71da      	strb	r2, [r3, #7]
		 TrackingFaultCodeCu.PositionOverLimitE       = (rxdata_servo[4] & bit(0)) ? 1 : 0;
 80032b4:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <TurnTask+0x244>)
 80032b6:	791b      	ldrb	r3, [r3, #4]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b60      	ldr	r3, [pc, #384]	@ (8003440 <TurnTask+0x24c>)
 80032c0:	721a      	strb	r2, [r3, #8]
		 TrackingFaultCodeCu.PositionUnderLimitE      = (rxdata_servo[4] & bit(1)) ? 1 : 0;
 80032c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003438 <TurnTask+0x244>)
 80032c4:	791b      	ldrb	r3, [r3, #4]
 80032c6:	105b      	asrs	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003440 <TurnTask+0x24c>)
 80032d2:	725a      	strb	r2, [r3, #9]
		 TrackingFaultCodeCu.TrackingFaultCuByte1     = (rxdata_servo[4] & bit(2)) ? 1 : 0;
 80032d4:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <TurnTask+0x244>)
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	109b      	asrs	r3, r3, #2
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <TurnTask+0x24c>)
 80032e4:	729a      	strb	r2, [r3, #10]
		 TrackingFaultCodeCu.TrackingFaultCuByte2     = (rxdata_servo[4] & bit(3)) ? 1 : 0;
 80032e6:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <TurnTask+0x244>)
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	10db      	asrs	r3, r3, #3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	4b52      	ldr	r3, [pc, #328]	@ (8003440 <TurnTask+0x24c>)
 80032f6:	72da      	strb	r2, [r3, #11]
		 TrackingFaultCodeCu.TrackingFaultCuByte3     = (rxdata_servo[4] & bit(4)) ? 1 : 0;
 80032f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <TurnTask+0x244>)
 80032fa:	791b      	ldrb	r3, [r3, #4]
 80032fc:	111b      	asrs	r3, r3, #4
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4b4e      	ldr	r3, [pc, #312]	@ (8003440 <TurnTask+0x24c>)
 8003308:	731a      	strb	r2, [r3, #12]
		 TrackingFaultCodeCu.TrackingFaultCuByte4     = (rxdata_servo[4] & bit(5)) ? 1 : 0;
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <TurnTask+0x244>)
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	115b      	asrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	4b49      	ldr	r3, [pc, #292]	@ (8003440 <TurnTask+0x24c>)
 800331a:	735a      	strb	r2, [r3, #13]


		 pcSend.jingErrorCode[0]                      = rxdata_servo[5];
 800331c:	4b46      	ldr	r3, [pc, #280]	@ (8003438 <TurnTask+0x244>)
 800331e:	795a      	ldrb	r2, [r3, #5]
 8003320:	4b46      	ldr	r3, [pc, #280]	@ (800343c <TurnTask+0x248>)
 8003322:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		 pcSend.jingErrorCode[1]                      = rxdata_servo[6];
 8003326:	4b44      	ldr	r3, [pc, #272]	@ (8003438 <TurnTask+0x244>)
 8003328:	799a      	ldrb	r2, [r3, #6]
 800332a:	4b44      	ldr	r3, [pc, #272]	@ (800343c <TurnTask+0x248>)
 800332c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		 TrackingFaultCodeJing.FSMControlOverLimitX   = (rxdata_servo[5] & bit(0)) ? 1 : 0;
 8003330:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <TurnTask+0x244>)
 8003332:	795b      	ldrb	r3, [r3, #5]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b42      	ldr	r3, [pc, #264]	@ (8003444 <TurnTask+0x250>)
 800333c:	701a      	strb	r2, [r3, #0]
		 TrackingFaultCodeJing.FSMControlOverLimitY   = (rxdata_servo[5] & bit(1)) ? 1 : 0;
 800333e:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <TurnTask+0x244>)
 8003340:	795b      	ldrb	r3, [r3, #5]
 8003342:	105b      	asrs	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <TurnTask+0x250>)
 800334e:	705a      	strb	r2, [r3, #1]
		 TrackingFaultCodeJing.FSMPositionOverLimitX  = (rxdata_servo[6] & bit(0)) ? 1 : 0;
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <TurnTask+0x244>)
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <TurnTask+0x250>)
 800335c:	709a      	strb	r2, [r3, #2]
		 TrackingFaultCodeJing.FSMPositionOverLimitY  = (rxdata_servo[6] & bit(1)) ? 1 : 0;
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <TurnTask+0x244>)
 8003360:	799b      	ldrb	r3, [r3, #6]
 8003362:	105b      	asrs	r3, r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b35      	ldr	r3, [pc, #212]	@ (8003444 <TurnTask+0x250>)
 800336e:	70da      	strb	r2, [r3, #3]
		 TrackingFaultCodeJing.TrackingFaultJing      = (rxdata_servo[6] & bit(2)) ? 1 : 0;
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <TurnTask+0x244>)
 8003372:	799b      	ldrb	r3, [r3, #6]
 8003374:	109b      	asrs	r3, r3, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <TurnTask+0x250>)
 8003380:	711a      	strb	r2, [r3, #4]


		 ServoRevTypedef.cCuOffsetState               =  rxdata_servo[17];
 8003382:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <TurnTask+0x244>)
 8003384:	7c5a      	ldrb	r2, [r3, #17]
 8003386:	4b30      	ldr	r3, [pc, #192]	@ (8003448 <TurnTask+0x254>)
 8003388:	701a      	strb	r2, [r3, #0]
		 pcSend.cuOffsetState = ServoRevTypedef.cCuOffsetState;
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <TurnTask+0x254>)
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <TurnTask+0x248>)
 8003390:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		 ServoRevTypedef.CuOffset_X.s                 =  rxdata_servo[18] << 8 | rxdata_servo[19];
 8003394:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <TurnTask+0x244>)
 8003396:	7c9b      	ldrb	r3, [r3, #18]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	b21a      	sxth	r2, r3
 800339c:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <TurnTask+0x244>)
 800339e:	7cdb      	ldrb	r3, [r3, #19]
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	4b28      	ldr	r3, [pc, #160]	@ (8003448 <TurnTask+0x254>)
 80033a8:	809a      	strh	r2, [r3, #4]
		 ServoRevTypedef.CuOffset_Y.s                 =  rxdata_servo[20] << 8 | rxdata_servo[21];
 80033aa:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <TurnTask+0x244>)
 80033ac:	7d1b      	ldrb	r3, [r3, #20]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <TurnTask+0x244>)
 80033b4:	7d5b      	ldrb	r3, [r3, #21]
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <TurnTask+0x254>)
 80033be:	80da      	strh	r2, [r3, #6]
		 ServoRevTypedef.cJingOffsetState             =  rxdata_servo[22];
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <TurnTask+0x244>)
 80033c2:	7d9a      	ldrb	r2, [r3, #22]
 80033c4:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <TurnTask+0x254>)
 80033c6:	705a      	strb	r2, [r3, #1]
		 pcSend.jingOffsetState = ServoRevTypedef.cJingOffsetState;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <TurnTask+0x254>)
 80033ca:	785a      	ldrb	r2, [r3, #1]
 80033cc:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <TurnTask+0x248>)
 80033ce:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		 ServoRevTypedef.cJingISOffsetState           =  rxdata_servo[23];
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <TurnTask+0x244>)
 80033d4:	7dda      	ldrb	r2, [r3, #23]
 80033d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003448 <TurnTask+0x254>)
 80033d8:	709a      	strb	r2, [r3, #2]
		 ServoRevTypedef.JingOffset_X.s               =  rxdata_servo[24] << 8 | rxdata_servo[25];
 80033da:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <TurnTask+0x244>)
 80033dc:	7e1b      	ldrb	r3, [r3, #24]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <TurnTask+0x244>)
 80033e4:	7e5b      	ldrb	r3, [r3, #25]
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <TurnTask+0x254>)
 80033ee:	811a      	strh	r2, [r3, #8]
		 ServoRevTypedef.JingOffset_Y.s               =  rxdata_servo[26] << 8 | rxdata_servo[27];
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <TurnTask+0x244>)
 80033f2:	7e9b      	ldrb	r3, [r3, #26]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <TurnTask+0x244>)
 80033fa:	7edb      	ldrb	r3, [r3, #27]
 80033fc:	b21b      	sxth	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	b21a      	sxth	r2, r3
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <TurnTask+0x254>)
 8003404:	815a      	strh	r2, [r3, #10]
		 ServoRevTypedef.cTurnTableTrackState         =  rxdata_servo[28];
 8003406:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <TurnTask+0x244>)
 8003408:	7f1a      	ldrb	r2, [r3, #28]
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <TurnTask+0x254>)
 800340c:	731a      	strb	r2, [r3, #12]
		 ServoRevTypedef.cFSMTrackState               =  rxdata_servo[29];
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <TurnTask+0x244>)
 8003410:	7f5a      	ldrb	r2, [r3, #29]
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <TurnTask+0x254>)
 8003414:	735a      	strb	r2, [r3, #13]
		 // ServoRevTypedef.cElectPositionState          =  rxdata_servo[30];
		 ServoRevTypedef.cTurnTableMotorPowerState    =  rxdata_servo[31];
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <TurnTask+0x244>)
 8003418:	7fda      	ldrb	r2, [r3, #31]
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <TurnTask+0x254>)
 800341c:	73da      	strb	r2, [r3, #15]
		 ServoRevTypedef.cJingTrackControlState       =  rxdata_servo[32];
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <TurnTask+0x244>)
 8003420:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <TurnTask+0x254>)
 8003426:	741a      	strb	r2, [r3, #16]
		 for(int i = 0;i < 4;i++)
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e089      	b.n	8003542 <TurnTask+0x34e>
 800342e:	bf00      	nop
 8003430:	24000598 	.word	0x24000598
 8003434:	2400056c 	.word	0x2400056c
 8003438:	30004b04 	.word	0x30004b04
 800343c:	2400051c 	.word	0x2400051c
 8003440:	240004a0 	.word	0x240004a0
 8003444:	240004b0 	.word	0x240004b0
 8003448:	24000458 	.word	0x24000458
		   ServoRevTypedef.TurnYawOutput.u8t[3-i] = rxdata_servo[65+i];
		   ServoRevTypedef.TurnPitchOutput.u8t[3-i] = rxdata_servo[69+i];
		   ServoRevTypedef.FSMXOutput.u8t[3-i] = rxdata_servo[73+i];
		   ServoRevTypedef.FSMYOutput.u8t[3-i] = rxdata_servo[77+i];
		   #else
		   ServoRevTypedef.FSMXPos.u8t[i] = rxdata_servo[33+i];
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3321      	adds	r3, #33	@ 0x21
 8003450:	4a48      	ldr	r2, [pc, #288]	@ (8003574 <TurnTask+0x380>)
 8003452:	5cd1      	ldrb	r1, [r2, r3]
 8003454:	4a48      	ldr	r2, [pc, #288]	@ (8003578 <TurnTask+0x384>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	3314      	adds	r3, #20
 800345c:	460a      	mov	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPos.u8t[i] = rxdata_servo[37+i];
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3325      	adds	r3, #37	@ 0x25
 8003464:	4a43      	ldr	r2, [pc, #268]	@ (8003574 <TurnTask+0x380>)
 8003466:	5cd1      	ldrb	r1, [r2, r3]
 8003468:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <TurnTask+0x384>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	3318      	adds	r3, #24
 8003470:	460a      	mov	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoYawPos.u8t[i] = rxdata_servo[41+i];
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3329      	adds	r3, #41	@ 0x29
 8003478:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <TurnTask+0x380>)
 800347a:	5cd1      	ldrb	r1, [r2, r3]
 800347c:	4a3e      	ldr	r2, [pc, #248]	@ (8003578 <TurnTask+0x384>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	331c      	adds	r3, #28
 8003484:	460a      	mov	r2, r1
 8003486:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.ServoPitchPos.u8t[i] = rxdata_servo[45+i];
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	332d      	adds	r3, #45	@ 0x2d
 800348c:	4a39      	ldr	r2, [pc, #228]	@ (8003574 <TurnTask+0x380>)
 800348e:	5cd1      	ldrb	r1, [r2, r3]
 8003490:	4a39      	ldr	r2, [pc, #228]	@ (8003578 <TurnTask+0x384>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3320      	adds	r3, #32
 8003498:	460a      	mov	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.YawSpeed.u8t[i] = rxdata_servo[49+i];
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3331      	adds	r3, #49	@ 0x31
 80034a0:	4a34      	ldr	r2, [pc, #208]	@ (8003574 <TurnTask+0x380>)
 80034a2:	5cd1      	ldrb	r1, [r2, r3]
 80034a4:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <TurnTask+0x384>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	3324      	adds	r3, #36	@ 0x24
 80034ac:	460a      	mov	r2, r1
 80034ae:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.PitchSpeed.u8t[i] = rxdata_servo[53+i];
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3335      	adds	r3, #53	@ 0x35
 80034b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <TurnTask+0x380>)
 80034b6:	5cd1      	ldrb	r1, [r2, r3]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003578 <TurnTask+0x384>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	3328      	adds	r3, #40	@ 0x28
 80034c0:	460a      	mov	r2, r1
 80034c2:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXPosZero.u8t[i] = rxdata_servo[57+i];
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3339      	adds	r3, #57	@ 0x39
 80034c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003574 <TurnTask+0x380>)
 80034ca:	5cd1      	ldrb	r1, [r2, r3]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <TurnTask+0x384>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4413      	add	r3, r2
 80034d2:	332c      	adds	r3, #44	@ 0x2c
 80034d4:	460a      	mov	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYPosZero.u8t[i] = rxdata_servo[61+i];
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	333d      	adds	r3, #61	@ 0x3d
 80034dc:	4a25      	ldr	r2, [pc, #148]	@ (8003574 <TurnTask+0x380>)
 80034de:	5cd1      	ldrb	r1, [r2, r3]
 80034e0:	4a25      	ldr	r2, [pc, #148]	@ (8003578 <TurnTask+0x384>)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	3330      	adds	r3, #48	@ 0x30
 80034e8:	460a      	mov	r2, r1
 80034ea:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnYawOutput.u8t[i] = rxdata_servo[65+i];
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3341      	adds	r3, #65	@ 0x41
 80034f0:	4a20      	ldr	r2, [pc, #128]	@ (8003574 <TurnTask+0x380>)
 80034f2:	5cd1      	ldrb	r1, [r2, r3]
 80034f4:	4a20      	ldr	r2, [pc, #128]	@ (8003578 <TurnTask+0x384>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	3334      	adds	r3, #52	@ 0x34
 80034fc:	460a      	mov	r2, r1
 80034fe:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.TurnPitchOutput.u8t[i] = rxdata_servo[69+i];
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3345      	adds	r3, #69	@ 0x45
 8003504:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <TurnTask+0x380>)
 8003506:	5cd1      	ldrb	r1, [r2, r3]
 8003508:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <TurnTask+0x384>)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	3338      	adds	r3, #56	@ 0x38
 8003510:	460a      	mov	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMXOutput.u8t[i] = rxdata_servo[73+i];
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3349      	adds	r3, #73	@ 0x49
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <TurnTask+0x380>)
 800351a:	5cd1      	ldrb	r1, [r2, r3]
 800351c:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <TurnTask+0x384>)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	333c      	adds	r3, #60	@ 0x3c
 8003524:	460a      	mov	r2, r1
 8003526:	701a      	strb	r2, [r3, #0]
		   ServoRevTypedef.FSMYOutput.u8t[i] = rxdata_servo[77+i];
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	334d      	adds	r3, #77	@ 0x4d
 800352c:	4a11      	ldr	r2, [pc, #68]	@ (8003574 <TurnTask+0x380>)
 800352e:	5cd1      	ldrb	r1, [r2, r3]
 8003530:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <TurnTask+0x384>)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	3340      	adds	r3, #64	@ 0x40
 8003538:	460a      	mov	r2, r1
 800353a:	701a      	strb	r2, [r3, #0]
		 for(int i = 0;i < 4;i++)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b03      	cmp	r3, #3
 8003546:	dd81      	ble.n	800344c <TurnTask+0x258>
		   #endif
		 }

		 ServoRevTypedef.ServoCrc                     =  rxdata_servo[81];
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <TurnTask+0x380>)
 800354a:	f893 2051 	ldrb.w	r2, [r3, #81]	@ 0x51
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <TurnTask+0x384>)
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		 ServoRevTypedef.ServoCheck                   =  rxdata_servo[82];
 8003554:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <TurnTask+0x380>)
 8003556:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 800355a:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <TurnTask+0x384>)
 800355c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
//		         			  	HAL_UART_Transmit_DMA(&huart6, msg2, 12);
//		         			  			  osDelay(3000);
//		         uint8_t msg4[8] = {0xaa, 0x01, 0x08, 0x0f, 0x03, 0x00, 0x32, 0x9d};
//		         HAL_UART_Transmit(&huart6, msg4, 8,0xff);

		        memset(rxdata_servo,0,sizeof(rxdata_servo));
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	2100      	movs	r1, #0
 8003564:	4803      	ldr	r0, [pc, #12]	@ (8003574 <TurnTask+0x380>)
 8003566:	f022 f871 	bl	802564c <memset>
//		  HAL_UART_Transmit_DMA(&huart5, rxdata_servo, rxSize);
	  }
    osDelay(20);
 800356a:	2014      	movs	r0, #20
 800356c:	f00f f8e2 	bl	8012734 <osDelay>
	  if(osSemaphoreWait(BinaryServoHandle, 10) == osOK && taskTurnBegin == pdTRUE)
 8003570:	e644      	b.n	80031fc <TurnTask+0x8>
 8003572:	bf00      	nop
 8003574:	30004b04 	.word	0x30004b04
 8003578:	24000458 	.word	0x24000458

0800357c <ImgCuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgCuTask */
void ImgCuTask(void const * argument)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgCuTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 8003584:	4b63      	ldr	r3, [pc, #396]	@ (8003714 <ImgCuTask+0x198>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	210a      	movs	r1, #10
 800358a:	4618      	mov	r0, r3
 800358c:	f00f f9b4 	bl	80128f8 <osSemaphoreWait>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 80b9 	bne.w	800370a <ImgCuTask+0x18e>
 8003598:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <ImgCuTask+0x19c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	f040 80b4 	bne.w	800370a <ImgCuTask+0x18e>
	  {
		ImgRecvDataTypedef_CU.code1.SelfCheck     = (rxdata_cu[3] & bit(0)) ? 1 : 0;
 80035a2:	4b5e      	ldr	r3, [pc, #376]	@ (800371c <ImgCuTask+0x1a0>)
 80035a4:	78db      	ldrb	r3, [r3, #3]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003720 <ImgCuTask+0x1a4>)
 80035ae:	701a      	strb	r2, [r3, #0]
		ImgRecvDataTypedef_CU.code1.Standby       = (rxdata_cu[3] & bit(1)) ? 1 : 0;
 80035b0:	4b5a      	ldr	r3, [pc, #360]	@ (800371c <ImgCuTask+0x1a0>)
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	105b      	asrs	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b58      	ldr	r3, [pc, #352]	@ (8003720 <ImgCuTask+0x1a4>)
 80035c0:	705a      	strb	r2, [r3, #1]
		ImgRecvDataTypedef_CU.code1.AutoTrack     = (rxdata_cu[3] & bit(2)) ? 1 : 0;
 80035c2:	4b56      	ldr	r3, [pc, #344]	@ (800371c <ImgCuTask+0x1a0>)
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	109b      	asrs	r3, r3, #2
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <ImgCuTask+0x1a4>)
 80035d2:	709a      	strb	r2, [r3, #2]
		ImgRecvDataTypedef_CU.code1.ManualTrack   = (rxdata_cu[3] & bit(3)) ? 1 : 0;
 80035d4:	4b51      	ldr	r3, [pc, #324]	@ (800371c <ImgCuTask+0x1a0>)
 80035d6:	78db      	ldrb	r3, [r3, #3]
 80035d8:	10db      	asrs	r3, r3, #3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003720 <ImgCuTask+0x1a4>)
 80035e4:	70da      	strb	r2, [r3, #3]

		// uart2_printf("selfcheck:%d,standby:%d,autotrack:%d,manualtrack:%d\r\n",ImgRecvDataTypedef_CU.code1.SelfCheck,ImgRecvDataTypedef_CU.code1.Standby,ImgRecvDataTypedef_CU.code1.AutoTrack,ImgRecvDataTypedef_CU.code1.ManualTrack);
		ImgRecvDataTypedef_CU.code2.CheckState    = (rxdata_cu[4] & bit(0)) ? 1 : 0;
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <ImgCuTask+0x1a0>)
 80035e8:	791b      	ldrb	r3, [r3, #4]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <ImgCuTask+0x1a4>)
 80035f2:	711a      	strb	r2, [r3, #4]
		ImgRecvDataTypedef_CU.code2.InitState     = (rxdata_cu[4] & bit(1)) ? 1 : 0;
 80035f4:	4b49      	ldr	r3, [pc, #292]	@ (800371c <ImgCuTask+0x1a0>)
 80035f6:	791b      	ldrb	r3, [r3, #4]
 80035f8:	105b      	asrs	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <ImgCuTask+0x1a4>)
 8003604:	715a      	strb	r2, [r3, #5]
		ImgRecvDataTypedef_CU.code2.NormalTrack   = (rxdata_cu[4] & bit(2)) ? 1 : 0;
 8003606:	4b45      	ldr	r3, [pc, #276]	@ (800371c <ImgCuTask+0x1a0>)
 8003608:	791b      	ldrb	r3, [r3, #4]
 800360a:	109b      	asrs	r3, r3, #2
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <ImgCuTask+0x1a4>)
 8003616:	719a      	strb	r2, [r3, #6]
		ImgRecvDataTypedef_CU.code2.RememberTrack = (rxdata_cu[4] & bit(3)) ? 1 : 0;
 8003618:	4b40      	ldr	r3, [pc, #256]	@ (800371c <ImgCuTask+0x1a0>)
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <ImgCuTask+0x1a4>)
 8003628:	71da      	strb	r2, [r3, #7]
		ImgRecvDataTypedef_CU.code2.TrackLose     = (rxdata_cu[4] & bit(4)) ? 1 : 0;
 800362a:	4b3c      	ldr	r3, [pc, #240]	@ (800371c <ImgCuTask+0x1a0>)
 800362c:	791b      	ldrb	r3, [r3, #4]
 800362e:	111b      	asrs	r3, r3, #4
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <ImgCuTask+0x1a4>)
 800363a:	721a      	strb	r2, [r3, #8]
		pcSend.cuEnable = ImgRecvDataTypedef_CU.code2.TrackLose;
 800363c:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <ImgCuTask+0x1a4>)
 800363e:	7a1a      	ldrb	r2, [r3, #8]
 8003640:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <ImgCuTask+0x1a8>)
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		
		// uart2_printf("checkstate:%d,initstate:%d,normaltrack:%d,remembertrack:%d,tracklose:%d\r\n",ImgRecvDataTypedef_CU.code2.CheckState,ImgRecvDataTypedef_CU.code2.InitState,ImgRecvDataTypedef_CU.code2.NormalTrack,ImgRecvDataTypedef_CU.code2.RememberTrack,ImgRecvDataTypedef_CU.code2.TrackLose);

		ImgRecvDataTypedef_CU.WorkState           = rxdata_cu[5];
 8003646:	4b35      	ldr	r3, [pc, #212]	@ (800371c <ImgCuTask+0x1a0>)
 8003648:	795a      	ldrb	r2, [r3, #5]
 800364a:	4b35      	ldr	r3, [pc, #212]	@ (8003720 <ImgCuTask+0x1a4>)
 800364c:	72da      	strb	r2, [r3, #11]

		ImgRecvDataTypedef_CU.HardVersion         = (uint8_t)(rxdata_cu[8] & 00000111);
 800364e:	4b33      	ldr	r3, [pc, #204]	@ (800371c <ImgCuTask+0x1a0>)
 8003650:	7a1b      	ldrb	r3, [r3, #8]
 8003652:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4b31      	ldr	r3, [pc, #196]	@ (8003720 <ImgCuTask+0x1a4>)
 800365a:	735a      	strb	r2, [r3, #13]
		ImgRecvDataTypedef_CU.SoftVersion         = (uint8_t)(rxdata_cu[8] & 01111000);
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <ImgCuTask+0x1a4>)
 800365e:	2200      	movs	r2, #0
 8003660:	731a      	strb	r2, [r3, #12]

		ImgRecvDataTypedef_CU.ImgCount            = rxdata_cu[7] << 8 | rxdata_cu[6];
 8003662:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <ImgCuTask+0x1a0>)
 8003664:	79db      	ldrb	r3, [r3, #7]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	b21a      	sxth	r2, r3
 800366a:	4b2c      	ldr	r3, [pc, #176]	@ (800371c <ImgCuTask+0x1a0>)
 800366c:	799b      	ldrb	r3, [r3, #6]
 800366e:	b21b      	sxth	r3, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	b21b      	sxth	r3, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	4b2a      	ldr	r3, [pc, #168]	@ (8003720 <ImgCuTask+0x1a4>)
 8003678:	81da      	strh	r2, [r3, #14]
		ImgRecvDataTypedef_CU.DataCount           = rxdata_cu[10] << 8 | rxdata_cu[9];
 800367a:	4b28      	ldr	r3, [pc, #160]	@ (800371c <ImgCuTask+0x1a0>)
 800367c:	7a9b      	ldrb	r3, [r3, #10]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	b21a      	sxth	r2, r3
 8003682:	4b26      	ldr	r3, [pc, #152]	@ (800371c <ImgCuTask+0x1a0>)
 8003684:	7a5b      	ldrb	r3, [r3, #9]
 8003686:	b21b      	sxth	r3, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	b21b      	sxth	r3, r3
 800368c:	b29a      	uxth	r2, r3
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <ImgCuTask+0x1a4>)
 8003690:	821a      	strh	r2, [r3, #16]

		int buff[2] = {0,0};
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
		buff[0]							          = (rxdata_cu[15] << 28 | rxdata_cu[14] << 21 | rxdata_cu[13] << 14 | rxdata_cu[12] << 7 | rxdata_cu[11]);
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <ImgCuTask+0x1a0>)
 800369c:	7bdb      	ldrb	r3, [r3, #15]
 800369e:	071a      	lsls	r2, r3, #28
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <ImgCuTask+0x1a0>)
 80036a2:	7b9b      	ldrb	r3, [r3, #14]
 80036a4:	055b      	lsls	r3, r3, #21
 80036a6:	431a      	orrs	r2, r3
 80036a8:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <ImgCuTask+0x1a0>)
 80036aa:	7b5b      	ldrb	r3, [r3, #13]
 80036ac:	039b      	lsls	r3, r3, #14
 80036ae:	431a      	orrs	r2, r3
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <ImgCuTask+0x1a0>)
 80036b2:	7b1b      	ldrb	r3, [r3, #12]
 80036b4:	01db      	lsls	r3, r3, #7
 80036b6:	4313      	orrs	r3, r2
 80036b8:	4a18      	ldr	r2, [pc, #96]	@ (800371c <ImgCuTask+0x1a0>)
 80036ba:	7ad2      	ldrb	r2, [r2, #11]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
		buff[1]            						  = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]);
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <ImgCuTask+0x1a0>)
 80036c2:	7d1b      	ldrb	r3, [r3, #20]
 80036c4:	071a      	lsls	r2, r3, #28
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <ImgCuTask+0x1a0>)
 80036c8:	7cdb      	ldrb	r3, [r3, #19]
 80036ca:	055b      	lsls	r3, r3, #21
 80036cc:	431a      	orrs	r2, r3
 80036ce:	4b13      	ldr	r3, [pc, #76]	@ (800371c <ImgCuTask+0x1a0>)
 80036d0:	7c9b      	ldrb	r3, [r3, #18]
 80036d2:	039b      	lsls	r3, r3, #14
 80036d4:	431a      	orrs	r2, r3
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <ImgCuTask+0x1a0>)
 80036d8:	7c5b      	ldrb	r3, [r3, #17]
 80036da:	01db      	lsls	r3, r3, #7
 80036dc:	4313      	orrs	r3, r2
 80036de:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <ImgCuTask+0x1a0>)
 80036e0:	7c12      	ldrb	r2, [r2, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
		ImgRecvDataTypedef_CU.Offset_X            = *((float *)&buff[0]);
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <ImgCuTask+0x1a4>)
 80036ee:	6153      	str	r3, [r2, #20]
		ImgRecvDataTypedef_CU.Offset_Y            = *((float *)&buff[1]);
 80036f0:	f107 0308 	add.w	r3, r7, #8
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <ImgCuTask+0x1a4>)
 80036fa:	6193      	str	r3, [r2, #24]
		        // ImgRecvDataTypedef_CU.Offset_Y            = (rxdata_cu[20] << 28 | rxdata_cu[19] << 21 | rxdata_cu[18] << 14 | rxdata_cu[17] << 7 | rxdata_cu[16]) / 1.f;

//		        char msg[128];
		        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_CU.Offset_X,ImgRecvDataTypedef_CU.Offset_Y);
		        // HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, strlen(msg));
		  memset(rxdata_cu,0,rxSize);
 80036fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <ImgCuTask+0x1ac>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	4805      	ldr	r0, [pc, #20]	@ (800371c <ImgCuTask+0x1a0>)
 8003706:	f021 ffa1 	bl	802564c <memset>
	  }
    osDelay(10);
 800370a:	200a      	movs	r0, #10
 800370c:	f00f f812 	bl	8012734 <osDelay>
	  if(osSemaphoreWait(BinaryCuHandle, 10) == osOK && taskCuBegin == pdTRUE)
 8003710:	e738      	b.n	8003584 <ImgCuTask+0x8>
 8003712:	bf00      	nop
 8003714:	2400059c 	.word	0x2400059c
 8003718:	24000570 	.word	0x24000570
 800371c:	30004d04 	.word	0x30004d04
 8003720:	24000408 	.word	0x24000408
 8003724:	2400051c 	.word	0x2400051c
 8003728:	24000568 	.word	0x24000568

0800372c <ImgJingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ImgJingTask */
void ImgJingTask(void const * argument)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ImgJingTask */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 8003734:	4b63      	ldr	r3, [pc, #396]	@ (80038c4 <ImgJingTask+0x198>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	210a      	movs	r1, #10
 800373a:	4618      	mov	r0, r3
 800373c:	f00f f8dc 	bl	80128f8 <osSemaphoreWait>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 80b9 	bne.w	80038ba <ImgJingTask+0x18e>
 8003748:	4b5f      	ldr	r3, [pc, #380]	@ (80038c8 <ImgJingTask+0x19c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 80b4 	bne.w	80038ba <ImgJingTask+0x18e>
	  {
		  	ImgRecvDataTypedef_JING.code1.SelfCheck     = (rxdata_jing[3] & bit(0)) ? 1 : 0;
 8003752:	4b5e      	ldr	r3, [pc, #376]	@ (80038cc <ImgJingTask+0x1a0>)
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b5c      	ldr	r3, [pc, #368]	@ (80038d0 <ImgJingTask+0x1a4>)
 800375e:	701a      	strb	r2, [r3, #0]
	        ImgRecvDataTypedef_JING.code1.Standby       = (rxdata_jing[3] & bit(1)) ? 1 : 0;
 8003760:	4b5a      	ldr	r3, [pc, #360]	@ (80038cc <ImgJingTask+0x1a0>)
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	105b      	asrs	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4b58      	ldr	r3, [pc, #352]	@ (80038d0 <ImgJingTask+0x1a4>)
 8003770:	705a      	strb	r2, [r3, #1]
	        ImgRecvDataTypedef_JING.code1.AutoTrack     = (rxdata_jing[3] & bit(2)) ? 1 : 0;
 8003772:	4b56      	ldr	r3, [pc, #344]	@ (80038cc <ImgJingTask+0x1a0>)
 8003774:	78db      	ldrb	r3, [r3, #3]
 8003776:	109b      	asrs	r3, r3, #2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b53      	ldr	r3, [pc, #332]	@ (80038d0 <ImgJingTask+0x1a4>)
 8003782:	709a      	strb	r2, [r3, #2]
	        ImgRecvDataTypedef_JING.code1.ManualTrack   = (rxdata_jing[3] & bit(3)) ? 1 : 0;
 8003784:	4b51      	ldr	r3, [pc, #324]	@ (80038cc <ImgJingTask+0x1a0>)
 8003786:	78db      	ldrb	r3, [r3, #3]
 8003788:	10db      	asrs	r3, r3, #3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b4f      	ldr	r3, [pc, #316]	@ (80038d0 <ImgJingTask+0x1a4>)
 8003794:	70da      	strb	r2, [r3, #3]

	        ImgRecvDataTypedef_JING.code2.CheckState    = (rxdata_jing[4] & bit(0)) ? 1 : 0;
 8003796:	4b4d      	ldr	r3, [pc, #308]	@ (80038cc <ImgJingTask+0x1a0>)
 8003798:	791b      	ldrb	r3, [r3, #4]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b4b      	ldr	r3, [pc, #300]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037a2:	711a      	strb	r2, [r3, #4]
	        ImgRecvDataTypedef_JING.code2.InitState     = (rxdata_jing[4] & bit(1)) ? 1 : 0;
 80037a4:	4b49      	ldr	r3, [pc, #292]	@ (80038cc <ImgJingTask+0x1a0>)
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	105b      	asrs	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037b4:	715a      	strb	r2, [r3, #5]
	        ImgRecvDataTypedef_JING.code2.NormalTrack   = (rxdata_jing[4] & bit(2)) ? 1 : 0;
 80037b6:	4b45      	ldr	r3, [pc, #276]	@ (80038cc <ImgJingTask+0x1a0>)
 80037b8:	791b      	ldrb	r3, [r3, #4]
 80037ba:	109b      	asrs	r3, r3, #2
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b42      	ldr	r3, [pc, #264]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037c6:	719a      	strb	r2, [r3, #6]
	        ImgRecvDataTypedef_JING.code2.RememberTrack = (rxdata_jing[4] & bit(3)) ? 1 : 0;
 80037c8:	4b40      	ldr	r3, [pc, #256]	@ (80038cc <ImgJingTask+0x1a0>)
 80037ca:	791b      	ldrb	r3, [r3, #4]
 80037cc:	10db      	asrs	r3, r3, #3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4b3e      	ldr	r3, [pc, #248]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037d8:	71da      	strb	r2, [r3, #7]
	        ImgRecvDataTypedef_JING.code2.TrackLose     = (rxdata_jing[4] & bit(4)) ? 1 : 0;
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <ImgJingTask+0x1a0>)
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	111b      	asrs	r3, r3, #4
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037ea:	721a      	strb	r2, [r3, #8]
			pcSend.jingEnable = ImgRecvDataTypedef_JING.code2.TrackLose;
 80037ec:	4b38      	ldr	r3, [pc, #224]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037ee:	7a1a      	ldrb	r2, [r3, #8]
 80037f0:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <ImgJingTask+0x1a8>)
 80037f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	        ImgRecvDataTypedef_JING.WorkState           = rxdata_jing[5];
 80037f6:	4b35      	ldr	r3, [pc, #212]	@ (80038cc <ImgJingTask+0x1a0>)
 80037f8:	795a      	ldrb	r2, [r3, #5]
 80037fa:	4b35      	ldr	r3, [pc, #212]	@ (80038d0 <ImgJingTask+0x1a4>)
 80037fc:	72da      	strb	r2, [r3, #11]

	        ImgRecvDataTypedef_JING.HardVersion         = (uint8_t)(rxdata_jing[8] & 00000111);
 80037fe:	4b33      	ldr	r3, [pc, #204]	@ (80038cc <ImgJingTask+0x1a0>)
 8003800:	7a1b      	ldrb	r3, [r3, #8]
 8003802:	f003 0349 	and.w	r3, r3, #73	@ 0x49
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <ImgJingTask+0x1a4>)
 800380a:	735a      	strb	r2, [r3, #13]
	        ImgRecvDataTypedef_JING.SoftVersion         = (uint8_t)(rxdata_jing[8] & 01111000);
 800380c:	4b30      	ldr	r3, [pc, #192]	@ (80038d0 <ImgJingTask+0x1a4>)
 800380e:	2200      	movs	r2, #0
 8003810:	731a      	strb	r2, [r3, #12]

	        ImgRecvDataTypedef_JING.ImgCount            = rxdata_jing[7] << 8 | rxdata_jing[6];
 8003812:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <ImgJingTask+0x1a0>)
 8003814:	79db      	ldrb	r3, [r3, #7]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	b21a      	sxth	r2, r3
 800381a:	4b2c      	ldr	r3, [pc, #176]	@ (80038cc <ImgJingTask+0x1a0>)
 800381c:	799b      	ldrb	r3, [r3, #6]
 800381e:	b21b      	sxth	r3, r3
 8003820:	4313      	orrs	r3, r2
 8003822:	b21b      	sxth	r3, r3
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <ImgJingTask+0x1a4>)
 8003828:	81da      	strh	r2, [r3, #14]
	        ImgRecvDataTypedef_JING.DataCount           = rxdata_jing[10] << 8 | rxdata_jing[9];
 800382a:	4b28      	ldr	r3, [pc, #160]	@ (80038cc <ImgJingTask+0x1a0>)
 800382c:	7a9b      	ldrb	r3, [r3, #10]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b21a      	sxth	r2, r3
 8003832:	4b26      	ldr	r3, [pc, #152]	@ (80038cc <ImgJingTask+0x1a0>)
 8003834:	7a5b      	ldrb	r3, [r3, #9]
 8003836:	b21b      	sxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	b21b      	sxth	r3, r3
 800383c:	b29a      	uxth	r2, r3
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <ImgJingTask+0x1a4>)
 8003840:	821a      	strh	r2, [r3, #16]
	        
			int buff[2] = {0,0};
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
			buff[0]							            = (rxdata_jing[15] << 28 | rxdata_jing[14] << 21 | rxdata_jing[13] << 14 | rxdata_jing[12] << 7 | rxdata_jing[11]);
 800384a:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <ImgJingTask+0x1a0>)
 800384c:	7bdb      	ldrb	r3, [r3, #15]
 800384e:	071a      	lsls	r2, r3, #28
 8003850:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <ImgJingTask+0x1a0>)
 8003852:	7b9b      	ldrb	r3, [r3, #14]
 8003854:	055b      	lsls	r3, r3, #21
 8003856:	431a      	orrs	r2, r3
 8003858:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <ImgJingTask+0x1a0>)
 800385a:	7b5b      	ldrb	r3, [r3, #13]
 800385c:	039b      	lsls	r3, r3, #14
 800385e:	431a      	orrs	r2, r3
 8003860:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <ImgJingTask+0x1a0>)
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	01db      	lsls	r3, r3, #7
 8003866:	4313      	orrs	r3, r2
 8003868:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <ImgJingTask+0x1a0>)
 800386a:	7ad2      	ldrb	r2, [r2, #11]
 800386c:	4313      	orrs	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
	        buff[1]            							= (rxdata_jing[20] << 28 | rxdata_jing[19] << 21 | rxdata_jing[18] << 14 | rxdata_jing[17] << 7 | rxdata_jing[16]);
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <ImgJingTask+0x1a0>)
 8003872:	7d1b      	ldrb	r3, [r3, #20]
 8003874:	071a      	lsls	r2, r3, #28
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <ImgJingTask+0x1a0>)
 8003878:	7cdb      	ldrb	r3, [r3, #19]
 800387a:	055b      	lsls	r3, r3, #21
 800387c:	431a      	orrs	r2, r3
 800387e:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <ImgJingTask+0x1a0>)
 8003880:	7c9b      	ldrb	r3, [r3, #18]
 8003882:	039b      	lsls	r3, r3, #14
 8003884:	431a      	orrs	r2, r3
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <ImgJingTask+0x1a0>)
 8003888:	7c5b      	ldrb	r3, [r3, #17]
 800388a:	01db      	lsls	r3, r3, #7
 800388c:	4313      	orrs	r3, r2
 800388e:	4a0f      	ldr	r2, [pc, #60]	@ (80038cc <ImgJingTask+0x1a0>)
 8003890:	7c12      	ldrb	r2, [r2, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
			ImgRecvDataTypedef_JING.Offset_X            = *((float *)&buff[0]);
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0c      	ldr	r2, [pc, #48]	@ (80038d0 <ImgJingTask+0x1a4>)
 800389e:	6153      	str	r3, [r2, #20]
	        ImgRecvDataTypedef_JING.Offset_Y            = *((float *)&buff[1]);
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	3304      	adds	r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a09      	ldr	r2, [pc, #36]	@ (80038d0 <ImgJingTask+0x1a4>)
 80038aa:	6193      	str	r3, [r2, #24]
			// uart_printf("workstate:%d,hardversion:%d,softversion:%d,imgcount:%d,datacount:%d,offsetx:%.2f,offsety:%.2f\r\n",ImgRecvDataTypedef_JING.WorkState,ImgRecvDataTypedef_JING.HardVersion,ImgRecvDataTypedef_JING.SoftVersion,ImgRecvDataTypedef_JING.ImgCount,ImgRecvDataTypedef_JING.DataCount,ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);

//	        char msg[128];
	        // sprintf(msg,"x:%.2f,y:%.2f",ImgRecvDataTypedef_JING.Offset_X,ImgRecvDataTypedef_JING.Offset_Y);
//	         uart_printf("%s",msg);
	        memset(rxdata_cu,0,rxSize);
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <ImgJingTask+0x1ac>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	2100      	movs	r1, #0
 80038b4:	4809      	ldr	r0, [pc, #36]	@ (80038dc <ImgJingTask+0x1b0>)
 80038b6:	f021 fec9 	bl	802564c <memset>
	  }
    osDelay(10);
 80038ba:	200a      	movs	r0, #10
 80038bc:	f00e ff3a 	bl	8012734 <osDelay>
	  if(osSemaphoreWait(BinaryJingHandle, 10) == osOK && taskJingBegin == pdTRUE)
 80038c0:	e738      	b.n	8003734 <ImgJingTask+0x8>
 80038c2:	bf00      	nop
 80038c4:	240005a0 	.word	0x240005a0
 80038c8:	24000574 	.word	0x24000574
 80038cc:	30004e04 	.word	0x30004e04
 80038d0:	24000424 	.word	0x24000424
 80038d4:	2400051c 	.word	0x2400051c
 80038d8:	24000568 	.word	0x24000568
 80038dc:	30004d04 	.word	0x30004d04

080038e0 <FocusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FocusTask */
void FocusTask(void const * argument)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b0a6      	sub	sp, #152	@ 0x98
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FocusTask */

  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 80038e8:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <FocusTask+0x98>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	210a      	movs	r1, #10
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00f f802 	bl	80128f8 <osSemaphoreWait>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d13a      	bne.n	8003970 <FocusTask+0x90>
 80038fa:	4b20      	ldr	r3, [pc, #128]	@ (800397c <FocusTask+0x9c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d136      	bne.n	8003970 <FocusTask+0x90>
	  {
		  getFocusPos.u8t[3] = rxdata_focus[6];
 8003902:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <FocusTask+0xa0>)
 8003904:	799a      	ldrb	r2, [r3, #6]
 8003906:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <FocusTask+0xa4>)
 8003908:	70da      	strb	r2, [r3, #3]
		  getFocusPos.u8t[2] = rxdata_focus[7];
 800390a:	4b1d      	ldr	r3, [pc, #116]	@ (8003980 <FocusTask+0xa0>)
 800390c:	79da      	ldrb	r2, [r3, #7]
 800390e:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <FocusTask+0xa4>)
 8003910:	709a      	strb	r2, [r3, #2]
		  getFocusPos.u8t[1] = rxdata_focus[8];
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <FocusTask+0xa0>)
 8003914:	7a1a      	ldrb	r2, [r3, #8]
 8003916:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <FocusTask+0xa4>)
 8003918:	705a      	strb	r2, [r3, #1]
		  getFocusPos.u8t[0] = rxdata_focus[9];
 800391a:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <FocusTask+0xa0>)
 800391c:	7a5a      	ldrb	r2, [r3, #9]
 800391e:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <FocusTask+0xa4>)
 8003920:	701a      	strb	r2, [r3, #0]

		        char msg[128];
		        sprintf(msg,"%02x,%02x,%02x,%02x,pos:%f",rxdata_focus[6],rxdata_focus[7],rxdata_focus[8],rxdata_focus[9],getFocusPos.f);
 8003922:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <FocusTask+0xa0>)
 8003924:	799b      	ldrb	r3, [r3, #6]
 8003926:	461c      	mov	r4, r3
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <FocusTask+0xa0>)
 800392a:	79db      	ldrb	r3, [r3, #7]
 800392c:	461d      	mov	r5, r3
 800392e:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <FocusTask+0xa0>)
 8003930:	7a1b      	ldrb	r3, [r3, #8]
 8003932:	461a      	mov	r2, r3
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <FocusTask+0xa0>)
 8003936:	7a5b      	ldrb	r3, [r3, #9]
 8003938:	4619      	mov	r1, r3
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <FocusTask+0xa4>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003944:	f107 0008 	add.w	r0, r7, #8
 8003948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800394c:	9101      	str	r1, [sp, #4]
 800394e:	9200      	str	r2, [sp, #0]
 8003950:	462b      	mov	r3, r5
 8003952:	4622      	mov	r2, r4
 8003954:	490c      	ldr	r1, [pc, #48]	@ (8003988 <FocusTask+0xa8>)
 8003956:	f021 fd9f 	bl	8025498 <siprintf>
		        // HAL_UART_Transmit(&huart5, (uint8_t *)msg, strlen(msg), 0xff);
				uart_printf("%s",msg);
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4619      	mov	r1, r3
 8003960:	480a      	ldr	r0, [pc, #40]	@ (800398c <FocusTask+0xac>)
 8003962:	f001 fad3 	bl	8004f0c <uart_printf>
		        memset(rxdata_focus,0,sizeof(rxdata_focus));
 8003966:	220b      	movs	r2, #11
 8003968:	2100      	movs	r1, #0
 800396a:	4805      	ldr	r0, [pc, #20]	@ (8003980 <FocusTask+0xa0>)
 800396c:	f021 fe6e 	bl	802564c <memset>
	  }

    osDelay(100);
 8003970:	2064      	movs	r0, #100	@ 0x64
 8003972:	f00e fedf 	bl	8012734 <osDelay>
	  if(osSemaphoreWait(BinaryFocusHandle, 10) == osOK && taskFocusBegin == pdTRUE)
 8003976:	e7b7      	b.n	80038e8 <FocusTask+0x8>
 8003978:	240005a4 	.word	0x240005a4
 800397c:	24000578 	.word	0x24000578
 8003980:	30004f04 	.word	0x30004f04
 8003984:	24000400 	.word	0x24000400
 8003988:	08029520 	.word	0x08029520
 800398c:	0802953c 	.word	0x0802953c

08003990 <RangefinderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RangefinderTask */
void RangefinderTask(void const * argument)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RangefinderTask */
	// TODO:掉电�???????要重新设�???????
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003998:	4b79      	ldr	r3, [pc, #484]	@ (8003b80 <RangefinderTask+0x1f0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	210a      	movs	r1, #10
 800399e:	4618      	mov	r0, r3
 80039a0:	f00e ffaa 	bl	80128f8 <osSemaphoreWait>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 80df 	bne.w	8003b6a <RangefinderTask+0x1da>
 80039ac:	4b75      	ldr	r3, [pc, #468]	@ (8003b84 <RangefinderTask+0x1f4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	f040 80da 	bne.w	8003b6a <RangefinderTask+0x1da>
		// for(int i = 0;i < rxSize;i++)
	  	// {
		// 	uart_printf("%02x ",rxdata_rangefinder[i]);
		// }

		  switch (rxdata_rangefinder[4])
 80039b6:	4b74      	ldr	r3, [pc, #464]	@ (8003b88 <RangefinderTask+0x1f8>)
 80039b8:	791b      	ldrb	r3, [r3, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	2b05      	cmp	r3, #5
 80039be:	f200 80ba 	bhi.w	8003b36 <RangefinderTask+0x1a6>
 80039c2:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <RangefinderTask+0x38>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039e1 	.word	0x080039e1
 80039cc:	08003a5b 	.word	0x08003a5b
 80039d0:	08003b37 	.word	0x08003b37
 80039d4:	08003a93 	.word	0x08003a93
 80039d8:	08003b37 	.word	0x08003b37
 80039dc:	08003ad3 	.word	0x08003ad3
		        {
		          case DeviceCheck:{
		            RangeFinderRevData.HuiBoValue = rxdata_rangefinder[6];
 80039e0:	4b69      	ldr	r3, [pc, #420]	@ (8003b88 <RangefinderTask+0x1f8>)
 80039e2:	799a      	ldrb	r2, [r3, #6]
 80039e4:	4b69      	ldr	r3, [pc, #420]	@ (8003b8c <RangefinderTask+0x1fc>)
 80039e6:	701a      	strb	r2, [r3, #0]
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[7] & bit(0) ? 1 : 0;
 80039e8:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <RangefinderTask+0x1f8>)
 80039ea:	79db      	ldrb	r3, [r3, #7]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b66      	ldr	r3, [pc, #408]	@ (8003b8c <RangefinderTask+0x1fc>)
 80039f4:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[7] & bit(1) ? 1 : 0;
 80039f6:	4b64      	ldr	r3, [pc, #400]	@ (8003b88 <RangefinderTask+0x1f8>)
 80039f8:	79db      	ldrb	r3, [r3, #7]
 80039fa:	105b      	asrs	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a06:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[7] & bit(2) ? 1 : 0;
 8003a08:	4b5f      	ldr	r3, [pc, #380]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a0a:	79db      	ldrb	r3, [r3, #7]
 8003a0c:	109b      	asrs	r3, r3, #2
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a18:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[7] & bit(3) ? 1 : 0;
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a1c:	79db      	ldrb	r3, [r3, #7]
 8003a1e:	10db      	asrs	r3, r3, #3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b58      	ldr	r3, [pc, #352]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a2a:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[7] & bit(6) ? 1 : 0;
 8003a2c:	4b56      	ldr	r3, [pc, #344]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a2e:	79db      	ldrb	r3, [r3, #7]
 8003a30:	119b      	asrs	r3, r3, #6
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b54      	ldr	r3, [pc, #336]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a3c:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[7] & bit(7) ? 1 : 0;
 8003a3e:	4b52      	ldr	r3, [pc, #328]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a40:	79db      	ldrb	r3, [r3, #7]
 8003a42:	09db      	lsrs	r3, r3, #7
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4b51      	ldr	r3, [pc, #324]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a48:	719a      	strb	r2, [r3, #6]
		            RangeFinderRevData.PowerState = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a4c:	7a1b      	ldrb	r3, [r3, #8]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a56:	71da      	strb	r2, [r3, #7]
		          }break;
 8003a58:	e06e      	b.n	8003b38 <RangefinderTask+0x1a8>
		          case SingleMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a5c:	799b      	ldrb	r3, [r3, #6]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a62:	79d2      	ldrb	r2, [r2, #7]
 8003a64:	4413      	add	r3, r2
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a6e:	4b46      	ldr	r3, [pc, #280]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a70:	7a1b      	ldrb	r3, [r3, #8]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003a7a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8003b78 <RangefinderTask+0x1e8>
 8003a7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003a82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a8a:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003a8c:	edc3 7a02 	vstr	s15, [r3, #8]

		          }break;
 8003a90:	e052      	b.n	8003b38 <RangefinderTask+0x1a8>
		          case MultiMeasure:{
		            RangeFinderRevData.Distance   = rxdata_rangefinder[6] * 256 + rxdata_rangefinder[7] + rxdata_rangefinder[8] * 0.1;
 8003a92:	4b3d      	ldr	r3, [pc, #244]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a94:	799b      	ldrb	r3, [r3, #6]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4a3b      	ldr	r2, [pc, #236]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003a9a:	79d2      	ldrb	r2, [r2, #7]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003aa6:	4b38      	ldr	r3, [pc, #224]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003aa8:	7a1b      	ldrb	r3, [r3, #8]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003ab2:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8003b78 <RangefinderTask+0x1e8>
 8003ab6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003aba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003abe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ac2:	4b32      	ldr	r3, [pc, #200]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003ac4:	edc3 7a02 	vstr	s15, [r3, #8]
					pcSend.rangefinder.f = RangeFinderRevData.Distance;
 8003ac8:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a30      	ldr	r2, [pc, #192]	@ (8003b90 <RangefinderTask+0x200>)
 8003ace:	6113      	str	r3, [r2, #16]
				}break;
 8003ad0:	e032      	b.n	8003b38 <RangefinderTask+0x1a8>
		          case DeviceError:{
		            RangeFinderRevData.FPGAState  = rxdata_rangefinder[8] & bit(0) ? 1 : 0;
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003ad4:	7a1b      	ldrb	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003ade:	705a      	strb	r2, [r3, #1]
		            RangeFinderRevData.RayState   = rxdata_rangefinder[8] & bit(1) ? 1 : 0;
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003ae2:	7a1b      	ldrb	r3, [r3, #8]
 8003ae4:	105b      	asrs	r3, r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003af0:	709a      	strb	r2, [r3, #2]
		            RangeFinderRevData.ZhuBoState = rxdata_rangefinder[8] & bit(2) ? 1 : 0;
 8003af2:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003af4:	7a1b      	ldrb	r3, [r3, #8]
 8003af6:	109b      	asrs	r3, r3, #2
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003b02:	70da      	strb	r2, [r3, #3]
		            RangeFinderRevData.HuiBoState = rxdata_rangefinder[8] & bit(3) ? 1 : 0;
 8003b04:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b06:	7a1b      	ldrb	r3, [r3, #8]
 8003b08:	10db      	asrs	r3, r3, #3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003b14:	711a      	strb	r2, [r3, #4]
		            RangeFinderRevData.TempState  = rxdata_rangefinder[8] & bit(6) ? 1 : 0;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b18:	7a1b      	ldrb	r3, [r3, #8]
 8003b1a:	119b      	asrs	r3, r3, #6
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003b26:	715a      	strb	r2, [r3, #5]
		            RangeFinderRevData.RayOn      = rxdata_rangefinder[8] & bit(7) ? 1 : 0;
 8003b28:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b2a:	7a1b      	ldrb	r3, [r3, #8]
 8003b2c:	09db      	lsrs	r3, r3, #7
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003b32:	719a      	strb	r2, [r3, #6]
		          }break;
 8003b34:	e000      	b.n	8003b38 <RangefinderTask+0x1a8>
		          default:
		            break;
 8003b36:	bf00      	nop
		        }
				// uart_printf("distance:%.2f\r\n",RangeFinderRevData.Distance);
				uart_printf("%x,%x,%x,%.2f\n",rxdata_rangefinder[6],rxdata_rangefinder[7],rxdata_rangefinder[8],RangeFinderRevData.Distance);
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b3a:	799b      	ldrb	r3, [r3, #6]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b40:	79db      	ldrb	r3, [r3, #7]
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b46:	7a1b      	ldrb	r3, [r3, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <RangefinderTask+0x1fc>)
 8003b4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b54:	ed8d 7b00 	vstr	d7, [sp]
 8003b58:	4603      	mov	r3, r0
 8003b5a:	480e      	ldr	r0, [pc, #56]	@ (8003b94 <RangefinderTask+0x204>)
 8003b5c:	f001 f9d6 	bl	8004f0c <uart_printf>
		//   char msg[128];
		//         sprintf(msg,"distance = %.2f\r\n",RangeFinderRevData.Distance);
		//         HAL_UART_Transmit_DMA(&huart5, (uint8_t*)msg, strlen(msg));
		        memset(rxdata_rangefinder,0,sizeof(rxdata_rangefinder));
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	2100      	movs	r1, #0
 8003b64:	4808      	ldr	r0, [pc, #32]	@ (8003b88 <RangefinderTask+0x1f8>)
 8003b66:	f021 fd71 	bl	802564c <memset>
	  }
    osDelay(10);
 8003b6a:	200a      	movs	r0, #10
 8003b6c:	f00e fde2 	bl	8012734 <osDelay>
	  if(osSemaphoreWait(BinaryRangefinderHandle, 10) == osOK && taskRangeBegin == pdTRUE)
 8003b70:	e712      	b.n	8003998 <RangefinderTask+0x8>
 8003b72:	bf00      	nop
 8003b74:	f3af 8000 	nop.w
 8003b78:	9999999a 	.word	0x9999999a
 8003b7c:	3fb99999 	.word	0x3fb99999
 8003b80:	240005a8 	.word	0x240005a8
 8003b84:	2400057c 	.word	0x2400057c
 8003b88:	30004f1c 	.word	0x30004f1c
 8003b8c:	24000440 	.word	0x24000440
 8003b90:	2400051c 	.word	0x2400051c
 8003b94:	08029540 	.word	0x08029540

08003b98 <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  UNUSED(Size);
  rxSize = Size;
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8003cdc <HAL_UARTEx_RxEventCallback+0x144>)
 8003baa:	701a      	strb	r2, [r3, #0]
//   static float fPm1, fPm2, fPm3;
// 	static int iPm1, iPm2, iPm3;
  if(huart == &huart5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x148>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f040 80c3 	bne.w	8003d3c <HAL_UARTEx_RxEventCallback+0x1a4>
  {
	  taskTurnBegin = pdTRUE;
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
	  if(rxbuff_servo[0] == 0xEB && rxbuff_servo[1] == 0x90 && rxbuff_servo[Size - 1] == 0xFE)
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2beb      	cmp	r3, #235	@ 0xeb
 8003bc2:	d122      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x72>
 8003bc4:	4b48      	ldr	r3, [pc, #288]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b90      	cmp	r3, #144	@ 0x90
 8003bca:	d11e      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x72>
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	4a45      	ldr	r2, [pc, #276]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8003bd6:	d118      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x72>
	  {
		  if(osSemaphoreRelease(BinaryServoHandle) == osOK)
 8003bd8:	4b44      	ldr	r3, [pc, #272]	@ (8003cec <HAL_UARTEx_RxEventCallback+0x154>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00e fed9 	bl	8012994 <osSemaphoreRelease>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d110      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0x72>
		  {
			  memcpy(rxdata_servo,rxbuff_servo,Size);
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	461a      	mov	r2, r3
 8003bec:	493e      	ldr	r1, [pc, #248]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003bee:	4840      	ldr	r0, [pc, #256]	@ (8003cf0 <HAL_UARTEx_RxEventCallback+0x158>)
 8003bf0:	f021 fdcd 	bl	802578e <memcpy>
			  memset(rxbuff_servo,0,Size);
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	483b      	ldr	r0, [pc, #236]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003bfc:	f021 fd26 	bl	802564c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c04:	483b      	ldr	r0, [pc, #236]	@ (8003cf4 <HAL_UARTEx_RxEventCallback+0x15c>)
 8003c06:	f007 feca 	bl	800b99e <HAL_GPIO_TogglePin>
		  }
	  }
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	4936      	ldr	r1, [pc, #216]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x150>)
 8003c0e:	4834      	ldr	r0, [pc, #208]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x148>)
 8003c10:	f00d fdf7 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 8003c14:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a38      	ldr	r2, [pc, #224]	@ (8003cfc <HAL_UARTEx_RxEventCallback+0x164>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04a      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a37      	ldr	r2, [pc, #220]	@ (8003d00 <HAL_UARTEx_RxEventCallback+0x168>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d045      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c28:	4b33      	ldr	r3, [pc, #204]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a35      	ldr	r2, [pc, #212]	@ (8003d04 <HAL_UARTEx_RxEventCallback+0x16c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d040      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c32:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_UARTEx_RxEventCallback+0x170>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d03b      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a32      	ldr	r2, [pc, #200]	@ (8003d0c <HAL_UARTEx_RxEventCallback+0x174>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d036      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c46:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a31      	ldr	r2, [pc, #196]	@ (8003d10 <HAL_UARTEx_RxEventCallback+0x178>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d031      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2f      	ldr	r2, [pc, #188]	@ (8003d14 <HAL_UARTEx_RxEventCallback+0x17c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02c      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c5a:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d18 <HAL_UARTEx_RxEventCallback+0x180>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d027      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c64:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <HAL_UARTEx_RxEventCallback+0x184>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c6e:	4b22      	ldr	r3, [pc, #136]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_UARTEx_RxEventCallback+0x188>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_UARTEx_RxEventCallback+0x18c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <HAL_UARTEx_RxEventCallback+0x190>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a26      	ldr	r2, [pc, #152]	@ (8003d2c <HAL_UARTEx_RxEventCallback+0x194>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003c96:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <HAL_UARTEx_RxEventCallback+0x198>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003ca0:	4b15      	ldr	r3, [pc, #84]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	@ (8003d34 <HAL_UARTEx_RxEventCallback+0x19c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_UARTEx_RxEventCallback+0x11c>
 8003caa:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d109      	bne.n	8003cc8 <HAL_UARTEx_RxEventCallback+0x130>
 8003cb4:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0208 	bic.w	r2, r2, #8
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f000 bcf2 	b.w	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_UARTEx_RxEventCallback+0x160>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]
// 	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
//  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd8:	f000 bce8 	b.w	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003cdc:	24000568 	.word	0x24000568
 8003ce0:	240008fc 	.word	0x240008fc
 8003ce4:	2400056c 	.word	0x2400056c
 8003ce8:	30004b84 	.word	0x30004b84
 8003cec:	24000598 	.word	0x24000598
 8003cf0:	30004b04 	.word	0x30004b04
 8003cf4:	58022000 	.word	0x58022000
 8003cf8:	24000d64 	.word	0x24000d64
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
  }else if(huart == &huart3){
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4b      	ldr	r2, [pc, #300]	@ (8003e6c <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	f040 80c1 	bne.w	8003ec8 <HAL_UARTEx_RxEventCallback+0x330>
	  taskCuBegin = pdTRUE;
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
	  if(rxbuff_cu[0] == 0xCC && rxbuff_cu[1] == 0xC0 && rxbuff_cu[Size - 1] == 0xBB)
 8003d4c:	4b49      	ldr	r3, [pc, #292]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2bcc      	cmp	r3, #204	@ 0xcc
 8003d52:	d122      	bne.n	8003d9a <HAL_UARTEx_RxEventCallback+0x202>
 8003d54:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d5a:	d11e      	bne.n	8003d9a <HAL_UARTEx_RxEventCallback+0x202>
 8003d5c:	887b      	ldrh	r3, [r7, #2]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4a44      	ldr	r2, [pc, #272]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	2bbb      	cmp	r3, #187	@ 0xbb
 8003d66:	d118      	bne.n	8003d9a <HAL_UARTEx_RxEventCallback+0x202>
		  if(osSemaphoreRelease(BinaryCuHandle) == osOK)
 8003d68:	4b43      	ldr	r3, [pc, #268]	@ (8003e78 <HAL_UARTEx_RxEventCallback+0x2e0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f00e fe11 	bl	8012994 <osSemaphoreRelease>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d110      	bne.n	8003d9a <HAL_UARTEx_RxEventCallback+0x202>
			  memcpy(rxdata_cu,rxbuff_cu,Size);
 8003d78:	887b      	ldrh	r3, [r7, #2]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	493d      	ldr	r1, [pc, #244]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d7e:	483f      	ldr	r0, [pc, #252]	@ (8003e7c <HAL_UARTEx_RxEventCallback+0x2e4>)
 8003d80:	f021 fd05 	bl	802578e <memcpy>
			  memset(rxbuff_cu,0,Size);
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	461a      	mov	r2, r3
 8003d88:	2100      	movs	r1, #0
 8003d8a:	483a      	ldr	r0, [pc, #232]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d8c:	f021 fc5e 	bl	802564c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003d90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d94:	483a      	ldr	r0, [pc, #232]	@ (8003e80 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8003d96:	f007 fe02 	bl	800b99e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	4935      	ldr	r1, [pc, #212]	@ (8003e74 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8003d9e:	4833      	ldr	r0, [pc, #204]	@ (8003e6c <HAL_UARTEx_RxEventCallback+0x2d4>)
 8003da0:	f00d fd2f 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003da4:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a37      	ldr	r2, [pc, #220]	@ (8003e88 <HAL_UARTEx_RxEventCallback+0x2f0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04a      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dae:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a36      	ldr	r2, [pc, #216]	@ (8003e8c <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d045      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003db8:	4b32      	ldr	r3, [pc, #200]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a34      	ldr	r2, [pc, #208]	@ (8003e90 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d040      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dc2:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a33      	ldr	r2, [pc, #204]	@ (8003e94 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d03b      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a31      	ldr	r2, [pc, #196]	@ (8003e98 <HAL_UARTEx_RxEventCallback+0x300>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d036      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a30      	ldr	r2, [pc, #192]	@ (8003e9c <HAL_UARTEx_RxEventCallback+0x304>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d031      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003de0:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea0 <HAL_UARTEx_RxEventCallback+0x308>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02c      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dea:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea4 <HAL_UARTEx_RxEventCallback+0x30c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d027      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003df4:	4b23      	ldr	r3, [pc, #140]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea8 <HAL_UARTEx_RxEventCallback+0x310>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003dfe:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2a      	ldr	r2, [pc, #168]	@ (8003eac <HAL_UARTEx_RxEventCallback+0x314>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01d      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e08:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <HAL_UARTEx_RxEventCallback+0x318>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e12:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a27      	ldr	r2, [pc, #156]	@ (8003eb4 <HAL_UARTEx_RxEventCallback+0x31c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <HAL_UARTEx_RxEventCallback+0x320>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e26:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a24      	ldr	r2, [pc, #144]	@ (8003ebc <HAL_UARTEx_RxEventCallback+0x324>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e30:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <HAL_UARTEx_RxEventCallback+0x328>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_UARTEx_RxEventCallback+0x2ac>
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a21      	ldr	r2, [pc, #132]	@ (8003ec4 <HAL_UARTEx_RxEventCallback+0x32c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d109      	bne.n	8003e58 <HAL_UARTEx_RxEventCallback+0x2c0>
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0208 	bic.w	r2, r2, #8
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f000 bc2a 	b.w	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	f000 bc20 	b.w	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003e6c:	24000b4c 	.word	0x24000b4c
 8003e70:	24000570 	.word	0x24000570
 8003e74:	30004d84 	.word	0x30004d84
 8003e78:	2400059c 	.word	0x2400059c
 8003e7c:	30004d04 	.word	0x30004d04
 8003e80:	58022000 	.word	0x58022000
 8003e84:	24001034 	.word	0x24001034
 8003e88:	40020010 	.word	0x40020010
 8003e8c:	40020028 	.word	0x40020028
 8003e90:	40020040 	.word	0x40020040
 8003e94:	40020058 	.word	0x40020058
 8003e98:	40020070 	.word	0x40020070
 8003e9c:	40020088 	.word	0x40020088
 8003ea0:	400200a0 	.word	0x400200a0
 8003ea4:	400200b8 	.word	0x400200b8
 8003ea8:	40020410 	.word	0x40020410
 8003eac:	40020428 	.word	0x40020428
 8003eb0:	40020440 	.word	0x40020440
 8003eb4:	40020458 	.word	0x40020458
 8003eb8:	40020470 	.word	0x40020470
 8003ebc:	40020488 	.word	0x40020488
 8003ec0:	400204a0 	.word	0x400204a0
 8003ec4:	400204b8 	.word	0x400204b8
  }else if(huart == &huart4){
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff4 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	f040 80bf 	bne.w	8004050 <HAL_UARTEx_RxEventCallback+0x4b8>
	  taskJingBegin = pdTRUE;
 8003ed2:	4b49      	ldr	r3, [pc, #292]	@ (8003ff8 <HAL_UARTEx_RxEventCallback+0x460>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
	  if(rxbuff_jing[0] == 0xCC && rxbuff_jing[1] == 0xC0 && rxbuff_jing[Size - 1] == 0xBB)
 8003ed8:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2bcc      	cmp	r3, #204	@ 0xcc
 8003ede:	d122      	bne.n	8003f26 <HAL_UARTEx_RxEventCallback+0x38e>
 8003ee0:	4b46      	ldr	r3, [pc, #280]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee6:	d11e      	bne.n	8003f26 <HAL_UARTEx_RxEventCallback+0x38e>
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	4a43      	ldr	r2, [pc, #268]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	2bbb      	cmp	r3, #187	@ 0xbb
 8003ef2:	d118      	bne.n	8003f26 <HAL_UARTEx_RxEventCallback+0x38e>
	  		  if(osSemaphoreRelease(BinaryJingHandle) == osOK)
 8003ef4:	4b42      	ldr	r3, [pc, #264]	@ (8004000 <HAL_UARTEx_RxEventCallback+0x468>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f00e fd4b 	bl	8012994 <osSemaphoreRelease>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d110      	bne.n	8003f26 <HAL_UARTEx_RxEventCallback+0x38e>
	  			  memcpy(rxdata_jing,rxbuff_jing,Size);
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	461a      	mov	r2, r3
 8003f08:	493c      	ldr	r1, [pc, #240]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003f0a:	483e      	ldr	r0, [pc, #248]	@ (8004004 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003f0c:	f021 fc3f 	bl	802578e <memcpy>
	  			  memset(rxbuff_jing,0,Size);
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	461a      	mov	r2, r3
 8003f14:	2100      	movs	r1, #0
 8003f16:	4839      	ldr	r0, [pc, #228]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003f18:	f021 fb98 	bl	802564c <memset>
	  			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003f1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f20:	4839      	ldr	r0, [pc, #228]	@ (8004008 <HAL_UARTEx_RxEventCallback+0x470>)
 8003f22:	f007 fd3c 	bl	800b99e <HAL_GPIO_TogglePin>
	  	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 8003f26:	2280      	movs	r2, #128	@ 0x80
 8003f28:	4934      	ldr	r1, [pc, #208]	@ (8003ffc <HAL_UARTEx_RxEventCallback+0x464>)
 8003f2a:	4832      	ldr	r0, [pc, #200]	@ (8003ff4 <HAL_UARTEx_RxEventCallback+0x45c>)
 8003f2c:	f00d fc69 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a36      	ldr	r2, [pc, #216]	@ (8004010 <HAL_UARTEx_RxEventCallback+0x478>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04a      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a35      	ldr	r2, [pc, #212]	@ (8004014 <HAL_UARTEx_RxEventCallback+0x47c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d045      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f44:	4b31      	ldr	r3, [pc, #196]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a33      	ldr	r2, [pc, #204]	@ (8004018 <HAL_UARTEx_RxEventCallback+0x480>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d040      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a32      	ldr	r2, [pc, #200]	@ (800401c <HAL_UARTEx_RxEventCallback+0x484>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f58:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a30      	ldr	r2, [pc, #192]	@ (8004020 <HAL_UARTEx_RxEventCallback+0x488>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d036      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2f      	ldr	r2, [pc, #188]	@ (8004024 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d031      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f6c:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2d      	ldr	r2, [pc, #180]	@ (8004028 <HAL_UARTEx_RxEventCallback+0x490>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02c      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800402c <HAL_UARTEx_RxEventCallback+0x494>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d027      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	@ (8004030 <HAL_UARTEx_RxEventCallback+0x498>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a29      	ldr	r2, [pc, #164]	@ (8004034 <HAL_UARTEx_RxEventCallback+0x49c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_UARTEx_RxEventCallback+0x4a4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003fa8:	4b18      	ldr	r3, [pc, #96]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a24      	ldr	r2, [pc, #144]	@ (8004040 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003fb2:	4b16      	ldr	r3, [pc, #88]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003fbc:	4b13      	ldr	r3, [pc, #76]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	@ (8004048 <HAL_UARTEx_RxEventCallback+0x4b0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_UARTEx_RxEventCallback+0x438>
 8003fc6:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a20      	ldr	r2, [pc, #128]	@ (800404c <HAL_UARTEx_RxEventCallback+0x4b4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <HAL_UARTEx_RxEventCallback+0x44a>
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e364      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b08      	ldr	r3, [pc, #32]	@ (800400c <HAL_UARTEx_RxEventCallback+0x474>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0204 	bic.w	r2, r2, #4
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	e35b      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8003ff4:	24000868 	.word	0x24000868
 8003ff8:	24000574 	.word	0x24000574
 8003ffc:	30004e84 	.word	0x30004e84
 8004000:	240005a0 	.word	0x240005a0
 8004004:	30004e04 	.word	0x30004e04
 8004008:	58022000 	.word	0x58022000
 800400c:	24000c74 	.word	0x24000c74
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
  }else if(huart == &huart6){
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a52      	ldr	r2, [pc, #328]	@ (800419c <HAL_UARTEx_RxEventCallback+0x604>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f040 80d3 	bne.w	8004200 <HAL_UARTEx_RxEventCallback+0x668>
	  taskFocusBegin = pdTRUE;
 800405a:	4b51      	ldr	r3, [pc, #324]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x608>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
	  if(rxbuff_focus[0] == 0xaa && rxbuff_focus[1] == 0x01 && rxbuff_focus[Size - 1] == checkData(rxbuff_focus, Size - 1))
 8004060:	4b50      	ldr	r3, [pc, #320]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2baa      	cmp	r3, #170	@ 0xaa
 8004066:	d131      	bne.n	80040cc <HAL_UARTEx_RxEventCallback+0x534>
 8004068:	4b4e      	ldr	r3, [pc, #312]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d12d      	bne.n	80040cc <HAL_UARTEx_RxEventCallback+0x534>
 8004070:	887b      	ldrh	r3, [r7, #2]
 8004072:	3b01      	subs	r3, #1
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 8004076:	5cd4      	ldrb	r4, [r2, r3]
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	4848      	ldr	r0, [pc, #288]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 8004084:	f7fc fcf0 	bl	8000a68 <checkData>
 8004088:	4603      	mov	r3, r0
 800408a:	429c      	cmp	r4, r3
 800408c:	d11e      	bne.n	80040cc <HAL_UARTEx_RxEventCallback+0x534>
		uart_printf("enter focus\r\n");
 800408e:	4846      	ldr	r0, [pc, #280]	@ (80041a8 <HAL_UARTEx_RxEventCallback+0x610>)
 8004090:	f000 ff3c 	bl	8004f0c <uart_printf>
		  if(osSemaphoreRelease(BinaryFocusHandle) == osOK)
 8004094:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <HAL_UARTEx_RxEventCallback+0x614>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f00e fc7b 	bl	8012994 <osSemaphoreRelease>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <HAL_UARTEx_RxEventCallback+0x534>
			uart_printf("enter\r\n");
 80040a4:	4842      	ldr	r0, [pc, #264]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x618>)
 80040a6:	f000 ff31 	bl	8004f0c <uart_printf>
			  memcpy(rxdata_focus,rxbuff_focus,Size);
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	461a      	mov	r2, r3
 80040ae:	493d      	ldr	r1, [pc, #244]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040b0:	4840      	ldr	r0, [pc, #256]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x61c>)
 80040b2:	f021 fb6c 	bl	802578e <memcpy>
			  memset(rxbuff_focus,0,Size);
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	461a      	mov	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	4839      	ldr	r0, [pc, #228]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040be:	f021 fac5 	bl	802564c <memset>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80040c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040c6:	483c      	ldr	r0, [pc, #240]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x620>)
 80040c8:	f007 fc69 	bl	800b99e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rxbuff_focus, 11);
 80040cc:	220b      	movs	r2, #11
 80040ce:	4935      	ldr	r1, [pc, #212]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x60c>)
 80040d0:	4832      	ldr	r0, [pc, #200]	@ (800419c <HAL_UARTEx_RxEventCallback+0x604>)
 80040d2:	f00d fb96 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80040d6:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a39      	ldr	r2, [pc, #228]	@ (80041c0 <HAL_UARTEx_RxEventCallback+0x628>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 80040e0:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <HAL_UARTEx_RxEventCallback+0x62c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 80040ea:	4b34      	ldr	r3, [pc, #208]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a36      	ldr	r2, [pc, #216]	@ (80041c8 <HAL_UARTEx_RxEventCallback+0x630>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 80040f4:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a34      	ldr	r2, [pc, #208]	@ (80041cc <HAL_UARTEx_RxEventCallback+0x634>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <HAL_UARTEx_RxEventCallback+0x638>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004108:	4b2c      	ldr	r3, [pc, #176]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_UARTEx_RxEventCallback+0x63c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004112:	4b2a      	ldr	r3, [pc, #168]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <HAL_UARTEx_RxEventCallback+0x640>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 800411c:	4b27      	ldr	r3, [pc, #156]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <HAL_UARTEx_RxEventCallback+0x644>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004126:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <HAL_UARTEx_RxEventCallback+0x648>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004130:	4b22      	ldr	r3, [pc, #136]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_UARTEx_RxEventCallback+0x64c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 800413a:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_UARTEx_RxEventCallback+0x650>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_UARTEx_RxEventCallback+0x654>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 800414e:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_UARTEx_RxEventCallback+0x658>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004158:	4b18      	ldr	r3, [pc, #96]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_UARTEx_RxEventCallback+0x65c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 8004162:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_UARTEx_RxEventCallback+0x660>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_UARTEx_RxEventCallback+0x5de>
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <HAL_UARTEx_RxEventCallback+0x664>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <HAL_UARTEx_RxEventCallback+0x5f0>
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b0f      	ldr	r3, [pc, #60]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0208 	bic.w	r2, r2, #8
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e291      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_UARTEx_RxEventCallback+0x624>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	e288      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 800419a:	bf00      	nop
 800419c:	24000be0 	.word	0x24000be0
 80041a0:	24000578 	.word	0x24000578
 80041a4:	30004f10 	.word	0x30004f10
 80041a8:	08029550 	.word	0x08029550
 80041ac:	240005a4 	.word	0x240005a4
 80041b0:	08029560 	.word	0x08029560
 80041b4:	30004f04 	.word	0x30004f04
 80041b8:	58022000 	.word	0x58022000
 80041bc:	24001124 	.word	0x24001124
 80041c0:	40020010 	.word	0x40020010
 80041c4:	40020028 	.word	0x40020028
 80041c8:	40020040 	.word	0x40020040
 80041cc:	40020058 	.word	0x40020058
 80041d0:	40020070 	.word	0x40020070
 80041d4:	40020088 	.word	0x40020088
 80041d8:	400200a0 	.word	0x400200a0
 80041dc:	400200b8 	.word	0x400200b8
 80041e0:	40020410 	.word	0x40020410
 80041e4:	40020428 	.word	0x40020428
 80041e8:	40020440 	.word	0x40020440
 80041ec:	40020458 	.word	0x40020458
 80041f0:	40020470 	.word	0x40020470
 80041f4:	40020488 	.word	0x40020488
 80041f8:	400204a0 	.word	0x400204a0
 80041fc:	400204b8 	.word	0x400204b8
  }else if(huart == &huart7){
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a9e      	ldr	r2, [pc, #632]	@ (800447c <HAL_UARTEx_RxEventCallback+0x8e4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	f040 8099 	bne.w	800433c <HAL_UARTEx_RxEventCallback+0x7a4>
	  taskRangeBegin = pdTRUE;
 800420a:	4b9d      	ldr	r3, [pc, #628]	@ (8004480 <HAL_UARTEx_RxEventCallback+0x8e8>)
 800420c:	2201      	movs	r2, #1
 800420e:	601a      	str	r2, [r3, #0]
	  if(rxbuff_rangefinder[0] == 0xee && rxbuff_rangefinder[1] == 0x16 && rxbuff_rangefinder[Size - 1] == CheckSumRangefinder(rxbuff_rangefinder + 3, rxbuff_rangefinder[2]))
 8004210:	4b9c      	ldr	r3, [pc, #624]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2bee      	cmp	r3, #238	@ 0xee
 8004216:	d12a      	bne.n	800426e <HAL_UARTEx_RxEventCallback+0x6d6>
 8004218:	4b9a      	ldr	r3, [pc, #616]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b16      	cmp	r3, #22
 800421e:	d126      	bne.n	800426e <HAL_UARTEx_RxEventCallback+0x6d6>
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	3b01      	subs	r3, #1
 8004224:	4a97      	ldr	r2, [pc, #604]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004226:	5cd4      	ldrb	r4, [r2, r3]
 8004228:	4a97      	ldr	r2, [pc, #604]	@ (8004488 <HAL_UARTEx_RxEventCallback+0x8f0>)
 800422a:	4b96      	ldr	r3, [pc, #600]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 800422c:	789b      	ldrb	r3, [r3, #2]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fc ff1f 	bl	8001074 <CheckSumRangefinder>
 8004236:	4603      	mov	r3, r0
 8004238:	429c      	cmp	r4, r3
 800423a:	d118      	bne.n	800426e <HAL_UARTEx_RxEventCallback+0x6d6>
		  if(osSemaphoreRelease(BinaryRangefinderHandle) == osOK)
 800423c:	4b93      	ldr	r3, [pc, #588]	@ (800448c <HAL_UARTEx_RxEventCallback+0x8f4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f00e fba7 	bl	8012994 <osSemaphoreRelease>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <HAL_UARTEx_RxEventCallback+0x6d6>
			  memcpy(rxdata_rangefinder,rxbuff_rangefinder,Size);
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	461a      	mov	r2, r3
 8004250:	498c      	ldr	r1, [pc, #560]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004252:	488f      	ldr	r0, [pc, #572]	@ (8004490 <HAL_UARTEx_RxEventCallback+0x8f8>)
 8004254:	f021 fa9b 	bl	802578e <memcpy>
			  memset(rxbuff_rangefinder,0,Size);
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	461a      	mov	r2, r3
 800425c:	2100      	movs	r1, #0
 800425e:	4889      	ldr	r0, [pc, #548]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004260:	f021 f9f4 	bl	802564c <memset>
			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004264:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004268:	488a      	ldr	r0, [pc, #552]	@ (8004494 <HAL_UARTEx_RxEventCallback+0x8fc>)
 800426a:	f007 fb98 	bl	800b99e <HAL_GPIO_TogglePin>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 800426e:	2280      	movs	r2, #128	@ 0x80
 8004270:	4984      	ldr	r1, [pc, #528]	@ (8004484 <HAL_UARTEx_RxEventCallback+0x8ec>)
 8004272:	4882      	ldr	r0, [pc, #520]	@ (800447c <HAL_UARTEx_RxEventCallback+0x8e4>)
 8004274:	f00d fac5 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004278:	4b87      	ldr	r3, [pc, #540]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a87      	ldr	r2, [pc, #540]	@ (800449c <HAL_UARTEx_RxEventCallback+0x904>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d04a      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 8004282:	4b85      	ldr	r3, [pc, #532]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a86      	ldr	r2, [pc, #536]	@ (80044a0 <HAL_UARTEx_RxEventCallback+0x908>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d045      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 800428c:	4b82      	ldr	r3, [pc, #520]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a84      	ldr	r2, [pc, #528]	@ (80044a4 <HAL_UARTEx_RxEventCallback+0x90c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d040      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 8004296:	4b80      	ldr	r3, [pc, #512]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a83      	ldr	r2, [pc, #524]	@ (80044a8 <HAL_UARTEx_RxEventCallback+0x910>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d03b      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a81      	ldr	r2, [pc, #516]	@ (80044ac <HAL_UARTEx_RxEventCallback+0x914>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d036      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a80      	ldr	r2, [pc, #512]	@ (80044b0 <HAL_UARTEx_RxEventCallback+0x918>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d031      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042b4:	4b78      	ldr	r3, [pc, #480]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7e      	ldr	r2, [pc, #504]	@ (80044b4 <HAL_UARTEx_RxEventCallback+0x91c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02c      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042be:	4b76      	ldr	r3, [pc, #472]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a7d      	ldr	r2, [pc, #500]	@ (80044b8 <HAL_UARTEx_RxEventCallback+0x920>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042c8:	4b73      	ldr	r3, [pc, #460]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a7b      	ldr	r2, [pc, #492]	@ (80044bc <HAL_UARTEx_RxEventCallback+0x924>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042d2:	4b71      	ldr	r3, [pc, #452]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a7a      	ldr	r2, [pc, #488]	@ (80044c0 <HAL_UARTEx_RxEventCallback+0x928>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d01d      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042dc:	4b6e      	ldr	r3, [pc, #440]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a78      	ldr	r2, [pc, #480]	@ (80044c4 <HAL_UARTEx_RxEventCallback+0x92c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a77      	ldr	r2, [pc, #476]	@ (80044c8 <HAL_UARTEx_RxEventCallback+0x930>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042f0:	4b69      	ldr	r3, [pc, #420]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a75      	ldr	r2, [pc, #468]	@ (80044cc <HAL_UARTEx_RxEventCallback+0x934>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 80042fa:	4b67      	ldr	r3, [pc, #412]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a74      	ldr	r2, [pc, #464]	@ (80044d0 <HAL_UARTEx_RxEventCallback+0x938>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 8004304:	4b64      	ldr	r3, [pc, #400]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a72      	ldr	r2, [pc, #456]	@ (80044d4 <HAL_UARTEx_RxEventCallback+0x93c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_UARTEx_RxEventCallback+0x780>
 800430e:	4b62      	ldr	r3, [pc, #392]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a71      	ldr	r2, [pc, #452]	@ (80044d8 <HAL_UARTEx_RxEventCallback+0x940>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <HAL_UARTEx_RxEventCallback+0x792>
 8004318:	4b5f      	ldr	r3, [pc, #380]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b5e      	ldr	r3, [pc, #376]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0208 	bic.w	r2, r2, #8
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e1c0      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 800432a:	4b5b      	ldr	r3, [pc, #364]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b59      	ldr	r3, [pc, #356]	@ (8004498 <HAL_UARTEx_RxEventCallback+0x900>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0204 	bic.w	r2, r2, #4
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	e1b7      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
  else if(huart == &huart2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a67      	ldr	r2, [pc, #412]	@ (80044dc <HAL_UARTEx_RxEventCallback+0x944>)
 8004340:	4293      	cmp	r3, r2
 8004342:	f040 81b3 	bne.w	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
	switch(chcmd[0])
 8004346:	4b66      	ldr	r3, [pc, #408]	@ (80044e0 <HAL_UARTEx_RxEventCallback+0x948>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	3b43      	subs	r3, #67	@ 0x43
 800434c:	2b13      	cmp	r3, #19
 800434e:	f200 813f 	bhi.w	80045d0 <HAL_UARTEx_RxEventCallback+0xa38>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_UARTEx_RxEventCallback+0x7c0>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	080045a3 	.word	0x080045a3
 800435c:	080045d1 	.word	0x080045d1
 8004360:	080045d1 	.word	0x080045d1
 8004364:	080045b3 	.word	0x080045b3
 8004368:	080045d1 	.word	0x080045d1
 800436c:	080045d1 	.word	0x080045d1
 8004370:	080045d1 	.word	0x080045d1
 8004374:	080045d1 	.word	0x080045d1
 8004378:	080045d1 	.word	0x080045d1
 800437c:	080045d1 	.word	0x080045d1
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080045d1 	.word	0x080045d1
 8004388:	080045d1 	.word	0x080045d1
 800438c:	080043c9 	.word	0x080043c9
 8004390:	080045d1 	.word	0x080045d1
 8004394:	080045d1 	.word	0x080045d1
 8004398:	080043eb 	.word	0x080043eb
 800439c:	080045d1 	.word	0x080045d1
 80043a0:	080045d1 	.word	0x080045d1
 80043a4:	08004555 	.word	0x08004555
			sscanf(chcmd + 1,"%x", &iPm1);
 80043a8:	4b4e      	ldr	r3, [pc, #312]	@ (80044e4 <HAL_UARTEx_RxEventCallback+0x94c>)
 80043aa:	4a4f      	ldr	r2, [pc, #316]	@ (80044e8 <HAL_UARTEx_RxEventCallback+0x950>)
 80043ac:	494f      	ldr	r1, [pc, #316]	@ (80044ec <HAL_UARTEx_RxEventCallback+0x954>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f021 f892 	bl	80254d8 <siscanf>
			ServoDataSendTypedef.TurnMode = iPm1;
 80043b4:	4b4c      	ldr	r3, [pc, #304]	@ (80044e8 <HAL_UARTEx_RxEventCallback+0x950>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4b4d      	ldr	r3, [pc, #308]	@ (80044f0 <HAL_UARTEx_RxEventCallback+0x958>)
 80043bc:	701a      	strb	r2, [r3, #0]
			ServoDataSend(&ServoSendTypedef,&ServoDataSendTypedef);
 80043be:	494c      	ldr	r1, [pc, #304]	@ (80044f0 <HAL_UARTEx_RxEventCallback+0x958>)
 80043c0:	484c      	ldr	r0, [pc, #304]	@ (80044f4 <HAL_UARTEx_RxEventCallback+0x95c>)
 80043c2:	f7fd f8bf 	bl	8001544 <ServoDataSend>
		}break;
 80043c6:	e104      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2, &fPm3);
 80043c8:	4846      	ldr	r0, [pc, #280]	@ (80044e4 <HAL_UARTEx_RxEventCallback+0x94c>)
 80043ca:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <HAL_UARTEx_RxEventCallback+0x960>)
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <HAL_UARTEx_RxEventCallback+0x964>)
 80043d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004500 <HAL_UARTEx_RxEventCallback+0x968>)
 80043d2:	494c      	ldr	r1, [pc, #304]	@ (8004504 <HAL_UARTEx_RxEventCallback+0x96c>)
 80043d4:	f021 f880 	bl	80254d8 <siscanf>
			CommandTypedef.turnYaw.f = fPm1;
 80043d8:	4b49      	ldr	r3, [pc, #292]	@ (8004500 <HAL_UARTEx_RxEventCallback+0x968>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 80043de:	6113      	str	r3, [r2, #16]
			CommandTypedef.turnPitch.f = fPm2;
 80043e0:	4b46      	ldr	r3, [pc, #280]	@ (80044fc <HAL_UARTEx_RxEventCallback+0x964>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a48      	ldr	r2, [pc, #288]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 80043e6:	6153      	str	r3, [r2, #20]
		}break;
 80043e8:	e0f3      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d", &iPm1);
 80043ea:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <HAL_UARTEx_RxEventCallback+0x94c>)
 80043ec:	4a3e      	ldr	r2, [pc, #248]	@ (80044e8 <HAL_UARTEx_RxEventCallback+0x950>)
 80043ee:	4947      	ldr	r1, [pc, #284]	@ (800450c <HAL_UARTEx_RxEventCallback+0x974>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f021 f871 	bl	80254d8 <siscanf>
			switch(iPm1)
 80043f6:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <HAL_UARTEx_RxEventCallback+0x950>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	f200 80a8 	bhi.w	8004550 <HAL_UARTEx_RxEventCallback+0x9b8>
 8004400:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <HAL_UARTEx_RxEventCallback+0x870>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800441d 	.word	0x0800441d
 800440c:	0800443d 	.word	0x0800443d
 8004410:	0800445d 	.word	0x0800445d
 8004414:	08004511 	.word	0x08004511
 8004418:	08004531 	.word	0x08004531
					CommandTypedef.go2Zero = 0x01;
 800441c:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004422:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004424:	2200      	movs	r2, #0
 8004426:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 8004428:	4b37      	ldr	r3, [pc, #220]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800442a:	2200      	movs	r2, #0
 800442c:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 800442e:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004430:	2200      	movs	r2, #0
 8004432:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004434:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004436:	2200      	movs	r2, #0
 8004438:	70da      	strb	r2, [r3, #3]
				}break;
 800443a:	e08a      	b.n	8004552 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 800443c:	4b32      	ldr	r3, [pc, #200]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x01;
 8004442:	4b31      	ldr	r3, [pc, #196]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004444:	2201      	movs	r2, #1
 8004446:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 8004448:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800444a:	2200      	movs	r2, #0
 800444c:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 800444e:	4b2e      	ldr	r3, [pc, #184]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004450:	2200      	movs	r2, #0
 8004452:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004454:	4b2c      	ldr	r3, [pc, #176]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004456:	2200      	movs	r2, #0
 8004458:	70da      	strb	r2, [r3, #3]
				}break;
 800445a:	e07a      	b.n	8004552 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 800445c:	4b2a      	ldr	r3, [pc, #168]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004462:	4b29      	ldr	r3, [pc, #164]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x01;
 8004468:	4b27      	ldr	r3, [pc, #156]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 800446a:	2201      	movs	r2, #1
 800446c:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 800446e:	4b26      	ldr	r3, [pc, #152]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004470:	2200      	movs	r2, #0
 8004472:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004474:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <HAL_UARTEx_RxEventCallback+0x970>)
 8004476:	2200      	movs	r2, #0
 8004478:	70da      	strb	r2, [r3, #3]
				}break;
 800447a:	e06a      	b.n	8004552 <HAL_UARTEx_RxEventCallback+0x9ba>
 800447c:	24000990 	.word	0x24000990
 8004480:	2400057c 	.word	0x2400057c
 8004484:	30004f9c 	.word	0x30004f9c
 8004488:	30004f9f 	.word	0x30004f9f
 800448c:	240005a8 	.word	0x240005a8
 8004490:	30004f1c 	.word	0x30004f1c
 8004494:	58022000 	.word	0x58022000
 8004498:	24000e54 	.word	0x24000e54
 800449c:	40020010 	.word	0x40020010
 80044a0:	40020028 	.word	0x40020028
 80044a4:	40020040 	.word	0x40020040
 80044a8:	40020058 	.word	0x40020058
 80044ac:	40020070 	.word	0x40020070
 80044b0:	40020088 	.word	0x40020088
 80044b4:	400200a0 	.word	0x400200a0
 80044b8:	400200b8 	.word	0x400200b8
 80044bc:	40020410 	.word	0x40020410
 80044c0:	40020428 	.word	0x40020428
 80044c4:	40020440 	.word	0x40020440
 80044c8:	40020458 	.word	0x40020458
 80044cc:	40020470 	.word	0x40020470
 80044d0:	40020488 	.word	0x40020488
 80044d4:	400204a0 	.word	0x400204a0
 80044d8:	400204b8 	.word	0x400204b8
 80044dc:	24000ab8 	.word	0x24000ab8
 80044e0:	3000501c 	.word	0x3000501c
 80044e4:	3000501d 	.word	0x3000501d
 80044e8:	24000804 	.word	0x24000804
 80044ec:	08029568 	.word	0x08029568
 80044f0:	24000154 	.word	0x24000154
 80044f4:	2400011c 	.word	0x2400011c
 80044f8:	24000810 	.word	0x24000810
 80044fc:	2400080c 	.word	0x2400080c
 8004500:	24000808 	.word	0x24000808
 8004504:	0802956c 	.word	0x0802956c
 8004508:	24000184 	.word	0x24000184
 800450c:	08029574 	.word	0x08029574
					CommandTypedef.go2Zero = 0x00;
 8004510:	4b68      	ldr	r3, [pc, #416]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004516:	4b67      	ldr	r3, [pc, #412]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004518:	2200      	movs	r2, #0
 800451a:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 800451c:	4b65      	ldr	r3, [pc, #404]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800451e:	2200      	movs	r2, #0
 8004520:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x01;
 8004522:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004524:	2201      	movs	r2, #1
 8004526:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x00;
 8004528:	4b62      	ldr	r3, [pc, #392]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800452a:	2200      	movs	r2, #0
 800452c:	70da      	strb	r2, [r3, #3]
				}break;
 800452e:	e010      	b.n	8004552 <HAL_UARTEx_RxEventCallback+0x9ba>
					CommandTypedef.go2Zero = 0x00;
 8004530:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
					CommandTypedef.standbyEnable = 0x00;
 8004536:	4b5f      	ldr	r3, [pc, #380]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004538:	2200      	movs	r2, #0
 800453a:	705a      	strb	r2, [r3, #1]
					CommandTypedef.standbyDisable = 0x00;
 800453c:	4b5d      	ldr	r3, [pc, #372]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800453e:	2200      	movs	r2, #0
 8004540:	709a      	strb	r2, [r3, #2]
					CommandTypedef.guideEnable = 0x00;
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 8004544:	2200      	movs	r2, #0
 8004546:	711a      	strb	r2, [r3, #4]
					CommandTypedef.scanEnable = 0x01;
 8004548:	4b5a      	ldr	r3, [pc, #360]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800454a:	2201      	movs	r2, #1
 800454c:	70da      	strb	r2, [r3, #3]
				}break;
 800454e:	e000      	b.n	8004552 <HAL_UARTEx_RxEventCallback+0x9ba>
					break;
 8004550:	bf00      	nop
		}break;
 8004552:	e03e      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%d,%d", &iPm1, &iPm2);
 8004554:	4858      	ldr	r0, [pc, #352]	@ (80046b8 <HAL_UARTEx_RxEventCallback+0xb20>)
 8004556:	4b59      	ldr	r3, [pc, #356]	@ (80046bc <HAL_UARTEx_RxEventCallback+0xb24>)
 8004558:	4a59      	ldr	r2, [pc, #356]	@ (80046c0 <HAL_UARTEx_RxEventCallback+0xb28>)
 800455a:	495a      	ldr	r1, [pc, #360]	@ (80046c4 <HAL_UARTEx_RxEventCallback+0xb2c>)
 800455c:	f020 ffbc 	bl	80254d8 <siscanf>
			CommandTypedef.turnYawSpeed = iPm1 * 100;
 8004560:	4b57      	ldr	r3, [pc, #348]	@ (80046c0 <HAL_UARTEx_RxEventCallback+0xb28>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	0092      	lsls	r2, r2, #2
 800456a:	4413      	add	r3, r2
 800456c:	461a      	mov	r2, r3
 800456e:	0091      	lsls	r1, r2, #2
 8004570:	461a      	mov	r2, r3
 8004572:	460b      	mov	r3, r1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	b29b      	uxth	r3, r3
 800457a:	b21a      	sxth	r2, r3
 800457c:	4b4d      	ldr	r3, [pc, #308]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800457e:	861a      	strh	r2, [r3, #48]	@ 0x30
			CommandTypedef.turnPitchSpeed = iPm2 * 100;
 8004580:	4b4e      	ldr	r3, [pc, #312]	@ (80046bc <HAL_UARTEx_RxEventCallback+0xb24>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	4413      	add	r3, r2
 800458c:	461a      	mov	r2, r3
 800458e:	0091      	lsls	r1, r2, #2
 8004590:	461a      	mov	r2, r3
 8004592:	460b      	mov	r3, r1
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	b29b      	uxth	r3, r3
 800459a:	b21a      	sxth	r2, r3
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 800459e:	865a      	strh	r2, [r3, #50]	@ 0x32
		}break;
 80045a0:	e017      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
			ServoDataSendTypedef.TrackingFaultCleanCu = 0x66;
 80045a2:	4b49      	ldr	r3, [pc, #292]	@ (80046c8 <HAL_UARTEx_RxEventCallback+0xb30>)
 80045a4:	2266      	movs	r2, #102	@ 0x66
 80045a6:	741a      	strb	r2, [r3, #16]
			ServoDataSendTypedef.TrackingFaultCleanJing = 0x33;
 80045a8:	4b47      	ldr	r3, [pc, #284]	@ (80046c8 <HAL_UARTEx_RxEventCallback+0xb30>)
 80045aa:	2233      	movs	r2, #51	@ 0x33
 80045ac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		}break;
 80045b0:	e00f      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
			sscanf(chcmd + 1,"%f,%f", &fPm1, &fPm2);
 80045b2:	4841      	ldr	r0, [pc, #260]	@ (80046b8 <HAL_UARTEx_RxEventCallback+0xb20>)
 80045b4:	4b45      	ldr	r3, [pc, #276]	@ (80046cc <HAL_UARTEx_RxEventCallback+0xb34>)
 80045b6:	4a46      	ldr	r2, [pc, #280]	@ (80046d0 <HAL_UARTEx_RxEventCallback+0xb38>)
 80045b8:	4946      	ldr	r1, [pc, #280]	@ (80046d4 <HAL_UARTEx_RxEventCallback+0xb3c>)
 80045ba:	f020 ff8d 	bl	80254d8 <siscanf>
			CommandTypedef.FSM_Yaw.f = fPm1;
 80045be:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <HAL_UARTEx_RxEventCallback+0xb38>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a3c      	ldr	r2, [pc, #240]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045c4:	6193      	str	r3, [r2, #24]
			CommandTypedef.FSM_Pitch.f = fPm2;
 80045c6:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_UARTEx_RxEventCallback+0xb34>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a3a      	ldr	r2, [pc, #232]	@ (80046b4 <HAL_UARTEx_RxEventCallback+0xb1c>)
 80045cc:	61d3      	str	r3, [r2, #28]
		}break;
 80045ce:	e000      	b.n	80045d2 <HAL_UARTEx_RxEventCallback+0xa3a>
		break;
 80045d0:	bf00      	nop
	HAL_UART_Transmit(&huart2, chcmd, Size, 0xff);
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	23ff      	movs	r3, #255	@ 0xff
 80045d6:	4940      	ldr	r1, [pc, #256]	@ (80046d8 <HAL_UARTEx_RxEventCallback+0xb40>)
 80045d8:	4840      	ldr	r0, [pc, #256]	@ (80046dc <HAL_UARTEx_RxEventCallback+0xb44>)
 80045da:	f00a fba7 	bl	800ed2c <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 64);
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	493d      	ldr	r1, [pc, #244]	@ (80046d8 <HAL_UARTEx_RxEventCallback+0xb40>)
 80045e2:	483e      	ldr	r0, [pc, #248]	@ (80046dc <HAL_UARTEx_RxEventCallback+0xb44>)
 80045e4:	f00d f90d 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80045e8:	4b3d      	ldr	r3, [pc, #244]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3d      	ldr	r2, [pc, #244]	@ (80046e4 <HAL_UARTEx_RxEventCallback+0xb4c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d04a      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0xb50>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d045      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 80045fc:	4b38      	ldr	r3, [pc, #224]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3a      	ldr	r2, [pc, #232]	@ (80046ec <HAL_UARTEx_RxEventCallback+0xb54>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004606:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a39      	ldr	r2, [pc, #228]	@ (80046f0 <HAL_UARTEx_RxEventCallback+0xb58>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004610:	4b33      	ldr	r3, [pc, #204]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a37      	ldr	r2, [pc, #220]	@ (80046f4 <HAL_UARTEx_RxEventCallback+0xb5c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d036      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 800461a:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a36      	ldr	r2, [pc, #216]	@ (80046f8 <HAL_UARTEx_RxEventCallback+0xb60>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d031      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004624:	4b2e      	ldr	r3, [pc, #184]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a34      	ldr	r2, [pc, #208]	@ (80046fc <HAL_UARTEx_RxEventCallback+0xb64>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 800462e:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a33      	ldr	r2, [pc, #204]	@ (8004700 <HAL_UARTEx_RxEventCallback+0xb68>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004638:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a31      	ldr	r2, [pc, #196]	@ (8004704 <HAL_UARTEx_RxEventCallback+0xb6c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004642:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a30      	ldr	r2, [pc, #192]	@ (8004708 <HAL_UARTEx_RxEventCallback+0xb70>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 800464c:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2e      	ldr	r2, [pc, #184]	@ (800470c <HAL_UARTEx_RxEventCallback+0xb74>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004656:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2d      	ldr	r2, [pc, #180]	@ (8004710 <HAL_UARTEx_RxEventCallback+0xb78>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <HAL_UARTEx_RxEventCallback+0xb7c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2a      	ldr	r2, [pc, #168]	@ (8004718 <HAL_UARTEx_RxEventCallback+0xb80>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 8004674:	4b1a      	ldr	r3, [pc, #104]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a28      	ldr	r2, [pc, #160]	@ (800471c <HAL_UARTEx_RxEventCallback+0xb84>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_UARTEx_RxEventCallback+0xaf0>
 800467e:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <HAL_UARTEx_RxEventCallback+0xb88>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <HAL_UARTEx_RxEventCallback+0xb02>
 8004688:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0208 	bic.w	r2, r2, #8
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e008      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <HAL_UARTEx_RxEventCallback+0xb48>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0204 	bic.w	r2, r2, #4
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	e7ff      	b.n	80046ac <HAL_UARTEx_RxEventCallback+0xb14>
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	24000184 	.word	0x24000184
 80046b8:	3000501d 	.word	0x3000501d
 80046bc:	24000814 	.word	0x24000814
 80046c0:	24000804 	.word	0x24000804
 80046c4:	08029578 	.word	0x08029578
 80046c8:	24000154 	.word	0x24000154
 80046cc:	2400080c 	.word	0x2400080c
 80046d0:	24000808 	.word	0x24000808
 80046d4:	0802956c 	.word	0x0802956c
 80046d8:	3000501c 	.word	0x3000501c
 80046dc:	24000ab8 	.word	0x24000ab8
 80046e0:	24000f44 	.word	0x24000f44
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020028 	.word	0x40020028
 80046ec:	40020040 	.word	0x40020040
 80046f0:	40020058 	.word	0x40020058
 80046f4:	40020070 	.word	0x40020070
 80046f8:	40020088 	.word	0x40020088
 80046fc:	400200a0 	.word	0x400200a0
 8004700:	400200b8 	.word	0x400200b8
 8004704:	40020410 	.word	0x40020410
 8004708:	40020428 	.word	0x40020428
 800470c:	40020440 	.word	0x40020440
 8004710:	40020458 	.word	0x40020458
 8004714:	40020470 	.word	0x40020470
 8004718:	40020488 	.word	0x40020488
 800471c:	400204a0 	.word	0x400204a0
 8004720:	400204b8 	.word	0x400204b8

08004724 <HAL_UART_ErrorCallback>:
//             the HAL_UART_RxCpltCallback can be implemented in the user file.
//    */
// }

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart == &huart5)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a6b      	ldr	r2, [pc, #428]	@ (80048dc <HAL_UART_ErrorCallback+0x1b8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d166      	bne.n	8004802 <HAL_UART_ErrorCallback+0xde>
  {
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart5, rxbuff_servo, 128);
 8004734:	2280      	movs	r2, #128	@ 0x80
 8004736:	496a      	ldr	r1, [pc, #424]	@ (80048e0 <HAL_UART_ErrorCallback+0x1bc>)
 8004738:	4868      	ldr	r0, [pc, #416]	@ (80048dc <HAL_UART_ErrorCallback+0x1b8>)
 800473a:	f00d f862 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	   __HAL_DMA_DISABLE_IT(&hdma_uart5_rx, DMA_IT_HT);
 800473e:	4b69      	ldr	r3, [pc, #420]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a69      	ldr	r2, [pc, #420]	@ (80048e8 <HAL_UART_ErrorCallback+0x1c4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04a      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004748:	4b66      	ldr	r3, [pc, #408]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a67      	ldr	r2, [pc, #412]	@ (80048ec <HAL_UART_ErrorCallback+0x1c8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d045      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004752:	4b64      	ldr	r3, [pc, #400]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a66      	ldr	r2, [pc, #408]	@ (80048f0 <HAL_UART_ErrorCallback+0x1cc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 800475c:	4b61      	ldr	r3, [pc, #388]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a64      	ldr	r2, [pc, #400]	@ (80048f4 <HAL_UART_ErrorCallback+0x1d0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004766:	4b5f      	ldr	r3, [pc, #380]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a63      	ldr	r2, [pc, #396]	@ (80048f8 <HAL_UART_ErrorCallback+0x1d4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d036      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004770:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a61      	ldr	r2, [pc, #388]	@ (80048fc <HAL_UART_ErrorCallback+0x1d8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 800477a:	4b5a      	ldr	r3, [pc, #360]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a60      	ldr	r2, [pc, #384]	@ (8004900 <HAL_UART_ErrorCallback+0x1dc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d02c      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004784:	4b57      	ldr	r3, [pc, #348]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5e      	ldr	r2, [pc, #376]	@ (8004904 <HAL_UART_ErrorCallback+0x1e0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d027      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 800478e:	4b55      	ldr	r3, [pc, #340]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5d      	ldr	r2, [pc, #372]	@ (8004908 <HAL_UART_ErrorCallback+0x1e4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 8004798:	4b52      	ldr	r3, [pc, #328]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5b      	ldr	r2, [pc, #364]	@ (800490c <HAL_UART_ErrorCallback+0x1e8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047a2:	4b50      	ldr	r3, [pc, #320]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004910 <HAL_UART_ErrorCallback+0x1ec>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047ac:	4b4d      	ldr	r3, [pc, #308]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a58      	ldr	r2, [pc, #352]	@ (8004914 <HAL_UART_ErrorCallback+0x1f0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047b6:	4b4b      	ldr	r3, [pc, #300]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a57      	ldr	r2, [pc, #348]	@ (8004918 <HAL_UART_ErrorCallback+0x1f4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047c0:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a55      	ldr	r2, [pc, #340]	@ (800491c <HAL_UART_ErrorCallback+0x1f8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047ca:	4b46      	ldr	r3, [pc, #280]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a54      	ldr	r2, [pc, #336]	@ (8004920 <HAL_UART_ErrorCallback+0x1fc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_UART_ErrorCallback+0xba>
 80047d4:	4b43      	ldr	r3, [pc, #268]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a52      	ldr	r2, [pc, #328]	@ (8004924 <HAL_UART_ErrorCallback+0x200>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <HAL_UART_ErrorCallback+0xcc>
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0208 	bic.w	r2, r2, #8
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e27b      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 80047f0:	4b3c      	ldr	r3, [pc, #240]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_UART_ErrorCallback+0x1c0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004800:	e272      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart3)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a48      	ldr	r2, [pc, #288]	@ (8004928 <HAL_UART_ErrorCallback+0x204>)
 8004806:	4293      	cmp	r3, r2
 8004808:	f040 8094 	bne.w	8004934 <HAL_UART_ErrorCallback+0x210>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rxbuff_cu, 128);
 800480c:	2280      	movs	r2, #128	@ 0x80
 800480e:	4947      	ldr	r1, [pc, #284]	@ (800492c <HAL_UART_ErrorCallback+0x208>)
 8004810:	4845      	ldr	r0, [pc, #276]	@ (8004928 <HAL_UART_ErrorCallback+0x204>)
 8004812:	f00c fff6 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8004816:	4b46      	ldr	r3, [pc, #280]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <HAL_UART_ErrorCallback+0x1c4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d04a      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004820:	4b43      	ldr	r3, [pc, #268]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a31      	ldr	r2, [pc, #196]	@ (80048ec <HAL_UART_ErrorCallback+0x1c8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d045      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a30      	ldr	r2, [pc, #192]	@ (80048f0 <HAL_UART_ErrorCallback+0x1cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d040      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004834:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <HAL_UART_ErrorCallback+0x1d0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d03b      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 800483e:	4b3c      	ldr	r3, [pc, #240]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2d      	ldr	r2, [pc, #180]	@ (80048f8 <HAL_UART_ErrorCallback+0x1d4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d036      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004848:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2b      	ldr	r2, [pc, #172]	@ (80048fc <HAL_UART_ErrorCallback+0x1d8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d031      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004852:	4b37      	ldr	r3, [pc, #220]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2a      	ldr	r2, [pc, #168]	@ (8004900 <HAL_UART_ErrorCallback+0x1dc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d02c      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 800485c:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a28      	ldr	r2, [pc, #160]	@ (8004904 <HAL_UART_ErrorCallback+0x1e0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d027      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004866:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a27      	ldr	r2, [pc, #156]	@ (8004908 <HAL_UART_ErrorCallback+0x1e4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004870:	4b2f      	ldr	r3, [pc, #188]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a25      	ldr	r2, [pc, #148]	@ (800490c <HAL_UART_ErrorCallback+0x1e8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01d      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 800487a:	4b2d      	ldr	r3, [pc, #180]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a24      	ldr	r2, [pc, #144]	@ (8004910 <HAL_UART_ErrorCallback+0x1ec>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004884:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a22      	ldr	r2, [pc, #136]	@ (8004914 <HAL_UART_ErrorCallback+0x1f0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 800488e:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	@ (8004918 <HAL_UART_ErrorCallback+0x1f4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 8004898:	4b25      	ldr	r3, [pc, #148]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1f      	ldr	r2, [pc, #124]	@ (800491c <HAL_UART_ErrorCallback+0x1f8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 80048a2:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <HAL_UART_ErrorCallback+0x1fc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_UART_ErrorCallback+0x192>
 80048ac:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <HAL_UART_ErrorCallback+0x200>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <HAL_UART_ErrorCallback+0x1a4>
 80048b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0208 	bic.w	r2, r2, #8
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e20f      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 80048c8:	4b19      	ldr	r3, [pc, #100]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <HAL_UART_ErrorCallback+0x20c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	601a      	str	r2, [r3, #0]
}
 80048d8:	e206      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 80048da:	bf00      	nop
 80048dc:	240008fc 	.word	0x240008fc
 80048e0:	30004b84 	.word	0x30004b84
 80048e4:	24000d64 	.word	0x24000d64
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
 8004928:	24000b4c 	.word	0x24000b4c
 800492c:	30004d84 	.word	0x30004d84
 8004930:	24001034 	.word	0x24001034
  }else if(huart == &huart4)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae4 <HAL_UART_ErrorCallback+0x3c0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d166      	bne.n	8004a0a <HAL_UART_ErrorCallback+0x2e6>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuff_jing, 128);
 800493c:	2280      	movs	r2, #128	@ 0x80
 800493e:	496a      	ldr	r1, [pc, #424]	@ (8004ae8 <HAL_UART_ErrorCallback+0x3c4>)
 8004940:	4868      	ldr	r0, [pc, #416]	@ (8004ae4 <HAL_UART_ErrorCallback+0x3c0>)
 8004942:	f00c ff5e 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  	  	  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8004946:	4b69      	ldr	r3, [pc, #420]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a69      	ldr	r2, [pc, #420]	@ (8004af0 <HAL_UART_ErrorCallback+0x3cc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d04a      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 8004950:	4b66      	ldr	r3, [pc, #408]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <HAL_UART_ErrorCallback+0x3d0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d045      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 800495a:	4b64      	ldr	r3, [pc, #400]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a66      	ldr	r2, [pc, #408]	@ (8004af8 <HAL_UART_ErrorCallback+0x3d4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d040      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 8004964:	4b61      	ldr	r3, [pc, #388]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a64      	ldr	r2, [pc, #400]	@ (8004afc <HAL_UART_ErrorCallback+0x3d8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d03b      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 800496e:	4b5f      	ldr	r3, [pc, #380]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a63      	ldr	r2, [pc, #396]	@ (8004b00 <HAL_UART_ErrorCallback+0x3dc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d036      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 8004978:	4b5c      	ldr	r3, [pc, #368]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a61      	ldr	r2, [pc, #388]	@ (8004b04 <HAL_UART_ErrorCallback+0x3e0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d031      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 8004982:	4b5a      	ldr	r3, [pc, #360]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a60      	ldr	r2, [pc, #384]	@ (8004b08 <HAL_UART_ErrorCallback+0x3e4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d02c      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 800498c:	4b57      	ldr	r3, [pc, #348]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5e      	ldr	r2, [pc, #376]	@ (8004b0c <HAL_UART_ErrorCallback+0x3e8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d027      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 8004996:	4b55      	ldr	r3, [pc, #340]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5d      	ldr	r2, [pc, #372]	@ (8004b10 <HAL_UART_ErrorCallback+0x3ec>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d022      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049a0:	4b52      	ldr	r3, [pc, #328]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004b14 <HAL_UART_ErrorCallback+0x3f0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049aa:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004b18 <HAL_UART_ErrorCallback+0x3f4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049b4:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a58      	ldr	r2, [pc, #352]	@ (8004b1c <HAL_UART_ErrorCallback+0x3f8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049be:	4b4b      	ldr	r3, [pc, #300]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a57      	ldr	r2, [pc, #348]	@ (8004b20 <HAL_UART_ErrorCallback+0x3fc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049c8:	4b48      	ldr	r3, [pc, #288]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a55      	ldr	r2, [pc, #340]	@ (8004b24 <HAL_UART_ErrorCallback+0x400>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049d2:	4b46      	ldr	r3, [pc, #280]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a54      	ldr	r2, [pc, #336]	@ (8004b28 <HAL_UART_ErrorCallback+0x404>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_UART_ErrorCallback+0x2c2>
 80049dc:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a52      	ldr	r2, [pc, #328]	@ (8004b2c <HAL_UART_ErrorCallback+0x408>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <HAL_UART_ErrorCallback+0x2d4>
 80049e6:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b3f      	ldr	r3, [pc, #252]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0208 	bic.w	r2, r2, #8
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e177      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 80049f8:	4b3c      	ldr	r3, [pc, #240]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <HAL_UART_ErrorCallback+0x3c8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0204 	bic.w	r2, r2, #4
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	e16e      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
  }else if(huart == &huart6)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a48      	ldr	r2, [pc, #288]	@ (8004b30 <HAL_UART_ErrorCallback+0x40c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f040 8094 	bne.w	8004b3c <HAL_UART_ErrorCallback+0x418>
	  HAL_UARTEx_ReceiveToIdle_IT(&huart6, rxbuff_focus, 11);
 8004a14:	220b      	movs	r2, #11
 8004a16:	4947      	ldr	r1, [pc, #284]	@ (8004b34 <HAL_UART_ErrorCallback+0x410>)
 8004a18:	4845      	ldr	r0, [pc, #276]	@ (8004b30 <HAL_UART_ErrorCallback+0x40c>)
 8004a1a:	f00c fea2 	bl	8011762 <HAL_UARTEx_ReceiveToIdle_IT>
	  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8004a1e:	4b46      	ldr	r3, [pc, #280]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a33      	ldr	r2, [pc, #204]	@ (8004af0 <HAL_UART_ErrorCallback+0x3cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a28:	4b43      	ldr	r3, [pc, #268]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a31      	ldr	r2, [pc, #196]	@ (8004af4 <HAL_UART_ErrorCallback+0x3d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a32:	4b41      	ldr	r3, [pc, #260]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a30      	ldr	r2, [pc, #192]	@ (8004af8 <HAL_UART_ErrorCallback+0x3d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2e      	ldr	r2, [pc, #184]	@ (8004afc <HAL_UART_ErrorCallback+0x3d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a46:	4b3c      	ldr	r3, [pc, #240]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004b00 <HAL_UART_ErrorCallback+0x3dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a50:	4b39      	ldr	r3, [pc, #228]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2b      	ldr	r2, [pc, #172]	@ (8004b04 <HAL_UART_ErrorCallback+0x3e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b08 <HAL_UART_ErrorCallback+0x3e4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a64:	4b34      	ldr	r3, [pc, #208]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a28      	ldr	r2, [pc, #160]	@ (8004b0c <HAL_UART_ErrorCallback+0x3e8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a6e:	4b32      	ldr	r3, [pc, #200]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a27      	ldr	r2, [pc, #156]	@ (8004b10 <HAL_UART_ErrorCallback+0x3ec>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a78:	4b2f      	ldr	r3, [pc, #188]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a25      	ldr	r2, [pc, #148]	@ (8004b14 <HAL_UART_ErrorCallback+0x3f0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a82:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <HAL_UART_ErrorCallback+0x3f4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a22      	ldr	r2, [pc, #136]	@ (8004b1c <HAL_UART_ErrorCallback+0x3f8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004a96:	4b28      	ldr	r3, [pc, #160]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a21      	ldr	r2, [pc, #132]	@ (8004b20 <HAL_UART_ErrorCallback+0x3fc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004aa0:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <HAL_UART_ErrorCallback+0x400>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004aaa:	4b23      	ldr	r3, [pc, #140]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_UART_ErrorCallback+0x404>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_UART_ErrorCallback+0x39a>
 8004ab4:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <HAL_UART_ErrorCallback+0x408>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <HAL_UART_ErrorCallback+0x3ac>
 8004abe:	4b1e      	ldr	r3, [pc, #120]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0208 	bic.w	r2, r2, #8
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e10b      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <HAL_UART_ErrorCallback+0x414>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	e102      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 8004ae2:	bf00      	nop
 8004ae4:	24000868 	.word	0x24000868
 8004ae8:	30004e84 	.word	0x30004e84
 8004aec:	24000c74 	.word	0x24000c74
 8004af0:	40020010 	.word	0x40020010
 8004af4:	40020028 	.word	0x40020028
 8004af8:	40020040 	.word	0x40020040
 8004afc:	40020058 	.word	0x40020058
 8004b00:	40020070 	.word	0x40020070
 8004b04:	40020088 	.word	0x40020088
 8004b08:	400200a0 	.word	0x400200a0
 8004b0c:	400200b8 	.word	0x400200b8
 8004b10:	40020410 	.word	0x40020410
 8004b14:	40020428 	.word	0x40020428
 8004b18:	40020440 	.word	0x40020440
 8004b1c:	40020458 	.word	0x40020458
 8004b20:	40020470 	.word	0x40020470
 8004b24:	40020488 	.word	0x40020488
 8004b28:	400204a0 	.word	0x400204a0
 8004b2c:	400204b8 	.word	0x400204b8
 8004b30:	24000be0 	.word	0x24000be0
 8004b34:	30004f10 	.word	0x30004f10
 8004b38:	24001124 	.word	0x24001124
  }else if(huart == &huart7)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8004cf0 <HAL_UART_ErrorCallback+0x5cc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d166      	bne.n	8004c12 <HAL_UART_ErrorCallback+0x4ee>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, rxbuff_rangefinder, 128);
 8004b44:	2280      	movs	r2, #128	@ 0x80
 8004b46:	496b      	ldr	r1, [pc, #428]	@ (8004cf4 <HAL_UART_ErrorCallback+0x5d0>)
 8004b48:	4869      	ldr	r0, [pc, #420]	@ (8004cf0 <HAL_UART_ErrorCallback+0x5cc>)
 8004b4a:	f00c fe5a 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6a      	ldr	r2, [pc, #424]	@ (8004cfc <HAL_UART_ErrorCallback+0x5d8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d04a      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b58:	4b67      	ldr	r3, [pc, #412]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a68      	ldr	r2, [pc, #416]	@ (8004d00 <HAL_UART_ErrorCallback+0x5dc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d045      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b62:	4b65      	ldr	r3, [pc, #404]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a67      	ldr	r2, [pc, #412]	@ (8004d04 <HAL_UART_ErrorCallback+0x5e0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d040      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b6c:	4b62      	ldr	r3, [pc, #392]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_UART_ErrorCallback+0x5e4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d03b      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b76:	4b60      	ldr	r3, [pc, #384]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a64      	ldr	r2, [pc, #400]	@ (8004d0c <HAL_UART_ErrorCallback+0x5e8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d036      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b80:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a62      	ldr	r2, [pc, #392]	@ (8004d10 <HAL_UART_ErrorCallback+0x5ec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d031      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a61      	ldr	r2, [pc, #388]	@ (8004d14 <HAL_UART_ErrorCallback+0x5f0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d02c      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b94:	4b58      	ldr	r3, [pc, #352]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5f      	ldr	r2, [pc, #380]	@ (8004d18 <HAL_UART_ErrorCallback+0x5f4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d027      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004b9e:	4b56      	ldr	r3, [pc, #344]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_UART_ErrorCallback+0x5f8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004ba8:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_UART_ErrorCallback+0x5fc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01d      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004bb2:	4b51      	ldr	r3, [pc, #324]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_UART_ErrorCallback+0x600>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a59      	ldr	r2, [pc, #356]	@ (8004d28 <HAL_UART_ErrorCallback+0x604>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a58      	ldr	r2, [pc, #352]	@ (8004d2c <HAL_UART_ErrorCallback+0x608>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004bd0:	4b49      	ldr	r3, [pc, #292]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a56      	ldr	r2, [pc, #344]	@ (8004d30 <HAL_UART_ErrorCallback+0x60c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a55      	ldr	r2, [pc, #340]	@ (8004d34 <HAL_UART_ErrorCallback+0x610>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_UART_ErrorCallback+0x4ca>
 8004be4:	4b44      	ldr	r3, [pc, #272]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a53      	ldr	r2, [pc, #332]	@ (8004d38 <HAL_UART_ErrorCallback+0x614>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <HAL_UART_ErrorCallback+0x4dc>
 8004bee:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b40      	ldr	r3, [pc, #256]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e073      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 8004c00:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf8 <HAL_UART_ErrorCallback+0x5d4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	e06a      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
	else if(huart == &huart2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a49      	ldr	r2, [pc, #292]	@ (8004d3c <HAL_UART_ErrorCallback+0x618>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d166      	bne.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)chcmd, 16);
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	4948      	ldr	r1, [pc, #288]	@ (8004d40 <HAL_UART_ErrorCallback+0x61c>)
 8004c1e:	4847      	ldr	r0, [pc, #284]	@ (8004d3c <HAL_UART_ErrorCallback+0x618>)
 8004c20:	f00c fdef 	bl	8011802 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);	
 8004c24:	4b47      	ldr	r3, [pc, #284]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a34      	ldr	r2, [pc, #208]	@ (8004cfc <HAL_UART_ErrorCallback+0x5d8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d04a      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c2e:	4b45      	ldr	r3, [pc, #276]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a33      	ldr	r2, [pc, #204]	@ (8004d00 <HAL_UART_ErrorCallback+0x5dc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d045      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c38:	4b42      	ldr	r3, [pc, #264]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	@ (8004d04 <HAL_UART_ErrorCallback+0x5e0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d040      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c42:	4b40      	ldr	r3, [pc, #256]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a30      	ldr	r2, [pc, #192]	@ (8004d08 <HAL_UART_ErrorCallback+0x5e4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d03b      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	@ (8004d0c <HAL_UART_ErrorCallback+0x5e8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d036      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c56:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d10 <HAL_UART_ErrorCallback+0x5ec>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d031      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c60:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2b      	ldr	r2, [pc, #172]	@ (8004d14 <HAL_UART_ErrorCallback+0x5f0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02c      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c6a:	4b36      	ldr	r3, [pc, #216]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d18 <HAL_UART_ErrorCallback+0x5f4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d027      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c74:	4b33      	ldr	r3, [pc, #204]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a28      	ldr	r2, [pc, #160]	@ (8004d1c <HAL_UART_ErrorCallback+0x5f8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a27      	ldr	r2, [pc, #156]	@ (8004d20 <HAL_UART_ErrorCallback+0x5fc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c88:	4b2e      	ldr	r3, [pc, #184]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	@ (8004d24 <HAL_UART_ErrorCallback+0x600>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c92:	4b2c      	ldr	r3, [pc, #176]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a24      	ldr	r2, [pc, #144]	@ (8004d28 <HAL_UART_ErrorCallback+0x604>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004c9c:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	@ (8004d2c <HAL_UART_ErrorCallback+0x608>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004ca6:	4b27      	ldr	r3, [pc, #156]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a21      	ldr	r2, [pc, #132]	@ (8004d30 <HAL_UART_ErrorCallback+0x60c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004cb0:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d34 <HAL_UART_ErrorCallback+0x610>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_UART_ErrorCallback+0x5a0>
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <HAL_UART_ErrorCallback+0x614>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <HAL_UART_ErrorCallback+0x5b2>
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0208 	bic.w	r2, r2, #8
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e008      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <HAL_UART_ErrorCallback+0x620>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0204 	bic.w	r2, r2, #4
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	e7ff      	b.n	8004ce8 <HAL_UART_ErrorCallback+0x5c4>
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	24000990 	.word	0x24000990
 8004cf4:	30004f9c 	.word	0x30004f9c
 8004cf8:	24000e54 	.word	0x24000e54
 8004cfc:	40020010 	.word	0x40020010
 8004d00:	40020028 	.word	0x40020028
 8004d04:	40020040 	.word	0x40020040
 8004d08:	40020058 	.word	0x40020058
 8004d0c:	40020070 	.word	0x40020070
 8004d10:	40020088 	.word	0x40020088
 8004d14:	400200a0 	.word	0x400200a0
 8004d18:	400200b8 	.word	0x400200b8
 8004d1c:	40020410 	.word	0x40020410
 8004d20:	40020428 	.word	0x40020428
 8004d24:	40020440 	.word	0x40020440
 8004d28:	40020458 	.word	0x40020458
 8004d2c:	40020470 	.word	0x40020470
 8004d30:	40020488 	.word	0x40020488
 8004d34:	400204a0 	.word	0x400204a0
 8004d38:	400204b8 	.word	0x400204b8
 8004d3c:	24000ab8 	.word	0x24000ab8
 8004d40:	3000501c 	.word	0x3000501c
 8004d44:	24000f44 	.word	0x24000f44

08004d48 <mytask>:



void mytask(void const * argument)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	static switchFlag = 0;
	osDelay(5000);
 8004d50:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004d54:	f00d fcee 	bl	8012734 <osDelay>
	// SendFocusFrame.func = SetPos;
	// SendFocusData(&SendFocusFrame);
	// uart_printf("laserAdjust:%f\r\n",setFocusPos.f);
	// osDelay(100);

	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004d58:	4904      	ldr	r1, [pc, #16]	@ (8004d6c <mytask+0x24>)
 8004d5a:	4805      	ldr	r0, [pc, #20]	@ (8004d70 <mytask+0x28>)
 8004d5c:	f7fc f950 	bl	8001000 <Send2ImgModule>
	osDelay(500);
 8004d60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d64:	f00d fce6 	bl	8012734 <osDelay>
	Send2ImgModule(&ImgSendTypedef_JING,&ImgSendDataTypedef_JING);
 8004d68:	bf00      	nop
 8004d6a:	e7f5      	b.n	8004d58 <mytask+0x10>
 8004d6c:	240000d8 	.word	0x240000d8
 8004d70:	2400008c 	.word	0x2400008c

08004d74 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	@ 0x38
 8004d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d90:	4a5a      	ldr	r2, [pc, #360]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d9a:	4b58      	ldr	r3, [pc, #352]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004da8:	4b54      	ldr	r3, [pc, #336]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dae:	4a53      	ldr	r2, [pc, #332]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004db8:	4b50      	ldr	r3, [pc, #320]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dd6:	4b49      	ldr	r3, [pc, #292]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004de4:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dea:	4a44      	ldr	r2, [pc, #272]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004df4:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e02:	4b3e      	ldr	r3, [pc, #248]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e08:	4a3c      	ldr	r2, [pc, #240]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e12:	4b3a      	ldr	r3, [pc, #232]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e20:	4b36      	ldr	r3, [pc, #216]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e26:	4a35      	ldr	r2, [pc, #212]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e28:	f043 0302 	orr.w	r3, r3, #2
 8004e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e30:	4b32      	ldr	r3, [pc, #200]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e44:	4a2d      	ldr	r2, [pc, #180]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e5c:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e62:	4a26      	ldr	r2, [pc, #152]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e64:	f043 0308 	orr.w	r3, r3, #8
 8004e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e6c:	4b23      	ldr	r3, [pc, #140]	@ (8004efc <MX_GPIO_Init+0x188>)
 8004e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e80:	481f      	ldr	r0, [pc, #124]	@ (8004f00 <MX_GPIO_Init+0x18c>)
 8004e82:	f006 fd73 	bl	800b96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_PWD_GPIO_Port, RF_PWD_Pin, GPIO_PIN_RESET);
 8004e86:	2200      	movs	r2, #0
 8004e88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e8c:	481d      	ldr	r0, [pc, #116]	@ (8004f04 <MX_GPIO_Init+0x190>)
 8004e8e:	f006 fd6d 	bl	800b96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2108      	movs	r1, #8
 8004e96:	481c      	ldr	r0, [pc, #112]	@ (8004f08 <MX_GPIO_Init+0x194>)
 8004e98:	f006 fd68 	bl	800b96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4812      	ldr	r0, [pc, #72]	@ (8004f00 <MX_GPIO_Init+0x18c>)
 8004eb6:	f006 fba9 	bl	800b60c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_PWD_Pin;
 8004eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RF_PWD_GPIO_Port, &GPIO_InitStruct);
 8004ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	480c      	ldr	r0, [pc, #48]	@ (8004f04 <MX_GPIO_Init+0x190>)
 8004ed4:	f006 fb9a 	bl	800b60c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8004ed8:	2308      	movs	r3, #8
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004edc:	2301      	movs	r3, #1
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eec:	4619      	mov	r1, r3
 8004eee:	4806      	ldr	r0, [pc, #24]	@ (8004f08 <MX_GPIO_Init+0x194>)
 8004ef0:	f006 fb8c 	bl	800b60c <HAL_GPIO_Init>

}
 8004ef4:	bf00      	nop
 8004ef6:	3738      	adds	r7, #56	@ 0x38
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	58024400 	.word	0x58024400
 8004f00:	58022000 	.word	0x58022000
 8004f04:	58021400 	.word	0x58021400
 8004f08:	58021800 	.word	0x58021800

08004f0c <uart_printf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__attribute__((section("._Text_Area"))) static char buff[128];

int uart_printf(const char *fmt, ...){
 8004f0c:	b40f      	push	{r0, r1, r2, r3}
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
//  static char buff[128];
  va_list va;int ret;
  va_start(va, fmt);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	603b      	str	r3, [r7, #0]
  ret = vsprintf(buff, fmt, va);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	6939      	ldr	r1, [r7, #16]
 8004f1e:	480b      	ldr	r0, [pc, #44]	@ (8004f4c <uart_printf+0x40>)
 8004f20:	f020 fb60 	bl	80255e4 <vsiprintf>
 8004f24:	6078      	str	r0, [r7, #4]
  va_end(va);
  if (ret > 0){
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	dd07      	ble.n	8004f3c <uart_printf+0x30>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, ret, HAL_MAX_DELAY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	4905      	ldr	r1, [pc, #20]	@ (8004f4c <uart_printf+0x40>)
 8004f36:	4806      	ldr	r0, [pc, #24]	@ (8004f50 <uart_printf+0x44>)
 8004f38:	f009 fef8 	bl	800ed2c <HAL_UART_Transmit>
  }
  return ret;
 8004f3c:	687b      	ldr	r3, [r7, #4]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	3000505c 	.word	0x3000505c
 8004f50:	24000a24 	.word	0x24000a24

08004f54 <DelayMs>:



void DelayMs(uint32_t ms) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = HAL_GetTick();  // 记录当前SysTick�?
 8004f5c:	f001 fe0a 	bl	8006b74 <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - startTick) < ms) {
 8004f62:	bf00      	nop
 8004f64:	f001 fe06 	bl	8006b74 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d8f7      	bhi.n	8004f64 <DelayMs+0x10>
        // 忙等�?
    }
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004f86:	f000 f935 	bl	80051f4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004f8a:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <main+0x110>)
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11b      	bne.n	8004fce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f96:	f3bf 8f4f 	dsb	sy
}
 8004f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f9c:	f3bf 8f6f 	isb	sy
}
 8004fa0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <main+0x110>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004faa:	f3bf 8f4f 	dsb	sy
}
 8004fae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fb0:	f3bf 8f6f 	isb	sy
}
 8004fb4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004fb6:	4b36      	ldr	r3, [pc, #216]	@ (8005090 <main+0x110>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4a35      	ldr	r2, [pc, #212]	@ (8005090 <main+0x110>)
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc2:	f3bf 8f4f 	dsb	sy
}
 8004fc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fc8:	f3bf 8f6f 	isb	sy
}
 8004fcc:	e000      	b.n	8004fd0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004fce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <main+0x110>)
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d138      	bne.n	800504e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005090 <main+0x110>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe4:	f3bf 8f4f 	dsb	sy
}
 8004fe8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <main+0x110>)
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0b5b      	lsrs	r3, r3, #13
 8004ff6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ffa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	08db      	lsrs	r3, r3, #3
 8005000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005004:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800500e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005014:	491e      	ldr	r1, [pc, #120]	@ (8005090 <main+0x110>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ef      	bne.n	8005006 <main+0x86>
    } while(sets-- != 0U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	60ba      	str	r2, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8005030:	f3bf 8f4f 	dsb	sy
}
 8005034:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005036:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <main+0x110>)
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <main+0x110>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005042:	f3bf 8f4f 	dsb	sy
}
 8005046:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005048:	f3bf 8f6f 	isb	sy
}
 800504c:	e000      	b.n	8005050 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800504e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005050:	f001 fd40 	bl	8006ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005054:	f000 f81e 	bl	8005094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005058:	f7ff fe8c 	bl	8004d74 <MX_GPIO_Init>
  MX_DMA_Init();
 800505c:	f7fd fbf4 	bl	8002848 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8005060:	f000 fcc2 	bl	80059e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005064:	f000 fd0c 	bl	8005a80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005068:	f000 fd56 	bl	8005b18 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800506c:	f000 fda0 	bl	8005bb0 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8005070:	f000 fbd6 	bl	8005820 <MX_UART4_Init>
  MX_UART5_Init();
 8005074:	f000 fc20 	bl	80058b8 <MX_UART5_Init>
  MX_UART7_Init();
 8005078:	f000 fc6a 	bl	8005950 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 800507c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005080:	f001 fd84 	bl	8006b8c <HAL_Delay>
//  uart_printf("hello world");
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005084:	f7fd fc82 	bl	800298c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005088:	f00d faf1 	bl	801266e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <main+0x10c>
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b09e      	sub	sp, #120	@ 0x78
 8005098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800509a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800509e:	224c      	movs	r2, #76	@ 0x4c
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f020 fad2 	bl	802564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050a8:	f107 030c 	add.w	r3, r7, #12
 80050ac:	2220      	movs	r2, #32
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f020 facb 	bl	802564c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80050b6:	2002      	movs	r0, #2
 80050b8:	f006 fc8c 	bl	800b9d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050bc:	2300      	movs	r3, #0
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	4b49      	ldr	r3, [pc, #292]	@ (80051e8 <SystemClock_Config+0x154>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a48      	ldr	r2, [pc, #288]	@ (80051e8 <SystemClock_Config+0x154>)
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050cc:	4b46      	ldr	r3, [pc, #280]	@ (80051e8 <SystemClock_Config+0x154>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	4b45      	ldr	r3, [pc, #276]	@ (80051ec <SystemClock_Config+0x158>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	4a44      	ldr	r2, [pc, #272]	@ (80051ec <SystemClock_Config+0x158>)
 80050dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050e0:	6193      	str	r3, [r2, #24]
 80050e2:	4b42      	ldr	r3, [pc, #264]	@ (80051ec <SystemClock_Config+0x158>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80050ee:	bf00      	nop
 80050f0:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <SystemClock_Config+0x158>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fc:	d1f8      	bne.n	80050f0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	4b3c      	ldr	r3, [pc, #240]	@ (80051f0 <SystemClock_Config+0x15c>)
 8005100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005104:	4a3a      	ldr	r2, [pc, #232]	@ (80051f0 <SystemClock_Config+0x15c>)
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800510e:	4b38      	ldr	r3, [pc, #224]	@ (80051f0 <SystemClock_Config+0x15c>)
 8005110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800511c:	2300      	movs	r3, #0
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <SystemClock_Config+0x158>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4a31      	ldr	r2, [pc, #196]	@ (80051ec <SystemClock_Config+0x158>)
 8005126:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800512a:	6193      	str	r3, [r2, #24]
 800512c:	4b2f      	ldr	r3, [pc, #188]	@ (80051ec <SystemClock_Config+0x158>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4b2c      	ldr	r3, [pc, #176]	@ (80051e8 <SystemClock_Config+0x154>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a2b      	ldr	r2, [pc, #172]	@ (80051e8 <SystemClock_Config+0x154>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005142:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <SystemClock_Config+0x154>)
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800514e:	bf00      	nop
 8005150:	4b26      	ldr	r3, [pc, #152]	@ (80051ec <SystemClock_Config+0x158>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515c:	d1f8      	bne.n	8005150 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800515e:	2302      	movs	r3, #2
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8005162:	2301      	movs	r3, #1
 8005164:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005166:	2340      	movs	r3, #64	@ 0x40
 8005168:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800516a:	2302      	movs	r3, #2
 800516c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800516e:	2300      	movs	r3, #0
 8005170:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005172:	2304      	movs	r3, #4
 8005174:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8005176:	233c      	movs	r3, #60	@ 0x3c
 8005178:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800517a:	2302      	movs	r3, #2
 800517c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800517e:	2302      	movs	r3, #2
 8005180:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005182:	2302      	movs	r3, #2
 8005184:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005186:	230c      	movs	r3, #12
 8005188:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800518a:	2300      	movs	r3, #0
 800518c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005196:	4618      	mov	r0, r3
 8005198:	f006 fc56 	bl	800ba48 <HAL_RCC_OscConfig>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80051a2:	f000 f877 	bl	8005294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051a6:	233f      	movs	r3, #63	@ 0x3f
 80051a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051aa:	2303      	movs	r3, #3
 80051ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80051b2:	2308      	movs	r3, #8
 80051b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80051b6:	2340      	movs	r3, #64	@ 0x40
 80051b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80051ba:	2340      	movs	r3, #64	@ 0x40
 80051bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80051be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80051c4:	2340      	movs	r3, #64	@ 0x40
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80051c8:	f107 030c 	add.w	r3, r7, #12
 80051cc:	2104      	movs	r1, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f007 f894 	bl	800c2fc <HAL_RCC_ClockConfig>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80051da:	f000 f85b 	bl	8005294 <Error_Handler>
  }
}
 80051de:	bf00      	nop
 80051e0:	3778      	adds	r7, #120	@ 0x78
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	58000400 	.word	0x58000400
 80051ec:	58024800 	.word	0x58024800
 80051f0:	58024400 	.word	0x58024400

080051f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80051fa:	463b      	mov	r3, r7
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005206:	f001 fde5 	bl	8006dd4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800520a:	2301      	movs	r3, #1
 800520c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800520e:	2300      	movs	r3, #0
 8005210:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005216:	231f      	movs	r3, #31
 8005218:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800521a:	2387      	movs	r3, #135	@ 0x87
 800521c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800521e:	2300      	movs	r3, #0
 8005220:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005222:	2300      	movs	r3, #0
 8005224:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005226:	2301      	movs	r3, #1
 8005228:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005236:	463b      	mov	r3, r7
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fe03 	bl	8006e44 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800523e:	2301      	movs	r3, #1
 8005240:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8005242:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005246:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8005248:	230e      	movs	r3, #14
 800524a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800524c:	2300      	movs	r3, #0
 800524e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8005250:	2301      	movs	r3, #1
 8005252:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005254:	2303      	movs	r3, #3
 8005256:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005258:	463b      	mov	r3, r7
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fdf2 	bl	8006e44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005260:	2004      	movs	r0, #4
 8005262:	f001 fdcf 	bl	8006e04 <HAL_MPU_Enable>

}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005282:	f001 fc63 	bl	8006b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40001000 	.word	0x40001000

08005294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
}
 800529a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <Error_Handler+0x8>

080052a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a6:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <HAL_MspInit+0x38>)
 80052a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052ac:	4a0a      	ldr	r2, [pc, #40]	@ (80052d8 <HAL_MspInit+0x38>)
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052b6:	4b08      	ldr	r3, [pc, #32]	@ (80052d8 <HAL_MspInit+0x38>)
 80052b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052c4:	2200      	movs	r2, #0
 80052c6:	210f      	movs	r1, #15
 80052c8:	f06f 0001 	mvn.w	r0, #1
 80052cc:	f001 fd5a 	bl	8006d84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400

080052dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b090      	sub	sp, #64	@ 0x40
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d827      	bhi.n	800533a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	2036      	movs	r0, #54	@ 0x36
 80052f0:	f001 fd48 	bl	8006d84 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80052f4:	2036      	movs	r0, #54	@ 0x36
 80052f6:	f001 fd5f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80052fa:	4a29      	ldr	r2, [pc, #164]	@ (80053a0 <HAL_InitTick+0xc4>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005300:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <HAL_InitTick+0xc8>)
 8005302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005306:	4a27      	ldr	r2, [pc, #156]	@ (80053a4 <HAL_InitTick+0xc8>)
 8005308:	f043 0310 	orr.w	r3, r3, #16
 800530c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005310:	4b24      	ldr	r3, [pc, #144]	@ (80053a4 <HAL_InitTick+0xc8>)
 8005312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800531e:	f107 0210 	add.w	r2, r7, #16
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f007 fb73 	bl	800ca14 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_InitTick+0x6a>
 8005338:	e001      	b.n	800533e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e02b      	b.n	8005396 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800533e:	f007 fb3d 	bl	800c9bc <HAL_RCC_GetPCLK1Freq>
 8005342:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005344:	e004      	b.n	8005350 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005346:	f007 fb39 	bl	800c9bc <HAL_RCC_GetPCLK1Freq>
 800534a:	4603      	mov	r3, r0
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005352:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <HAL_InitTick+0xcc>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	0c9b      	lsrs	r3, r3, #18
 800535a:	3b01      	subs	r3, #1
 800535c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800535e:	4b13      	ldr	r3, [pc, #76]	@ (80053ac <HAL_InitTick+0xd0>)
 8005360:	4a13      	ldr	r2, [pc, #76]	@ (80053b0 <HAL_InitTick+0xd4>)
 8005362:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005364:	4b11      	ldr	r3, [pc, #68]	@ (80053ac <HAL_InitTick+0xd0>)
 8005366:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800536a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800536c:	4a0f      	ldr	r2, [pc, #60]	@ (80053ac <HAL_InitTick+0xd0>)
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005372:	4b0e      	ldr	r3, [pc, #56]	@ (80053ac <HAL_InitTick+0xd0>)
 8005374:	2200      	movs	r2, #0
 8005376:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_InitTick+0xd0>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800537e:	480b      	ldr	r0, [pc, #44]	@ (80053ac <HAL_InitTick+0xd0>)
 8005380:	f009 f9b6 	bl	800e6f0 <HAL_TIM_Base_Init>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d104      	bne.n	8005394 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800538a:	4808      	ldr	r0, [pc, #32]	@ (80053ac <HAL_InitTick+0xd0>)
 800538c:	f009 fa12 	bl	800e7b4 <HAL_TIM_Base_Start_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	e000      	b.n	8005396 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
}
 8005396:	4618      	mov	r0, r3
 8005398:	3740      	adds	r7, #64	@ 0x40
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	240001ec 	.word	0x240001ec
 80053a4:	58024400 	.word	0x58024400
 80053a8:	431bde83 	.word	0x431bde83
 80053ac:	24000818 	.word	0x24000818
 80053b0:	40001000 	.word	0x40001000

080053b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <NMI_Handler+0x4>

080053bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <HardFault_Handler+0x4>

080053c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <MemManage_Handler+0x4>

080053cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <BusFault_Handler+0x4>

080053d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <UsageFault_Handler+0x4>

080053dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053f0:	4802      	ldr	r0, [pc, #8]	@ (80053fc <DMA1_Stream0_IRQHandler+0x10>)
 80053f2:	f003 f891 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	24000f44 	.word	0x24000f44

08005400 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005404:	4802      	ldr	r0, [pc, #8]	@ (8005410 <DMA1_Stream1_IRQHandler+0x10>)
 8005406:	f003 f887 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	24000fbc 	.word	0x24000fbc

08005414 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005418:	4802      	ldr	r0, [pc, #8]	@ (8005424 <DMA1_Stream2_IRQHandler+0x10>)
 800541a:	f003 f87d 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	24001034 	.word	0x24001034

08005428 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800542c:	4802      	ldr	r0, [pc, #8]	@ (8005438 <DMA1_Stream3_IRQHandler+0x10>)
 800542e:	f003 f873 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	240010ac 	.word	0x240010ac

0800543c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005440:	4802      	ldr	r0, [pc, #8]	@ (800544c <DMA1_Stream4_IRQHandler+0x10>)
 8005442:	f003 f869 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	24001124 	.word	0x24001124

08005450 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005454:	4802      	ldr	r0, [pc, #8]	@ (8005460 <DMA1_Stream5_IRQHandler+0x10>)
 8005456:	f003 f85f 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2400119c 	.word	0x2400119c

08005464 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005468:	4802      	ldr	r0, [pc, #8]	@ (8005474 <DMA1_Stream6_IRQHandler+0x10>)
 800546a:	f003 f855 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	24000c74 	.word	0x24000c74

08005478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800547c:	4802      	ldr	r0, [pc, #8]	@ (8005488 <USART2_IRQHandler+0x10>)
 800547e:	f009 fce3 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	24000ab8 	.word	0x24000ab8

0800548c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005490:	4802      	ldr	r0, [pc, #8]	@ (800549c <USART3_IRQHandler+0x10>)
 8005492:	f009 fcd9 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	24000b4c 	.word	0x24000b4c

080054a0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80054a4:	4802      	ldr	r0, [pc, #8]	@ (80054b0 <DMA1_Stream7_IRQHandler+0x10>)
 80054a6:	f003 f837 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	24000cec 	.word	0x24000cec

080054b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80054b8:	4802      	ldr	r0, [pc, #8]	@ (80054c4 <UART4_IRQHandler+0x10>)
 80054ba:	f009 fcc5 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	24000868 	.word	0x24000868

080054c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80054cc:	4802      	ldr	r0, [pc, #8]	@ (80054d8 <UART5_IRQHandler+0x10>)
 80054ce:	f009 fcbb 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	240008fc 	.word	0x240008fc

080054dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054e0:	4802      	ldr	r0, [pc, #8]	@ (80054ec <TIM6_DAC_IRQHandler+0x10>)
 80054e2:	f009 f9df 	bl	800e8a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	24000818 	.word	0x24000818

080054f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80054f4:	4802      	ldr	r0, [pc, #8]	@ (8005500 <DMA2_Stream0_IRQHandler+0x10>)
 80054f6:	f003 f80f 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	24000d64 	.word	0x24000d64

08005504 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005508:	4802      	ldr	r0, [pc, #8]	@ (8005514 <DMA2_Stream1_IRQHandler+0x10>)
 800550a:	f003 f805 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	24000ddc 	.word	0x24000ddc

08005518 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <DMA2_Stream2_IRQHandler+0x10>)
 800551e:	f002 fffb 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	24000e54 	.word	0x24000e54

0800552c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005530:	4802      	ldr	r0, [pc, #8]	@ (800553c <DMA2_Stream3_IRQHandler+0x10>)
 8005532:	f002 fff1 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	24000ecc 	.word	0x24000ecc

08005540 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8005544:	4802      	ldr	r0, [pc, #8]	@ (8005550 <ETH_IRQHandler+0x10>)
 8005546:	f004 fecd 	bl	800a2e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	24001274 	.word	0x24001274

08005554 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005558:	4802      	ldr	r0, [pc, #8]	@ (8005564 <USART6_IRQHandler+0x10>)
 800555a:	f009 fc75 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
//  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
  /* USER CODE END USART6_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	24000be0 	.word	0x24000be0

08005568 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800556c:	4802      	ldr	r0, [pc, #8]	@ (8005578 <UART7_IRQHandler+0x10>)
 800556e:	f009 fc6b 	bl	800ee48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005572:	bf00      	nop
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	24000990 	.word	0x24000990

0800557c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return 1;
 8005580:	2301      	movs	r3, #1
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <_kill>:

int _kill(int pid, int sig)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005596:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <_kill+0x20>)
 8005598:	2216      	movs	r2, #22
 800559a:	601a      	str	r2, [r3, #0]
  return -1;
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2400bfc0 	.word	0x2400bfc0

080055b0 <_exit>:

void _exit (int status)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ffe5 	bl	800558c <_kill>
  while (1) {}    /* Make sure we hang here */
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <_exit+0x12>

080055c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	e00a      	b.n	80055ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055d8:	f3af 8000 	nop.w
 80055dc:	4601      	mov	r1, r0
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	60ba      	str	r2, [r7, #8]
 80055e4:	b2ca      	uxtb	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	dbf0      	blt.n	80055d8 <_read+0x12>
  }

  return len;
 80055f6:	687b      	ldr	r3, [r7, #4]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e009      	b.n	8005626 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	60ba      	str	r2, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3301      	adds	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	dbf1      	blt.n	8005612 <_write+0x12>
  }
  return len;
 800562e:	687b      	ldr	r3, [r7, #4]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_close>:

int _close(int file)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005660:	605a      	str	r2, [r3, #4]
  return 0;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_isatty>:

int _isatty(int file)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005678:	2301      	movs	r3, #1
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <_sbrk+0x5c>)
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <_sbrk+0x60>)
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056b4:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <_sbrk+0x64>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056bc:	4b11      	ldr	r3, [pc, #68]	@ (8005704 <_sbrk+0x64>)
 80056be:	4a12      	ldr	r2, [pc, #72]	@ (8005708 <_sbrk+0x68>)
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056c2:	4b10      	ldr	r3, [pc, #64]	@ (8005704 <_sbrk+0x64>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d205      	bcs.n	80056dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <_sbrk+0x6c>)
 80056d2:	220c      	movs	r2, #12
 80056d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	e009      	b.n	80056f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80056dc:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <_sbrk+0x64>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056e2:	4b08      	ldr	r3, [pc, #32]	@ (8005704 <_sbrk+0x64>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	4a06      	ldr	r2, [pc, #24]	@ (8005704 <_sbrk+0x64>)
 80056ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056ee:	68fb      	ldr	r3, [r7, #12]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	24080000 	.word	0x24080000
 8005700:	00000400 	.word	0x00000400
 8005704:	24000864 	.word	0x24000864
 8005708:	2400c110 	.word	0x2400c110
 800570c:	2400bfc0 	.word	0x2400bfc0

08005710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005714:	4b37      	ldr	r3, [pc, #220]	@ (80057f4 <SystemInit+0xe4>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	4a36      	ldr	r2, [pc, #216]	@ (80057f4 <SystemInit+0xe4>)
 800571c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005724:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <SystemInit+0xe8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2b06      	cmp	r3, #6
 800572e:	d807      	bhi.n	8005740 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005730:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <SystemInit+0xe8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f023 030f 	bic.w	r3, r3, #15
 8005738:	4a2f      	ldr	r2, [pc, #188]	@ (80057f8 <SystemInit+0xe8>)
 800573a:	f043 0307 	orr.w	r3, r3, #7
 800573e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005740:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <SystemInit+0xec>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2d      	ldr	r2, [pc, #180]	@ (80057fc <SystemInit+0xec>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800574c:	4b2b      	ldr	r3, [pc, #172]	@ (80057fc <SystemInit+0xec>)
 800574e:	2200      	movs	r2, #0
 8005750:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005752:	4b2a      	ldr	r3, [pc, #168]	@ (80057fc <SystemInit+0xec>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4929      	ldr	r1, [pc, #164]	@ (80057fc <SystemInit+0xec>)
 8005758:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <SystemInit+0xf0>)
 800575a:	4013      	ands	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800575e:	4b26      	ldr	r3, [pc, #152]	@ (80057f8 <SystemInit+0xe8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800576a:	4b23      	ldr	r3, [pc, #140]	@ (80057f8 <SystemInit+0xe8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 030f 	bic.w	r3, r3, #15
 8005772:	4a21      	ldr	r2, [pc, #132]	@ (80057f8 <SystemInit+0xe8>)
 8005774:	f043 0307 	orr.w	r3, r3, #7
 8005778:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800577a:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <SystemInit+0xec>)
 800577c:	2200      	movs	r2, #0
 800577e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005780:	4b1e      	ldr	r3, [pc, #120]	@ (80057fc <SystemInit+0xec>)
 8005782:	2200      	movs	r2, #0
 8005784:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005786:	4b1d      	ldr	r3, [pc, #116]	@ (80057fc <SystemInit+0xec>)
 8005788:	2200      	movs	r2, #0
 800578a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800578c:	4b1b      	ldr	r3, [pc, #108]	@ (80057fc <SystemInit+0xec>)
 800578e:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <SystemInit+0xf4>)
 8005790:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <SystemInit+0xec>)
 8005794:	4a1c      	ldr	r2, [pc, #112]	@ (8005808 <SystemInit+0xf8>)
 8005796:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005798:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <SystemInit+0xec>)
 800579a:	4a1c      	ldr	r2, [pc, #112]	@ (800580c <SystemInit+0xfc>)
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800579e:	4b17      	ldr	r3, [pc, #92]	@ (80057fc <SystemInit+0xec>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <SystemInit+0xec>)
 80057a6:	4a19      	ldr	r2, [pc, #100]	@ (800580c <SystemInit+0xfc>)
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80057aa:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <SystemInit+0xec>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80057b0:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <SystemInit+0xec>)
 80057b2:	4a16      	ldr	r2, [pc, #88]	@ (800580c <SystemInit+0xfc>)
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80057b6:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <SystemInit+0xec>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80057bc:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <SystemInit+0xec>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0e      	ldr	r2, [pc, #56]	@ (80057fc <SystemInit+0xec>)
 80057c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80057c8:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <SystemInit+0xec>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80057ce:	4b10      	ldr	r3, [pc, #64]	@ (8005810 <SystemInit+0x100>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <SystemInit+0x104>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057da:	d202      	bcs.n	80057e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80057dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <SystemInit+0x108>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80057e2:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <SystemInit+0x10c>)
 80057e4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80057e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000ed00 	.word	0xe000ed00
 80057f8:	52002000 	.word	0x52002000
 80057fc:	58024400 	.word	0x58024400
 8005800:	eaf6ed7f 	.word	0xeaf6ed7f
 8005804:	02020200 	.word	0x02020200
 8005808:	01ff0000 	.word	0x01ff0000
 800580c:	01010280 	.word	0x01010280
 8005810:	5c001000 	.word	0x5c001000
 8005814:	ffff0000 	.word	0xffff0000
 8005818:	51008108 	.word	0x51008108
 800581c:	52004000 	.word	0x52004000

08005820 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005824:	4b22      	ldr	r3, [pc, #136]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005826:	4a23      	ldr	r2, [pc, #140]	@ (80058b4 <MX_UART4_Init+0x94>)
 8005828:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800582a:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <MX_UART4_Init+0x90>)
 800582c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005830:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005832:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005838:	4b1d      	ldr	r3, [pc, #116]	@ (80058b0 <MX_UART4_Init+0x90>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800583e:	4b1c      	ldr	r3, [pc, #112]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005840:	2200      	movs	r2, #0
 8005842:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005844:	4b1a      	ldr	r3, [pc, #104]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005846:	220c      	movs	r2, #12
 8005848:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800584a:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <MX_UART4_Init+0x90>)
 800584c:	2200      	movs	r2, #0
 800584e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005850:	4b17      	ldr	r3, [pc, #92]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005856:	4b16      	ldr	r3, [pc, #88]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005858:	2200      	movs	r2, #0
 800585a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800585c:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <MX_UART4_Init+0x90>)
 800585e:	2200      	movs	r2, #0
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005862:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <MX_UART4_Init+0x90>)
 8005864:	2200      	movs	r2, #0
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005868:	4811      	ldr	r0, [pc, #68]	@ (80058b0 <MX_UART4_Init+0x90>)
 800586a:	f009 fa0f 	bl	800ec8c <HAL_UART_Init>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005874:	f7ff fd0e 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005878:	2100      	movs	r1, #0
 800587a:	480d      	ldr	r0, [pc, #52]	@ (80058b0 <MX_UART4_Init+0x90>)
 800587c:	f00b fef5 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8005886:	f7ff fd05 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800588a:	2100      	movs	r1, #0
 800588c:	4808      	ldr	r0, [pc, #32]	@ (80058b0 <MX_UART4_Init+0x90>)
 800588e:	f00b ff2a 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005898:	f7ff fcfc 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800589c:	4804      	ldr	r0, [pc, #16]	@ (80058b0 <MX_UART4_Init+0x90>)
 800589e:	f00b feab 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80058a8:	f7ff fcf4 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	24000868 	.word	0x24000868
 80058b4:	40004c00 	.word	0x40004c00

080058b8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80058bc:	4b22      	ldr	r3, [pc, #136]	@ (8005948 <MX_UART5_Init+0x90>)
 80058be:	4a23      	ldr	r2, [pc, #140]	@ (800594c <MX_UART5_Init+0x94>)
 80058c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80058c2:	4b21      	ldr	r3, [pc, #132]	@ (8005948 <MX_UART5_Init+0x90>)
 80058c4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80058c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80058ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005948 <MX_UART5_Init+0x90>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005948 <MX_UART5_Init+0x90>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80058d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005948 <MX_UART5_Init+0x90>)
 80058d8:	2200      	movs	r2, #0
 80058da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80058dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005948 <MX_UART5_Init+0x90>)
 80058de:	220c      	movs	r2, #12
 80058e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058e2:	4b19      	ldr	r3, [pc, #100]	@ (8005948 <MX_UART5_Init+0x90>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80058e8:	4b17      	ldr	r3, [pc, #92]	@ (8005948 <MX_UART5_Init+0x90>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ee:	4b16      	ldr	r3, [pc, #88]	@ (8005948 <MX_UART5_Init+0x90>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058f4:	4b14      	ldr	r3, [pc, #80]	@ (8005948 <MX_UART5_Init+0x90>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058fa:	4b13      	ldr	r3, [pc, #76]	@ (8005948 <MX_UART5_Init+0x90>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005900:	4811      	ldr	r0, [pc, #68]	@ (8005948 <MX_UART5_Init+0x90>)
 8005902:	f009 f9c3 	bl	800ec8c <HAL_UART_Init>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800590c:	f7ff fcc2 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005910:	2100      	movs	r1, #0
 8005912:	480d      	ldr	r0, [pc, #52]	@ (8005948 <MX_UART5_Init+0x90>)
 8005914:	f00b fea9 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800591e:	f7ff fcb9 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005922:	2100      	movs	r1, #0
 8005924:	4808      	ldr	r0, [pc, #32]	@ (8005948 <MX_UART5_Init+0x90>)
 8005926:	f00b fede 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8005930:	f7ff fcb0 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8005934:	4804      	ldr	r0, [pc, #16]	@ (8005948 <MX_UART5_Init+0x90>)
 8005936:	f00b fe5f 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8005940:	f7ff fca8 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}
 8005948:	240008fc 	.word	0x240008fc
 800594c:	40005000 	.word	0x40005000

08005950 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005954:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005956:	4a23      	ldr	r2, [pc, #140]	@ (80059e4 <MX_UART7_Init+0x94>)
 8005958:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800595a:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <MX_UART7_Init+0x90>)
 800595c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005960:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8005962:	4b1f      	ldr	r3, [pc, #124]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005964:	2200      	movs	r2, #0
 8005966:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005968:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <MX_UART7_Init+0x90>)
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800596e:	4b1c      	ldr	r3, [pc, #112]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005970:	2200      	movs	r2, #0
 8005972:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005974:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005976:	220c      	movs	r2, #12
 8005978:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800597a:	4b19      	ldr	r3, [pc, #100]	@ (80059e0 <MX_UART7_Init+0x90>)
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005980:	4b17      	ldr	r3, [pc, #92]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005982:	2200      	movs	r2, #0
 8005984:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005986:	4b16      	ldr	r3, [pc, #88]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005988:	2200      	movs	r2, #0
 800598a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800598c:	4b14      	ldr	r3, [pc, #80]	@ (80059e0 <MX_UART7_Init+0x90>)
 800598e:	2200      	movs	r2, #0
 8005990:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005992:	4b13      	ldr	r3, [pc, #76]	@ (80059e0 <MX_UART7_Init+0x90>)
 8005994:	2200      	movs	r2, #0
 8005996:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005998:	4811      	ldr	r0, [pc, #68]	@ (80059e0 <MX_UART7_Init+0x90>)
 800599a:	f009 f977 	bl	800ec8c <HAL_UART_Init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80059a4:	f7ff fc76 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059a8:	2100      	movs	r1, #0
 80059aa:	480d      	ldr	r0, [pc, #52]	@ (80059e0 <MX_UART7_Init+0x90>)
 80059ac:	f00b fe5d 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80059b6:	f7ff fc6d 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80059ba:	2100      	movs	r1, #0
 80059bc:	4808      	ldr	r0, [pc, #32]	@ (80059e0 <MX_UART7_Init+0x90>)
 80059be:	f00b fe92 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80059c8:	f7ff fc64 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80059cc:	4804      	ldr	r0, [pc, #16]	@ (80059e0 <MX_UART7_Init+0x90>)
 80059ce:	f00b fe13 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80059d8:	f7ff fc5c 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	24000990 	.word	0x24000990
 80059e4:	40007800 	.word	0x40007800

080059e8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059ec:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 80059ee:	4a23      	ldr	r2, [pc, #140]	@ (8005a7c <MX_USART1_UART_Init+0x94>)
 80059f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80059f2:	4b21      	ldr	r3, [pc, #132]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 80059f4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80059f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a00:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a06:	4b1c      	ldr	r3, [pc, #112]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a0e:	220c      	movs	r2, #12
 8005a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a12:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a1e:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a24:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a2a:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a30:	4811      	ldr	r0, [pc, #68]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a32:	f009 f92b 	bl	800ec8c <HAL_UART_Init>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005a3c:	f7ff fc2a 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a40:	2100      	movs	r1, #0
 8005a42:	480d      	ldr	r0, [pc, #52]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a44:	f00b fe11 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005a4e:	f7ff fc21 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a52:	2100      	movs	r1, #0
 8005a54:	4808      	ldr	r0, [pc, #32]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a56:	f00b fe46 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005a60:	f7ff fc18 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005a64:	4804      	ldr	r0, [pc, #16]	@ (8005a78 <MX_USART1_UART_Init+0x90>)
 8005a66:	f00b fdc7 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005a70:	f7ff fc10 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	24000a24 	.word	0x24000a24
 8005a7c:	40011000 	.word	0x40011000

08005a80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a84:	4b22      	ldr	r3, [pc, #136]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005a86:	4a23      	ldr	r2, [pc, #140]	@ (8005b14 <MX_USART2_UART_Init+0x94>)
 8005a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8005a8a:	4b21      	ldr	r3, [pc, #132]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005a8c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a92:	4b1f      	ldr	r3, [pc, #124]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a98:	4b1d      	ldr	r3, [pc, #116]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aaa:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ab0:	4b17      	ldr	r3, [pc, #92]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ab6:	4b16      	ldr	r3, [pc, #88]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005abc:	4b14      	ldr	r3, [pc, #80]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ac8:	4811      	ldr	r0, [pc, #68]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005aca:	f009 f8df 	bl	800ec8c <HAL_UART_Init>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005ad4:	f7ff fbde 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ad8:	2100      	movs	r1, #0
 8005ada:	480d      	ldr	r0, [pc, #52]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005adc:	f00b fdc5 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005ae6:	f7ff fbd5 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aea:	2100      	movs	r1, #0
 8005aec:	4808      	ldr	r0, [pc, #32]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005aee:	f00b fdfa 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005af8:	f7ff fbcc 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005afc:	4804      	ldr	r0, [pc, #16]	@ (8005b10 <MX_USART2_UART_Init+0x90>)
 8005afe:	f00b fd7b 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005b08:	f7ff fbc4 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	24000ab8 	.word	0x24000ab8
 8005b14:	40004400 	.word	0x40004400

08005b18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b1e:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <MX_USART3_UART_Init+0x94>)
 8005b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8005b22:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b24:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8005b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b3e:	220c      	movs	r2, #12
 8005b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b42:	4b19      	ldr	r3, [pc, #100]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b4e:	4b16      	ldr	r3, [pc, #88]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b54:	4b14      	ldr	r3, [pc, #80]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005b60:	4811      	ldr	r0, [pc, #68]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b62:	f009 f893 	bl	800ec8c <HAL_UART_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005b6c:	f7ff fb92 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b70:	2100      	movs	r1, #0
 8005b72:	480d      	ldr	r0, [pc, #52]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b74:	f00b fd79 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005b7e:	f7ff fb89 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b82:	2100      	movs	r1, #0
 8005b84:	4808      	ldr	r0, [pc, #32]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b86:	f00b fdae 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005b90:	f7ff fb80 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005b94:	4804      	ldr	r0, [pc, #16]	@ (8005ba8 <MX_USART3_UART_Init+0x90>)
 8005b96:	f00b fd2f 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005ba0:	f7ff fb78 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ba4:	bf00      	nop
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	24000b4c 	.word	0x24000b4c
 8005bac:	40004800 	.word	0x40004800

08005bb0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005bb4:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bb6:	4a23      	ldr	r2, [pc, #140]	@ (8005c44 <MX_USART6_UART_Init+0x94>)
 8005bb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005bba:	4b21      	ldr	r3, [pc, #132]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005bc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005bce:	4b1c      	ldr	r3, [pc, #112]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bda:	4b19      	ldr	r3, [pc, #100]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005be0:	4b17      	ldr	r3, [pc, #92]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005be6:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bec:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005bf8:	4811      	ldr	r0, [pc, #68]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005bfa:	f009 f847 	bl	800ec8c <HAL_UART_Init>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8005c04:	f7ff fb46 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c08:	2100      	movs	r1, #0
 8005c0a:	480d      	ldr	r0, [pc, #52]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005c0c:	f00b fd2d 	bl	801166a <HAL_UARTEx_SetTxFifoThreshold>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8005c16:	f7ff fb3d 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4808      	ldr	r0, [pc, #32]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005c1e:	f00b fd62 	bl	80116e6 <HAL_UARTEx_SetRxFifoThreshold>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8005c28:	f7ff fb34 	bl	8005294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8005c2c:	4804      	ldr	r0, [pc, #16]	@ (8005c40 <MX_USART6_UART_Init+0x90>)
 8005c2e:	f00b fce3 	bl	80115f8 <HAL_UARTEx_DisableFifoMode>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8005c38:	f7ff fb2c 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005c3c:	bf00      	nop
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	24000be0 	.word	0x24000be0
 8005c44:	40011400 	.word	0x40011400

08005c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b0ca      	sub	sp, #296	@ 0x128
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005c52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c56:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c58:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c68:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005c6c:	22c0      	movs	r2, #192	@ 0xc0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f01f fceb 	bl	802564c <memset>
  if(uartHandle->Instance==UART4)
 8005c76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005c7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a72      	ldr	r2, [pc, #456]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	f040 80f1 	bne.w	8005e6c <HAL_UART_MspInit+0x224>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005c8a:	f04f 0202 	mov.w	r2, #2
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f006 fef9 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8005cac:	f7ff faf2 	bl	8005294 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005cb0:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cb6:	4a66      	ldr	r2, [pc, #408]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005cc0:	4b63      	ldr	r3, [pc, #396]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cce:	4b60      	ldr	r3, [pc, #384]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005cde:	4b5c      	ldr	r3, [pc, #368]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cec:	4b58      	ldr	r3, [pc, #352]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cf2:	4a57      	ldr	r2, [pc, #348]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005cfc:	4b54      	ldr	r3, [pc, #336]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	2302      	movs	r3, #2
 8005d12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005d22:	2308      	movs	r3, #8
 8005d24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d28:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4849      	ldr	r0, [pc, #292]	@ (8005e54 <HAL_UART_MspInit+0x20c>)
 8005d30:	f005 fc6c 	bl	800b60c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005d4e:	2308      	movs	r3, #8
 8005d50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d54:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005d58:	4619      	mov	r1, r3
 8005d5a:	483f      	ldr	r0, [pc, #252]	@ (8005e58 <HAL_UART_MspInit+0x210>)
 8005d5c:	f005 fc56 	bl	800b60c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream6;
 8005d60:	4b3e      	ldr	r3, [pc, #248]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d62:	4a3f      	ldr	r2, [pc, #252]	@ (8005e60 <HAL_UART_MspInit+0x218>)
 8005d64:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005d66:	4b3d      	ldr	r3, [pc, #244]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d68:	223f      	movs	r2, #63	@ 0x3f
 8005d6a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d72:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d78:	4b38      	ldr	r3, [pc, #224]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d7e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d80:	4b36      	ldr	r3, [pc, #216]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d86:	4b35      	ldr	r3, [pc, #212]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005d8c:	4b33      	ldr	r3, [pc, #204]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d92:	4b32      	ldr	r3, [pc, #200]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d98:	4b30      	ldr	r3, [pc, #192]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005d9e:	482f      	ldr	r0, [pc, #188]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005da0:	f001 f890 	bl	8006ec4 <HAL_DMA_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8005daa:	f7ff fa73 	bl	8005294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005dae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005db2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a28      	ldr	r2, [pc, #160]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005dba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005dbe:	4a27      	ldr	r2, [pc, #156]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005dc0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005dc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream7;
 8005dcc:	4b25      	ldr	r3, [pc, #148]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005dce:	4a26      	ldr	r2, [pc, #152]	@ (8005e68 <HAL_UART_MspInit+0x220>)
 8005dd0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005dd2:	4b24      	ldr	r3, [pc, #144]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005dd4:	2240      	movs	r2, #64	@ 0x40
 8005dd6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dd8:	4b22      	ldr	r3, [pc, #136]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005dda:	2240      	movs	r2, #64	@ 0x40
 8005ddc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dde:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005de4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005de6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dea:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dec:	4b1d      	ldr	r3, [pc, #116]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005df8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005dfe:	4b19      	ldr	r3, [pc, #100]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e04:	4b17      	ldr	r3, [pc, #92]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005e0a:	4816      	ldr	r0, [pc, #88]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e0c:	f001 f85a 	bl	8006ec4 <HAL_DMA_Init>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_UART_MspInit+0x1d2>
    {
      Error_Handler();
 8005e16:	f7ff fa3d 	bl	8005294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8005e1a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e1e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a0f      	ldr	r2, [pc, #60]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e26:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005e28:	4a0e      	ldr	r2, [pc, #56]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e2a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e2e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005e36:	2200      	movs	r2, #0
 8005e38:	2105      	movs	r1, #5
 8005e3a:	2034      	movs	r0, #52	@ 0x34
 8005e3c:	f000 ffa2 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005e40:	2034      	movs	r0, #52	@ 0x34
 8005e42:	f000 ffb9 	bl	8006db8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005e46:	f000 bd02 	b.w	800684e <HAL_UART_MspInit+0xc06>
 8005e4a:	bf00      	nop
 8005e4c:	40004c00 	.word	0x40004c00
 8005e50:	58024400 	.word	0x58024400
 8005e54:	58020000 	.word	0x58020000
 8005e58:	58020800 	.word	0x58020800
 8005e5c:	24000c74 	.word	0x24000c74
 8005e60:	400200a0 	.word	0x400200a0
 8005e64:	24000cec 	.word	0x24000cec
 8005e68:	400200b8 	.word	0x400200b8
  else if(uartHandle->Instance==UART5)
 8005e6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005e70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a71      	ldr	r2, [pc, #452]	@ (8006040 <HAL_UART_MspInit+0x3f8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	f040 80f0 	bne.w	8006060 <HAL_UART_MspInit+0x418>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8005e80:	f04f 0202 	mov.w	r2, #2
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005e96:	4618      	mov	r0, r3
 8005e98:	f006 fdfe 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8005ea2:	f7ff f9f7 	bl	8005294 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005ea6:	4b67      	ldr	r3, [pc, #412]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eac:	4a65      	ldr	r2, [pc, #404]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005eb6:	4b63      	ldr	r3, [pc, #396]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eca:	4a5e      	ldr	r2, [pc, #376]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ecc:	f043 0304 	orr.w	r3, r3, #4
 8005ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ee2:	4b58      	ldr	r3, [pc, #352]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ee8:	4a56      	ldr	r2, [pc, #344]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005eea:	f043 0308 	orr.w	r3, r3, #8
 8005eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ef2:	4b54      	ldr	r3, [pc, #336]	@ (8006044 <HAL_UART_MspInit+0x3fc>)
 8005ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f04:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f20:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005f24:	4619      	mov	r1, r3
 8005f26:	4848      	ldr	r0, [pc, #288]	@ (8006048 <HAL_UART_MspInit+0x400>)
 8005f28:	f005 fb70 	bl	800b60c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f32:	2302      	movs	r3, #2
 8005f34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005f44:	2308      	movs	r3, #8
 8005f46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f4a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8005f4e:	4619      	mov	r1, r3
 8005f50:	483e      	ldr	r0, [pc, #248]	@ (800604c <HAL_UART_MspInit+0x404>)
 8005f52:	f005 fb5b 	bl	800b60c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA2_Stream0;
 8005f56:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f58:	4a3e      	ldr	r2, [pc, #248]	@ (8006054 <HAL_UART_MspInit+0x40c>)
 8005f5a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f5e:	2241      	movs	r2, #65	@ 0x41
 8005f60:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f62:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f68:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f6e:	4b38      	ldr	r3, [pc, #224]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f74:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f76:	4b36      	ldr	r3, [pc, #216]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f7c:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8005f82:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f88:	4b31      	ldr	r3, [pc, #196]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f8e:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005f94:	482e      	ldr	r0, [pc, #184]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005f96:	f000 ff95 	bl	8006ec4 <HAL_DMA_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8005fa0:	f7ff f978 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8005fa4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005fa8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005fb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005fb4:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <HAL_UART_MspInit+0x408>)
 8005fb6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005fba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA2_Stream1;
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fc4:	4a25      	ldr	r2, [pc, #148]	@ (800605c <HAL_UART_MspInit+0x414>)
 8005fc6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8005fc8:	4b23      	ldr	r3, [pc, #140]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fca:	2242      	movs	r2, #66	@ 0x42
 8005fcc:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fce:	4b22      	ldr	r3, [pc, #136]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fd0:	2240      	movs	r2, #64	@ 0x40
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fd4:	4b20      	ldr	r3, [pc, #128]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fda:	4b1f      	ldr	r3, [pc, #124]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fe0:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005fee:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ff4:	4b18      	ldr	r3, [pc, #96]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ffa:	4b17      	ldr	r3, [pc, #92]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006000:	4815      	ldr	r0, [pc, #84]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8006002:	f000 ff5f 	bl	8006ec4 <HAL_DMA_Init>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 800600c:	f7ff f942 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8006010:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006014:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a0f      	ldr	r2, [pc, #60]	@ (8006058 <HAL_UART_MspInit+0x410>)
 800601c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800601e:	4a0e      	ldr	r2, [pc, #56]	@ (8006058 <HAL_UART_MspInit+0x410>)
 8006020:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800602c:	2200      	movs	r2, #0
 800602e:	2105      	movs	r1, #5
 8006030:	2035      	movs	r0, #53	@ 0x35
 8006032:	f000 fea7 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006036:	2035      	movs	r0, #53	@ 0x35
 8006038:	f000 febe 	bl	8006db8 <HAL_NVIC_EnableIRQ>
}
 800603c:	f000 bc07 	b.w	800684e <HAL_UART_MspInit+0xc06>
 8006040:	40005000 	.word	0x40005000
 8006044:	58024400 	.word	0x58024400
 8006048:	58020800 	.word	0x58020800
 800604c:	58020c00 	.word	0x58020c00
 8006050:	24000d64 	.word	0x24000d64
 8006054:	40020410 	.word	0x40020410
 8006058:	24000ddc 	.word	0x24000ddc
 800605c:	40020428 	.word	0x40020428
  else if(uartHandle->Instance==UART7)
 8006060:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006064:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a8b      	ldr	r2, [pc, #556]	@ (800629c <HAL_UART_MspInit+0x654>)
 800606e:	4293      	cmp	r3, r2
 8006070:	f040 80ba 	bne.w	80061e8 <HAL_UART_MspInit+0x5a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006074:	f04f 0202 	mov.w	r2, #2
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006086:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800608a:	4618      	mov	r0, r3
 800608c:	f006 fd04 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_UART_MspInit+0x452>
      Error_Handler();
 8006096:	f7ff f8fd 	bl	8005294 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800609a:	4b81      	ldr	r3, [pc, #516]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 800609c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060a0:	4a7f      	ldr	r2, [pc, #508]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 80060a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060aa:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 80060ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060b8:	4b79      	ldr	r3, [pc, #484]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 80060ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060be:	4a78      	ldr	r2, [pc, #480]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060c8:	4b75      	ldr	r3, [pc, #468]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 80060ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060d6:	23c0      	movs	r3, #192	@ 0xc0
 80060d8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060dc:	2302      	movs	r3, #2
 80060de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80060ee:	2307      	movs	r3, #7
 80060f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060f4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80060f8:	4619      	mov	r1, r3
 80060fa:	486a      	ldr	r0, [pc, #424]	@ (80062a4 <HAL_UART_MspInit+0x65c>)
 80060fc:	f005 fa86 	bl	800b60c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA2_Stream2;
 8006100:	4b69      	ldr	r3, [pc, #420]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006102:	4a6a      	ldr	r2, [pc, #424]	@ (80062ac <HAL_UART_MspInit+0x664>)
 8006104:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8006106:	4b68      	ldr	r3, [pc, #416]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006108:	224f      	movs	r2, #79	@ 0x4f
 800610a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800610c:	4b66      	ldr	r3, [pc, #408]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006112:	4b65      	ldr	r3, [pc, #404]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006114:	2200      	movs	r2, #0
 8006116:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006118:	4b63      	ldr	r3, [pc, #396]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 800611a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800611e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006120:	4b61      	ldr	r3, [pc, #388]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006122:	2200      	movs	r2, #0
 8006124:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006126:	4b60      	ldr	r3, [pc, #384]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800612c:	4b5e      	ldr	r3, [pc, #376]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006132:	4b5d      	ldr	r3, [pc, #372]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006134:	2200      	movs	r2, #0
 8006136:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006138:	4b5b      	ldr	r3, [pc, #364]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 800613a:	2200      	movs	r2, #0
 800613c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800613e:	485a      	ldr	r0, [pc, #360]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006140:	f000 fec0 	bl	8006ec4 <HAL_DMA_Init>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_UART_MspInit+0x506>
      Error_Handler();
 800614a:	f7ff f8a3 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800614e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006152:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a53      	ldr	r2, [pc, #332]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 800615a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800615e:	4a52      	ldr	r2, [pc, #328]	@ (80062a8 <HAL_UART_MspInit+0x660>)
 8006160:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006164:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart7_tx.Instance = DMA2_Stream3;
 800616c:	4b50      	ldr	r3, [pc, #320]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 800616e:	4a51      	ldr	r2, [pc, #324]	@ (80062b4 <HAL_UART_MspInit+0x66c>)
 8006170:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006172:	4b4f      	ldr	r3, [pc, #316]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 8006174:	2250      	movs	r2, #80	@ 0x50
 8006176:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006178:	4b4d      	ldr	r3, [pc, #308]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 800617a:	2240      	movs	r2, #64	@ 0x40
 800617c:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800617e:	4b4c      	ldr	r3, [pc, #304]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 8006180:	2200      	movs	r2, #0
 8006182:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006184:	4b4a      	ldr	r3, [pc, #296]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 8006186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800618a:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800618c:	4b48      	ldr	r3, [pc, #288]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 800618e:	2200      	movs	r2, #0
 8006190:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006192:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006198:	4b45      	ldr	r3, [pc, #276]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 800619a:	2200      	movs	r2, #0
 800619c:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800619e:	4b44      	ldr	r3, [pc, #272]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061a4:	4b42      	ldr	r3, [pc, #264]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80061aa:	4841      	ldr	r0, [pc, #260]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 80061ac:	f000 fe8a 	bl	8006ec4 <HAL_DMA_Init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_UART_MspInit+0x572>
      Error_Handler();
 80061b6:	f7ff f86d 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80061ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3a      	ldr	r2, [pc, #232]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 80061c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80061c8:	4a39      	ldr	r2, [pc, #228]	@ (80062b0 <HAL_UART_MspInit+0x668>)
 80061ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80061d6:	2200      	movs	r2, #0
 80061d8:	2105      	movs	r1, #5
 80061da:	2052      	movs	r0, #82	@ 0x52
 80061dc:	f000 fdd2 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80061e0:	2052      	movs	r0, #82	@ 0x52
 80061e2:	f000 fde9 	bl	8006db8 <HAL_NVIC_EnableIRQ>
}
 80061e6:	e332      	b.n	800684e <HAL_UART_MspInit+0xc06>
  else if(uartHandle->Instance==USART1)
 80061e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80061ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <HAL_UART_MspInit+0x670>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d162      	bne.n	80062c0 <HAL_UART_MspInit+0x678>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80061fa:	f04f 0201 	mov.w	r2, #1
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800620c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006210:	4618      	mov	r0, r3
 8006212:	f006 fc41 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_UART_MspInit+0x5d8>
      Error_Handler();
 800621c:	f7ff f83a 	bl	8005294 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006220:	4b1f      	ldr	r3, [pc, #124]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006226:	4a1e      	ldr	r2, [pc, #120]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006228:	f043 0310 	orr.w	r3, r3, #16
 800622c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006230:	4b1b      	ldr	r3, [pc, #108]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800623e:	4b18      	ldr	r3, [pc, #96]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006244:	4a16      	ldr	r2, [pc, #88]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800624e:	4b14      	ldr	r3, [pc, #80]	@ (80062a0 <HAL_UART_MspInit+0x658>)
 8006250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006254:	f003 0201 	and.w	r2, r3, #1
 8006258:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800625c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006266:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800626a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800626c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006270:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006274:	2302      	movs	r3, #2
 8006276:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006286:	2307      	movs	r3, #7
 8006288:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800628c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006290:	4619      	mov	r1, r3
 8006292:	480a      	ldr	r0, [pc, #40]	@ (80062bc <HAL_UART_MspInit+0x674>)
 8006294:	f005 f9ba 	bl	800b60c <HAL_GPIO_Init>
}
 8006298:	e2d9      	b.n	800684e <HAL_UART_MspInit+0xc06>
 800629a:	bf00      	nop
 800629c:	40007800 	.word	0x40007800
 80062a0:	58024400 	.word	0x58024400
 80062a4:	58021400 	.word	0x58021400
 80062a8:	24000e54 	.word	0x24000e54
 80062ac:	40020440 	.word	0x40020440
 80062b0:	24000ecc 	.word	0x24000ecc
 80062b4:	40020458 	.word	0x40020458
 80062b8:	40011000 	.word	0x40011000
 80062bc:	58020000 	.word	0x58020000
  else if(uartHandle->Instance==USART2)
 80062c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80062c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7c      	ldr	r2, [pc, #496]	@ (80064c0 <HAL_UART_MspInit+0x878>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f040 8106 	bne.w	80064e0 <HAL_UART_MspInit+0x898>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80062d4:	f04f 0202 	mov.w	r2, #2
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80062ea:	4618      	mov	r0, r3
 80062ec:	f006 fbd4 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_UART_MspInit+0x6b2>
      Error_Handler();
 80062f6:	f7fe ffcd 	bl	8005294 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80062fa:	4b72      	ldr	r3, [pc, #456]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 80062fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006300:	4a70      	ldr	r2, [pc, #448]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006306:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800630a:	4b6e      	ldr	r3, [pc, #440]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 800630c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006310:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8006314:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006328:	4b66      	ldr	r3, [pc, #408]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 800632a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800632e:	4a65      	ldr	r2, [pc, #404]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 8006330:	f043 0301 	orr.w	r3, r3, #1
 8006334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006338:	4b62      	ldr	r3, [pc, #392]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 800633a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800633e:	f003 0201 	and.w	r2, r3, #1
 8006342:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006356:	4b5b      	ldr	r3, [pc, #364]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 8006358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800635c:	4a59      	ldr	r2, [pc, #356]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 800635e:	f043 0308 	orr.w	r3, r3, #8
 8006362:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006366:	4b57      	ldr	r3, [pc, #348]	@ (80064c4 <HAL_UART_MspInit+0x87c>)
 8006368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800636c:	f003 0208 	and.w	r2, r3, #8
 8006370:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006374:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800637e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006382:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006384:	2308      	movs	r3, #8
 8006386:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638a:	2302      	movs	r3, #2
 800638c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800639c:	2307      	movs	r3, #7
 800639e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80063a6:	4619      	mov	r1, r3
 80063a8:	4847      	ldr	r0, [pc, #284]	@ (80064c8 <HAL_UART_MspInit+0x880>)
 80063aa:	f005 f92f 	bl	800b60c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80063ae:	2320      	movs	r3, #32
 80063b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b4:	2302      	movs	r3, #2
 80063b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063c6:	2307      	movs	r3, #7
 80063c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063cc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80063d0:	4619      	mov	r1, r3
 80063d2:	483e      	ldr	r0, [pc, #248]	@ (80064cc <HAL_UART_MspInit+0x884>)
 80063d4:	f005 f91a 	bl	800b60c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80063d8:	4b3d      	ldr	r3, [pc, #244]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063da:	4a3e      	ldr	r2, [pc, #248]	@ (80064d4 <HAL_UART_MspInit+0x88c>)
 80063dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80063de:	4b3c      	ldr	r3, [pc, #240]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063e0:	222b      	movs	r2, #43	@ 0x2b
 80063e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063e4:	4b3a      	ldr	r3, [pc, #232]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ea:	4b39      	ldr	r3, [pc, #228]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063f0:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063f8:	4b35      	ldr	r3, [pc, #212]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063fe:	4b34      	ldr	r3, [pc, #208]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006400:	2200      	movs	r2, #0
 8006402:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006404:	4b32      	ldr	r3, [pc, #200]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006406:	2200      	movs	r2, #0
 8006408:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800640a:	4b31      	ldr	r3, [pc, #196]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 800640c:	2200      	movs	r2, #0
 800640e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006410:	4b2f      	ldr	r3, [pc, #188]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006412:	2200      	movs	r2, #0
 8006414:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006416:	482e      	ldr	r0, [pc, #184]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006418:	f000 fd54 	bl	8006ec4 <HAL_DMA_Init>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_UART_MspInit+0x7de>
      Error_Handler();
 8006422:	f7fe ff37 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006426:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800642a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a27      	ldr	r2, [pc, #156]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006436:	4a26      	ldr	r2, [pc, #152]	@ (80064d0 <HAL_UART_MspInit+0x888>)
 8006438:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800643c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8006444:	4b24      	ldr	r3, [pc, #144]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006446:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <HAL_UART_MspInit+0x894>)
 8006448:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800644a:	4b23      	ldr	r3, [pc, #140]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 800644c:	222c      	movs	r2, #44	@ 0x2c
 800644e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006450:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006452:	2240      	movs	r2, #64	@ 0x40
 8006454:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006456:	4b20      	ldr	r3, [pc, #128]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006458:	2200      	movs	r2, #0
 800645a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 800645e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006462:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006464:	4b1c      	ldr	r3, [pc, #112]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006466:	2200      	movs	r2, #0
 8006468:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800646a:	4b1b      	ldr	r3, [pc, #108]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 800646c:	2200      	movs	r2, #0
 800646e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006470:	4b19      	ldr	r3, [pc, #100]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006472:	2200      	movs	r2, #0
 8006474:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006476:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006478:	2200      	movs	r2, #0
 800647a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800647c:	4b16      	ldr	r3, [pc, #88]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 800647e:	2200      	movs	r2, #0
 8006480:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006482:	4815      	ldr	r0, [pc, #84]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 8006484:	f000 fd1e 	bl	8006ec4 <HAL_DMA_Init>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_MspInit+0x84a>
      Error_Handler();
 800648e:	f7fe ff01 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006492:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006496:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a0e      	ldr	r2, [pc, #56]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 800649e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80064a0:	4a0d      	ldr	r2, [pc, #52]	@ (80064d8 <HAL_UART_MspInit+0x890>)
 80064a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80064ae:	2200      	movs	r2, #0
 80064b0:	2105      	movs	r1, #5
 80064b2:	2026      	movs	r0, #38	@ 0x26
 80064b4:	f000 fc66 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064b8:	2026      	movs	r0, #38	@ 0x26
 80064ba:	f000 fc7d 	bl	8006db8 <HAL_NVIC_EnableIRQ>
}
 80064be:	e1c6      	b.n	800684e <HAL_UART_MspInit+0xc06>
 80064c0:	40004400 	.word	0x40004400
 80064c4:	58024400 	.word	0x58024400
 80064c8:	58020000 	.word	0x58020000
 80064cc:	58020c00 	.word	0x58020c00
 80064d0:	24000f44 	.word	0x24000f44
 80064d4:	40020010 	.word	0x40020010
 80064d8:	24000fbc 	.word	0x24000fbc
 80064dc:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 80064e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80064e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a67      	ldr	r2, [pc, #412]	@ (800668c <HAL_UART_MspInit+0xa44>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f040 80da 	bne.w	80066a8 <HAL_UART_MspInit+0xa60>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064f4:	f04f 0202 	mov.w	r2, #2
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006506:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800650a:	4618      	mov	r0, r3
 800650c:	f006 fac4 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_UART_MspInit+0x8d2>
      Error_Handler();
 8006516:	f7fe febd 	bl	8005294 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800651a:	4b5d      	ldr	r3, [pc, #372]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 800651c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006520:	4a5b      	ldr	r2, [pc, #364]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 8006522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006526:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800652a:	4b59      	ldr	r3, [pc, #356]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 800652c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006530:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8006534:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006538:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006542:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006546:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006548:	4b51      	ldr	r3, [pc, #324]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 800654a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800654e:	4a50      	ldr	r2, [pc, #320]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006558:	4b4d      	ldr	r3, [pc, #308]	@ (8006690 <HAL_UART_MspInit+0xa48>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800655e:	f003 0202 	and.w	r2, r3, #2
 8006562:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006566:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006570:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006574:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006576:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800657a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657e:	2302      	movs	r3, #2
 8006580:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658a:	2300      	movs	r3, #0
 800658c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006590:	2307      	movs	r3, #7
 8006592:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006596:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800659a:	4619      	mov	r1, r3
 800659c:	483d      	ldr	r0, [pc, #244]	@ (8006694 <HAL_UART_MspInit+0xa4c>)
 800659e:	f005 f835 	bl	800b60c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 80065a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065a4:	4a3d      	ldr	r2, [pc, #244]	@ (800669c <HAL_UART_MspInit+0xa54>)
 80065a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80065a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065aa:	222d      	movs	r2, #45	@ 0x2d
 80065ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065b4:	4b38      	ldr	r3, [pc, #224]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065ba:	4b37      	ldr	r3, [pc, #220]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065c2:	4b35      	ldr	r3, [pc, #212]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065c8:	4b33      	ldr	r3, [pc, #204]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80065ce:	4b32      	ldr	r3, [pc, #200]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065d4:	4b30      	ldr	r3, [pc, #192]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065da:	4b2f      	ldr	r3, [pc, #188]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065dc:	2200      	movs	r2, #0
 80065de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80065e0:	482d      	ldr	r0, [pc, #180]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065e2:	f000 fc6f 	bl	8006ec4 <HAL_DMA_Init>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_UART_MspInit+0x9a8>
      Error_Handler();
 80065ec:	f7fe fe52 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80065f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a27      	ldr	r2, [pc, #156]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 80065fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006600:	4a25      	ldr	r2, [pc, #148]	@ (8006698 <HAL_UART_MspInit+0xa50>)
 8006602:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006606:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800660e:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006610:	4a24      	ldr	r2, [pc, #144]	@ (80066a4 <HAL_UART_MspInit+0xa5c>)
 8006612:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006614:	4b22      	ldr	r3, [pc, #136]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006616:	222e      	movs	r2, #46	@ 0x2e
 8006618:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800661a:	4b21      	ldr	r3, [pc, #132]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 800661c:	2240      	movs	r2, #64	@ 0x40
 800661e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006620:	4b1f      	ldr	r3, [pc, #124]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006622:	2200      	movs	r2, #0
 8006624:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006626:	4b1e      	ldr	r3, [pc, #120]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800662c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006630:	2200      	movs	r2, #0
 8006632:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006636:	2200      	movs	r2, #0
 8006638:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800663a:	4b19      	ldr	r3, [pc, #100]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 800663c:	2200      	movs	r2, #0
 800663e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006640:	4b17      	ldr	r3, [pc, #92]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006642:	2200      	movs	r2, #0
 8006644:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006646:	4b16      	ldr	r3, [pc, #88]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006648:	2200      	movs	r2, #0
 800664a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800664c:	4814      	ldr	r0, [pc, #80]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 800664e:	f000 fc39 	bl	8006ec4 <HAL_DMA_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_UART_MspInit+0xa14>
      Error_Handler();
 8006658:	f7fe fe1c 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800665c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006660:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 8006668:	67da      	str	r2, [r3, #124]	@ 0x7c
 800666a:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <HAL_UART_MspInit+0xa58>)
 800666c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006670:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006678:	2200      	movs	r2, #0
 800667a:	2105      	movs	r1, #5
 800667c:	2027      	movs	r0, #39	@ 0x27
 800667e:	f000 fb81 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006682:	2027      	movs	r0, #39	@ 0x27
 8006684:	f000 fb98 	bl	8006db8 <HAL_NVIC_EnableIRQ>
}
 8006688:	e0e1      	b.n	800684e <HAL_UART_MspInit+0xc06>
 800668a:	bf00      	nop
 800668c:	40004800 	.word	0x40004800
 8006690:	58024400 	.word	0x58024400
 8006694:	58020400 	.word	0x58020400
 8006698:	24001034 	.word	0x24001034
 800669c:	40020040 	.word	0x40020040
 80066a0:	240010ac 	.word	0x240010ac
 80066a4:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART6)
 80066a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80066ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a68      	ldr	r2, [pc, #416]	@ (8006858 <HAL_UART_MspInit+0xc10>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f040 80c9 	bne.w	800684e <HAL_UART_MspInit+0xc06>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80066bc:	f04f 0201 	mov.w	r2, #1
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80066d2:	4618      	mov	r0, r3
 80066d4:	f006 f9e0 	bl	800ca98 <HAL_RCCEx_PeriphCLKConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_UART_MspInit+0xa9a>
      Error_Handler();
 80066de:	f7fe fdd9 	bl	8005294 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80066e2:	4b5e      	ldr	r3, [pc, #376]	@ (800685c <HAL_UART_MspInit+0xc14>)
 80066e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e8:	4a5c      	ldr	r2, [pc, #368]	@ (800685c <HAL_UART_MspInit+0xc14>)
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066f2:	4b5a      	ldr	r3, [pc, #360]	@ (800685c <HAL_UART_MspInit+0xc14>)
 80066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f8:	f003 0220 	and.w	r2, r3, #32
 80066fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006700:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800670a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800670e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006710:	4b52      	ldr	r3, [pc, #328]	@ (800685c <HAL_UART_MspInit+0xc14>)
 8006712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006716:	4a51      	ldr	r2, [pc, #324]	@ (800685c <HAL_UART_MspInit+0xc14>)
 8006718:	f043 0304 	orr.w	r3, r3, #4
 800671c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006720:	4b4e      	ldr	r3, [pc, #312]	@ (800685c <HAL_UART_MspInit+0xc14>)
 8006722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006726:	f003 0204 	and.w	r2, r3, #4
 800672a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800672e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006738:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800673c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800673e:	23c0      	movs	r3, #192	@ 0xc0
 8006740:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8006756:	2307      	movs	r3, #7
 8006758:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800675c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8006760:	4619      	mov	r1, r3
 8006762:	483f      	ldr	r0, [pc, #252]	@ (8006860 <HAL_UART_MspInit+0xc18>)
 8006764:	f004 ff52 	bl	800b60c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream4;
 8006768:	4b3e      	ldr	r3, [pc, #248]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 800676a:	4a3f      	ldr	r2, [pc, #252]	@ (8006868 <HAL_UART_MspInit+0xc20>)
 800676c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800676e:	4b3d      	ldr	r3, [pc, #244]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 8006770:	2247      	movs	r2, #71	@ 0x47
 8006772:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006774:	4b3b      	ldr	r3, [pc, #236]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800677a:	4b3a      	ldr	r3, [pc, #232]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 800677c:	2200      	movs	r2, #0
 800677e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006780:	4b38      	ldr	r3, [pc, #224]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 8006782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006786:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006788:	4b36      	ldr	r3, [pc, #216]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 800678a:	2200      	movs	r2, #0
 800678c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800678e:	4b35      	ldr	r3, [pc, #212]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 8006790:	2200      	movs	r2, #0
 8006792:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006794:	4b33      	ldr	r3, [pc, #204]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800679a:	4b32      	ldr	r3, [pc, #200]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 800679c:	2200      	movs	r2, #0
 800679e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067a0:	4b30      	ldr	r3, [pc, #192]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80067a6:	482f      	ldr	r0, [pc, #188]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 80067a8:	f000 fb8c 	bl	8006ec4 <HAL_DMA_Init>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_UART_MspInit+0xb6e>
      Error_Handler();
 80067b2:	f7fe fd6f 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80067b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80067ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 80067c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80067c6:	4a27      	ldr	r2, [pc, #156]	@ (8006864 <HAL_UART_MspInit+0xc1c>)
 80067c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80067cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA1_Stream5;
 80067d4:	4b25      	ldr	r3, [pc, #148]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067d6:	4a26      	ldr	r2, [pc, #152]	@ (8006870 <HAL_UART_MspInit+0xc28>)
 80067d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80067da:	4b24      	ldr	r3, [pc, #144]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067dc:	2248      	movs	r2, #72	@ 0x48
 80067de:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067e0:	4b22      	ldr	r3, [pc, #136]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e6:	4b21      	ldr	r3, [pc, #132]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067ec:	4b1f      	ldr	r3, [pc, #124]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067f2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f4:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067fa:	4b1c      	ldr	r3, [pc, #112]	@ (800686c <HAL_UART_MspInit+0xc24>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006800:	4b1a      	ldr	r3, [pc, #104]	@ (800686c <HAL_UART_MspInit+0xc24>)
 8006802:	2200      	movs	r2, #0
 8006804:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006806:	4b19      	ldr	r3, [pc, #100]	@ (800686c <HAL_UART_MspInit+0xc24>)
 8006808:	2200      	movs	r2, #0
 800680a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800680c:	4b17      	ldr	r3, [pc, #92]	@ (800686c <HAL_UART_MspInit+0xc24>)
 800680e:	2200      	movs	r2, #0
 8006810:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006812:	4816      	ldr	r0, [pc, #88]	@ (800686c <HAL_UART_MspInit+0xc24>)
 8006814:	f000 fb56 	bl	8006ec4 <HAL_DMA_Init>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_UART_MspInit+0xbda>
      Error_Handler();
 800681e:	f7fe fd39 	bl	8005294 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006822:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006826:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0f      	ldr	r2, [pc, #60]	@ (800686c <HAL_UART_MspInit+0xc24>)
 800682e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006830:	4a0e      	ldr	r2, [pc, #56]	@ (800686c <HAL_UART_MspInit+0xc24>)
 8006832:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006836:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800683e:	2200      	movs	r2, #0
 8006840:	2105      	movs	r1, #5
 8006842:	2047      	movs	r0, #71	@ 0x47
 8006844:	f000 fa9e 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006848:	2047      	movs	r0, #71	@ 0x47
 800684a:	f000 fab5 	bl	8006db8 <HAL_NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40011400 	.word	0x40011400
 800685c:	58024400 	.word	0x58024400
 8006860:	58020800 	.word	0x58020800
 8006864:	24001124 	.word	0x24001124
 8006868:	40020070 	.word	0x40020070
 800686c:	2400119c 	.word	0x2400119c
 8006870:	40020088 	.word	0x40020088

08006874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006878:	f7fe ff4a 	bl	8005710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800687c:	480c      	ldr	r0, [pc, #48]	@ (80068b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800687e:	490d      	ldr	r1, [pc, #52]	@ (80068b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006880:	4a0d      	ldr	r2, [pc, #52]	@ (80068b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006884:	e002      	b.n	800688c <LoopCopyDataInit>

08006886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800688a:	3304      	adds	r3, #4

0800688c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800688c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800688e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006890:	d3f9      	bcc.n	8006886 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006894:	4c0a      	ldr	r4, [pc, #40]	@ (80068c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006898:	e001      	b.n	800689e <LoopFillZerobss>

0800689a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800689a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800689c:	3204      	adds	r2, #4

0800689e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800689e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068a0:	d3fb      	bcc.n	800689a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068a2:	f01e ff4d 	bl	8025740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068a6:	f7fe fb6b 	bl	8004f80 <main>
  bx  lr
 80068aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80068b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80068b4:	240003e0 	.word	0x240003e0
  ldr r2, =_sidata
 80068b8:	0802d5ac 	.word	0x0802d5ac
  ldr r2, =_sbss
 80068bc:	240003e0 	.word	0x240003e0
  ldr r4, =_ebss
 80068c0:	2400c110 	.word	0x2400c110

080068c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068c4:	e7fe      	b.n	80068c4 <ADC3_IRQHandler>

080068c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <LAN8742_RegisterBusIO+0x28>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <LAN8742_RegisterBusIO+0x28>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <LAN8742_RegisterBusIO+0x28>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	e014      	b.n	800691e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d139      	bne.n	80069ba <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e01c      	b.n	800699a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f107 020c 	add.w	r2, r7, #12
 8006968:	2112      	movs	r1, #18
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	4798      	blx	r3
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	da03      	bge.n	800697c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8006974:	f06f 0304 	mvn.w	r3, #4
 8006978:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800697a:	e00b      	b.n	8006994 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	d105      	bne.n	8006994 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
         break;
 8006992:	e005      	b.n	80069a0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3301      	adds	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b1f      	cmp	r3, #31
 800699e:	d9df      	bls.n	8006960 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b1f      	cmp	r3, #31
 80069a6:	d902      	bls.n	80069ae <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80069a8:	f06f 0302 	mvn.w	r3, #2
 80069ac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80069ba:	693b      	ldr	r3, [r7, #16]
 }
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6810      	ldr	r0, [r2, #0]
 80069d8:	f107 020c 	add.w	r2, r7, #12
 80069dc:	2101      	movs	r1, #1
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da02      	bge.n	80069ec <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80069e6:	f06f 0304 	mvn.w	r3, #4
 80069ea:	e06e      	b.n	8006aca <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6810      	ldr	r0, [r2, #0]
 80069f4:	f107 020c 	add.w	r2, r7, #12
 80069f8:	2101      	movs	r1, #1
 80069fa:	4798      	blx	r3
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da02      	bge.n	8006a08 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006a02:	f06f 0304 	mvn.w	r3, #4
 8006a06:	e060      	b.n	8006aca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e059      	b.n	8006aca <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6810      	ldr	r0, [r2, #0]
 8006a1e:	f107 020c 	add.w	r2, r7, #12
 8006a22:	2100      	movs	r1, #0
 8006a24:	4798      	blx	r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da02      	bge.n	8006a32 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006a2c:	f06f 0304 	mvn.w	r3, #4
 8006a30:	e04b      	b.n	8006aca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11b      	bne.n	8006a74 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <LAN8742_GetLinkState+0x90>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006a50:	2302      	movs	r3, #2
 8006a52:	e03a      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e033      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	e02c      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006a70:	2305      	movs	r3, #5
 8006a72:	e02a      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6810      	ldr	r0, [r2, #0]
 8006a7c:	f107 020c 	add.w	r2, r7, #12
 8006a80:	211f      	movs	r1, #31
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da02      	bge.n	8006a90 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8006a8a:	f06f 0304 	mvn.w	r3, #4
 8006a8e:	e01c      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8006a9a:	2306      	movs	r3, #6
 8006a9c:	e015      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 031c 	and.w	r3, r3, #28
 8006aa4:	2b18      	cmp	r3, #24
 8006aa6:	d101      	bne.n	8006aac <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e00e      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 031c 	and.w	r3, r3, #28
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d101      	bne.n	8006aba <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e007      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 031c 	and.w	r3, r3, #28
 8006ac0:	2b14      	cmp	r3, #20
 8006ac2:	d101      	bne.n	8006ac8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	e000      	b.n	8006aca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006ac8:	2305      	movs	r3, #5
    }
  }
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ada:	2003      	movs	r0, #3
 8006adc:	f000 f947 	bl	8006d6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ae0:	f005 fdc2 	bl	800c668 <HAL_RCC_GetSysClockFreq>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	4b15      	ldr	r3, [pc, #84]	@ (8006b3c <HAL_Init+0x68>)
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	4913      	ldr	r1, [pc, #76]	@ (8006b40 <HAL_Init+0x6c>)
 8006af2:	5ccb      	ldrb	r3, [r1, r3]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006afe:	4b0f      	ldr	r3, [pc, #60]	@ (8006b3c <HAL_Init+0x68>)
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	4a0e      	ldr	r2, [pc, #56]	@ (8006b40 <HAL_Init+0x6c>)
 8006b08:	5cd3      	ldrb	r3, [r2, r3]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
 8006b14:	4a0b      	ldr	r2, [pc, #44]	@ (8006b44 <HAL_Init+0x70>)
 8006b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b18:	4a0b      	ldr	r2, [pc, #44]	@ (8006b48 <HAL_Init+0x74>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b1e:	200f      	movs	r0, #15
 8006b20:	f7fe fbdc 	bl	80052dc <HAL_InitTick>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e002      	b.n	8006b34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b2e:	f7fe fbb7 	bl	80052a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	0802cf40 	.word	0x0802cf40
 8006b44:	240001e8 	.word	0x240001e8
 8006b48:	240001e4 	.word	0x240001e4

08006b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b50:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <HAL_IncTick+0x20>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <HAL_IncTick+0x24>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	4a04      	ldr	r2, [pc, #16]	@ (8006b70 <HAL_IncTick+0x24>)
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	240001f0 	.word	0x240001f0
 8006b70:	24001214 	.word	0x24001214

08006b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return uwTick;
 8006b78:	4b03      	ldr	r3, [pc, #12]	@ (8006b88 <HAL_GetTick+0x14>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	24001214 	.word	0x24001214

08006b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7ff ffee 	bl	8006b74 <HAL_GetTick>
 8006b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d005      	beq.n	8006bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <HAL_Delay+0x44>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006bb2:	bf00      	nop
 8006bb4:	f7ff ffde 	bl	8006b74 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d8f7      	bhi.n	8006bb4 <HAL_Delay+0x28>
  {
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	240001f0 	.word	0x240001f0

08006bd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006bd8:	4b03      	ldr	r3, [pc, #12]	@ (8006be8 <HAL_GetREVID+0x14>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	5c001000 	.word	0x5c001000

08006bec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006bf4:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8006bfc:	4904      	ldr	r1, [pc, #16]	@ (8006c10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	604b      	str	r3, [r1, #4]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	58000400 	.word	0x58000400

08006c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c24:	4b0b      	ldr	r3, [pc, #44]	@ (8006c54 <__NVIC_SetPriorityGrouping+0x40>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c30:	4013      	ands	r3, r2
 8006c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c3c:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <__NVIC_SetPriorityGrouping+0x44>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c42:	4a04      	ldr	r2, [pc, #16]	@ (8006c54 <__NVIC_SetPriorityGrouping+0x40>)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	60d3      	str	r3, [r2, #12]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	e000ed00 	.word	0xe000ed00
 8006c58:	05fa0000 	.word	0x05fa0000

08006c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <__NVIC_GetPriorityGrouping+0x18>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	0a1b      	lsrs	r3, r3, #8
 8006c66:	f003 0307 	and.w	r3, r3, #7
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	db0b      	blt.n	8006ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	f003 021f 	and.w	r2, r3, #31
 8006c90:	4907      	ldr	r1, [pc, #28]	@ (8006cb0 <__NVIC_EnableIRQ+0x38>)
 8006c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	2001      	movs	r0, #1
 8006c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e100 	.word	0xe000e100

08006cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	6039      	str	r1, [r7, #0]
 8006cbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	db0a      	blt.n	8006cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	490c      	ldr	r1, [pc, #48]	@ (8006d00 <__NVIC_SetPriority+0x4c>)
 8006cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cd2:	0112      	lsls	r2, r2, #4
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cdc:	e00a      	b.n	8006cf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4908      	ldr	r1, [pc, #32]	@ (8006d04 <__NVIC_SetPriority+0x50>)
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	3b04      	subs	r3, #4
 8006cec:	0112      	lsls	r2, r2, #4
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	761a      	strb	r2, [r3, #24]
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	e000e100 	.word	0xe000e100
 8006d04:	e000ed00 	.word	0xe000ed00

08006d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b089      	sub	sp, #36	@ 0x24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f1c3 0307 	rsb	r3, r3, #7
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	bf28      	it	cs
 8006d26:	2304      	movcs	r3, #4
 8006d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d902      	bls.n	8006d38 <NVIC_EncodePriority+0x30>
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3b03      	subs	r3, #3
 8006d36:	e000      	b.n	8006d3a <NVIC_EncodePriority+0x32>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43da      	mvns	r2, r3
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	401a      	ands	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d50:	f04f 31ff 	mov.w	r1, #4294967295
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5a:	43d9      	mvns	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d60:	4313      	orrs	r3, r2
         );
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3724      	adds	r7, #36	@ 0x24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ff4c 	bl	8006c14 <__NVIC_SetPriorityGrouping>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d92:	f7ff ff63 	bl	8006c5c <__NVIC_GetPriorityGrouping>
 8006d96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f7ff ffb3 	bl	8006d08 <NVIC_EncodePriority>
 8006da2:	4602      	mov	r2, r0
 8006da4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff ff82 	bl	8006cb4 <__NVIC_SetPriority>
}
 8006db0:	bf00      	nop
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ff56 	bl	8006c78 <__NVIC_EnableIRQ>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006dd8:	f3bf 8f5f 	dmb	sy
}
 8006ddc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006dde:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <HAL_MPU_Disable+0x28>)
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	4a06      	ldr	r2, [pc, #24]	@ (8006dfc <HAL_MPU_Disable+0x28>)
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006dea:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <HAL_MPU_Disable+0x2c>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	e000ed00 	.word	0xe000ed00
 8006e00:	e000ed90 	.word	0xe000ed90

08006e04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e3c <HAL_MPU_Enable+0x38>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006e16:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <HAL_MPU_Enable+0x3c>)
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	4a09      	ldr	r2, [pc, #36]	@ (8006e40 <HAL_MPU_Enable+0x3c>)
 8006e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e20:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006e22:	f3bf 8f4f 	dsb	sy
}
 8006e26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e28:	f3bf 8f6f 	isb	sy
}
 8006e2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	e000ed90 	.word	0xe000ed90
 8006e40:	e000ed00 	.word	0xe000ed00

08006e44 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	785a      	ldrb	r2, [r3, #1]
 8006e50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <HAL_MPU_ConfigRegion+0x7c>)
 8006e52:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006e54:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec0 <HAL_MPU_ConfigRegion+0x7c>)
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	4a19      	ldr	r2, [pc, #100]	@ (8006ec0 <HAL_MPU_ConfigRegion+0x7c>)
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006e60:	4a17      	ldr	r2, [pc, #92]	@ (8006ec0 <HAL_MPU_ConfigRegion+0x7c>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7b1b      	ldrb	r3, [r3, #12]
 8006e6c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7adb      	ldrb	r3, [r3, #11]
 8006e72:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7a9b      	ldrb	r3, [r3, #10]
 8006e7a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7b5b      	ldrb	r3, [r3, #13]
 8006e82:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7b9b      	ldrb	r3, [r3, #14]
 8006e8a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7bdb      	ldrb	r3, [r3, #15]
 8006e92:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7a5b      	ldrb	r3, [r3, #9]
 8006e9a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7a1b      	ldrb	r3, [r3, #8]
 8006ea2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ea4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006eac:	4a04      	ldr	r2, [pc, #16]	@ (8006ec0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006eae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006eb0:	6113      	str	r3, [r2, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	e000ed90 	.word	0xe000ed90

08006ec4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ecc:	f7ff fe52 	bl	8006b74 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e316      	b.n	800750a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a66      	ldr	r2, [pc, #408]	@ (800707c <HAL_DMA_Init+0x1b8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d04a      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a65      	ldr	r2, [pc, #404]	@ (8007080 <HAL_DMA_Init+0x1bc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d045      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a63      	ldr	r2, [pc, #396]	@ (8007084 <HAL_DMA_Init+0x1c0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d040      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a62      	ldr	r2, [pc, #392]	@ (8007088 <HAL_DMA_Init+0x1c4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d03b      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a60      	ldr	r2, [pc, #384]	@ (800708c <HAL_DMA_Init+0x1c8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d036      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5f      	ldr	r2, [pc, #380]	@ (8007090 <HAL_DMA_Init+0x1cc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d031      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007094 <HAL_DMA_Init+0x1d0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02c      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5c      	ldr	r2, [pc, #368]	@ (8007098 <HAL_DMA_Init+0x1d4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d027      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5a      	ldr	r2, [pc, #360]	@ (800709c <HAL_DMA_Init+0x1d8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d022      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a59      	ldr	r2, [pc, #356]	@ (80070a0 <HAL_DMA_Init+0x1dc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01d      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a57      	ldr	r2, [pc, #348]	@ (80070a4 <HAL_DMA_Init+0x1e0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a56      	ldr	r2, [pc, #344]	@ (80070a8 <HAL_DMA_Init+0x1e4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a54      	ldr	r2, [pc, #336]	@ (80070ac <HAL_DMA_Init+0x1e8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a53      	ldr	r2, [pc, #332]	@ (80070b0 <HAL_DMA_Init+0x1ec>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a51      	ldr	r2, [pc, #324]	@ (80070b4 <HAL_DMA_Init+0x1f0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_DMA_Init+0xb8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a50      	ldr	r2, [pc, #320]	@ (80070b8 <HAL_DMA_Init+0x1f4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <HAL_DMA_Init+0xbc>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <HAL_DMA_Init+0xbe>
 8006f80:	2300      	movs	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 813b 	beq.w	80071fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a37      	ldr	r2, [pc, #220]	@ (800707c <HAL_DMA_Init+0x1b8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d04a      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a36      	ldr	r2, [pc, #216]	@ (8007080 <HAL_DMA_Init+0x1bc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d045      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a34      	ldr	r2, [pc, #208]	@ (8007084 <HAL_DMA_Init+0x1c0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d040      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a33      	ldr	r2, [pc, #204]	@ (8007088 <HAL_DMA_Init+0x1c4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d03b      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a31      	ldr	r2, [pc, #196]	@ (800708c <HAL_DMA_Init+0x1c8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d036      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a30      	ldr	r2, [pc, #192]	@ (8007090 <HAL_DMA_Init+0x1cc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d031      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007094 <HAL_DMA_Init+0x1d0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d02c      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8007098 <HAL_DMA_Init+0x1d4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d027      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2b      	ldr	r2, [pc, #172]	@ (800709c <HAL_DMA_Init+0x1d8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80070a0 <HAL_DMA_Init+0x1dc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d01d      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a28      	ldr	r2, [pc, #160]	@ (80070a4 <HAL_DMA_Init+0x1e0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a27      	ldr	r2, [pc, #156]	@ (80070a8 <HAL_DMA_Init+0x1e4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <HAL_DMA_Init+0x1e8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_DMA_Init+0x174>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a24      	ldr	r2, [pc, #144]	@ (80070b0 <HAL_DMA_Init+0x1ec>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_DMA_Init+0x174>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a22      	ldr	r2, [pc, #136]	@ (80070b4 <HAL_DMA_Init+0x1f0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_DMA_Init+0x174>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a21      	ldr	r2, [pc, #132]	@ (80070b8 <HAL_DMA_Init+0x1f4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <HAL_DMA_Init+0x186>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e007      	b.n	800705a <HAL_DMA_Init+0x196>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800705a:	e02f      	b.n	80070bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800705c:	f7ff fd8a 	bl	8006b74 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b05      	cmp	r3, #5
 8007068:	d928      	bls.n	80070bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2203      	movs	r2, #3
 8007074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e246      	b.n	800750a <HAL_DMA_Init+0x646>
 800707c:	40020010 	.word	0x40020010
 8007080:	40020028 	.word	0x40020028
 8007084:	40020040 	.word	0x40020040
 8007088:	40020058 	.word	0x40020058
 800708c:	40020070 	.word	0x40020070
 8007090:	40020088 	.word	0x40020088
 8007094:	400200a0 	.word	0x400200a0
 8007098:	400200b8 	.word	0x400200b8
 800709c:	40020410 	.word	0x40020410
 80070a0:	40020428 	.word	0x40020428
 80070a4:	40020440 	.word	0x40020440
 80070a8:	40020458 	.word	0x40020458
 80070ac:	40020470 	.word	0x40020470
 80070b0:	40020488 	.word	0x40020488
 80070b4:	400204a0 	.word	0x400204a0
 80070b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1c8      	bne.n	800705c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4b83      	ldr	r3, [pc, #524]	@ (80072e4 <HAL_DMA_Init+0x420>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80070e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	2b04      	cmp	r3, #4
 800710e:	d107      	bne.n	8007120 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007118:	4313      	orrs	r3, r2
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007120:	4b71      	ldr	r3, [pc, #452]	@ (80072e8 <HAL_DMA_Init+0x424>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b71      	ldr	r3, [pc, #452]	@ (80072ec <HAL_DMA_Init+0x428>)
 8007126:	4013      	ands	r3, r2
 8007128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800712c:	d328      	bcc.n	8007180 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b28      	cmp	r3, #40	@ 0x28
 8007134:	d903      	bls.n	800713e <HAL_DMA_Init+0x27a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b2e      	cmp	r3, #46	@ 0x2e
 800713c:	d917      	bls.n	800716e <HAL_DMA_Init+0x2aa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b3e      	cmp	r3, #62	@ 0x3e
 8007144:	d903      	bls.n	800714e <HAL_DMA_Init+0x28a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b42      	cmp	r3, #66	@ 0x42
 800714c:	d90f      	bls.n	800716e <HAL_DMA_Init+0x2aa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b46      	cmp	r3, #70	@ 0x46
 8007154:	d903      	bls.n	800715e <HAL_DMA_Init+0x29a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b48      	cmp	r3, #72	@ 0x48
 800715c:	d907      	bls.n	800716e <HAL_DMA_Init+0x2aa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b4e      	cmp	r3, #78	@ 0x4e
 8007164:	d905      	bls.n	8007172 <HAL_DMA_Init+0x2ae>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b52      	cmp	r3, #82	@ 0x52
 800716c:	d801      	bhi.n	8007172 <HAL_DMA_Init+0x2ae>
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <HAL_DMA_Init+0x2b0>
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800717e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d117      	bne.n	80071da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00e      	beq.n	80071da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f002 fb33 	bl	8009828 <DMA_CheckFifoParam>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2240      	movs	r2, #64	@ 0x40
 80071cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e197      	b.n	800750a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f002 fa6e 	bl	80096c4 <DMA_CalcBaseAndBitshift>
 80071e8:	4603      	mov	r3, r0
 80071ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	223f      	movs	r2, #63	@ 0x3f
 80071f6:	409a      	lsls	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	e0cd      	b.n	800739a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a3b      	ldr	r2, [pc, #236]	@ (80072f0 <HAL_DMA_Init+0x42c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_DMA_Init+0x38a>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a39      	ldr	r2, [pc, #228]	@ (80072f4 <HAL_DMA_Init+0x430>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <HAL_DMA_Init+0x38a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a38      	ldr	r2, [pc, #224]	@ (80072f8 <HAL_DMA_Init+0x434>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <HAL_DMA_Init+0x38a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a36      	ldr	r2, [pc, #216]	@ (80072fc <HAL_DMA_Init+0x438>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_DMA_Init+0x38a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a35      	ldr	r2, [pc, #212]	@ (8007300 <HAL_DMA_Init+0x43c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_DMA_Init+0x38a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a33      	ldr	r2, [pc, #204]	@ (8007304 <HAL_DMA_Init+0x440>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_DMA_Init+0x38a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a32      	ldr	r2, [pc, #200]	@ (8007308 <HAL_DMA_Init+0x444>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_DMA_Init+0x38a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a30      	ldr	r2, [pc, #192]	@ (800730c <HAL_DMA_Init+0x448>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d101      	bne.n	8007252 <HAL_DMA_Init+0x38e>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <HAL_DMA_Init+0x390>
 8007252:	2300      	movs	r3, #0
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8097 	beq.w	8007388 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a24      	ldr	r2, [pc, #144]	@ (80072f0 <HAL_DMA_Init+0x42c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d021      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a22      	ldr	r2, [pc, #136]	@ (80072f4 <HAL_DMA_Init+0x430>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01c      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a21      	ldr	r2, [pc, #132]	@ (80072f8 <HAL_DMA_Init+0x434>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d017      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1f      	ldr	r2, [pc, #124]	@ (80072fc <HAL_DMA_Init+0x438>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d012      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1e      	ldr	r2, [pc, #120]	@ (8007300 <HAL_DMA_Init+0x43c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00d      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1c      	ldr	r2, [pc, #112]	@ (8007304 <HAL_DMA_Init+0x440>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d008      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1b      	ldr	r2, [pc, #108]	@ (8007308 <HAL_DMA_Init+0x444>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <HAL_DMA_Init+0x3e4>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a19      	ldr	r2, [pc, #100]	@ (800730c <HAL_DMA_Init+0x448>)
 80072a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <HAL_DMA_Init+0x44c>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b40      	cmp	r3, #64	@ 0x40
 80072ce:	d021      	beq.n	8007314 <HAL_DMA_Init+0x450>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	2b80      	cmp	r3, #128	@ 0x80
 80072d6:	d102      	bne.n	80072de <HAL_DMA_Init+0x41a>
 80072d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80072dc:	e01b      	b.n	8007316 <HAL_DMA_Init+0x452>
 80072de:	2300      	movs	r3, #0
 80072e0:	e019      	b.n	8007316 <HAL_DMA_Init+0x452>
 80072e2:	bf00      	nop
 80072e4:	fe10803f 	.word	0xfe10803f
 80072e8:	5c001000 	.word	0x5c001000
 80072ec:	ffff0000 	.word	0xffff0000
 80072f0:	58025408 	.word	0x58025408
 80072f4:	5802541c 	.word	0x5802541c
 80072f8:	58025430 	.word	0x58025430
 80072fc:	58025444 	.word	0x58025444
 8007300:	58025458 	.word	0x58025458
 8007304:	5802546c 	.word	0x5802546c
 8007308:	58025480 	.word	0x58025480
 800730c:	58025494 	.word	0x58025494
 8007310:	fffe000f 	.word	0xfffe000f
 8007314:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68d2      	ldr	r2, [r2, #12]
 800731a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800731c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800732c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800733c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007344:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	4b6e      	ldr	r3, [pc, #440]	@ (8007514 <HAL_DMA_Init+0x650>)
 800735c:	4413      	add	r3, r2
 800735e:	4a6e      	ldr	r2, [pc, #440]	@ (8007518 <HAL_DMA_Init+0x654>)
 8007360:	fba2 2303 	umull	r2, r3, r2, r3
 8007364:	091b      	lsrs	r3, r3, #4
 8007366:	009a      	lsls	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f002 f9a9 	bl	80096c4 <DMA_CalcBaseAndBitshift>
 8007372:	4603      	mov	r3, r0
 8007374:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2201      	movs	r2, #1
 8007380:	409a      	lsls	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	e008      	b.n	800739a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	@ 0x40
 800738c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e0b7      	b.n	800750a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5f      	ldr	r2, [pc, #380]	@ (800751c <HAL_DMA_Init+0x658>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d072      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007520 <HAL_DMA_Init+0x65c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d06d      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007524 <HAL_DMA_Init+0x660>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d068      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007528 <HAL_DMA_Init+0x664>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d063      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a59      	ldr	r2, [pc, #356]	@ (800752c <HAL_DMA_Init+0x668>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d05e      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a57      	ldr	r2, [pc, #348]	@ (8007530 <HAL_DMA_Init+0x66c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d059      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a56      	ldr	r2, [pc, #344]	@ (8007534 <HAL_DMA_Init+0x670>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d054      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a54      	ldr	r2, [pc, #336]	@ (8007538 <HAL_DMA_Init+0x674>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d04f      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a53      	ldr	r2, [pc, #332]	@ (800753c <HAL_DMA_Init+0x678>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a51      	ldr	r2, [pc, #324]	@ (8007540 <HAL_DMA_Init+0x67c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a50      	ldr	r2, [pc, #320]	@ (8007544 <HAL_DMA_Init+0x680>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a4e      	ldr	r2, [pc, #312]	@ (8007548 <HAL_DMA_Init+0x684>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4d      	ldr	r2, [pc, #308]	@ (800754c <HAL_DMA_Init+0x688>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a4b      	ldr	r2, [pc, #300]	@ (8007550 <HAL_DMA_Init+0x68c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a4a      	ldr	r2, [pc, #296]	@ (8007554 <HAL_DMA_Init+0x690>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a48      	ldr	r2, [pc, #288]	@ (8007558 <HAL_DMA_Init+0x694>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a47      	ldr	r2, [pc, #284]	@ (800755c <HAL_DMA_Init+0x698>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a45      	ldr	r2, [pc, #276]	@ (8007560 <HAL_DMA_Init+0x69c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a44      	ldr	r2, [pc, #272]	@ (8007564 <HAL_DMA_Init+0x6a0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a42      	ldr	r2, [pc, #264]	@ (8007568 <HAL_DMA_Init+0x6a4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a41      	ldr	r2, [pc, #260]	@ (800756c <HAL_DMA_Init+0x6a8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a3f      	ldr	r2, [pc, #252]	@ (8007570 <HAL_DMA_Init+0x6ac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a3e      	ldr	r2, [pc, #248]	@ (8007574 <HAL_DMA_Init+0x6b0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_Init+0x5c6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a3c      	ldr	r2, [pc, #240]	@ (8007578 <HAL_DMA_Init+0x6b4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d101      	bne.n	800748e <HAL_DMA_Init+0x5ca>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_DMA_Init+0x5cc>
 800748e:	2300      	movs	r3, #0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d032      	beq.n	80074fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f002 fa43 	bl	8009920 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b80      	cmp	r3, #128	@ 0x80
 80074a0:	d102      	bne.n	80074a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80074bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d010      	beq.n	80074e8 <HAL_DMA_Init+0x624>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d80c      	bhi.n	80074e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f002 fac0 	bl	8009a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074e4:	605a      	str	r2, [r3, #4]
 80074e6:	e008      	b.n	80074fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	a7fdabf8 	.word	0xa7fdabf8
 8007518:	cccccccd 	.word	0xcccccccd
 800751c:	40020010 	.word	0x40020010
 8007520:	40020028 	.word	0x40020028
 8007524:	40020040 	.word	0x40020040
 8007528:	40020058 	.word	0x40020058
 800752c:	40020070 	.word	0x40020070
 8007530:	40020088 	.word	0x40020088
 8007534:	400200a0 	.word	0x400200a0
 8007538:	400200b8 	.word	0x400200b8
 800753c:	40020410 	.word	0x40020410
 8007540:	40020428 	.word	0x40020428
 8007544:	40020440 	.word	0x40020440
 8007548:	40020458 	.word	0x40020458
 800754c:	40020470 	.word	0x40020470
 8007550:	40020488 	.word	0x40020488
 8007554:	400204a0 	.word	0x400204a0
 8007558:	400204b8 	.word	0x400204b8
 800755c:	58025408 	.word	0x58025408
 8007560:	5802541c 	.word	0x5802541c
 8007564:	58025430 	.word	0x58025430
 8007568:	58025444 	.word	0x58025444
 800756c:	58025458 	.word	0x58025458
 8007570:	5802546c 	.word	0x5802546c
 8007574:	58025480 	.word	0x58025480
 8007578:	58025494 	.word	0x58025494

0800757c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e226      	b.n	80079e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_DMA_Start_IT+0x2a>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e21f      	b.n	80079e6 <HAL_DMA_Start_IT+0x46a>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	f040 820a 	bne.w	80079d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a68      	ldr	r2, [pc, #416]	@ (8007770 <HAL_DMA_Start_IT+0x1f4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d04a      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a66      	ldr	r2, [pc, #408]	@ (8007774 <HAL_DMA_Start_IT+0x1f8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d045      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a65      	ldr	r2, [pc, #404]	@ (8007778 <HAL_DMA_Start_IT+0x1fc>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d040      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a63      	ldr	r2, [pc, #396]	@ (800777c <HAL_DMA_Start_IT+0x200>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d03b      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a62      	ldr	r2, [pc, #392]	@ (8007780 <HAL_DMA_Start_IT+0x204>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d036      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a60      	ldr	r2, [pc, #384]	@ (8007784 <HAL_DMA_Start_IT+0x208>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d031      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a5f      	ldr	r2, [pc, #380]	@ (8007788 <HAL_DMA_Start_IT+0x20c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d02c      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5d      	ldr	r2, [pc, #372]	@ (800778c <HAL_DMA_Start_IT+0x210>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d027      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a5c      	ldr	r2, [pc, #368]	@ (8007790 <HAL_DMA_Start_IT+0x214>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d022      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a5a      	ldr	r2, [pc, #360]	@ (8007794 <HAL_DMA_Start_IT+0x218>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d01d      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a59      	ldr	r2, [pc, #356]	@ (8007798 <HAL_DMA_Start_IT+0x21c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d018      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a57      	ldr	r2, [pc, #348]	@ (800779c <HAL_DMA_Start_IT+0x220>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a56      	ldr	r2, [pc, #344]	@ (80077a0 <HAL_DMA_Start_IT+0x224>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00e      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a54      	ldr	r2, [pc, #336]	@ (80077a4 <HAL_DMA_Start_IT+0x228>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d009      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a53      	ldr	r2, [pc, #332]	@ (80077a8 <HAL_DMA_Start_IT+0x22c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_DMA_Start_IT+0xee>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a51      	ldr	r2, [pc, #324]	@ (80077ac <HAL_DMA_Start_IT+0x230>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d108      	bne.n	800767c <HAL_DMA_Start_IT+0x100>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e007      	b.n	800768c <HAL_DMA_Start_IT+0x110>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	68b9      	ldr	r1, [r7, #8]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 fe6a 	bl	800936c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a34      	ldr	r2, [pc, #208]	@ (8007770 <HAL_DMA_Start_IT+0x1f4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d04a      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a33      	ldr	r2, [pc, #204]	@ (8007774 <HAL_DMA_Start_IT+0x1f8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d045      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a31      	ldr	r2, [pc, #196]	@ (8007778 <HAL_DMA_Start_IT+0x1fc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d040      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a30      	ldr	r2, [pc, #192]	@ (800777c <HAL_DMA_Start_IT+0x200>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d03b      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007780 <HAL_DMA_Start_IT+0x204>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d036      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007784 <HAL_DMA_Start_IT+0x208>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d031      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007788 <HAL_DMA_Start_IT+0x20c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d02c      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2a      	ldr	r2, [pc, #168]	@ (800778c <HAL_DMA_Start_IT+0x210>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d027      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <HAL_DMA_Start_IT+0x214>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a27      	ldr	r2, [pc, #156]	@ (8007794 <HAL_DMA_Start_IT+0x218>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d01d      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a25      	ldr	r2, [pc, #148]	@ (8007798 <HAL_DMA_Start_IT+0x21c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a24      	ldr	r2, [pc, #144]	@ (800779c <HAL_DMA_Start_IT+0x220>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <HAL_DMA_Start_IT+0x224>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a21      	ldr	r2, [pc, #132]	@ (80077a4 <HAL_DMA_Start_IT+0x228>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1f      	ldr	r2, [pc, #124]	@ (80077a8 <HAL_DMA_Start_IT+0x22c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_DMA_Start_IT+0x1bc>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1e      	ldr	r2, [pc, #120]	@ (80077ac <HAL_DMA_Start_IT+0x230>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d101      	bne.n	800773c <HAL_DMA_Start_IT+0x1c0>
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <HAL_DMA_Start_IT+0x1c2>
 800773c:	2300      	movs	r3, #0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d036      	beq.n	80077b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f023 021e 	bic.w	r2, r3, #30
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0216 	orr.w	r2, r2, #22
 8007754:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03e      	beq.n	80077dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0208 	orr.w	r2, r2, #8
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e035      	b.n	80077dc <HAL_DMA_Start_IT+0x260>
 8007770:	40020010 	.word	0x40020010
 8007774:	40020028 	.word	0x40020028
 8007778:	40020040 	.word	0x40020040
 800777c:	40020058 	.word	0x40020058
 8007780:	40020070 	.word	0x40020070
 8007784:	40020088 	.word	0x40020088
 8007788:	400200a0 	.word	0x400200a0
 800778c:	400200b8 	.word	0x400200b8
 8007790:	40020410 	.word	0x40020410
 8007794:	40020428 	.word	0x40020428
 8007798:	40020440 	.word	0x40020440
 800779c:	40020458 	.word	0x40020458
 80077a0:	40020470 	.word	0x40020470
 80077a4:	40020488 	.word	0x40020488
 80077a8:	400204a0 	.word	0x400204a0
 80077ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f023 020e 	bic.w	r2, r3, #14
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 020a 	orr.w	r2, r2, #10
 80077c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0204 	orr.w	r2, r2, #4
 80077da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a83      	ldr	r2, [pc, #524]	@ (80079f0 <HAL_DMA_Start_IT+0x474>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d072      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a82      	ldr	r2, [pc, #520]	@ (80079f4 <HAL_DMA_Start_IT+0x478>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d06d      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a80      	ldr	r2, [pc, #512]	@ (80079f8 <HAL_DMA_Start_IT+0x47c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d068      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7f      	ldr	r2, [pc, #508]	@ (80079fc <HAL_DMA_Start_IT+0x480>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d063      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7d      	ldr	r2, [pc, #500]	@ (8007a00 <HAL_DMA_Start_IT+0x484>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d05e      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7c      	ldr	r2, [pc, #496]	@ (8007a04 <HAL_DMA_Start_IT+0x488>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d059      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a08 <HAL_DMA_Start_IT+0x48c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d054      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a79      	ldr	r2, [pc, #484]	@ (8007a0c <HAL_DMA_Start_IT+0x490>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d04f      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a77      	ldr	r2, [pc, #476]	@ (8007a10 <HAL_DMA_Start_IT+0x494>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d04a      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a76      	ldr	r2, [pc, #472]	@ (8007a14 <HAL_DMA_Start_IT+0x498>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d045      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a74      	ldr	r2, [pc, #464]	@ (8007a18 <HAL_DMA_Start_IT+0x49c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d040      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a73      	ldr	r2, [pc, #460]	@ (8007a1c <HAL_DMA_Start_IT+0x4a0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d03b      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a71      	ldr	r2, [pc, #452]	@ (8007a20 <HAL_DMA_Start_IT+0x4a4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d036      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a70      	ldr	r2, [pc, #448]	@ (8007a24 <HAL_DMA_Start_IT+0x4a8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d031      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6e      	ldr	r2, [pc, #440]	@ (8007a28 <HAL_DMA_Start_IT+0x4ac>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d02c      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6d      	ldr	r2, [pc, #436]	@ (8007a2c <HAL_DMA_Start_IT+0x4b0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d027      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a6b      	ldr	r2, [pc, #428]	@ (8007a30 <HAL_DMA_Start_IT+0x4b4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d022      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a6a      	ldr	r2, [pc, #424]	@ (8007a34 <HAL_DMA_Start_IT+0x4b8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d01d      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a68      	ldr	r2, [pc, #416]	@ (8007a38 <HAL_DMA_Start_IT+0x4bc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a67      	ldr	r2, [pc, #412]	@ (8007a3c <HAL_DMA_Start_IT+0x4c0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a65      	ldr	r2, [pc, #404]	@ (8007a40 <HAL_DMA_Start_IT+0x4c4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a64      	ldr	r2, [pc, #400]	@ (8007a44 <HAL_DMA_Start_IT+0x4c8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a62      	ldr	r2, [pc, #392]	@ (8007a48 <HAL_DMA_Start_IT+0x4cc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_DMA_Start_IT+0x350>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a61      	ldr	r2, [pc, #388]	@ (8007a4c <HAL_DMA_Start_IT+0x4d0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d101      	bne.n	80078d0 <HAL_DMA_Start_IT+0x354>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <HAL_DMA_Start_IT+0x356>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01a      	beq.n	800790c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800790a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a37      	ldr	r2, [pc, #220]	@ (80079f0 <HAL_DMA_Start_IT+0x474>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d04a      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a36      	ldr	r2, [pc, #216]	@ (80079f4 <HAL_DMA_Start_IT+0x478>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d045      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a34      	ldr	r2, [pc, #208]	@ (80079f8 <HAL_DMA_Start_IT+0x47c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d040      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a33      	ldr	r2, [pc, #204]	@ (80079fc <HAL_DMA_Start_IT+0x480>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d03b      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a31      	ldr	r2, [pc, #196]	@ (8007a00 <HAL_DMA_Start_IT+0x484>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d036      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a30      	ldr	r2, [pc, #192]	@ (8007a04 <HAL_DMA_Start_IT+0x488>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d031      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a08 <HAL_DMA_Start_IT+0x48c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d02c      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2d      	ldr	r2, [pc, #180]	@ (8007a0c <HAL_DMA_Start_IT+0x490>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d027      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2b      	ldr	r2, [pc, #172]	@ (8007a10 <HAL_DMA_Start_IT+0x494>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d022      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a2a      	ldr	r2, [pc, #168]	@ (8007a14 <HAL_DMA_Start_IT+0x498>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d01d      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a28      	ldr	r2, [pc, #160]	@ (8007a18 <HAL_DMA_Start_IT+0x49c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d018      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a27      	ldr	r2, [pc, #156]	@ (8007a1c <HAL_DMA_Start_IT+0x4a0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a25      	ldr	r2, [pc, #148]	@ (8007a20 <HAL_DMA_Start_IT+0x4a4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00e      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a24      	ldr	r2, [pc, #144]	@ (8007a24 <HAL_DMA_Start_IT+0x4a8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a22      	ldr	r2, [pc, #136]	@ (8007a28 <HAL_DMA_Start_IT+0x4ac>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_DMA_Start_IT+0x430>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a21      	ldr	r2, [pc, #132]	@ (8007a2c <HAL_DMA_Start_IT+0x4b0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d108      	bne.n	80079be <HAL_DMA_Start_IT+0x442>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e012      	b.n	80079e4 <HAL_DMA_Start_IT+0x468>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0201 	orr.w	r2, r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e009      	b.n	80079e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40020010 	.word	0x40020010
 80079f4:	40020028 	.word	0x40020028
 80079f8:	40020040 	.word	0x40020040
 80079fc:	40020058 	.word	0x40020058
 8007a00:	40020070 	.word	0x40020070
 8007a04:	40020088 	.word	0x40020088
 8007a08:	400200a0 	.word	0x400200a0
 8007a0c:	400200b8 	.word	0x400200b8
 8007a10:	40020410 	.word	0x40020410
 8007a14:	40020428 	.word	0x40020428
 8007a18:	40020440 	.word	0x40020440
 8007a1c:	40020458 	.word	0x40020458
 8007a20:	40020470 	.word	0x40020470
 8007a24:	40020488 	.word	0x40020488
 8007a28:	400204a0 	.word	0x400204a0
 8007a2c:	400204b8 	.word	0x400204b8
 8007a30:	58025408 	.word	0x58025408
 8007a34:	5802541c 	.word	0x5802541c
 8007a38:	58025430 	.word	0x58025430
 8007a3c:	58025444 	.word	0x58025444
 8007a40:	58025458 	.word	0x58025458
 8007a44:	5802546c 	.word	0x5802546c
 8007a48:	58025480 	.word	0x58025480
 8007a4c:	58025494 	.word	0x58025494

08007a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007a58:	f7ff f88c 	bl	8006b74 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e2dc      	b.n	8008022 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d008      	beq.n	8007a86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2280      	movs	r2, #128	@ 0x80
 8007a78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e2cd      	b.n	8008022 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a76      	ldr	r2, [pc, #472]	@ (8007c64 <HAL_DMA_Abort+0x214>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d04a      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a74      	ldr	r2, [pc, #464]	@ (8007c68 <HAL_DMA_Abort+0x218>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d045      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a73      	ldr	r2, [pc, #460]	@ (8007c6c <HAL_DMA_Abort+0x21c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d040      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a71      	ldr	r2, [pc, #452]	@ (8007c70 <HAL_DMA_Abort+0x220>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d03b      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a70      	ldr	r2, [pc, #448]	@ (8007c74 <HAL_DMA_Abort+0x224>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d036      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a6e      	ldr	r2, [pc, #440]	@ (8007c78 <HAL_DMA_Abort+0x228>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d031      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a6d      	ldr	r2, [pc, #436]	@ (8007c7c <HAL_DMA_Abort+0x22c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d02c      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6b      	ldr	r2, [pc, #428]	@ (8007c80 <HAL_DMA_Abort+0x230>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d027      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a6a      	ldr	r2, [pc, #424]	@ (8007c84 <HAL_DMA_Abort+0x234>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d022      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a68      	ldr	r2, [pc, #416]	@ (8007c88 <HAL_DMA_Abort+0x238>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d01d      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a67      	ldr	r2, [pc, #412]	@ (8007c8c <HAL_DMA_Abort+0x23c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d018      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a65      	ldr	r2, [pc, #404]	@ (8007c90 <HAL_DMA_Abort+0x240>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a64      	ldr	r2, [pc, #400]	@ (8007c94 <HAL_DMA_Abort+0x244>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a62      	ldr	r2, [pc, #392]	@ (8007c98 <HAL_DMA_Abort+0x248>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a61      	ldr	r2, [pc, #388]	@ (8007c9c <HAL_DMA_Abort+0x24c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_DMA_Abort+0xd6>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5f      	ldr	r2, [pc, #380]	@ (8007ca0 <HAL_DMA_Abort+0x250>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d101      	bne.n	8007b2a <HAL_DMA_Abort+0xda>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <HAL_DMA_Abort+0xdc>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d013      	beq.n	8007b58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 021e 	bic.w	r2, r2, #30
 8007b3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e00a      	b.n	8007b6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 020e 	bic.w	r2, r2, #14
 8007b66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a3c      	ldr	r2, [pc, #240]	@ (8007c64 <HAL_DMA_Abort+0x214>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d072      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c68 <HAL_DMA_Abort+0x218>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d06d      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a39      	ldr	r2, [pc, #228]	@ (8007c6c <HAL_DMA_Abort+0x21c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d068      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a37      	ldr	r2, [pc, #220]	@ (8007c70 <HAL_DMA_Abort+0x220>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d063      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a36      	ldr	r2, [pc, #216]	@ (8007c74 <HAL_DMA_Abort+0x224>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d05e      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a34      	ldr	r2, [pc, #208]	@ (8007c78 <HAL_DMA_Abort+0x228>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d059      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a33      	ldr	r2, [pc, #204]	@ (8007c7c <HAL_DMA_Abort+0x22c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d054      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a31      	ldr	r2, [pc, #196]	@ (8007c80 <HAL_DMA_Abort+0x230>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04f      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a30      	ldr	r2, [pc, #192]	@ (8007c84 <HAL_DMA_Abort+0x234>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d04a      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8007c88 <HAL_DMA_Abort+0x238>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d045      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8007c8c <HAL_DMA_Abort+0x23c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d040      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a2b      	ldr	r2, [pc, #172]	@ (8007c90 <HAL_DMA_Abort+0x240>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d03b      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a2a      	ldr	r2, [pc, #168]	@ (8007c94 <HAL_DMA_Abort+0x244>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d036      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a28      	ldr	r2, [pc, #160]	@ (8007c98 <HAL_DMA_Abort+0x248>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d031      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a27      	ldr	r2, [pc, #156]	@ (8007c9c <HAL_DMA_Abort+0x24c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d02c      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a25      	ldr	r2, [pc, #148]	@ (8007ca0 <HAL_DMA_Abort+0x250>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d027      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a24      	ldr	r2, [pc, #144]	@ (8007ca4 <HAL_DMA_Abort+0x254>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d022      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a22      	ldr	r2, [pc, #136]	@ (8007ca8 <HAL_DMA_Abort+0x258>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01d      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a21      	ldr	r2, [pc, #132]	@ (8007cac <HAL_DMA_Abort+0x25c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d018      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1f      	ldr	r2, [pc, #124]	@ (8007cb0 <HAL_DMA_Abort+0x260>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb4 <HAL_DMA_Abort+0x264>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d00e      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb8 <HAL_DMA_Abort+0x268>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d009      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <HAL_DMA_Abort+0x26c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d004      	beq.n	8007c5e <HAL_DMA_Abort+0x20e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_DMA_Abort+0x270>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d132      	bne.n	8007cc4 <HAL_DMA_Abort+0x274>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e031      	b.n	8007cc6 <HAL_DMA_Abort+0x276>
 8007c62:	bf00      	nop
 8007c64:	40020010 	.word	0x40020010
 8007c68:	40020028 	.word	0x40020028
 8007c6c:	40020040 	.word	0x40020040
 8007c70:	40020058 	.word	0x40020058
 8007c74:	40020070 	.word	0x40020070
 8007c78:	40020088 	.word	0x40020088
 8007c7c:	400200a0 	.word	0x400200a0
 8007c80:	400200b8 	.word	0x400200b8
 8007c84:	40020410 	.word	0x40020410
 8007c88:	40020428 	.word	0x40020428
 8007c8c:	40020440 	.word	0x40020440
 8007c90:	40020458 	.word	0x40020458
 8007c94:	40020470 	.word	0x40020470
 8007c98:	40020488 	.word	0x40020488
 8007c9c:	400204a0 	.word	0x400204a0
 8007ca0:	400204b8 	.word	0x400204b8
 8007ca4:	58025408 	.word	0x58025408
 8007ca8:	5802541c 	.word	0x5802541c
 8007cac:	58025430 	.word	0x58025430
 8007cb0:	58025444 	.word	0x58025444
 8007cb4:	58025458 	.word	0x58025458
 8007cb8:	5802546c 	.word	0x5802546c
 8007cbc:	58025480 	.word	0x58025480
 8007cc0:	58025494 	.word	0x58025494
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a6d      	ldr	r2, [pc, #436]	@ (8007e94 <HAL_DMA_Abort+0x444>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d04a      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8007e98 <HAL_DMA_Abort+0x448>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d045      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8007e9c <HAL_DMA_Abort+0x44c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d040      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a68      	ldr	r2, [pc, #416]	@ (8007ea0 <HAL_DMA_Abort+0x450>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d03b      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a67      	ldr	r2, [pc, #412]	@ (8007ea4 <HAL_DMA_Abort+0x454>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d036      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a65      	ldr	r2, [pc, #404]	@ (8007ea8 <HAL_DMA_Abort+0x458>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d031      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a64      	ldr	r2, [pc, #400]	@ (8007eac <HAL_DMA_Abort+0x45c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d02c      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a62      	ldr	r2, [pc, #392]	@ (8007eb0 <HAL_DMA_Abort+0x460>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d027      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a61      	ldr	r2, [pc, #388]	@ (8007eb4 <HAL_DMA_Abort+0x464>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d022      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a5f      	ldr	r2, [pc, #380]	@ (8007eb8 <HAL_DMA_Abort+0x468>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01d      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a5e      	ldr	r2, [pc, #376]	@ (8007ebc <HAL_DMA_Abort+0x46c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8007ec0 <HAL_DMA_Abort+0x470>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a5b      	ldr	r2, [pc, #364]	@ (8007ec4 <HAL_DMA_Abort+0x474>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a59      	ldr	r2, [pc, #356]	@ (8007ec8 <HAL_DMA_Abort+0x478>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a58      	ldr	r2, [pc, #352]	@ (8007ecc <HAL_DMA_Abort+0x47c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <HAL_DMA_Abort+0x32a>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a56      	ldr	r2, [pc, #344]	@ (8007ed0 <HAL_DMA_Abort+0x480>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d108      	bne.n	8007d8c <HAL_DMA_Abort+0x33c>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e007      	b.n	8007d9c <HAL_DMA_Abort+0x34c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d9c:	e013      	b.n	8007dc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d9e:	f7fe fee9 	bl	8006b74 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d90c      	bls.n	8007dc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2203      	movs	r2, #3
 8007db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e12d      	b.n	8008022 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8007e94 <HAL_DMA_Abort+0x444>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d04a      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e98 <HAL_DMA_Abort+0x448>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d045      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2c      	ldr	r2, [pc, #176]	@ (8007e9c <HAL_DMA_Abort+0x44c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d040      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea0 <HAL_DMA_Abort+0x450>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a29      	ldr	r2, [pc, #164]	@ (8007ea4 <HAL_DMA_Abort+0x454>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d036      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a27      	ldr	r2, [pc, #156]	@ (8007ea8 <HAL_DMA_Abort+0x458>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d031      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a26      	ldr	r2, [pc, #152]	@ (8007eac <HAL_DMA_Abort+0x45c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d02c      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	@ (8007eb0 <HAL_DMA_Abort+0x460>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d027      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a23      	ldr	r2, [pc, #140]	@ (8007eb4 <HAL_DMA_Abort+0x464>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <HAL_DMA_Abort+0x468>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a20      	ldr	r2, [pc, #128]	@ (8007ebc <HAL_DMA_Abort+0x46c>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec0 <HAL_DMA_Abort+0x470>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec4 <HAL_DMA_Abort+0x474>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec8 <HAL_DMA_Abort+0x478>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1a      	ldr	r2, [pc, #104]	@ (8007ecc <HAL_DMA_Abort+0x47c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_DMA_Abort+0x422>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a18      	ldr	r2, [pc, #96]	@ (8007ed0 <HAL_DMA_Abort+0x480>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <HAL_DMA_Abort+0x426>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_DMA_Abort+0x428>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d02b      	beq.n	8007ed4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e86:	f003 031f 	and.w	r3, r3, #31
 8007e8a:	223f      	movs	r2, #63	@ 0x3f
 8007e8c:	409a      	lsls	r2, r3
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	609a      	str	r2, [r3, #8]
 8007e92:	e02a      	b.n	8007eea <HAL_DMA_Abort+0x49a>
 8007e94:	40020010 	.word	0x40020010
 8007e98:	40020028 	.word	0x40020028
 8007e9c:	40020040 	.word	0x40020040
 8007ea0:	40020058 	.word	0x40020058
 8007ea4:	40020070 	.word	0x40020070
 8007ea8:	40020088 	.word	0x40020088
 8007eac:	400200a0 	.word	0x400200a0
 8007eb0:	400200b8 	.word	0x400200b8
 8007eb4:	40020410 	.word	0x40020410
 8007eb8:	40020428 	.word	0x40020428
 8007ebc:	40020440 	.word	0x40020440
 8007ec0:	40020458 	.word	0x40020458
 8007ec4:	40020470 	.word	0x40020470
 8007ec8:	40020488 	.word	0x40020488
 8007ecc:	400204a0 	.word	0x400204a0
 8007ed0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ede:	f003 031f 	and.w	r3, r3, #31
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4f      	ldr	r2, [pc, #316]	@ (800802c <HAL_DMA_Abort+0x5dc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d072      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8008030 <HAL_DMA_Abort+0x5e0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d06d      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4c      	ldr	r2, [pc, #304]	@ (8008034 <HAL_DMA_Abort+0x5e4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d068      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8008038 <HAL_DMA_Abort+0x5e8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d063      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a49      	ldr	r2, [pc, #292]	@ (800803c <HAL_DMA_Abort+0x5ec>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d05e      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a47      	ldr	r2, [pc, #284]	@ (8008040 <HAL_DMA_Abort+0x5f0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d059      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a46      	ldr	r2, [pc, #280]	@ (8008044 <HAL_DMA_Abort+0x5f4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d054      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a44      	ldr	r2, [pc, #272]	@ (8008048 <HAL_DMA_Abort+0x5f8>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d04f      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a43      	ldr	r2, [pc, #268]	@ (800804c <HAL_DMA_Abort+0x5fc>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d04a      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a41      	ldr	r2, [pc, #260]	@ (8008050 <HAL_DMA_Abort+0x600>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d045      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a40      	ldr	r2, [pc, #256]	@ (8008054 <HAL_DMA_Abort+0x604>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d040      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8008058 <HAL_DMA_Abort+0x608>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d03b      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a3d      	ldr	r2, [pc, #244]	@ (800805c <HAL_DMA_Abort+0x60c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d036      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a3b      	ldr	r2, [pc, #236]	@ (8008060 <HAL_DMA_Abort+0x610>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d031      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8008064 <HAL_DMA_Abort+0x614>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d02c      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a38      	ldr	r2, [pc, #224]	@ (8008068 <HAL_DMA_Abort+0x618>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d027      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a37      	ldr	r2, [pc, #220]	@ (800806c <HAL_DMA_Abort+0x61c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d022      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a35      	ldr	r2, [pc, #212]	@ (8008070 <HAL_DMA_Abort+0x620>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01d      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a34      	ldr	r2, [pc, #208]	@ (8008074 <HAL_DMA_Abort+0x624>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d018      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a32      	ldr	r2, [pc, #200]	@ (8008078 <HAL_DMA_Abort+0x628>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a31      	ldr	r2, [pc, #196]	@ (800807c <HAL_DMA_Abort+0x62c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00e      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8008080 <HAL_DMA_Abort+0x630>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d009      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a2e      	ldr	r2, [pc, #184]	@ (8008084 <HAL_DMA_Abort+0x634>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d004      	beq.n	8007fda <HAL_DMA_Abort+0x58a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8008088 <HAL_DMA_Abort+0x638>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d101      	bne.n	8007fde <HAL_DMA_Abort+0x58e>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <HAL_DMA_Abort+0x590>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d015      	beq.n	8008010 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007fec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00c      	beq.n	8008010 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008004:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800800e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40020010 	.word	0x40020010
 8008030:	40020028 	.word	0x40020028
 8008034:	40020040 	.word	0x40020040
 8008038:	40020058 	.word	0x40020058
 800803c:	40020070 	.word	0x40020070
 8008040:	40020088 	.word	0x40020088
 8008044:	400200a0 	.word	0x400200a0
 8008048:	400200b8 	.word	0x400200b8
 800804c:	40020410 	.word	0x40020410
 8008050:	40020428 	.word	0x40020428
 8008054:	40020440 	.word	0x40020440
 8008058:	40020458 	.word	0x40020458
 800805c:	40020470 	.word	0x40020470
 8008060:	40020488 	.word	0x40020488
 8008064:	400204a0 	.word	0x400204a0
 8008068:	400204b8 	.word	0x400204b8
 800806c:	58025408 	.word	0x58025408
 8008070:	5802541c 	.word	0x5802541c
 8008074:	58025430 	.word	0x58025430
 8008078:	58025444 	.word	0x58025444
 800807c:	58025458 	.word	0x58025458
 8008080:	5802546c 	.word	0x5802546c
 8008084:	58025480 	.word	0x58025480
 8008088:	58025494 	.word	0x58025494

0800808c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e237      	b.n	800850e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d004      	beq.n	80080b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2280      	movs	r2, #128	@ 0x80
 80080ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e22c      	b.n	800850e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a5c      	ldr	r2, [pc, #368]	@ (800822c <HAL_DMA_Abort_IT+0x1a0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d04a      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a5b      	ldr	r2, [pc, #364]	@ (8008230 <HAL_DMA_Abort_IT+0x1a4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d045      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a59      	ldr	r2, [pc, #356]	@ (8008234 <HAL_DMA_Abort_IT+0x1a8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d040      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a58      	ldr	r2, [pc, #352]	@ (8008238 <HAL_DMA_Abort_IT+0x1ac>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d03b      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a56      	ldr	r2, [pc, #344]	@ (800823c <HAL_DMA_Abort_IT+0x1b0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d036      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a55      	ldr	r2, [pc, #340]	@ (8008240 <HAL_DMA_Abort_IT+0x1b4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d031      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a53      	ldr	r2, [pc, #332]	@ (8008244 <HAL_DMA_Abort_IT+0x1b8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d02c      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a52      	ldr	r2, [pc, #328]	@ (8008248 <HAL_DMA_Abort_IT+0x1bc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d027      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a50      	ldr	r2, [pc, #320]	@ (800824c <HAL_DMA_Abort_IT+0x1c0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d022      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4f      	ldr	r2, [pc, #316]	@ (8008250 <HAL_DMA_Abort_IT+0x1c4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d01d      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a4d      	ldr	r2, [pc, #308]	@ (8008254 <HAL_DMA_Abort_IT+0x1c8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d018      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a4c      	ldr	r2, [pc, #304]	@ (8008258 <HAL_DMA_Abort_IT+0x1cc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a4a      	ldr	r2, [pc, #296]	@ (800825c <HAL_DMA_Abort_IT+0x1d0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a49      	ldr	r2, [pc, #292]	@ (8008260 <HAL_DMA_Abort_IT+0x1d4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d009      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a47      	ldr	r2, [pc, #284]	@ (8008264 <HAL_DMA_Abort_IT+0x1d8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a46      	ldr	r2, [pc, #280]	@ (8008268 <HAL_DMA_Abort_IT+0x1dc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_DMA_Abort_IT+0xcc>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <HAL_DMA_Abort_IT+0xce>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8086 	beq.w	800826c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2204      	movs	r2, #4
 8008164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a2f      	ldr	r2, [pc, #188]	@ (800822c <HAL_DMA_Abort_IT+0x1a0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d04a      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a2e      	ldr	r2, [pc, #184]	@ (8008230 <HAL_DMA_Abort_IT+0x1a4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d045      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a2c      	ldr	r2, [pc, #176]	@ (8008234 <HAL_DMA_Abort_IT+0x1a8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d040      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a2b      	ldr	r2, [pc, #172]	@ (8008238 <HAL_DMA_Abort_IT+0x1ac>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d03b      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a29      	ldr	r2, [pc, #164]	@ (800823c <HAL_DMA_Abort_IT+0x1b0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d036      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a28      	ldr	r2, [pc, #160]	@ (8008240 <HAL_DMA_Abort_IT+0x1b4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d031      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a26      	ldr	r2, [pc, #152]	@ (8008244 <HAL_DMA_Abort_IT+0x1b8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02c      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a25      	ldr	r2, [pc, #148]	@ (8008248 <HAL_DMA_Abort_IT+0x1bc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d027      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a23      	ldr	r2, [pc, #140]	@ (800824c <HAL_DMA_Abort_IT+0x1c0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d022      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a22      	ldr	r2, [pc, #136]	@ (8008250 <HAL_DMA_Abort_IT+0x1c4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d01d      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a20      	ldr	r2, [pc, #128]	@ (8008254 <HAL_DMA_Abort_IT+0x1c8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d018      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1f      	ldr	r2, [pc, #124]	@ (8008258 <HAL_DMA_Abort_IT+0x1cc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1d      	ldr	r2, [pc, #116]	@ (800825c <HAL_DMA_Abort_IT+0x1d0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00e      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008260 <HAL_DMA_Abort_IT+0x1d4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d009      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008264 <HAL_DMA_Abort_IT+0x1d8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_DMA_Abort_IT+0x17c>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a19      	ldr	r2, [pc, #100]	@ (8008268 <HAL_DMA_Abort_IT+0x1dc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <HAL_DMA_Abort_IT+0x18e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e178      	b.n	800850c <HAL_DMA_Abort_IT+0x480>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0201 	bic.w	r2, r2, #1
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e16f      	b.n	800850c <HAL_DMA_Abort_IT+0x480>
 800822c:	40020010 	.word	0x40020010
 8008230:	40020028 	.word	0x40020028
 8008234:	40020040 	.word	0x40020040
 8008238:	40020058 	.word	0x40020058
 800823c:	40020070 	.word	0x40020070
 8008240:	40020088 	.word	0x40020088
 8008244:	400200a0 	.word	0x400200a0
 8008248:	400200b8 	.word	0x400200b8
 800824c:	40020410 	.word	0x40020410
 8008250:	40020428 	.word	0x40020428
 8008254:	40020440 	.word	0x40020440
 8008258:	40020458 	.word	0x40020458
 800825c:	40020470 	.word	0x40020470
 8008260:	40020488 	.word	0x40020488
 8008264:	400204a0 	.word	0x400204a0
 8008268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 020e 	bic.w	r2, r2, #14
 800827a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a6c      	ldr	r2, [pc, #432]	@ (8008434 <HAL_DMA_Abort_IT+0x3a8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d04a      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a6b      	ldr	r2, [pc, #428]	@ (8008438 <HAL_DMA_Abort_IT+0x3ac>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d045      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a69      	ldr	r2, [pc, #420]	@ (800843c <HAL_DMA_Abort_IT+0x3b0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d040      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a68      	ldr	r2, [pc, #416]	@ (8008440 <HAL_DMA_Abort_IT+0x3b4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d03b      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a66      	ldr	r2, [pc, #408]	@ (8008444 <HAL_DMA_Abort_IT+0x3b8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d036      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a65      	ldr	r2, [pc, #404]	@ (8008448 <HAL_DMA_Abort_IT+0x3bc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d031      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a63      	ldr	r2, [pc, #396]	@ (800844c <HAL_DMA_Abort_IT+0x3c0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d02c      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a62      	ldr	r2, [pc, #392]	@ (8008450 <HAL_DMA_Abort_IT+0x3c4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d027      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a60      	ldr	r2, [pc, #384]	@ (8008454 <HAL_DMA_Abort_IT+0x3c8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d022      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a5f      	ldr	r2, [pc, #380]	@ (8008458 <HAL_DMA_Abort_IT+0x3cc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d01d      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a5d      	ldr	r2, [pc, #372]	@ (800845c <HAL_DMA_Abort_IT+0x3d0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d018      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a5c      	ldr	r2, [pc, #368]	@ (8008460 <HAL_DMA_Abort_IT+0x3d4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a5a      	ldr	r2, [pc, #360]	@ (8008464 <HAL_DMA_Abort_IT+0x3d8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a59      	ldr	r2, [pc, #356]	@ (8008468 <HAL_DMA_Abort_IT+0x3dc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a57      	ldr	r2, [pc, #348]	@ (800846c <HAL_DMA_Abort_IT+0x3e0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_DMA_Abort_IT+0x290>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a56      	ldr	r2, [pc, #344]	@ (8008470 <HAL_DMA_Abort_IT+0x3e4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d108      	bne.n	800832e <HAL_DMA_Abort_IT+0x2a2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e007      	b.n	800833e <HAL_DMA_Abort_IT+0x2b2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a3c      	ldr	r2, [pc, #240]	@ (8008434 <HAL_DMA_Abort_IT+0x3a8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d072      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a3a      	ldr	r2, [pc, #232]	@ (8008438 <HAL_DMA_Abort_IT+0x3ac>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d06d      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a39      	ldr	r2, [pc, #228]	@ (800843c <HAL_DMA_Abort_IT+0x3b0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d068      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a37      	ldr	r2, [pc, #220]	@ (8008440 <HAL_DMA_Abort_IT+0x3b4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d063      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a36      	ldr	r2, [pc, #216]	@ (8008444 <HAL_DMA_Abort_IT+0x3b8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d05e      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a34      	ldr	r2, [pc, #208]	@ (8008448 <HAL_DMA_Abort_IT+0x3bc>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d059      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a33      	ldr	r2, [pc, #204]	@ (800844c <HAL_DMA_Abort_IT+0x3c0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d054      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a31      	ldr	r2, [pc, #196]	@ (8008450 <HAL_DMA_Abort_IT+0x3c4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d04f      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a30      	ldr	r2, [pc, #192]	@ (8008454 <HAL_DMA_Abort_IT+0x3c8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d04a      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2e      	ldr	r2, [pc, #184]	@ (8008458 <HAL_DMA_Abort_IT+0x3cc>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d045      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2d      	ldr	r2, [pc, #180]	@ (800845c <HAL_DMA_Abort_IT+0x3d0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d040      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2b      	ldr	r2, [pc, #172]	@ (8008460 <HAL_DMA_Abort_IT+0x3d4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d03b      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008464 <HAL_DMA_Abort_IT+0x3d8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d036      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a28      	ldr	r2, [pc, #160]	@ (8008468 <HAL_DMA_Abort_IT+0x3dc>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d031      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a27      	ldr	r2, [pc, #156]	@ (800846c <HAL_DMA_Abort_IT+0x3e0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d02c      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a25      	ldr	r2, [pc, #148]	@ (8008470 <HAL_DMA_Abort_IT+0x3e4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d027      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a24      	ldr	r2, [pc, #144]	@ (8008474 <HAL_DMA_Abort_IT+0x3e8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d022      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a22      	ldr	r2, [pc, #136]	@ (8008478 <HAL_DMA_Abort_IT+0x3ec>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01d      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a21      	ldr	r2, [pc, #132]	@ (800847c <HAL_DMA_Abort_IT+0x3f0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d018      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1f      	ldr	r2, [pc, #124]	@ (8008480 <HAL_DMA_Abort_IT+0x3f4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1e      	ldr	r2, [pc, #120]	@ (8008484 <HAL_DMA_Abort_IT+0x3f8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00e      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a1c      	ldr	r2, [pc, #112]	@ (8008488 <HAL_DMA_Abort_IT+0x3fc>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d009      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a1b      	ldr	r2, [pc, #108]	@ (800848c <HAL_DMA_Abort_IT+0x400>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_DMA_Abort_IT+0x3a2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a19      	ldr	r2, [pc, #100]	@ (8008490 <HAL_DMA_Abort_IT+0x404>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d132      	bne.n	8008494 <HAL_DMA_Abort_IT+0x408>
 800842e:	2301      	movs	r3, #1
 8008430:	e031      	b.n	8008496 <HAL_DMA_Abort_IT+0x40a>
 8008432:	bf00      	nop
 8008434:	40020010 	.word	0x40020010
 8008438:	40020028 	.word	0x40020028
 800843c:	40020040 	.word	0x40020040
 8008440:	40020058 	.word	0x40020058
 8008444:	40020070 	.word	0x40020070
 8008448:	40020088 	.word	0x40020088
 800844c:	400200a0 	.word	0x400200a0
 8008450:	400200b8 	.word	0x400200b8
 8008454:	40020410 	.word	0x40020410
 8008458:	40020428 	.word	0x40020428
 800845c:	40020440 	.word	0x40020440
 8008460:	40020458 	.word	0x40020458
 8008464:	40020470 	.word	0x40020470
 8008468:	40020488 	.word	0x40020488
 800846c:	400204a0 	.word	0x400204a0
 8008470:	400204b8 	.word	0x400204b8
 8008474:	58025408 	.word	0x58025408
 8008478:	5802541c 	.word	0x5802541c
 800847c:	58025430 	.word	0x58025430
 8008480:	58025444 	.word	0x58025444
 8008484:	58025458 	.word	0x58025458
 8008488:	5802546c 	.word	0x5802546c
 800848c:	58025480 	.word	0x58025480
 8008490:	58025494 	.word	0x58025494
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d028      	beq.n	80084ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80084c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00c      	beq.n	80084ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80084ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08a      	sub	sp, #40	@ 0x28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008524:	4b67      	ldr	r3, [pc, #412]	@ (80086c4 <HAL_DMA_IRQHandler+0x1ac>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a67      	ldr	r2, [pc, #412]	@ (80086c8 <HAL_DMA_IRQHandler+0x1b0>)
 800852a:	fba2 2303 	umull	r2, r3, r2, r3
 800852e:	0a9b      	lsrs	r3, r3, #10
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008536:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800853c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a5f      	ldr	r2, [pc, #380]	@ (80086cc <HAL_DMA_IRQHandler+0x1b4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d04a      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a5d      	ldr	r2, [pc, #372]	@ (80086d0 <HAL_DMA_IRQHandler+0x1b8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d045      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a5c      	ldr	r2, [pc, #368]	@ (80086d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d040      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a5a      	ldr	r2, [pc, #360]	@ (80086d8 <HAL_DMA_IRQHandler+0x1c0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d03b      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a59      	ldr	r2, [pc, #356]	@ (80086dc <HAL_DMA_IRQHandler+0x1c4>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d036      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a57      	ldr	r2, [pc, #348]	@ (80086e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d031      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a56      	ldr	r2, [pc, #344]	@ (80086e4 <HAL_DMA_IRQHandler+0x1cc>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d02c      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a54      	ldr	r2, [pc, #336]	@ (80086e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d027      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a53      	ldr	r2, [pc, #332]	@ (80086ec <HAL_DMA_IRQHandler+0x1d4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a51      	ldr	r2, [pc, #324]	@ (80086f0 <HAL_DMA_IRQHandler+0x1d8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01d      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a50      	ldr	r2, [pc, #320]	@ (80086f4 <HAL_DMA_IRQHandler+0x1dc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a4e      	ldr	r2, [pc, #312]	@ (80086f8 <HAL_DMA_IRQHandler+0x1e0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a4d      	ldr	r2, [pc, #308]	@ (80086fc <HAL_DMA_IRQHandler+0x1e4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008700 <HAL_DMA_IRQHandler+0x1e8>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a4a      	ldr	r2, [pc, #296]	@ (8008704 <HAL_DMA_IRQHandler+0x1ec>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <HAL_DMA_IRQHandler+0xd2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a48      	ldr	r2, [pc, #288]	@ (8008708 <HAL_DMA_IRQHandler+0x1f0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <HAL_DMA_IRQHandler+0xd6>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <HAL_DMA_IRQHandler+0xd8>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 842b 	beq.w	8008e4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	2208      	movs	r2, #8
 8008600:	409a      	lsls	r2, r3
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	4013      	ands	r3, r2
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80a2 	beq.w	8008750 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a2e      	ldr	r2, [pc, #184]	@ (80086cc <HAL_DMA_IRQHandler+0x1b4>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d04a      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a2d      	ldr	r2, [pc, #180]	@ (80086d0 <HAL_DMA_IRQHandler+0x1b8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d045      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a2b      	ldr	r2, [pc, #172]	@ (80086d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d040      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a2a      	ldr	r2, [pc, #168]	@ (80086d8 <HAL_DMA_IRQHandler+0x1c0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d03b      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a28      	ldr	r2, [pc, #160]	@ (80086dc <HAL_DMA_IRQHandler+0x1c4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d036      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a27      	ldr	r2, [pc, #156]	@ (80086e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d031      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a25      	ldr	r2, [pc, #148]	@ (80086e4 <HAL_DMA_IRQHandler+0x1cc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d02c      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a24      	ldr	r2, [pc, #144]	@ (80086e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d027      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a22      	ldr	r2, [pc, #136]	@ (80086ec <HAL_DMA_IRQHandler+0x1d4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d022      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a21      	ldr	r2, [pc, #132]	@ (80086f0 <HAL_DMA_IRQHandler+0x1d8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d01d      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a1f      	ldr	r2, [pc, #124]	@ (80086f4 <HAL_DMA_IRQHandler+0x1dc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d018      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1e      	ldr	r2, [pc, #120]	@ (80086f8 <HAL_DMA_IRQHandler+0x1e0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d013      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <HAL_DMA_IRQHandler+0x1e4>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00e      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <HAL_DMA_IRQHandler+0x1e8>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d009      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a19      	ldr	r2, [pc, #100]	@ (8008704 <HAL_DMA_IRQHandler+0x1ec>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d004      	beq.n	80086ac <HAL_DMA_IRQHandler+0x194>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a18      	ldr	r2, [pc, #96]	@ (8008708 <HAL_DMA_IRQHandler+0x1f0>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d12f      	bne.n	800870c <HAL_DMA_IRQHandler+0x1f4>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf14      	ite	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	2300      	moveq	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	e02e      	b.n	8008720 <HAL_DMA_IRQHandler+0x208>
 80086c2:	bf00      	nop
 80086c4:	240001e4 	.word	0x240001e4
 80086c8:	1b4e81b5 	.word	0x1b4e81b5
 80086cc:	40020010 	.word	0x40020010
 80086d0:	40020028 	.word	0x40020028
 80086d4:	40020040 	.word	0x40020040
 80086d8:	40020058 	.word	0x40020058
 80086dc:	40020070 	.word	0x40020070
 80086e0:	40020088 	.word	0x40020088
 80086e4:	400200a0 	.word	0x400200a0
 80086e8:	400200b8 	.word	0x400200b8
 80086ec:	40020410 	.word	0x40020410
 80086f0:	40020428 	.word	0x40020428
 80086f4:	40020440 	.word	0x40020440
 80086f8:	40020458 	.word	0x40020458
 80086fc:	40020470 	.word	0x40020470
 8008700:	40020488 	.word	0x40020488
 8008704:	400204a0 	.word	0x400204a0
 8008708:	400204b8 	.word	0x400204b8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf14      	ite	ne
 800871a:	2301      	movne	r3, #1
 800871c:	2300      	moveq	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d015      	beq.n	8008750 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008738:	f003 031f 	and.w	r3, r3, #31
 800873c:	2208      	movs	r2, #8
 800873e:	409a      	lsls	r2, r3
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008748:	f043 0201 	orr.w	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d06e      	beq.n	8008844 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a69      	ldr	r2, [pc, #420]	@ (8008910 <HAL_DMA_IRQHandler+0x3f8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d04a      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a67      	ldr	r2, [pc, #412]	@ (8008914 <HAL_DMA_IRQHandler+0x3fc>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d045      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a66      	ldr	r2, [pc, #408]	@ (8008918 <HAL_DMA_IRQHandler+0x400>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d040      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a64      	ldr	r2, [pc, #400]	@ (800891c <HAL_DMA_IRQHandler+0x404>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d03b      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a63      	ldr	r2, [pc, #396]	@ (8008920 <HAL_DMA_IRQHandler+0x408>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d036      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a61      	ldr	r2, [pc, #388]	@ (8008924 <HAL_DMA_IRQHandler+0x40c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d031      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a60      	ldr	r2, [pc, #384]	@ (8008928 <HAL_DMA_IRQHandler+0x410>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d02c      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5e      	ldr	r2, [pc, #376]	@ (800892c <HAL_DMA_IRQHandler+0x414>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d027      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a5d      	ldr	r2, [pc, #372]	@ (8008930 <HAL_DMA_IRQHandler+0x418>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d022      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5b      	ldr	r2, [pc, #364]	@ (8008934 <HAL_DMA_IRQHandler+0x41c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01d      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a5a      	ldr	r2, [pc, #360]	@ (8008938 <HAL_DMA_IRQHandler+0x420>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d018      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a58      	ldr	r2, [pc, #352]	@ (800893c <HAL_DMA_IRQHandler+0x424>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a57      	ldr	r2, [pc, #348]	@ (8008940 <HAL_DMA_IRQHandler+0x428>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00e      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a55      	ldr	r2, [pc, #340]	@ (8008944 <HAL_DMA_IRQHandler+0x42c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d009      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a54      	ldr	r2, [pc, #336]	@ (8008948 <HAL_DMA_IRQHandler+0x430>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d004      	beq.n	8008806 <HAL_DMA_IRQHandler+0x2ee>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a52      	ldr	r2, [pc, #328]	@ (800894c <HAL_DMA_IRQHandler+0x434>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d10a      	bne.n	800881c <HAL_DMA_IRQHandler+0x304>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008810:	2b00      	cmp	r3, #0
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	e003      	b.n	8008824 <HAL_DMA_IRQHandler+0x30c>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	2201      	movs	r2, #1
 8008832:	409a      	lsls	r2, r3
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883c:	f043 0202 	orr.w	r2, r3, #2
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	2204      	movs	r2, #4
 800884e:	409a      	lsls	r2, r3
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 808f 	beq.w	8008978 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a2c      	ldr	r2, [pc, #176]	@ (8008910 <HAL_DMA_IRQHandler+0x3f8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d04a      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2a      	ldr	r2, [pc, #168]	@ (8008914 <HAL_DMA_IRQHandler+0x3fc>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d045      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a29      	ldr	r2, [pc, #164]	@ (8008918 <HAL_DMA_IRQHandler+0x400>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d040      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a27      	ldr	r2, [pc, #156]	@ (800891c <HAL_DMA_IRQHandler+0x404>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d03b      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a26      	ldr	r2, [pc, #152]	@ (8008920 <HAL_DMA_IRQHandler+0x408>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d036      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a24      	ldr	r2, [pc, #144]	@ (8008924 <HAL_DMA_IRQHandler+0x40c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d031      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a23      	ldr	r2, [pc, #140]	@ (8008928 <HAL_DMA_IRQHandler+0x410>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d02c      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a21      	ldr	r2, [pc, #132]	@ (800892c <HAL_DMA_IRQHandler+0x414>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d027      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a20      	ldr	r2, [pc, #128]	@ (8008930 <HAL_DMA_IRQHandler+0x418>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d022      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008934 <HAL_DMA_IRQHandler+0x41c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d01d      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008938 <HAL_DMA_IRQHandler+0x420>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d018      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	@ (800893c <HAL_DMA_IRQHandler+0x424>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d013      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008940 <HAL_DMA_IRQHandler+0x428>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d00e      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a18      	ldr	r2, [pc, #96]	@ (8008944 <HAL_DMA_IRQHandler+0x42c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	@ (8008948 <HAL_DMA_IRQHandler+0x430>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d004      	beq.n	80088fa <HAL_DMA_IRQHandler+0x3e2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a15      	ldr	r2, [pc, #84]	@ (800894c <HAL_DMA_IRQHandler+0x434>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d12a      	bne.n	8008950 <HAL_DMA_IRQHandler+0x438>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e023      	b.n	8008958 <HAL_DMA_IRQHandler+0x440>
 8008910:	40020010 	.word	0x40020010
 8008914:	40020028 	.word	0x40020028
 8008918:	40020040 	.word	0x40020040
 800891c:	40020058 	.word	0x40020058
 8008920:	40020070 	.word	0x40020070
 8008924:	40020088 	.word	0x40020088
 8008928:	400200a0 	.word	0x400200a0
 800892c:	400200b8 	.word	0x400200b8
 8008930:	40020410 	.word	0x40020410
 8008934:	40020428 	.word	0x40020428
 8008938:	40020440 	.word	0x40020440
 800893c:	40020458 	.word	0x40020458
 8008940:	40020470 	.word	0x40020470
 8008944:	40020488 	.word	0x40020488
 8008948:	400204a0 	.word	0x400204a0
 800894c:	400204b8 	.word	0x400204b8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2204      	movs	r2, #4
 8008966:	409a      	lsls	r2, r3
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008970:	f043 0204 	orr.w	r2, r3, #4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	2210      	movs	r2, #16
 8008982:	409a      	lsls	r2, r3
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 80a6 	beq.w	8008ada <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a85      	ldr	r2, [pc, #532]	@ (8008ba8 <HAL_DMA_IRQHandler+0x690>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d04a      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a83      	ldr	r2, [pc, #524]	@ (8008bac <HAL_DMA_IRQHandler+0x694>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d045      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a82      	ldr	r2, [pc, #520]	@ (8008bb0 <HAL_DMA_IRQHandler+0x698>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d040      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a80      	ldr	r2, [pc, #512]	@ (8008bb4 <HAL_DMA_IRQHandler+0x69c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d03b      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a7f      	ldr	r2, [pc, #508]	@ (8008bb8 <HAL_DMA_IRQHandler+0x6a0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d036      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a7d      	ldr	r2, [pc, #500]	@ (8008bbc <HAL_DMA_IRQHandler+0x6a4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d031      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a7c      	ldr	r2, [pc, #496]	@ (8008bc0 <HAL_DMA_IRQHandler+0x6a8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d02c      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a7a      	ldr	r2, [pc, #488]	@ (8008bc4 <HAL_DMA_IRQHandler+0x6ac>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d027      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a79      	ldr	r2, [pc, #484]	@ (8008bc8 <HAL_DMA_IRQHandler+0x6b0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d022      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a77      	ldr	r2, [pc, #476]	@ (8008bcc <HAL_DMA_IRQHandler+0x6b4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01d      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a76      	ldr	r2, [pc, #472]	@ (8008bd0 <HAL_DMA_IRQHandler+0x6b8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d018      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a74      	ldr	r2, [pc, #464]	@ (8008bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d013      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a73      	ldr	r2, [pc, #460]	@ (8008bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00e      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a71      	ldr	r2, [pc, #452]	@ (8008bdc <HAL_DMA_IRQHandler+0x6c4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a70      	ldr	r2, [pc, #448]	@ (8008be0 <HAL_DMA_IRQHandler+0x6c8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x516>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a6e      	ldr	r2, [pc, #440]	@ (8008be4 <HAL_DMA_IRQHandler+0x6cc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d10a      	bne.n	8008a44 <HAL_DMA_IRQHandler+0x52c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bf14      	ite	ne
 8008a3c:	2301      	movne	r3, #1
 8008a3e:	2300      	moveq	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	e009      	b.n	8008a58 <HAL_DMA_IRQHandler+0x540>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d03e      	beq.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2210      	movs	r2, #16
 8008a66:	409a      	lsls	r2, r3
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d018      	beq.n	8008aac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d108      	bne.n	8008a9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d024      	beq.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	e01f      	b.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d01b      	beq.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
 8008aaa:	e016      	b.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d107      	bne.n	8008aca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0208 	bic.w	r2, r2, #8
 8008ac8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	409a      	lsls	r2, r3
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8110 	beq.w	8008d10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba8 <HAL_DMA_IRQHandler+0x690>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d04a      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2b      	ldr	r2, [pc, #172]	@ (8008bac <HAL_DMA_IRQHandler+0x694>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d045      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a29      	ldr	r2, [pc, #164]	@ (8008bb0 <HAL_DMA_IRQHandler+0x698>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d040      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a28      	ldr	r2, [pc, #160]	@ (8008bb4 <HAL_DMA_IRQHandler+0x69c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d03b      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a26      	ldr	r2, [pc, #152]	@ (8008bb8 <HAL_DMA_IRQHandler+0x6a0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d036      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a25      	ldr	r2, [pc, #148]	@ (8008bbc <HAL_DMA_IRQHandler+0x6a4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d031      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a23      	ldr	r2, [pc, #140]	@ (8008bc0 <HAL_DMA_IRQHandler+0x6a8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02c      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a22      	ldr	r2, [pc, #136]	@ (8008bc4 <HAL_DMA_IRQHandler+0x6ac>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d027      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a20      	ldr	r2, [pc, #128]	@ (8008bc8 <HAL_DMA_IRQHandler+0x6b0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d022      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <HAL_DMA_IRQHandler+0x6b4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d01d      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd0 <HAL_DMA_IRQHandler+0x6b8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d018      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00e      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a19      	ldr	r2, [pc, #100]	@ (8008bdc <HAL_DMA_IRQHandler+0x6c4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a17      	ldr	r2, [pc, #92]	@ (8008be0 <HAL_DMA_IRQHandler+0x6c8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_DMA_IRQHandler+0x678>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a16      	ldr	r2, [pc, #88]	@ (8008be4 <HAL_DMA_IRQHandler+0x6cc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d12b      	bne.n	8008be8 <HAL_DMA_IRQHandler+0x6d0>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bf14      	ite	ne
 8008b9e:	2301      	movne	r3, #1
 8008ba0:	2300      	moveq	r3, #0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e02a      	b.n	8008bfc <HAL_DMA_IRQHandler+0x6e4>
 8008ba6:	bf00      	nop
 8008ba8:	40020010 	.word	0x40020010
 8008bac:	40020028 	.word	0x40020028
 8008bb0:	40020040 	.word	0x40020040
 8008bb4:	40020058 	.word	0x40020058
 8008bb8:	40020070 	.word	0x40020070
 8008bbc:	40020088 	.word	0x40020088
 8008bc0:	400200a0 	.word	0x400200a0
 8008bc4:	400200b8 	.word	0x400200b8
 8008bc8:	40020410 	.word	0x40020410
 8008bcc:	40020428 	.word	0x40020428
 8008bd0:	40020440 	.word	0x40020440
 8008bd4:	40020458 	.word	0x40020458
 8008bd8:	40020470 	.word	0x40020470
 8008bdc:	40020488 	.word	0x40020488
 8008be0:	400204a0 	.word	0x400204a0
 8008be4:	400204b8 	.word	0x400204b8
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf14      	ite	ne
 8008bf6:	2301      	movne	r3, #1
 8008bf8:	2300      	moveq	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8087 	beq.w	8008d10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c06:	f003 031f 	and.w	r3, r3, #31
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	409a      	lsls	r2, r3
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d139      	bne.n	8008c92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f022 0216 	bic.w	r2, r2, #22
 8008c2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695a      	ldr	r2, [r3, #20]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <HAL_DMA_IRQHandler+0x736>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d007      	beq.n	8008c5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0208 	bic.w	r2, r2, #8
 8008c5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	223f      	movs	r2, #63	@ 0x3f
 8008c68:	409a      	lsls	r2, r3
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 834a 	beq.w	800931c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	4798      	blx	r3
          }
          return;
 8008c90:	e344      	b.n	800931c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d018      	beq.n	8008cd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d108      	bne.n	8008cc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d02c      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	4798      	blx	r3
 8008cbe:	e027      	b.n	8008d10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d023      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	4798      	blx	r3
 8008cd0:	e01e      	b.n	8008d10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10f      	bne.n	8008d00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0210 	bic.w	r2, r2, #16
 8008cee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 8306 	beq.w	8009326 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8088 	beq.w	8008e38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a7a      	ldr	r2, [pc, #488]	@ (8008f20 <HAL_DMA_IRQHandler+0xa08>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d04a      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a79      	ldr	r2, [pc, #484]	@ (8008f24 <HAL_DMA_IRQHandler+0xa0c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d045      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a77      	ldr	r2, [pc, #476]	@ (8008f28 <HAL_DMA_IRQHandler+0xa10>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d040      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a76      	ldr	r2, [pc, #472]	@ (8008f2c <HAL_DMA_IRQHandler+0xa14>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d03b      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a74      	ldr	r2, [pc, #464]	@ (8008f30 <HAL_DMA_IRQHandler+0xa18>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d036      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a73      	ldr	r2, [pc, #460]	@ (8008f34 <HAL_DMA_IRQHandler+0xa1c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d031      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a71      	ldr	r2, [pc, #452]	@ (8008f38 <HAL_DMA_IRQHandler+0xa20>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d02c      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a70      	ldr	r2, [pc, #448]	@ (8008f3c <HAL_DMA_IRQHandler+0xa24>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d027      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a6e      	ldr	r2, [pc, #440]	@ (8008f40 <HAL_DMA_IRQHandler+0xa28>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d022      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8008f44 <HAL_DMA_IRQHandler+0xa2c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d01d      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a6b      	ldr	r2, [pc, #428]	@ (8008f48 <HAL_DMA_IRQHandler+0xa30>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d018      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a6a      	ldr	r2, [pc, #424]	@ (8008f4c <HAL_DMA_IRQHandler+0xa34>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d013      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a68      	ldr	r2, [pc, #416]	@ (8008f50 <HAL_DMA_IRQHandler+0xa38>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00e      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a67      	ldr	r2, [pc, #412]	@ (8008f54 <HAL_DMA_IRQHandler+0xa3c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d009      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a65      	ldr	r2, [pc, #404]	@ (8008f58 <HAL_DMA_IRQHandler+0xa40>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x8b8>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a64      	ldr	r2, [pc, #400]	@ (8008f5c <HAL_DMA_IRQHandler+0xa44>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d108      	bne.n	8008de2 <HAL_DMA_IRQHandler+0x8ca>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0201 	bic.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e007      	b.n	8008df2 <HAL_DMA_IRQHandler+0x8da>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3301      	adds	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d307      	bcc.n	8008e0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f2      	bne.n	8008df2 <HAL_DMA_IRQHandler+0x8da>
 8008e0c:	e000      	b.n	8008e10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008e0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2203      	movs	r2, #3
 8008e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008e26:	e003      	b.n	8008e30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 8272 	beq.w	8009326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	e26c      	b.n	8009326 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a43      	ldr	r2, [pc, #268]	@ (8008f60 <HAL_DMA_IRQHandler+0xa48>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d022      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a42      	ldr	r2, [pc, #264]	@ (8008f64 <HAL_DMA_IRQHandler+0xa4c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d01d      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a40      	ldr	r2, [pc, #256]	@ (8008f68 <HAL_DMA_IRQHandler+0xa50>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d018      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f6c <HAL_DMA_IRQHandler+0xa54>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a3d      	ldr	r2, [pc, #244]	@ (8008f70 <HAL_DMA_IRQHandler+0xa58>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00e      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a3c      	ldr	r2, [pc, #240]	@ (8008f74 <HAL_DMA_IRQHandler+0xa5c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8008f78 <HAL_DMA_IRQHandler+0xa60>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x984>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a39      	ldr	r2, [pc, #228]	@ (8008f7c <HAL_DMA_IRQHandler+0xa64>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d101      	bne.n	8008ea0 <HAL_DMA_IRQHandler+0x988>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <HAL_DMA_IRQHandler+0x98a>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 823f 	beq.w	8009326 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	2204      	movs	r2, #4
 8008eba:	409a      	lsls	r2, r3
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80cd 	beq.w	8009060 <HAL_DMA_IRQHandler+0xb48>
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80c7 	beq.w	8009060 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2204      	movs	r2, #4
 8008edc:	409a      	lsls	r2, r3
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d049      	beq.n	8008f80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8210 	beq.w	8009320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f08:	e20a      	b.n	8009320 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8206 	beq.w	8009320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f1c:	e200      	b.n	8009320 <HAL_DMA_IRQHandler+0xe08>
 8008f1e:	bf00      	nop
 8008f20:	40020010 	.word	0x40020010
 8008f24:	40020028 	.word	0x40020028
 8008f28:	40020040 	.word	0x40020040
 8008f2c:	40020058 	.word	0x40020058
 8008f30:	40020070 	.word	0x40020070
 8008f34:	40020088 	.word	0x40020088
 8008f38:	400200a0 	.word	0x400200a0
 8008f3c:	400200b8 	.word	0x400200b8
 8008f40:	40020410 	.word	0x40020410
 8008f44:	40020428 	.word	0x40020428
 8008f48:	40020440 	.word	0x40020440
 8008f4c:	40020458 	.word	0x40020458
 8008f50:	40020470 	.word	0x40020470
 8008f54:	40020488 	.word	0x40020488
 8008f58:	400204a0 	.word	0x400204a0
 8008f5c:	400204b8 	.word	0x400204b8
 8008f60:	58025408 	.word	0x58025408
 8008f64:	5802541c 	.word	0x5802541c
 8008f68:	58025430 	.word	0x58025430
 8008f6c:	58025444 	.word	0x58025444
 8008f70:	58025458 	.word	0x58025458
 8008f74:	5802546c 	.word	0x5802546c
 8008f78:	58025480 	.word	0x58025480
 8008f7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d160      	bne.n	800904c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a7f      	ldr	r2, [pc, #508]	@ (800918c <HAL_DMA_IRQHandler+0xc74>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d04a      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a7d      	ldr	r2, [pc, #500]	@ (8009190 <HAL_DMA_IRQHandler+0xc78>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d045      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8009194 <HAL_DMA_IRQHandler+0xc7c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d040      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a7a      	ldr	r2, [pc, #488]	@ (8009198 <HAL_DMA_IRQHandler+0xc80>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d03b      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a79      	ldr	r2, [pc, #484]	@ (800919c <HAL_DMA_IRQHandler+0xc84>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d036      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a77      	ldr	r2, [pc, #476]	@ (80091a0 <HAL_DMA_IRQHandler+0xc88>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d031      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a76      	ldr	r2, [pc, #472]	@ (80091a4 <HAL_DMA_IRQHandler+0xc8c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d02c      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a74      	ldr	r2, [pc, #464]	@ (80091a8 <HAL_DMA_IRQHandler+0xc90>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d027      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a73      	ldr	r2, [pc, #460]	@ (80091ac <HAL_DMA_IRQHandler+0xc94>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d022      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a71      	ldr	r2, [pc, #452]	@ (80091b0 <HAL_DMA_IRQHandler+0xc98>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d01d      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a70      	ldr	r2, [pc, #448]	@ (80091b4 <HAL_DMA_IRQHandler+0xc9c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d018      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80091b8 <HAL_DMA_IRQHandler+0xca0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a6d      	ldr	r2, [pc, #436]	@ (80091bc <HAL_DMA_IRQHandler+0xca4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a6b      	ldr	r2, [pc, #428]	@ (80091c0 <HAL_DMA_IRQHandler+0xca8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a6a      	ldr	r2, [pc, #424]	@ (80091c4 <HAL_DMA_IRQHandler+0xcac>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_DMA_IRQHandler+0xb12>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a68      	ldr	r2, [pc, #416]	@ (80091c8 <HAL_DMA_IRQHandler+0xcb0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d108      	bne.n	800903c <HAL_DMA_IRQHandler+0xb24>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0208 	bic.w	r2, r2, #8
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e007      	b.n	800904c <HAL_DMA_IRQHandler+0xb34>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0204 	bic.w	r2, r2, #4
 800904a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8165 	beq.w	8009320 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800905e:	e15f      	b.n	8009320 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	2202      	movs	r2, #2
 800906a:	409a      	lsls	r2, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80c5 	beq.w	8009200 <HAL_DMA_IRQHandler+0xce8>
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80bf 	beq.w	8009200 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	2202      	movs	r2, #2
 800908c:	409a      	lsls	r2, r3
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d018      	beq.n	80090ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 813a 	beq.w	8009324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090b8:	e134      	b.n	8009324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 8130 	beq.w	8009324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090cc:	e12a      	b.n	8009324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f040 8089 	bne.w	80091ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a2b      	ldr	r2, [pc, #172]	@ (800918c <HAL_DMA_IRQHandler+0xc74>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d04a      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a29      	ldr	r2, [pc, #164]	@ (8009190 <HAL_DMA_IRQHandler+0xc78>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d045      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a28      	ldr	r2, [pc, #160]	@ (8009194 <HAL_DMA_IRQHandler+0xc7c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d040      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a26      	ldr	r2, [pc, #152]	@ (8009198 <HAL_DMA_IRQHandler+0xc80>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d03b      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a25      	ldr	r2, [pc, #148]	@ (800919c <HAL_DMA_IRQHandler+0xc84>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d036      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a23      	ldr	r2, [pc, #140]	@ (80091a0 <HAL_DMA_IRQHandler+0xc88>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d031      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a22      	ldr	r2, [pc, #136]	@ (80091a4 <HAL_DMA_IRQHandler+0xc8c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d02c      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a20      	ldr	r2, [pc, #128]	@ (80091a8 <HAL_DMA_IRQHandler+0xc90>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d027      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1f      	ldr	r2, [pc, #124]	@ (80091ac <HAL_DMA_IRQHandler+0xc94>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d022      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1d      	ldr	r2, [pc, #116]	@ (80091b0 <HAL_DMA_IRQHandler+0xc98>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d01d      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1c      	ldr	r2, [pc, #112]	@ (80091b4 <HAL_DMA_IRQHandler+0xc9c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d018      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1a      	ldr	r2, [pc, #104]	@ (80091b8 <HAL_DMA_IRQHandler+0xca0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a19      	ldr	r2, [pc, #100]	@ (80091bc <HAL_DMA_IRQHandler+0xca4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00e      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a17      	ldr	r2, [pc, #92]	@ (80091c0 <HAL_DMA_IRQHandler+0xca8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d009      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a16      	ldr	r2, [pc, #88]	@ (80091c4 <HAL_DMA_IRQHandler+0xcac>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d004      	beq.n	800917a <HAL_DMA_IRQHandler+0xc62>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a14      	ldr	r2, [pc, #80]	@ (80091c8 <HAL_DMA_IRQHandler+0xcb0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d128      	bne.n	80091cc <HAL_DMA_IRQHandler+0xcb4>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0214 	bic.w	r2, r2, #20
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e027      	b.n	80091dc <HAL_DMA_IRQHandler+0xcc4>
 800918c:	40020010 	.word	0x40020010
 8009190:	40020028 	.word	0x40020028
 8009194:	40020040 	.word	0x40020040
 8009198:	40020058 	.word	0x40020058
 800919c:	40020070 	.word	0x40020070
 80091a0:	40020088 	.word	0x40020088
 80091a4:	400200a0 	.word	0x400200a0
 80091a8:	400200b8 	.word	0x400200b8
 80091ac:	40020410 	.word	0x40020410
 80091b0:	40020428 	.word	0x40020428
 80091b4:	40020440 	.word	0x40020440
 80091b8:	40020458 	.word	0x40020458
 80091bc:	40020470 	.word	0x40020470
 80091c0:	40020488 	.word	0x40020488
 80091c4:	400204a0 	.word	0x400204a0
 80091c8:	400204b8 	.word	0x400204b8
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f022 020a 	bic.w	r2, r2, #10
 80091da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8097 	beq.w	8009324 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091fe:	e091      	b.n	8009324 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	2208      	movs	r2, #8
 800920a:	409a      	lsls	r2, r3
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	4013      	ands	r3, r2
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 8088 	beq.w	8009326 <HAL_DMA_IRQHandler+0xe0e>
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8082 	beq.w	8009326 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a41      	ldr	r2, [pc, #260]	@ (800932c <HAL_DMA_IRQHandler+0xe14>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d04a      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a3f      	ldr	r2, [pc, #252]	@ (8009330 <HAL_DMA_IRQHandler+0xe18>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d045      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3e      	ldr	r2, [pc, #248]	@ (8009334 <HAL_DMA_IRQHandler+0xe1c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d040      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a3c      	ldr	r2, [pc, #240]	@ (8009338 <HAL_DMA_IRQHandler+0xe20>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d03b      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a3b      	ldr	r2, [pc, #236]	@ (800933c <HAL_DMA_IRQHandler+0xe24>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d036      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a39      	ldr	r2, [pc, #228]	@ (8009340 <HAL_DMA_IRQHandler+0xe28>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d031      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a38      	ldr	r2, [pc, #224]	@ (8009344 <HAL_DMA_IRQHandler+0xe2c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d02c      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a36      	ldr	r2, [pc, #216]	@ (8009348 <HAL_DMA_IRQHandler+0xe30>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d027      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a35      	ldr	r2, [pc, #212]	@ (800934c <HAL_DMA_IRQHandler+0xe34>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d022      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a33      	ldr	r2, [pc, #204]	@ (8009350 <HAL_DMA_IRQHandler+0xe38>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d01d      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a32      	ldr	r2, [pc, #200]	@ (8009354 <HAL_DMA_IRQHandler+0xe3c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d018      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a30      	ldr	r2, [pc, #192]	@ (8009358 <HAL_DMA_IRQHandler+0xe40>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d013      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a2f      	ldr	r2, [pc, #188]	@ (800935c <HAL_DMA_IRQHandler+0xe44>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00e      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009360 <HAL_DMA_IRQHandler+0xe48>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d009      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009364 <HAL_DMA_IRQHandler+0xe4c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d004      	beq.n	80092c2 <HAL_DMA_IRQHandler+0xdaa>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009368 <HAL_DMA_IRQHandler+0xe50>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d108      	bne.n	80092d4 <HAL_DMA_IRQHandler+0xdbc>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 021c 	bic.w	r2, r2, #28
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	e007      	b.n	80092e4 <HAL_DMA_IRQHandler+0xdcc>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 020e 	bic.w	r2, r2, #14
 80092e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	2201      	movs	r2, #1
 80092ee:	409a      	lsls	r2, r3
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
 800931a:	e004      	b.n	8009326 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800931c:	bf00      	nop
 800931e:	e002      	b.n	8009326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009320:	bf00      	nop
 8009322:	e000      	b.n	8009326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009324:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009326:	3728      	adds	r7, #40	@ 0x28
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	40020010 	.word	0x40020010
 8009330:	40020028 	.word	0x40020028
 8009334:	40020040 	.word	0x40020040
 8009338:	40020058 	.word	0x40020058
 800933c:	40020070 	.word	0x40020070
 8009340:	40020088 	.word	0x40020088
 8009344:	400200a0 	.word	0x400200a0
 8009348:	400200b8 	.word	0x400200b8
 800934c:	40020410 	.word	0x40020410
 8009350:	40020428 	.word	0x40020428
 8009354:	40020440 	.word	0x40020440
 8009358:	40020458 	.word	0x40020458
 800935c:	40020470 	.word	0x40020470
 8009360:	40020488 	.word	0x40020488
 8009364:	400204a0 	.word	0x400204a0
 8009368:	400204b8 	.word	0x400204b8

0800936c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009384:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a7f      	ldr	r2, [pc, #508]	@ (8009588 <DMA_SetConfig+0x21c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d072      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a7d      	ldr	r2, [pc, #500]	@ (800958c <DMA_SetConfig+0x220>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d06d      	beq.n	8009476 <DMA_SetConfig+0x10a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a7c      	ldr	r2, [pc, #496]	@ (8009590 <DMA_SetConfig+0x224>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d068      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a7a      	ldr	r2, [pc, #488]	@ (8009594 <DMA_SetConfig+0x228>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d063      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a79      	ldr	r2, [pc, #484]	@ (8009598 <DMA_SetConfig+0x22c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d05e      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a77      	ldr	r2, [pc, #476]	@ (800959c <DMA_SetConfig+0x230>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d059      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a76      	ldr	r2, [pc, #472]	@ (80095a0 <DMA_SetConfig+0x234>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d054      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a74      	ldr	r2, [pc, #464]	@ (80095a4 <DMA_SetConfig+0x238>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d04f      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a73      	ldr	r2, [pc, #460]	@ (80095a8 <DMA_SetConfig+0x23c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d04a      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a71      	ldr	r2, [pc, #452]	@ (80095ac <DMA_SetConfig+0x240>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d045      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a70      	ldr	r2, [pc, #448]	@ (80095b0 <DMA_SetConfig+0x244>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d040      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a6e      	ldr	r2, [pc, #440]	@ (80095b4 <DMA_SetConfig+0x248>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d03b      	beq.n	8009476 <DMA_SetConfig+0x10a>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a6d      	ldr	r2, [pc, #436]	@ (80095b8 <DMA_SetConfig+0x24c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d036      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a6b      	ldr	r2, [pc, #428]	@ (80095bc <DMA_SetConfig+0x250>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d031      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a6a      	ldr	r2, [pc, #424]	@ (80095c0 <DMA_SetConfig+0x254>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d02c      	beq.n	8009476 <DMA_SetConfig+0x10a>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a68      	ldr	r2, [pc, #416]	@ (80095c4 <DMA_SetConfig+0x258>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d027      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a67      	ldr	r2, [pc, #412]	@ (80095c8 <DMA_SetConfig+0x25c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d022      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a65      	ldr	r2, [pc, #404]	@ (80095cc <DMA_SetConfig+0x260>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d01d      	beq.n	8009476 <DMA_SetConfig+0x10a>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a64      	ldr	r2, [pc, #400]	@ (80095d0 <DMA_SetConfig+0x264>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d018      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a62      	ldr	r2, [pc, #392]	@ (80095d4 <DMA_SetConfig+0x268>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <DMA_SetConfig+0x10a>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a61      	ldr	r2, [pc, #388]	@ (80095d8 <DMA_SetConfig+0x26c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00e      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a5f      	ldr	r2, [pc, #380]	@ (80095dc <DMA_SetConfig+0x270>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d009      	beq.n	8009476 <DMA_SetConfig+0x10a>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a5e      	ldr	r2, [pc, #376]	@ (80095e0 <DMA_SetConfig+0x274>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <DMA_SetConfig+0x10a>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a5c      	ldr	r2, [pc, #368]	@ (80095e4 <DMA_SetConfig+0x278>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d101      	bne.n	800947a <DMA_SetConfig+0x10e>
 8009476:	2301      	movs	r3, #1
 8009478:	e000      	b.n	800947c <DMA_SetConfig+0x110>
 800947a:	2300      	movs	r3, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00d      	beq.n	800949c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009488:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d004      	beq.n	800949c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800949a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a39      	ldr	r2, [pc, #228]	@ (8009588 <DMA_SetConfig+0x21c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d04a      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a38      	ldr	r2, [pc, #224]	@ (800958c <DMA_SetConfig+0x220>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d045      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a36      	ldr	r2, [pc, #216]	@ (8009590 <DMA_SetConfig+0x224>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d040      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a35      	ldr	r2, [pc, #212]	@ (8009594 <DMA_SetConfig+0x228>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d03b      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a33      	ldr	r2, [pc, #204]	@ (8009598 <DMA_SetConfig+0x22c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d036      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a32      	ldr	r2, [pc, #200]	@ (800959c <DMA_SetConfig+0x230>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d031      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a30      	ldr	r2, [pc, #192]	@ (80095a0 <DMA_SetConfig+0x234>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d02c      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a2f      	ldr	r2, [pc, #188]	@ (80095a4 <DMA_SetConfig+0x238>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d027      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a2d      	ldr	r2, [pc, #180]	@ (80095a8 <DMA_SetConfig+0x23c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d022      	beq.n	800953c <DMA_SetConfig+0x1d0>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a2c      	ldr	r2, [pc, #176]	@ (80095ac <DMA_SetConfig+0x240>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d01d      	beq.n	800953c <DMA_SetConfig+0x1d0>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a2a      	ldr	r2, [pc, #168]	@ (80095b0 <DMA_SetConfig+0x244>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d018      	beq.n	800953c <DMA_SetConfig+0x1d0>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a29      	ldr	r2, [pc, #164]	@ (80095b4 <DMA_SetConfig+0x248>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d013      	beq.n	800953c <DMA_SetConfig+0x1d0>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a27      	ldr	r2, [pc, #156]	@ (80095b8 <DMA_SetConfig+0x24c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00e      	beq.n	800953c <DMA_SetConfig+0x1d0>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a26      	ldr	r2, [pc, #152]	@ (80095bc <DMA_SetConfig+0x250>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d009      	beq.n	800953c <DMA_SetConfig+0x1d0>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a24      	ldr	r2, [pc, #144]	@ (80095c0 <DMA_SetConfig+0x254>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d004      	beq.n	800953c <DMA_SetConfig+0x1d0>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a23      	ldr	r2, [pc, #140]	@ (80095c4 <DMA_SetConfig+0x258>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d101      	bne.n	8009540 <DMA_SetConfig+0x1d4>
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <DMA_SetConfig+0x1d6>
 8009540:	2300      	movs	r3, #0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d059      	beq.n	80095fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	223f      	movs	r2, #63	@ 0x3f
 8009550:	409a      	lsls	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009564:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b40      	cmp	r3, #64	@ 0x40
 8009574:	d138      	bne.n	80095e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009586:	e086      	b.n	8009696 <DMA_SetConfig+0x32a>
 8009588:	40020010 	.word	0x40020010
 800958c:	40020028 	.word	0x40020028
 8009590:	40020040 	.word	0x40020040
 8009594:	40020058 	.word	0x40020058
 8009598:	40020070 	.word	0x40020070
 800959c:	40020088 	.word	0x40020088
 80095a0:	400200a0 	.word	0x400200a0
 80095a4:	400200b8 	.word	0x400200b8
 80095a8:	40020410 	.word	0x40020410
 80095ac:	40020428 	.word	0x40020428
 80095b0:	40020440 	.word	0x40020440
 80095b4:	40020458 	.word	0x40020458
 80095b8:	40020470 	.word	0x40020470
 80095bc:	40020488 	.word	0x40020488
 80095c0:	400204a0 	.word	0x400204a0
 80095c4:	400204b8 	.word	0x400204b8
 80095c8:	58025408 	.word	0x58025408
 80095cc:	5802541c 	.word	0x5802541c
 80095d0:	58025430 	.word	0x58025430
 80095d4:	58025444 	.word	0x58025444
 80095d8:	58025458 	.word	0x58025458
 80095dc:	5802546c 	.word	0x5802546c
 80095e0:	58025480 	.word	0x58025480
 80095e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	60da      	str	r2, [r3, #12]
}
 80095f8:	e04d      	b.n	8009696 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a29      	ldr	r2, [pc, #164]	@ (80096a4 <DMA_SetConfig+0x338>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d022      	beq.n	800964a <DMA_SetConfig+0x2de>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a27      	ldr	r2, [pc, #156]	@ (80096a8 <DMA_SetConfig+0x33c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d01d      	beq.n	800964a <DMA_SetConfig+0x2de>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a26      	ldr	r2, [pc, #152]	@ (80096ac <DMA_SetConfig+0x340>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d018      	beq.n	800964a <DMA_SetConfig+0x2de>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a24      	ldr	r2, [pc, #144]	@ (80096b0 <DMA_SetConfig+0x344>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <DMA_SetConfig+0x2de>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a23      	ldr	r2, [pc, #140]	@ (80096b4 <DMA_SetConfig+0x348>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00e      	beq.n	800964a <DMA_SetConfig+0x2de>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a21      	ldr	r2, [pc, #132]	@ (80096b8 <DMA_SetConfig+0x34c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d009      	beq.n	800964a <DMA_SetConfig+0x2de>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a20      	ldr	r2, [pc, #128]	@ (80096bc <DMA_SetConfig+0x350>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d004      	beq.n	800964a <DMA_SetConfig+0x2de>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1e      	ldr	r2, [pc, #120]	@ (80096c0 <DMA_SetConfig+0x354>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d101      	bne.n	800964e <DMA_SetConfig+0x2e2>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <DMA_SetConfig+0x2e4>
 800964e:	2300      	movs	r3, #0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d020      	beq.n	8009696 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	2201      	movs	r2, #1
 800965e:	409a      	lsls	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	2b40      	cmp	r3, #64	@ 0x40
 8009672:	d108      	bne.n	8009686 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	60da      	str	r2, [r3, #12]
}
 8009684:	e007      	b.n	8009696 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	60da      	str	r2, [r3, #12]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	58025408 	.word	0x58025408
 80096a8:	5802541c 	.word	0x5802541c
 80096ac:	58025430 	.word	0x58025430
 80096b0:	58025444 	.word	0x58025444
 80096b4:	58025458 	.word	0x58025458
 80096b8:	5802546c 	.word	0x5802546c
 80096bc:	58025480 	.word	0x58025480
 80096c0:	58025494 	.word	0x58025494

080096c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a42      	ldr	r2, [pc, #264]	@ (80097dc <DMA_CalcBaseAndBitshift+0x118>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d04a      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a41      	ldr	r2, [pc, #260]	@ (80097e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d045      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a3f      	ldr	r2, [pc, #252]	@ (80097e4 <DMA_CalcBaseAndBitshift+0x120>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d040      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a3e      	ldr	r2, [pc, #248]	@ (80097e8 <DMA_CalcBaseAndBitshift+0x124>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d03b      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a3c      	ldr	r2, [pc, #240]	@ (80097ec <DMA_CalcBaseAndBitshift+0x128>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d036      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a3b      	ldr	r2, [pc, #236]	@ (80097f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d031      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a39      	ldr	r2, [pc, #228]	@ (80097f4 <DMA_CalcBaseAndBitshift+0x130>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d02c      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a38      	ldr	r2, [pc, #224]	@ (80097f8 <DMA_CalcBaseAndBitshift+0x134>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d027      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a36      	ldr	r2, [pc, #216]	@ (80097fc <DMA_CalcBaseAndBitshift+0x138>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d022      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a35      	ldr	r2, [pc, #212]	@ (8009800 <DMA_CalcBaseAndBitshift+0x13c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d01d      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a33      	ldr	r2, [pc, #204]	@ (8009804 <DMA_CalcBaseAndBitshift+0x140>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d018      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a32      	ldr	r2, [pc, #200]	@ (8009808 <DMA_CalcBaseAndBitshift+0x144>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d013      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a30      	ldr	r2, [pc, #192]	@ (800980c <DMA_CalcBaseAndBitshift+0x148>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00e      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a2f      	ldr	r2, [pc, #188]	@ (8009810 <DMA_CalcBaseAndBitshift+0x14c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a2d      	ldr	r2, [pc, #180]	@ (8009814 <DMA_CalcBaseAndBitshift+0x150>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <DMA_CalcBaseAndBitshift+0xa8>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a2c      	ldr	r2, [pc, #176]	@ (8009818 <DMA_CalcBaseAndBitshift+0x154>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d101      	bne.n	8009770 <DMA_CalcBaseAndBitshift+0xac>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <DMA_CalcBaseAndBitshift+0xae>
 8009770:	2300      	movs	r3, #0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d024      	beq.n	80097c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	3b10      	subs	r3, #16
 800977e:	4a27      	ldr	r2, [pc, #156]	@ (800981c <DMA_CalcBaseAndBitshift+0x158>)
 8009780:	fba2 2303 	umull	r2, r3, r2, r3
 8009784:	091b      	lsrs	r3, r3, #4
 8009786:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	4a24      	ldr	r2, [pc, #144]	@ (8009820 <DMA_CalcBaseAndBitshift+0x15c>)
 8009790:	5cd3      	ldrb	r3, [r2, r3]
 8009792:	461a      	mov	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b03      	cmp	r3, #3
 800979c:	d908      	bls.n	80097b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009824 <DMA_CalcBaseAndBitshift+0x160>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80097ae:	e00d      	b.n	80097cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009824 <DMA_CalcBaseAndBitshift+0x160>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80097be:	e005      	b.n	80097cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40020010 	.word	0x40020010
 80097e0:	40020028 	.word	0x40020028
 80097e4:	40020040 	.word	0x40020040
 80097e8:	40020058 	.word	0x40020058
 80097ec:	40020070 	.word	0x40020070
 80097f0:	40020088 	.word	0x40020088
 80097f4:	400200a0 	.word	0x400200a0
 80097f8:	400200b8 	.word	0x400200b8
 80097fc:	40020410 	.word	0x40020410
 8009800:	40020428 	.word	0x40020428
 8009804:	40020440 	.word	0x40020440
 8009808:	40020458 	.word	0x40020458
 800980c:	40020470 	.word	0x40020470
 8009810:	40020488 	.word	0x40020488
 8009814:	400204a0 	.word	0x400204a0
 8009818:	400204b8 	.word	0x400204b8
 800981c:	aaaaaaab 	.word	0xaaaaaaab
 8009820:	0802cf50 	.word	0x0802cf50
 8009824:	fffffc00 	.word	0xfffffc00

08009828 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d120      	bne.n	800987e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	2b03      	cmp	r3, #3
 8009842:	d858      	bhi.n	80098f6 <DMA_CheckFifoParam+0xce>
 8009844:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <DMA_CheckFifoParam+0x24>)
 8009846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984a:	bf00      	nop
 800984c:	0800985d 	.word	0x0800985d
 8009850:	0800986f 	.word	0x0800986f
 8009854:	0800985d 	.word	0x0800985d
 8009858:	080098f7 	.word	0x080098f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d048      	beq.n	80098fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800986c:	e045      	b.n	80098fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009872:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009876:	d142      	bne.n	80098fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800987c:	e03f      	b.n	80098fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009886:	d123      	bne.n	80098d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	2b03      	cmp	r3, #3
 800988e:	d838      	bhi.n	8009902 <DMA_CheckFifoParam+0xda>
 8009890:	a201      	add	r2, pc, #4	@ (adr r2, 8009898 <DMA_CheckFifoParam+0x70>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098a9 	.word	0x080098a9
 800989c:	080098af 	.word	0x080098af
 80098a0:	080098a9 	.word	0x080098a9
 80098a4:	080098c1 	.word	0x080098c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	73fb      	strb	r3, [r7, #15]
        break;
 80098ac:	e030      	b.n	8009910 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d025      	beq.n	8009906 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098be:	e022      	b.n	8009906 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098c8:	d11f      	bne.n	800990a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098ce:	e01c      	b.n	800990a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d902      	bls.n	80098de <DMA_CheckFifoParam+0xb6>
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d003      	beq.n	80098e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80098dc:	e018      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	73fb      	strb	r3, [r7, #15]
        break;
 80098e2:	e015      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00e      	beq.n	800990e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
    break;
 80098f4:	e00b      	b.n	800990e <DMA_CheckFifoParam+0xe6>
        break;
 80098f6:	bf00      	nop
 80098f8:	e00a      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        break;
 80098fa:	bf00      	nop
 80098fc:	e008      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        break;
 80098fe:	bf00      	nop
 8009900:	e006      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        break;
 8009902:	bf00      	nop
 8009904:	e004      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        break;
 8009906:	bf00      	nop
 8009908:	e002      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
        break;
 800990a:	bf00      	nop
 800990c:	e000      	b.n	8009910 <DMA_CheckFifoParam+0xe8>
    break;
 800990e:	bf00      	nop
    }
  }

  return status;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a38      	ldr	r2, [pc, #224]	@ (8009a14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d022      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a36      	ldr	r2, [pc, #216]	@ (8009a18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01d      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a35      	ldr	r2, [pc, #212]	@ (8009a1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d018      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a33      	ldr	r2, [pc, #204]	@ (8009a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a32      	ldr	r2, [pc, #200]	@ (8009a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00e      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a30      	ldr	r2, [pc, #192]	@ (8009a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d009      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d004      	beq.n	800997e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a2d      	ldr	r2, [pc, #180]	@ (8009a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d101      	bne.n	8009982 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009982:	2300      	movs	r3, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	3b08      	subs	r3, #8
 8009990:	4a28      	ldr	r2, [pc, #160]	@ (8009a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	091b      	lsrs	r3, r3, #4
 8009998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4b26      	ldr	r3, [pc, #152]	@ (8009a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a24      	ldr	r2, [pc, #144]	@ (8009a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80099ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f003 031f 	and.w	r3, r3, #31
 80099b4:	2201      	movs	r2, #1
 80099b6:	409a      	lsls	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80099bc:	e024      	b.n	8009a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	3b10      	subs	r3, #16
 80099c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	091b      	lsrs	r3, r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d806      	bhi.n	80099e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4a1b      	ldr	r2, [pc, #108]	@ (8009a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d902      	bls.n	80099e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3308      	adds	r3, #8
 80099e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4b18      	ldr	r3, [pc, #96]	@ (8009a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	461a      	mov	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a16      	ldr	r2, [pc, #88]	@ (8009a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80099f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	2201      	movs	r2, #1
 8009a02:	409a      	lsls	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	58025408 	.word	0x58025408
 8009a18:	5802541c 	.word	0x5802541c
 8009a1c:	58025430 	.word	0x58025430
 8009a20:	58025444 	.word	0x58025444
 8009a24:	58025458 	.word	0x58025458
 8009a28:	5802546c 	.word	0x5802546c
 8009a2c:	58025480 	.word	0x58025480
 8009a30:	58025494 	.word	0x58025494
 8009a34:	cccccccd 	.word	0xcccccccd
 8009a38:	16009600 	.word	0x16009600
 8009a3c:	58025880 	.word	0x58025880
 8009a40:	aaaaaaab 	.word	0xaaaaaaab
 8009a44:	400204b8 	.word	0x400204b8
 8009a48:	4002040f 	.word	0x4002040f
 8009a4c:	10008200 	.word	0x10008200
 8009a50:	40020880 	.word	0x40020880

08009a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d04a      	beq.n	8009b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d847      	bhi.n	8009b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a25      	ldr	r2, [pc, #148]	@ (8009b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d022      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a24      	ldr	r2, [pc, #144]	@ (8009b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d01d      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a22      	ldr	r2, [pc, #136]	@ (8009b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d018      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a21      	ldr	r2, [pc, #132]	@ (8009b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00e      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d009      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8009b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d004      	beq.n	8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a1b      	ldr	r2, [pc, #108]	@ (8009b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d101      	bne.n	8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	4b17      	ldr	r3, [pc, #92]	@ (8009b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a15      	ldr	r2, [pc, #84]	@ (8009b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009adc:	671a      	str	r2, [r3, #112]	@ 0x70
 8009ade:	e009      	b.n	8009af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	461a      	mov	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a11      	ldr	r2, [pc, #68]	@ (8009b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009af2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2201      	movs	r2, #1
 8009afa:	409a      	lsls	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009b00:	bf00      	nop
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	58025408 	.word	0x58025408
 8009b10:	5802541c 	.word	0x5802541c
 8009b14:	58025430 	.word	0x58025430
 8009b18:	58025444 	.word	0x58025444
 8009b1c:	58025458 	.word	0x58025458
 8009b20:	5802546c 	.word	0x5802546c
 8009b24:	58025480 	.word	0x58025480
 8009b28:	58025494 	.word	0x58025494
 8009b2c:	1600963f 	.word	0x1600963f
 8009b30:	58025940 	.word	0x58025940
 8009b34:	1000823f 	.word	0x1000823f
 8009b38:	40020940 	.word	0x40020940

08009b3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e0e3      	b.n	8009d16 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2223      	movs	r2, #35	@ 0x23
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f008 fb05 	bl	8012170 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b66:	4b6e      	ldr	r3, [pc, #440]	@ (8009d20 <HAL_ETH_Init+0x1e4>)
 8009b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b6c:	4a6c      	ldr	r2, [pc, #432]	@ (8009d20 <HAL_ETH_Init+0x1e4>)
 8009b6e:	f043 0302 	orr.w	r3, r3, #2
 8009b72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009b76:	4b6a      	ldr	r3, [pc, #424]	@ (8009d20 <HAL_ETH_Init+0x1e4>)
 8009b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7a1b      	ldrb	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d103      	bne.n	8009b94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f7fd f82d 	bl	8006bec <HAL_SYSCFG_ETHInterfaceSelect>
 8009b92:	e003      	b.n	8009b9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009b94:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009b98:	f7fd f828 	bl	8006bec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009b9c:	4b61      	ldr	r3, [pc, #388]	@ (8009d24 <HAL_ETH_Init+0x1e8>)
 8009b9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	f043 0301 	orr.w	r3, r3, #1
 8009bb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009bb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bb8:	f7fc ffdc 	bl	8006b74 <HAL_GetTick>
 8009bbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009bbe:	e011      	b.n	8009be4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009bc0:	f7fc ffd8 	bl	8006b74 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009bce:	d909      	bls.n	8009be4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	22e0      	movs	r2, #224	@ 0xe0
 8009bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e098      	b.n	8009d16 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e4      	bne.n	8009bc0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 ff1c 	bl	800aa34 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009bfc:	f002 feae 	bl	800c95c <HAL_RCC_GetHCLKFreq>
 8009c00:	4603      	mov	r3, r0
 8009c02:	4a49      	ldr	r2, [pc, #292]	@ (8009d28 <HAL_ETH_Init+0x1ec>)
 8009c04:	fba2 2303 	umull	r2, r3, r2, r3
 8009c08:	0c9a      	lsrs	r2, r3, #18
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3a01      	subs	r2, #1
 8009c10:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 f919 	bl	800ae4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009c26:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6812      	ldr	r2, [r2, #0]
 8009c2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c36:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	22e0      	movs	r2, #224	@ 0xe0
 8009c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e05d      	b.n	8009d16 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c62:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009c66:	4b31      	ldr	r3, [pc, #196]	@ (8009d2c <HAL_ETH_Init+0x1f0>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	6952      	ldr	r2, [r2, #20]
 8009c6e:	0051      	lsls	r1, r2, #1
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	430b      	orrs	r3, r1
 8009c76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c7a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 f981 	bl	800af86 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f9c7 	bl	800b018 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	3305      	adds	r3, #5
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	021a      	lsls	r2, r3, #8
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	3303      	adds	r3, #3
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	061a      	lsls	r2, r3, #24
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	3302      	adds	r3, #2
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	041b      	lsls	r3, r3, #16
 8009cbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009cc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009cd6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009cd8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	4b11      	ldr	r3, [pc, #68]	@ (8009d30 <HAL_ETH_Init+0x1f4>)
 8009cea:	430b      	orrs	r3, r1
 8009cec:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d34 <HAL_ETH_Init+0x1f8>)
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2210      	movs	r2, #16
 8009d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	58024400 	.word	0x58024400
 8009d24:	58000400 	.word	0x58000400
 8009d28:	431bde83 	.word	0x431bde83
 8009d2c:	ffff8001 	.word	0xffff8001
 8009d30:	0c020060 	.word	0x0c020060
 8009d34:	0c20c000 	.word	0x0c20c000

08009d38 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d165      	bne.n	8009e16 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2223      	movs	r2, #35	@ 0x23
 8009d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f9e4 	bl	800a12c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d6c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	f043 0301 	orr.w	r3, r3, #1
 8009d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d7c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	f043 0301 	orr.w	r3, r3, #1
 8009d94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d98:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009da4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8009db0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009db4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f042 0201 	orr.w	r2, r2, #1
 8009dc8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0202 	orr.w	r2, r2, #2
 8009dda:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009df4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8009e00:	430b      	orrs	r3, r1
 8009e02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e06:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2223      	movs	r2, #35	@ 0x23
 8009e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e000      	b.n	8009e18 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
  }
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e2e:	2b23      	cmp	r3, #35	@ 0x23
 8009e30:	d165      	bne.n	8009efe <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2223      	movs	r2, #35	@ 0x23
 8009e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e42:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b30      	ldr	r3, [pc, #192]	@ (8009f0c <HAL_ETH_Stop_IT+0xec>)
 8009e4c:	400b      	ands	r3, r1
 8009e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e52:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	f023 0301 	bic.w	r3, r3, #1
 8009e6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e6e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	f023 0301 	bic.w	r3, r3, #1
 8009e86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e8a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0202 	bic.w	r2, r2, #2
 8009ec0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	e00e      	b.n	8009ee6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	3212      	adds	r2, #18
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d9ed      	bls.n	8009ec8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e000      	b.n	8009f00 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
  }
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	ffff2f3e 	.word	0xffff2f3e

08009f10 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d109      	bne.n	8009f34 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f26:	f043 0201 	orr.w	r2, r3, #1
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e03a      	b.n	8009faa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f3a:	2b23      	cmp	r3, #35	@ 0x23
 8009f3c:	d134      	bne.n	8009fa8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8009f46:	2201      	movs	r2, #1
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 f8c2 	bl	800b0d4 <ETH_Prepare_Tx_Descriptors>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d009      	beq.n	8009f6a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f5c:	f043 0202 	orr.w	r2, r3, #2
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e01f      	b.n	8009faa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8009f6a:	f3bf 8f4f 	dsb	sy
}
 8009f6e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d904      	bls.n	8009f8c <HAL_ETH_Transmit_IT+0x7c>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f86:	1f1a      	subs	r2, r3, #4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3106      	adds	r1, #6
 8009f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009fa0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e000      	b.n	8009faa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
  }
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b088      	sub	sp, #32
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd0:	f043 0201 	orr.w	r2, r3, #1
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e0a2      	b.n	800a124 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fe4:	2b23      	cmp	r3, #35	@ 0x23
 8009fe6:	d001      	beq.n	8009fec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e09b      	b.n	800a124 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ff0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	3212      	adds	r2, #18
 8009ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a002:	f1c3 0304 	rsb	r3, r3, #4
 800a006:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a008:	e064      	b.n	800a0d4 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <HAL_ETH_ReadData+0x88>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d03a      	beq.n	800a0b0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800a08a:	461a      	mov	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f008 fa50 	bl	8012534 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	61fb      	str	r3, [r7, #28]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d902      	bls.n	800a0c2 <HAL_ETH_ReadData+0x110>
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	3212      	adds	r2, #18
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	db06      	blt.n	800a0ea <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d202      	bcs.n	800a0ea <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 800a0e4:	7cfb      	ldrb	r3, [r7, #19]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d08f      	beq.n	800a00a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f814 	bl	800a12c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	69fa      	ldr	r2, [r7, #28]
 800a108:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800a10a:	7cfb      	ldrb	r3, [r7, #19]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d108      	bne.n	800a122 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	e000      	b.n	800a124 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800a134:	2300      	movs	r3, #0
 800a136:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800a138:	2301      	movs	r3, #1
 800a13a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a140:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	3212      	adds	r2, #18
 800a148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a152:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800a154:	e038      	b.n	800a1c8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d112      	bne.n	800a184 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800a15e:	f107 0308 	add.w	r3, r7, #8
 800a162:	4618      	mov	r0, r3
 800a164:	f008 f9b6 	bl	80124d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	74fb      	strb	r3, [r7, #19]
 800a172:	e007      	b.n	800a184 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	461a      	mov	r2, r3
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	461a      	mov	r2, r3
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800a184:	7cfb      	ldrb	r3, [r7, #19]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01e      	beq.n	800a1c8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e003      	b.n	800a1a4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800a1a2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d902      	bls.n	800a1b6 <ETH_UpdateDescriptor+0x8a>
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	3b04      	subs	r3, #4
 800a1b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	3212      	adds	r2, #18
 800a1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c0:	617b      	str	r3, [r7, #20]
      desccount--;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <ETH_UpdateDescriptor+0xa8>
 800a1ce:	7cfb      	ldrb	r3, [r7, #19]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1c0      	bne.n	800a156 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d01b      	beq.n	800a216 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800a1e8:	f3bf 8f5f 	dmb	sy
}
 800a1ec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6919      	ldr	r1, [r3, #16]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	18ca      	adds	r2, r1, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a206:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800a216:	bf00      	nop
 800a218:	3720      	adds	r7, #32
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3318      	adds	r3, #24
 800a22a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a230:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a236:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800a238:	2301      	movs	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a23c:	e047      	b.n	800a2ce <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800a23e:	2301      	movs	r3, #1
 800a240:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	3b01      	subs	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3304      	adds	r3, #4
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10a      	bne.n	800a26e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	3301      	adds	r3, #1
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b03      	cmp	r3, #3
 800a262:	d902      	bls.n	800a26a <HAL_ETH_ReleaseTxPacket+0x4c>
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3b04      	subs	r3, #4
 800a268:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d02c      	beq.n	800a2ce <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68d9      	ldr	r1, [r3, #12]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	440b      	add	r3, r1
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	db1f      	blt.n	800a2ca <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	3304      	adds	r3, #4
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	f008 f9b4 	bl	8012604 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d902      	bls.n	800a2bc <HAL_ETH_ReleaseTxPacket+0x9e>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a2c8:	e001      	b.n	800a2ce <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <HAL_ETH_ReleaseTxPacket+0xbc>
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1b1      	bne.n	800a23e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2f4:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a302:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a30c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a310:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 800a312:	4b6d      	ldr	r3, [pc, #436]	@ (800a4c8 <HAL_ETH_IRQHandler+0x1e4>)
 800a314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a316:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d010      	beq.n	800a344 <HAL_ETH_IRQHandler+0x60>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a334:	461a      	mov	r2, r3
 800a336:	f248 0340 	movw	r3, #32832	@ 0x8040
 800a33a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f007 fc44 	bl	8011bcc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d010      	beq.n	800a370 <HAL_ETH_IRQHandler+0x8c>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a360:	461a      	mov	r2, r3
 800a362:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a366:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f007 fc3e 	bl	8011bec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d047      	beq.n	800a40a <HAL_ETH_IRQHandler+0x126>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d042      	beq.n	800a40a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a38a:	f043 0208 	orr.w	r2, r3, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01e      	beq.n	800a3dc <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800a3aa:	f241 1302 	movw	r3, #4354	@ 0x1102
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3be:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6812      	ldr	r2, [r2, #0]
 800a3c6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a3ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3ce:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	22e0      	movs	r2, #224	@ 0xe0
 800a3d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a3da:	e013      	b.n	800a404 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800a3e8:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800a400:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f007 fc01 	bl	8011c0c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d019      	beq.n	800a452 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a424:	f043 0210 	orr.w	r2, r3, #16
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	22e0      	movs	r2, #224	@ 0xe0
 800a440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f007 fbe1 	bl	8011c0c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00f      	beq.n	800a47c <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a464:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f82c 	bl	800a4cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f003 0320 	and.w	r3, r3, #32
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00f      	beq.n	800a4a6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800a48e:	f003 020f 	and.w	r2, r3, #15
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f821 	bl	800a4e0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d006      	beq.n	800a4be <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800a4b0:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <HAL_ETH_IRQHandler+0x1e4>)
 800a4b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800a4b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f81b 	bl	800a4f4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800a4be:	bf00      	nop
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	58000080 	.word	0x58000080

0800a4cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e03e      	b.n	800a5a8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a532:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	055b      	lsls	r3, r3, #21
 800a53e:	4313      	orrs	r3, r2
 800a540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	041b      	lsls	r3, r3, #16
 800a54c:	4313      	orrs	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f043 030c 	orr.w	r3, r3, #12
 800a556:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f043 0301 	orr.w	r3, r3, #1
 800a55e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a56a:	f7fc fb03 	bl	8006b74 <HAL_GetTick>
 800a56e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a570:	e009      	b.n	800a586 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a572:	f7fc faff 	bl	8006b74 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a580:	d901      	bls.n	800a586 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e010      	b.n	800a5a8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1ed      	bne.n	800a572 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e03c      	b.n	800a64c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a5da:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	055b      	lsls	r3, r3, #21
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	041b      	lsls	r3, r3, #16
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f023 030c 	bic.w	r3, r3, #12
 800a5fe:	f043 0304 	orr.w	r3, r3, #4
 800a602:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f043 0301 	orr.w	r3, r3, #1
 800a60a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <HAL_ETH_WritePHYRegister+0xa4>)
 800a612:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800a616:	4a0f      	ldr	r2, [pc, #60]	@ (800a654 <HAL_ETH_WritePHYRegister+0xa4>)
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800a61e:	f7fc faa9 	bl	8006b74 <HAL_GetTick>
 800a622:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a624:	e009      	b.n	800a63a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800a626:	f7fc faa5 	bl	8006b74 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a634:	d901      	bls.n	800a63a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e008      	b.n	800a64c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1ed      	bne.n	800a626 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	40028000 	.word	0x40028000

0800a658 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e1c3      	b.n	800a9f4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 020c 	and.w	r2, r3, #12
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	2b00      	cmp	r3, #0
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bf0c      	ite	eq
 800a6b2:	2301      	moveq	r3, #1
 800a6b4:	2300      	movne	r3, #0
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2301      	movne	r3, #1
 800a6d0:	2300      	moveq	r3, #0
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2301      	moveq	r3, #1
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800a6fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bf14      	ite	ne
 800a702:	2301      	movne	r3, #1
 800a704:	2300      	moveq	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bf14      	ite	ne
 800a71c:	2301      	movne	r3, #1
 800a71e:	2300      	moveq	r3, #0
 800a720:	b2db      	uxtb	r3, r3
 800a722:	461a      	mov	r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bf14      	ite	ne
 800a752:	2301      	movne	r3, #1
 800a754:	2300      	moveq	r3, #0
 800a756:	b2db      	uxtb	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bf0c      	ite	eq
 800a76c:	2301      	moveq	r3, #1
 800a76e:	2300      	movne	r3, #0
 800a770:	b2db      	uxtb	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a782:	2b00      	cmp	r3, #0
 800a784:	bf0c      	ite	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	2300      	movne	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bf14      	ite	ne
 800a7a0:	2301      	movne	r3, #1
 800a7a2:	2300      	moveq	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bf14      	ite	ne
 800a7ba:	2301      	movne	r3, #1
 800a7bc:	2300      	moveq	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800a7e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bf14      	ite	ne
 800a7ee:	2301      	movne	r3, #1
 800a7f0:	2300      	moveq	r3, #0
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a812:	2b00      	cmp	r3, #0
 800a814:	bf14      	ite	ne
 800a816:	2301      	movne	r3, #1
 800a818:	2300      	moveq	r3, #0
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bf0c      	ite	eq
 800a84c:	2301      	moveq	r3, #1
 800a84e:	2300      	movne	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	461a      	mov	r2, r3
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a864:	2b00      	cmp	r3, #0
 800a866:	bf14      	ite	ne
 800a868:	2301      	movne	r3, #1
 800a86a:	2300      	moveq	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	461a      	mov	r2, r3
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800a87c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a880:	2b00      	cmp	r3, #0
 800a882:	bf14      	ite	ne
 800a884:	2301      	movne	r3, #1
 800a886:	2300      	moveq	r3, #0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bf14      	ite	ne
 800a8a0:	2301      	movne	r3, #1
 800a8a2:	2300      	moveq	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	0e5b      	lsrs	r3, r3, #25
 800a8b6:	f003 021f 	and.w	r2, r3, #31
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bf14      	ite	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	2300      	moveq	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	bf14      	ite	ne
 800a8f6:	2301      	movne	r3, #1
 800a8f8:	2300      	moveq	r3, #0
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bf0c      	ite	eq
 800a912:	2301      	moveq	r3, #1
 800a914:	2300      	movne	r3, #0
 800a916:	b2db      	uxtb	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a926:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a934:	0c1b      	lsrs	r3, r3, #16
 800a936:	b29a      	uxth	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bf14      	ite	ne
 800a94c:	2301      	movne	r3, #1
 800a94e:	2300      	moveq	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a962:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800a966:	2b00      	cmp	r3, #0
 800a968:	bf14      	ite	ne
 800a96a:	2301      	movne	r3, #1
 800a96c:	2300      	moveq	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a980:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a990:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a9be:	f003 0310 	and.w	r3, r3, #16
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	bf14      	ite	ne
 800a9c6:	2301      	movne	r3, #1
 800a9c8:	2300      	moveq	r3, #0
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800a9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bf0c      	ite	eq
 800a9e4:	2301      	moveq	r3, #1
 800a9e6:	2300      	movne	r3, #0
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e00b      	b.n	800aa2c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa1a:	2b10      	cmp	r3, #16
 800aa1c:	d105      	bne.n	800aa2a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f871 	bl	800ab08 <ETH_SetMACConfig>

    return HAL_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e000      	b.n	800aa2c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
  }
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800aa4e:	f001 ff85 	bl	800c95c <HAL_RCC_GetHCLKFreq>
 800aa52:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	4a1a      	ldr	r2, [pc, #104]	@ (800aac0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d804      	bhi.n	800aa66 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e022      	b.n	800aaac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4a16      	ldr	r2, [pc, #88]	@ (800aac4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d204      	bcs.n	800aa78 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e019      	b.n	800aaac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4a13      	ldr	r2, [pc, #76]	@ (800aac8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d915      	bls.n	800aaac <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4a12      	ldr	r2, [pc, #72]	@ (800aacc <HAL_ETH_SetMDIOClockRange+0x98>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d804      	bhi.n	800aa92 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	e00c      	b.n	800aaac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	4a0e      	ldr	r2, [pc, #56]	@ (800aad0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d804      	bhi.n	800aaa4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e003      	b.n	800aaac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800aaaa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	02160ebf 	.word	0x02160ebf
 800aac4:	03938700 	.word	0x03938700
 800aac8:	05f5e0ff 	.word	0x05f5e0ff
 800aacc:	08f0d17f 	.word	0x08f0d17f
 800aad0:	0ee6b27f 	.word	0x0ee6b27f

0800aad4 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800ab1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	791b      	ldrb	r3, [r3, #4]
 800ab20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800ab22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	7b1b      	ldrb	r3, [r3, #12]
 800ab28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800ab2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	7b5b      	ldrb	r3, [r3, #13]
 800ab30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800ab32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	7b9b      	ldrb	r3, [r3, #14]
 800ab38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800ab3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	7bdb      	ldrb	r3, [r3, #15]
 800ab40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800ab42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	7c12      	ldrb	r2, [r2, #16]
 800ab48:	2a00      	cmp	r2, #0
 800ab4a:	d102      	bne.n	800ab52 <ETH_SetMACConfig+0x4a>
 800ab4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800ab50:	e000      	b.n	800ab54 <ETH_SetMACConfig+0x4c>
 800ab52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800ab54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	7c52      	ldrb	r2, [r2, #17]
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d102      	bne.n	800ab64 <ETH_SetMACConfig+0x5c>
 800ab5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ab62:	e000      	b.n	800ab66 <ETH_SetMACConfig+0x5e>
 800ab64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800ab66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	7c9b      	ldrb	r3, [r3, #18]
 800ab6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800ab6e:	431a      	orrs	r2, r3
               macconf->Speed |
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800ab74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800ab7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	7f1b      	ldrb	r3, [r3, #28]
 800ab80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800ab82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	7f5b      	ldrb	r3, [r3, #29]
 800ab88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800ab8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	7f92      	ldrb	r2, [r2, #30]
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	d102      	bne.n	800ab9a <ETH_SetMACConfig+0x92>
 800ab94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab98:	e000      	b.n	800ab9c <ETH_SetMACConfig+0x94>
 800ab9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800ab9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	7fdb      	ldrb	r3, [r3, #31]
 800aba2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800aba4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800abac:	2a00      	cmp	r2, #0
 800abae:	d102      	bne.n	800abb6 <ETH_SetMACConfig+0xae>
 800abb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800abb4:	e000      	b.n	800abb8 <ETH_SetMACConfig+0xb0>
 800abb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800abb8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800abbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800abc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	4b56      	ldr	r3, [pc, #344]	@ (800ad34 <ETH_SetMACConfig+0x22c>)
 800abda:	4013      	ands	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6812      	ldr	r2, [r2, #0]
 800abe0:	68f9      	ldr	r1, [r7, #12]
 800abe2:	430b      	orrs	r3, r1
 800abe4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800abf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800abf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800abfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ac06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800ac08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d102      	bne.n	800ac1a <ETH_SetMACConfig+0x112>
 800ac14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ac18:	e000      	b.n	800ac1c <ETH_SetMACConfig+0x114>
 800ac1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800ac1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	4b42      	ldr	r3, [pc, #264]	@ (800ad38 <ETH_SetMACConfig+0x230>)
 800ac2e:	4013      	ands	r3, r2
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	68f9      	ldr	r1, [r7, #12]
 800ac36:	430b      	orrs	r3, r1
 800ac38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	4b3a      	ldr	r3, [pc, #232]	@ (800ad3c <ETH_SetMACConfig+0x234>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	68f9      	ldr	r1, [r7, #12]
 800ac5a:	430b      	orrs	r3, r1
 800ac5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800ac64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800ac6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	d101      	bne.n	800ac7a <ETH_SetMACConfig+0x172>
 800ac76:	2280      	movs	r2, #128	@ 0x80
 800ac78:	e000      	b.n	800ac7c <ETH_SetMACConfig+0x174>
 800ac7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800ac7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800ac84:	4313      	orrs	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ac8e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800ac92:	4013      	ands	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6812      	ldr	r2, [r2, #0]
 800ac98:	68f9      	ldr	r1, [r7, #12]
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800aca4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800acac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acba:	f023 0103 	bic.w	r1, r3, #3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800acd2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800acee:	2a00      	cmp	r2, #0
 800acf0:	d101      	bne.n	800acf6 <ETH_SetMACConfig+0x1ee>
 800acf2:	2240      	movs	r2, #64	@ 0x40
 800acf4:	e000      	b.n	800acf8 <ETH_SetMACConfig+0x1f0>
 800acf6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800acf8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800ad00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800ad02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800ad0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800ad18:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800ad28:	bf00      	nop
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	00048083 	.word	0x00048083
 800ad38:	c0f88000 	.word	0xc0f88000
 800ad3c:	fffffef0 	.word	0xfffffef0

0800ad40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	4b38      	ldr	r3, [pc, #224]	@ (800ae38 <ETH_SetDMAConfig+0xf8>)
 800ad56:	4013      	ands	r3, r2
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	6811      	ldr	r1, [r2, #0]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	6812      	ldr	r2, [r2, #0]
 800ad60:	430b      	orrs	r3, r1
 800ad62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ad66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ad72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	7b1b      	ldrb	r3, [r3, #12]
 800ad78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	4b2c      	ldr	r3, [pc, #176]	@ (800ae3c <ETH_SetDMAConfig+0xfc>)
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	6812      	ldr	r2, [r2, #0]
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	430b      	orrs	r3, r1
 800ad94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ad98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	7b5b      	ldrb	r3, [r3, #13]
 800ad9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800ada4:	4313      	orrs	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800adb4:	4b22      	ldr	r3, [pc, #136]	@ (800ae40 <ETH_SetDMAConfig+0x100>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	68f9      	ldr	r1, [r7, #12]
 800adbe:	430b      	orrs	r3, r1
 800adc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800adc4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	7d1b      	ldrb	r3, [r3, #20]
 800add0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800add2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	7f5b      	ldrb	r3, [r3, #29]
 800add8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ade6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800adea:	4b16      	ldr	r3, [pc, #88]	@ (800ae44 <ETH_SetDMAConfig+0x104>)
 800adec:	4013      	ands	r3, r2
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	430b      	orrs	r3, r1
 800adf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800adfa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	7f1b      	ldrb	r3, [r3, #28]
 800ae02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae14:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800ae18:	4b0b      	ldr	r3, [pc, #44]	@ (800ae48 <ETH_SetDMAConfig+0x108>)
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6812      	ldr	r2, [r2, #0]
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	430b      	orrs	r3, r1
 800ae24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ae28:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800ae2c:	bf00      	nop
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	ffff87fd 	.word	0xffff87fd
 800ae3c:	ffff2ffe 	.word	0xffff2ffe
 800ae40:	fffec000 	.word	0xfffec000
 800ae44:	ffc0efef 	.word	0xffc0efef
 800ae48:	7fc0ffff 	.word	0x7fc0ffff

0800ae4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b0a4      	sub	sp, #144	@ 0x90
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800ae88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae8c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800aea4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800aea8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800aec6:	2300      	movs	r3, #0
 800aec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800aece:	2300      	movs	r3, #0
 800aed0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800aed8:	2300      	movs	r3, #0
 800aeda:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800aede:	2301      	movs	r3, #1
 800aee0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800aee4:	2320      	movs	r3, #32
 800aee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800aef6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800aefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800aefc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800af00:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800af02:	2300      	movs	r3, #0
 800af04:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800af08:	2302      	movs	r3, #2
 800af0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800af14:	2300      	movs	r3, #0
 800af16:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800af26:	2300      	movs	r3, #0
 800af28:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800af2a:	2301      	movs	r3, #1
 800af2c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800af30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff fde6 	bl	800ab08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800af3c:	2301      	movs	r3, #1
 800af3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800af40:	2301      	movs	r3, #1
 800af42:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800af44:	2300      	movs	r3, #0
 800af46:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800af4e:	2300      	movs	r3, #0
 800af50:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800af52:	2300      	movs	r3, #0
 800af54:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800af56:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800af5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800af5c:	2300      	movs	r3, #0
 800af5e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800af60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800af64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800af66:	2300      	movs	r3, #0
 800af68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800af6c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800af70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff fee1 	bl	800ad40 <ETH_SetDMAConfig>
}
 800af7e:	bf00      	nop
 800af80:	3790      	adds	r7, #144	@ 0x90
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800af8e:	2300      	movs	r3, #0
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	e01d      	b.n	800afd0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68d9      	ldr	r1, [r3, #12]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	4613      	mov	r3, r2
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	440b      	add	r3, r1
 800afa4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2200      	movs	r2, #0
 800afb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2200      	movs	r2, #0
 800afb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2200      	movs	r2, #0
 800afbc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800afbe:	68b9      	ldr	r1, [r7, #8]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	3206      	adds	r2, #6
 800afc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d9de      	bls.n	800af94 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe4:	461a      	mov	r2, r3
 800afe6:	2303      	movs	r3, #3
 800afe8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68da      	ldr	r2, [r3, #12]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aff8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68da      	ldr	r2, [r3, #12]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b008:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800b00c:	bf00      	nop
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b020:	2300      	movs	r3, #0
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e023      	b.n	800b06e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6919      	ldr	r1, [r3, #16]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4613      	mov	r3, r2
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	4413      	add	r3, r2
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	440b      	add	r3, r1
 800b036:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2200      	movs	r2, #0
 800b042:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2200      	movs	r2, #0
 800b054:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2200      	movs	r2, #0
 800b05a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	3212      	adds	r2, #18
 800b064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3301      	adds	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b03      	cmp	r3, #3
 800b072:	d9d8      	bls.n	800b026 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b09a:	461a      	mov	r2, r3
 800b09c:	2303      	movs	r3, #3
 800b09e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691a      	ldr	r2, [r3, #16]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b091      	sub	sp, #68	@ 0x44
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3318      	adds	r3, #24
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b116:	d007      	beq.n	800b128 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11c:	3304      	adds	r3, #4
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800b128:	2302      	movs	r3, #2
 800b12a:	e266      	b.n	800b5fa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d044      	beq.n	800b1c2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13a:	68da      	ldr	r2, [r3, #12]
 800b13c:	4b75      	ldr	r3, [pc, #468]	@ (800b314 <ETH_Prepare_Tx_Descriptors+0x240>)
 800b13e:	4013      	ands	r3, r2
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b144:	431a      	orrs	r2, r3
 800b146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b148:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b164:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d027      	beq.n	800b1c2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	b29a      	uxth	r2, r3
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	431a      	orrs	r2, r3
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19c:	431a      	orrs	r2, r3
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800b1b0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800b1c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0310 	and.w	r3, r3, #16
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00e      	beq.n	800b1ec <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	689a      	ldr	r2, [r3, #8]
 800b1d2:	4b51      	ldr	r3, [pc, #324]	@ (800b318 <ETH_Prepare_Tx_Descriptors+0x244>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	6992      	ldr	r2, [r2, #24]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d105      	bne.n	800b204 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0310 	and.w	r3, r3, #16
 800b200:	2b00      	cmp	r3, #0
 800b202:	d036      	beq.n	800b272 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b210:	f3bf 8f5f 	dmb	sy
}
 800b214:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b224:	3301      	adds	r3, #1
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d902      	bls.n	800b234 <ETH_Prepare_Tx_Descriptors+0x160>
 800b22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b230:	3b04      	subs	r3, #4
 800b232:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800b23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b240:	3301      	adds	r3, #1
 800b242:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b24c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b250:	d10f      	bne.n	800b272 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	6a3a      	ldr	r2, [r7, #32]
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800b25c:	f3bf 8f5f 	dmb	sy
}
 800b260:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800b26e:	2302      	movs	r3, #2
 800b270:	e1c3      	b.n	800b5fa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800b272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b274:	3301      	adds	r3, #1
 800b276:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	4b24      	ldr	r3, [pc, #144]	@ (800b318 <ETH_Prepare_Tx_Descriptors+0x244>)
 800b288:	4013      	ands	r3, r2
 800b28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b28c:	6852      	ldr	r2, [r2, #4]
 800b28e:	431a      	orrs	r2, r3
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800b294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d012      	beq.n	800b2c2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2aa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b31c <ETH_Prepare_Tx_Descriptors+0x248>)
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2b6:	6852      	ldr	r2, [r2, #4]
 800b2b8:	0412      	lsls	r2, r2, #16
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2be:	609a      	str	r2, [r3, #8]
 800b2c0:	e008      	b.n	800b2d4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ca:	689a      	ldr	r2, [r3, #8]
 800b2cc:	4b13      	ldr	r3, [pc, #76]	@ (800b31c <ETH_Prepare_Tx_Descriptors+0x248>)
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0310 	and.w	r3, r3, #16
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d021      	beq.n	800b324 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	04db      	lsls	r3, r3, #19
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	4b09      	ldr	r3, [pc, #36]	@ (800b320 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	69d2      	ldr	r2, [r2, #28]
 800b300:	431a      	orrs	r2, r3
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	60da      	str	r2, [r3, #12]
 800b312:	e02e      	b.n	800b372 <ETH_Prepare_Tx_Descriptors+0x29e>
 800b314:	ffff0000 	.word	0xffff0000
 800b318:	ffffc000 	.word	0xffffc000
 800b31c:	c000ffff 	.word	0xc000ffff
 800b320:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	4b7b      	ldr	r3, [pc, #492]	@ (800b518 <ETH_Prepare_Tx_Descriptors+0x444>)
 800b32a:	4013      	ands	r3, r2
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	6852      	ldr	r2, [r2, #4]
 800b330:	431a      	orrs	r2, r3
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d008      	beq.n	800b354 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	431a      	orrs	r2, r3
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0320 	and.w	r3, r3, #32
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d008      	beq.n	800b372 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	431a      	orrs	r2, r3
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 0304 	and.w	r3, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d008      	beq.n	800b390 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38a:	431a      	orrs	r2, r3
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800b3a8:	f3bf 8f5f 	dmb	sy
}
 800b3ac:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 80da 	beq.w	800b57c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800b3da:	e0cf      	b.n	800b57c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800b3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d902      	bls.n	800b3fa <ETH_Prepare_Tx_Descriptors+0x326>
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f6:	3b04      	subs	r3, #4
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b41c:	d007      	beq.n	800b42e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800b41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b422:	3304      	adds	r3, #4
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d029      	beq.n	800b482 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800b43c:	2300      	movs	r3, #0
 800b43e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b440:	e019      	b.n	800b476 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800b442:	f3bf 8f5f 	dmb	sy
}
 800b446:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800b454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b456:	3301      	adds	r3, #1
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d902      	bls.n	800b466 <ETH_Prepare_Tx_Descriptors+0x392>
 800b460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b462:	3b04      	subs	r3, #4
 800b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b468:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	3301      	adds	r3, #1
 800b474:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b476:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3e1      	bcc.n	800b442 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800b47e:	2302      	movs	r3, #2
 800b480:	e0bb      	b.n	800b5fa <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800b482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b484:	3301      	adds	r3, #1
 800b486:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800b488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800b498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49a:	689a      	ldr	r2, [r3, #8]
 800b49c:	4b1f      	ldr	r3, [pc, #124]	@ (800b51c <ETH_Prepare_Tx_Descriptors+0x448>)
 800b49e:	4013      	ands	r3, r2
 800b4a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4a2:	6852      	ldr	r2, [r2, #4]
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d012      	beq.n	800b4d8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	4b16      	ldr	r3, [pc, #88]	@ (800b520 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4cc:	6852      	ldr	r2, [r2, #4]
 800b4ce:	0412      	lsls	r2, r2, #16
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	609a      	str	r2, [r3, #8]
 800b4d6:	e008      	b.n	800b4ea <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	2200      	movs	r2, #0
 800b4dc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800b4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e0:	689a      	ldr	r2, [r3, #8]
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b520 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0310 	and.w	r3, r3, #16
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d018      	beq.n	800b528 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b524 <ETH_Prepare_Tx_Descriptors+0x450>)
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	69d2      	ldr	r2, [r2, #28]
 800b502:	431a      	orrs	r2, r3
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800b510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b512:	60da      	str	r2, [r3, #12]
 800b514:	e020      	b.n	800b558 <ETH_Prepare_Tx_Descriptors+0x484>
 800b516:	bf00      	nop
 800b518:	ffff8000 	.word	0xffff8000
 800b51c:	ffffc000 	.word	0xffffc000
 800b520:	c000ffff 	.word	0xc000ffff
 800b524:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	4b36      	ldr	r3, [pc, #216]	@ (800b608 <ETH_Prepare_Tx_Descriptors+0x534>)
 800b52e:	4013      	ands	r3, r2
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	6852      	ldr	r2, [r2, #4]
 800b534:	431a      	orrs	r2, r3
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d008      	beq.n	800b558 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	431a      	orrs	r2, r3
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800b558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55a:	3301      	adds	r3, #1
 800b55c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800b55e:	f3bf 8f5f 	dmb	sy
}
 800b562:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	f47f af2b 	bne.w	800b3dc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d006      	beq.n	800b59a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b596:	609a      	str	r2, [r3, #8]
 800b598:	e005      	b.n	800b5a6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b5c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5cc:	613b      	str	r3, [r7, #16]
  return(result);
 800b5ce:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b5d0:	61fb      	str	r3, [r7, #28]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f383 8810 	msr	PRIMASK, r3
}
 800b5dc:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e4:	4413      	add	r3, r2
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	629a      	str	r2, [r3, #40]	@ 0x28
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f383 8810 	msr	PRIMASK, r3
}
 800b5f6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3744      	adds	r7, #68	@ 0x44
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	ffff8000 	.word	0xffff8000

0800b60c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b089      	sub	sp, #36	@ 0x24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b616:	2300      	movs	r3, #0
 800b618:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b61a:	4b89      	ldr	r3, [pc, #548]	@ (800b840 <HAL_GPIO_Init+0x234>)
 800b61c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b61e:	e194      	b.n	800b94a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	2101      	movs	r1, #1
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	fa01 f303 	lsl.w	r3, r1, r3
 800b62c:	4013      	ands	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 8186 	beq.w	800b944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	2b01      	cmp	r3, #1
 800b642:	d005      	beq.n	800b650 <HAL_GPIO_Init+0x44>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	f003 0303 	and.w	r3, r3, #3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d130      	bne.n	800b6b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	2203      	movs	r2, #3
 800b65c:	fa02 f303 	lsl.w	r3, r2, r3
 800b660:	43db      	mvns	r3, r3
 800b662:	69ba      	ldr	r2, [r7, #24]
 800b664:	4013      	ands	r3, r2
 800b666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	fa02 f303 	lsl.w	r3, r2, r3
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	4313      	orrs	r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b686:	2201      	movs	r2, #1
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	fa02 f303 	lsl.w	r3, r2, r3
 800b68e:	43db      	mvns	r3, r3
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	4013      	ands	r3, r2
 800b694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	091b      	lsrs	r3, r3, #4
 800b69c:	f003 0201 	and.w	r2, r3, #1
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d017      	beq.n	800b6ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	2203      	movs	r2, #3
 800b6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ce:	43db      	mvns	r3, r3
 800b6d0:	69ba      	ldr	r2, [r7, #24]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	689a      	ldr	r2, [r3, #8]
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d123      	bne.n	800b742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	08da      	lsrs	r2, r3, #3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3208      	adds	r2, #8
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	220f      	movs	r2, #15
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	43db      	mvns	r3, r3
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	4013      	ands	r3, r2
 800b71c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	691a      	ldr	r2, [r3, #16]
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	fa02 f303 	lsl.w	r3, r2, r3
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	4313      	orrs	r3, r2
 800b732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	08da      	lsrs	r2, r3, #3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3208      	adds	r2, #8
 800b73c:	69b9      	ldr	r1, [r7, #24]
 800b73e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	2203      	movs	r2, #3
 800b74e:	fa02 f303 	lsl.w	r3, r2, r3
 800b752:	43db      	mvns	r3, r3
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	4013      	ands	r3, r2
 800b758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f003 0203 	and.w	r2, r3, #3
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	fa02 f303 	lsl.w	r3, r2, r3
 800b76a:	69ba      	ldr	r2, [r7, #24]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 80e0 	beq.w	800b944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b784:	4b2f      	ldr	r3, [pc, #188]	@ (800b844 <HAL_GPIO_Init+0x238>)
 800b786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b78a:	4a2e      	ldr	r2, [pc, #184]	@ (800b844 <HAL_GPIO_Init+0x238>)
 800b78c:	f043 0302 	orr.w	r3, r3, #2
 800b790:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b794:	4b2b      	ldr	r3, [pc, #172]	@ (800b844 <HAL_GPIO_Init+0x238>)
 800b796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b79a:	f003 0302 	and.w	r3, r3, #2
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b7a2:	4a29      	ldr	r2, [pc, #164]	@ (800b848 <HAL_GPIO_Init+0x23c>)
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	089b      	lsrs	r3, r3, #2
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	220f      	movs	r2, #15
 800b7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b7be:	43db      	mvns	r3, r3
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a20      	ldr	r2, [pc, #128]	@ (800b84c <HAL_GPIO_Init+0x240>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d052      	beq.n	800b874 <HAL_GPIO_Init+0x268>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b850 <HAL_GPIO_Init+0x244>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d031      	beq.n	800b83a <HAL_GPIO_Init+0x22e>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800b854 <HAL_GPIO_Init+0x248>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d02b      	beq.n	800b836 <HAL_GPIO_Init+0x22a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b858 <HAL_GPIO_Init+0x24c>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d025      	beq.n	800b832 <HAL_GPIO_Init+0x226>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b85c <HAL_GPIO_Init+0x250>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d01f      	beq.n	800b82e <HAL_GPIO_Init+0x222>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b860 <HAL_GPIO_Init+0x254>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d019      	beq.n	800b82a <HAL_GPIO_Init+0x21e>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a1a      	ldr	r2, [pc, #104]	@ (800b864 <HAL_GPIO_Init+0x258>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d013      	beq.n	800b826 <HAL_GPIO_Init+0x21a>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a19      	ldr	r2, [pc, #100]	@ (800b868 <HAL_GPIO_Init+0x25c>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00d      	beq.n	800b822 <HAL_GPIO_Init+0x216>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a18      	ldr	r2, [pc, #96]	@ (800b86c <HAL_GPIO_Init+0x260>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d007      	beq.n	800b81e <HAL_GPIO_Init+0x212>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a17      	ldr	r2, [pc, #92]	@ (800b870 <HAL_GPIO_Init+0x264>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d101      	bne.n	800b81a <HAL_GPIO_Init+0x20e>
 800b816:	2309      	movs	r3, #9
 800b818:	e02d      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b81a:	230a      	movs	r3, #10
 800b81c:	e02b      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b81e:	2308      	movs	r3, #8
 800b820:	e029      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b822:	2307      	movs	r3, #7
 800b824:	e027      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b826:	2306      	movs	r3, #6
 800b828:	e025      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b82a:	2305      	movs	r3, #5
 800b82c:	e023      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b82e:	2304      	movs	r3, #4
 800b830:	e021      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b832:	2303      	movs	r3, #3
 800b834:	e01f      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b836:	2302      	movs	r3, #2
 800b838:	e01d      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e01b      	b.n	800b876 <HAL_GPIO_Init+0x26a>
 800b83e:	bf00      	nop
 800b840:	58000080 	.word	0x58000080
 800b844:	58024400 	.word	0x58024400
 800b848:	58000400 	.word	0x58000400
 800b84c:	58020000 	.word	0x58020000
 800b850:	58020400 	.word	0x58020400
 800b854:	58020800 	.word	0x58020800
 800b858:	58020c00 	.word	0x58020c00
 800b85c:	58021000 	.word	0x58021000
 800b860:	58021400 	.word	0x58021400
 800b864:	58021800 	.word	0x58021800
 800b868:	58021c00 	.word	0x58021c00
 800b86c:	58022000 	.word	0x58022000
 800b870:	58022400 	.word	0x58022400
 800b874:	2300      	movs	r3, #0
 800b876:	69fa      	ldr	r2, [r7, #28]
 800b878:	f002 0203 	and.w	r2, r2, #3
 800b87c:	0092      	lsls	r2, r2, #2
 800b87e:	4093      	lsls	r3, r2
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	4313      	orrs	r3, r2
 800b884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b886:	4938      	ldr	r1, [pc, #224]	@ (800b968 <HAL_GPIO_Init+0x35c>)
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	089b      	lsrs	r3, r3, #2
 800b88c:	3302      	adds	r3, #2
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	43db      	mvns	r3, r3
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b8ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	43db      	mvns	r3, r3
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d003      	beq.n	800b8e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b8e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	43db      	mvns	r3, r3
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	4013      	ands	r3, r2
 800b928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3301      	adds	r3, #1
 800b948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	fa22 f303 	lsr.w	r3, r2, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	f47f ae63 	bne.w	800b620 <HAL_GPIO_Init+0x14>
  }
}
 800b95a:	bf00      	nop
 800b95c:	bf00      	nop
 800b95e:	3724      	adds	r7, #36	@ 0x24
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	58000400 	.word	0x58000400

0800b96c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
 800b978:	4613      	mov	r3, r2
 800b97a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b97c:	787b      	ldrb	r3, [r7, #1]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b982:	887a      	ldrh	r2, [r7, #2]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b988:	e003      	b.n	800b992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b98a:	887b      	ldrh	r3, [r7, #2]
 800b98c:	041a      	lsls	r2, r3, #16
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	619a      	str	r2, [r3, #24]
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b9b0:	887a      	ldrh	r2, [r7, #2]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	041a      	lsls	r2, r3, #16
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	43d9      	mvns	r1, r3
 800b9bc:	887b      	ldrh	r3, [r7, #2]
 800b9be:	400b      	ands	r3, r1
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	619a      	str	r2, [r3, #24]
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
	...

0800b9d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b9dc:	4b19      	ldr	r3, [pc, #100]	@ (800ba44 <HAL_PWREx_ConfigSupply+0x70>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b04      	cmp	r3, #4
 800b9e6:	d00a      	beq.n	800b9fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b9e8:	4b16      	ldr	r3, [pc, #88]	@ (800ba44 <HAL_PWREx_ConfigSupply+0x70>)
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	f003 0307 	and.w	r3, r3, #7
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d001      	beq.n	800b9fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e01f      	b.n	800ba3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e01d      	b.n	800ba3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b9fe:	4b11      	ldr	r3, [pc, #68]	@ (800ba44 <HAL_PWREx_ConfigSupply+0x70>)
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f023 0207 	bic.w	r2, r3, #7
 800ba06:	490f      	ldr	r1, [pc, #60]	@ (800ba44 <HAL_PWREx_ConfigSupply+0x70>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ba0e:	f7fb f8b1 	bl	8006b74 <HAL_GetTick>
 800ba12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba14:	e009      	b.n	800ba2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ba16:	f7fb f8ad 	bl	8006b74 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba24:	d901      	bls.n	800ba2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e007      	b.n	800ba3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba2a:	4b06      	ldr	r3, [pc, #24]	@ (800ba44 <HAL_PWREx_ConfigSupply+0x70>)
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba36:	d1ee      	bne.n	800ba16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	58024800 	.word	0x58024800

0800ba48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08c      	sub	sp, #48	@ 0x30
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f000 bc48 	b.w	800c2ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 8088 	beq.w	800bb7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba6a:	4b99      	ldr	r3, [pc, #612]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba74:	4b96      	ldr	r3, [pc, #600]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800ba76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	2b10      	cmp	r3, #16
 800ba7e:	d007      	beq.n	800ba90 <HAL_RCC_OscConfig+0x48>
 800ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba82:	2b18      	cmp	r3, #24
 800ba84:	d111      	bne.n	800baaa <HAL_RCC_OscConfig+0x62>
 800ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d10c      	bne.n	800baaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba90:	4b8f      	ldr	r3, [pc, #572]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d06d      	beq.n	800bb78 <HAL_RCC_OscConfig+0x130>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d169      	bne.n	800bb78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	f000 bc21 	b.w	800c2ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bab2:	d106      	bne.n	800bac2 <HAL_RCC_OscConfig+0x7a>
 800bab4:	4b86      	ldr	r3, [pc, #536]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a85      	ldr	r2, [pc, #532]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800baba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	e02e      	b.n	800bb20 <HAL_RCC_OscConfig+0xd8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10c      	bne.n	800bae4 <HAL_RCC_OscConfig+0x9c>
 800baca:	4b81      	ldr	r3, [pc, #516]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a80      	ldr	r2, [pc, #512]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bad4:	6013      	str	r3, [r2, #0]
 800bad6:	4b7e      	ldr	r3, [pc, #504]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a7d      	ldr	r2, [pc, #500]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800badc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	e01d      	b.n	800bb20 <HAL_RCC_OscConfig+0xd8>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800baec:	d10c      	bne.n	800bb08 <HAL_RCC_OscConfig+0xc0>
 800baee:	4b78      	ldr	r3, [pc, #480]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a77      	ldr	r2, [pc, #476]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800baf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	4b75      	ldr	r3, [pc, #468]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a74      	ldr	r2, [pc, #464]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	e00b      	b.n	800bb20 <HAL_RCC_OscConfig+0xd8>
 800bb08:	4b71      	ldr	r3, [pc, #452]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a70      	ldr	r2, [pc, #448]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	4b6e      	ldr	r3, [pc, #440]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a6d      	ldr	r2, [pc, #436]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d013      	beq.n	800bb50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb28:	f7fb f824 	bl	8006b74 <HAL_GetTick>
 800bb2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb2e:	e008      	b.n	800bb42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb30:	f7fb f820 	bl	8006b74 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	2b64      	cmp	r3, #100	@ 0x64
 800bb3c:	d901      	bls.n	800bb42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e3d4      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb42:	4b63      	ldr	r3, [pc, #396]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0f0      	beq.n	800bb30 <HAL_RCC_OscConfig+0xe8>
 800bb4e:	e014      	b.n	800bb7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb50:	f7fb f810 	bl	8006b74 <HAL_GetTick>
 800bb54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bb56:	e008      	b.n	800bb6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb58:	f7fb f80c 	bl	8006b74 <HAL_GetTick>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	2b64      	cmp	r3, #100	@ 0x64
 800bb64:	d901      	bls.n	800bb6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e3c0      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bb6a:	4b59      	ldr	r3, [pc, #356]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1f0      	bne.n	800bb58 <HAL_RCC_OscConfig+0x110>
 800bb76:	e000      	b.n	800bb7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 80ca 	beq.w	800bd1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb88:	4b51      	ldr	r3, [pc, #324]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bb92:	4b4f      	ldr	r3, [pc, #316]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d007      	beq.n	800bbae <HAL_RCC_OscConfig+0x166>
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	2b18      	cmp	r3, #24
 800bba2:	d156      	bne.n	800bc52 <HAL_RCC_OscConfig+0x20a>
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d151      	bne.n	800bc52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbae:	4b48      	ldr	r3, [pc, #288]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d005      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x17e>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e392      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bbc6:	4b42      	ldr	r3, [pc, #264]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f023 0219 	bic.w	r2, r3, #25
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	493f      	ldr	r1, [pc, #252]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd8:	f7fa ffcc 	bl	8006b74 <HAL_GetTick>
 800bbdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbde:	e008      	b.n	800bbf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbe0:	f7fa ffc8 	bl	8006b74 <HAL_GetTick>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d901      	bls.n	800bbf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e37c      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbf2:	4b37      	ldr	r3, [pc, #220]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 0304 	and.w	r3, r3, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0f0      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbfe:	f7fa ffe9 	bl	8006bd4 <HAL_GetREVID>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d817      	bhi.n	800bc3c <HAL_RCC_OscConfig+0x1f4>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	2b40      	cmp	r3, #64	@ 0x40
 800bc12:	d108      	bne.n	800bc26 <HAL_RCC_OscConfig+0x1de>
 800bc14:	4b2e      	ldr	r3, [pc, #184]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bc1c:	4a2c      	ldr	r2, [pc, #176]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc24:	e07a      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc26:	4b2a      	ldr	r3, [pc, #168]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	031b      	lsls	r3, r3, #12
 800bc34:	4926      	ldr	r1, [pc, #152]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc3a:	e06f      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc3c:	4b24      	ldr	r3, [pc, #144]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	061b      	lsls	r3, r3, #24
 800bc4a:	4921      	ldr	r1, [pc, #132]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc50:	e064      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d047      	beq.n	800bcea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc5a:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f023 0219 	bic.w	r2, r3, #25
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	491a      	ldr	r1, [pc, #104]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc6c:	f7fa ff82 	bl	8006b74 <HAL_GetTick>
 800bc70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc72:	e008      	b.n	800bc86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc74:	f7fa ff7e 	bl	8006b74 <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d901      	bls.n	800bc86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e332      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc86:	4b12      	ldr	r3, [pc, #72]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0f0      	beq.n	800bc74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc92:	f7fa ff9f 	bl	8006bd4 <HAL_GetREVID>
 800bc96:	4603      	mov	r3, r0
 800bc98:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d819      	bhi.n	800bcd4 <HAL_RCC_OscConfig+0x28c>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	2b40      	cmp	r3, #64	@ 0x40
 800bca6:	d108      	bne.n	800bcba <HAL_RCC_OscConfig+0x272>
 800bca8:	4b09      	ldr	r3, [pc, #36]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bcb0:	4a07      	ldr	r2, [pc, #28]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bcb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcb6:	6053      	str	r3, [r2, #4]
 800bcb8:	e030      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
 800bcba:	4b05      	ldr	r3, [pc, #20]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	031b      	lsls	r3, r3, #12
 800bcc8:	4901      	ldr	r1, [pc, #4]	@ (800bcd0 <HAL_RCC_OscConfig+0x288>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	604b      	str	r3, [r1, #4]
 800bcce:	e025      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
 800bcd0:	58024400 	.word	0x58024400
 800bcd4:	4b9a      	ldr	r3, [pc, #616]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	061b      	lsls	r3, r3, #24
 800bce2:	4997      	ldr	r1, [pc, #604]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	604b      	str	r3, [r1, #4]
 800bce8:	e018      	b.n	800bd1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bcea:	4b95      	ldr	r3, [pc, #596]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a94      	ldr	r2, [pc, #592]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bcf0:	f023 0301 	bic.w	r3, r3, #1
 800bcf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcf6:	f7fa ff3d 	bl	8006b74 <HAL_GetTick>
 800bcfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bcfc:	e008      	b.n	800bd10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcfe:	f7fa ff39 	bl	8006b74 <HAL_GetTick>
 800bd02:	4602      	mov	r2, r0
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d901      	bls.n	800bd10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	e2ed      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bd10:	4b8b      	ldr	r3, [pc, #556]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0304 	and.w	r3, r3, #4
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1f0      	bne.n	800bcfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 0310 	and.w	r3, r3, #16
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 80a9 	beq.w	800be7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd2a:	4b85      	ldr	r3, [pc, #532]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd34:	4b82      	ldr	r3, [pc, #520]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d007      	beq.n	800bd50 <HAL_RCC_OscConfig+0x308>
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b18      	cmp	r3, #24
 800bd44:	d13a      	bne.n	800bdbc <HAL_RCC_OscConfig+0x374>
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d135      	bne.n	800bdbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd50:	4b7b      	ldr	r3, [pc, #492]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <HAL_RCC_OscConfig+0x320>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	69db      	ldr	r3, [r3, #28]
 800bd60:	2b80      	cmp	r3, #128	@ 0x80
 800bd62:	d001      	beq.n	800bd68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e2c1      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd68:	f7fa ff34 	bl	8006bd4 <HAL_GetREVID>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d817      	bhi.n	800bda6 <HAL_RCC_OscConfig+0x35e>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d108      	bne.n	800bd90 <HAL_RCC_OscConfig+0x348>
 800bd7e:	4b70      	ldr	r3, [pc, #448]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bd86:	4a6e      	ldr	r2, [pc, #440]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bd8e:	e075      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd90:	4b6b      	ldr	r3, [pc, #428]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	069b      	lsls	r3, r3, #26
 800bd9e:	4968      	ldr	r1, [pc, #416]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bda4:	e06a      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bda6:	4b66      	ldr	r3, [pc, #408]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	061b      	lsls	r3, r3, #24
 800bdb4:	4962      	ldr	r1, [pc, #392]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bdba:	e05f      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d042      	beq.n	800be4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bdc4:	4b5e      	ldr	r3, [pc, #376]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a5d      	ldr	r2, [pc, #372]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdd0:	f7fa fed0 	bl	8006b74 <HAL_GetTick>
 800bdd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bdd6:	e008      	b.n	800bdea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bdd8:	f7fa fecc 	bl	8006b74 <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d901      	bls.n	800bdea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e280      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bdea:	4b55      	ldr	r3, [pc, #340]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0f0      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bdf6:	f7fa feed 	bl	8006bd4 <HAL_GetREVID>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be00:	4293      	cmp	r3, r2
 800be02:	d817      	bhi.n	800be34 <HAL_RCC_OscConfig+0x3ec>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a1b      	ldr	r3, [r3, #32]
 800be08:	2b20      	cmp	r3, #32
 800be0a:	d108      	bne.n	800be1e <HAL_RCC_OscConfig+0x3d6>
 800be0c:	4b4c      	ldr	r3, [pc, #304]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800be14:	4a4a      	ldr	r2, [pc, #296]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be1a:	6053      	str	r3, [r2, #4]
 800be1c:	e02e      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
 800be1e:	4b48      	ldr	r3, [pc, #288]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	069b      	lsls	r3, r3, #26
 800be2c:	4944      	ldr	r1, [pc, #272]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	604b      	str	r3, [r1, #4]
 800be32:	e023      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
 800be34:	4b42      	ldr	r3, [pc, #264]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	061b      	lsls	r3, r3, #24
 800be42:	493f      	ldr	r1, [pc, #252]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be44:	4313      	orrs	r3, r2
 800be46:	60cb      	str	r3, [r1, #12]
 800be48:	e018      	b.n	800be7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800be4a:	4b3d      	ldr	r3, [pc, #244]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a3c      	ldr	r2, [pc, #240]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be56:	f7fa fe8d 	bl	8006b74 <HAL_GetTick>
 800be5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800be5c:	e008      	b.n	800be70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800be5e:	f7fa fe89 	bl	8006b74 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d901      	bls.n	800be70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e23d      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800be70:	4b33      	ldr	r3, [pc, #204]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1f0      	bne.n	800be5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 0308 	and.w	r3, r3, #8
 800be84:	2b00      	cmp	r3, #0
 800be86:	d036      	beq.n	800bef6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d019      	beq.n	800bec4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be90:	4b2b      	ldr	r3, [pc, #172]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be94:	4a2a      	ldr	r2, [pc, #168]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be9c:	f7fa fe6a 	bl	8006b74 <HAL_GetTick>
 800bea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bea2:	e008      	b.n	800beb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bea4:	f7fa fe66 	bl	8006b74 <HAL_GetTick>
 800bea8:	4602      	mov	r2, r0
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d901      	bls.n	800beb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e21a      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800beb6:	4b22      	ldr	r3, [pc, #136]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800beb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0f0      	beq.n	800bea4 <HAL_RCC_OscConfig+0x45c>
 800bec2:	e018      	b.n	800bef6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bec4:	4b1e      	ldr	r3, [pc, #120]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bec8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bed0:	f7fa fe50 	bl	8006b74 <HAL_GetTick>
 800bed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bed6:	e008      	b.n	800beea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bed8:	f7fa fe4c 	bl	8006b74 <HAL_GetTick>
 800bedc:	4602      	mov	r2, r0
 800bede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d901      	bls.n	800beea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e200      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800beea:	4b15      	ldr	r3, [pc, #84]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800beec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1f0      	bne.n	800bed8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0320 	and.w	r3, r3, #32
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d039      	beq.n	800bf76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d01c      	beq.n	800bf44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bf10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bf14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bf16:	f7fa fe2d 	bl	8006b74 <HAL_GetTick>
 800bf1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bf1c:	e008      	b.n	800bf30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf1e:	f7fa fe29 	bl	8006b74 <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d901      	bls.n	800bf30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e1dd      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bf30:	4b03      	ldr	r3, [pc, #12]	@ (800bf40 <HAL_RCC_OscConfig+0x4f8>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0f0      	beq.n	800bf1e <HAL_RCC_OscConfig+0x4d6>
 800bf3c:	e01b      	b.n	800bf76 <HAL_RCC_OscConfig+0x52e>
 800bf3e:	bf00      	nop
 800bf40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bf44:	4b9b      	ldr	r3, [pc, #620]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a9a      	ldr	r2, [pc, #616]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bf4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bf50:	f7fa fe10 	bl	8006b74 <HAL_GetTick>
 800bf54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bf56:	e008      	b.n	800bf6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf58:	f7fa fe0c 	bl	8006b74 <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e1c0      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bf6a:	4b92      	ldr	r3, [pc, #584]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1f0      	bne.n	800bf58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0304 	and.w	r3, r3, #4
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f000 8081 	beq.w	800c086 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bf84:	4b8c      	ldr	r3, [pc, #560]	@ (800c1b8 <HAL_RCC_OscConfig+0x770>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a8b      	ldr	r2, [pc, #556]	@ (800c1b8 <HAL_RCC_OscConfig+0x770>)
 800bf8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf90:	f7fa fdf0 	bl	8006b74 <HAL_GetTick>
 800bf94:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf96:	e008      	b.n	800bfaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf98:	f7fa fdec 	bl	8006b74 <HAL_GetTick>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	2b64      	cmp	r3, #100	@ 0x64
 800bfa4:	d901      	bls.n	800bfaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e1a0      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bfaa:	4b83      	ldr	r3, [pc, #524]	@ (800c1b8 <HAL_RCC_OscConfig+0x770>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0f0      	beq.n	800bf98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d106      	bne.n	800bfcc <HAL_RCC_OscConfig+0x584>
 800bfbe:	4b7d      	ldr	r3, [pc, #500]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfc2:	4a7c      	ldr	r2, [pc, #496]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfc4:	f043 0301 	orr.w	r3, r3, #1
 800bfc8:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfca:	e02d      	b.n	800c028 <HAL_RCC_OscConfig+0x5e0>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10c      	bne.n	800bfee <HAL_RCC_OscConfig+0x5a6>
 800bfd4:	4b77      	ldr	r3, [pc, #476]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfd8:	4a76      	ldr	r2, [pc, #472]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfda:	f023 0301 	bic.w	r3, r3, #1
 800bfde:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfe0:	4b74      	ldr	r3, [pc, #464]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfe4:	4a73      	ldr	r2, [pc, #460]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bfe6:	f023 0304 	bic.w	r3, r3, #4
 800bfea:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfec:	e01c      	b.n	800c028 <HAL_RCC_OscConfig+0x5e0>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	2b05      	cmp	r3, #5
 800bff4:	d10c      	bne.n	800c010 <HAL_RCC_OscConfig+0x5c8>
 800bff6:	4b6f      	ldr	r3, [pc, #444]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bffa:	4a6e      	ldr	r2, [pc, #440]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800bffc:	f043 0304 	orr.w	r3, r3, #4
 800c000:	6713      	str	r3, [r2, #112]	@ 0x70
 800c002:	4b6c      	ldr	r3, [pc, #432]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c006:	4a6b      	ldr	r2, [pc, #428]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c008:	f043 0301 	orr.w	r3, r3, #1
 800c00c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c00e:	e00b      	b.n	800c028 <HAL_RCC_OscConfig+0x5e0>
 800c010:	4b68      	ldr	r3, [pc, #416]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c014:	4a67      	ldr	r2, [pc, #412]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c016:	f023 0301 	bic.w	r3, r3, #1
 800c01a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c01c:	4b65      	ldr	r3, [pc, #404]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c01e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c020:	4a64      	ldr	r2, [pc, #400]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c022:	f023 0304 	bic.w	r3, r3, #4
 800c026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d015      	beq.n	800c05c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c030:	f7fa fda0 	bl	8006b74 <HAL_GetTick>
 800c034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c036:	e00a      	b.n	800c04e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c038:	f7fa fd9c 	bl	8006b74 <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c046:	4293      	cmp	r3, r2
 800c048:	d901      	bls.n	800c04e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e14e      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c04e:	4b59      	ldr	r3, [pc, #356]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0ee      	beq.n	800c038 <HAL_RCC_OscConfig+0x5f0>
 800c05a:	e014      	b.n	800c086 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c05c:	f7fa fd8a 	bl	8006b74 <HAL_GetTick>
 800c060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c062:	e00a      	b.n	800c07a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c064:	f7fa fd86 	bl	8006b74 <HAL_GetTick>
 800c068:	4602      	mov	r2, r0
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c072:	4293      	cmp	r3, r2
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e138      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c07a:	4b4e      	ldr	r3, [pc, #312]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c07c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c07e:	f003 0302 	and.w	r3, r3, #2
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1ee      	bne.n	800c064 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 812d 	beq.w	800c2ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c090:	4b48      	ldr	r3, [pc, #288]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c098:	2b18      	cmp	r3, #24
 800c09a:	f000 80bd 	beq.w	800c218 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	f040 809e 	bne.w	800c1e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0a8:	4b42      	ldr	r3, [pc, #264]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a41      	ldr	r2, [pc, #260]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c0ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b4:	f7fa fd5e 	bl	8006b74 <HAL_GetTick>
 800c0b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0ba:	e008      	b.n	800c0ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0bc:	f7fa fd5a 	bl	8006b74 <HAL_GetTick>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d901      	bls.n	800c0ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e10e      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0ce:	4b39      	ldr	r3, [pc, #228]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f0      	bne.n	800c0bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c0da:	4b36      	ldr	r3, [pc, #216]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c0dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c0de:	4b37      	ldr	r3, [pc, #220]	@ (800c1bc <HAL_RCC_OscConfig+0x774>)
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c0ea:	0112      	lsls	r2, r2, #4
 800c0ec:	430a      	orrs	r2, r1
 800c0ee:	4931      	ldr	r1, [pc, #196]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c102:	3b01      	subs	r3, #1
 800c104:	025b      	lsls	r3, r3, #9
 800c106:	b29b      	uxth	r3, r3
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c10e:	3b01      	subs	r3, #1
 800c110:	041b      	lsls	r3, r3, #16
 800c112:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c116:	431a      	orrs	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c11c:	3b01      	subs	r3, #1
 800c11e:	061b      	lsls	r3, r3, #24
 800c120:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c124:	4923      	ldr	r1, [pc, #140]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c126:	4313      	orrs	r3, r2
 800c128:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c12a:	4b22      	ldr	r3, [pc, #136]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	4a21      	ldr	r2, [pc, #132]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c130:	f023 0301 	bic.w	r3, r3, #1
 800c134:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c136:	4b1f      	ldr	r3, [pc, #124]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c13a:	4b21      	ldr	r3, [pc, #132]	@ (800c1c0 <HAL_RCC_OscConfig+0x778>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c142:	00d2      	lsls	r2, r2, #3
 800c144:	491b      	ldr	r1, [pc, #108]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c146:	4313      	orrs	r3, r2
 800c148:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c14a:	4b1a      	ldr	r3, [pc, #104]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14e:	f023 020c 	bic.w	r2, r3, #12
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c156:	4917      	ldr	r1, [pc, #92]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c158:	4313      	orrs	r3, r2
 800c15a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c15c:	4b15      	ldr	r3, [pc, #84]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c160:	f023 0202 	bic.w	r2, r3, #2
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c168:	4912      	ldr	r1, [pc, #72]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c16e:	4b11      	ldr	r3, [pc, #68]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c172:	4a10      	ldr	r2, [pc, #64]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c17a:	4b0e      	ldr	r3, [pc, #56]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17e:	4a0d      	ldr	r2, [pc, #52]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18a:	4a0a      	ldr	r2, [pc, #40]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c18c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c192:	4b08      	ldr	r3, [pc, #32]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c196:	4a07      	ldr	r2, [pc, #28]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c198:	f043 0301 	orr.w	r3, r3, #1
 800c19c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c19e:	4b05      	ldr	r3, [pc, #20]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a04      	ldr	r2, [pc, #16]	@ (800c1b4 <HAL_RCC_OscConfig+0x76c>)
 800c1a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1aa:	f7fa fce3 	bl	8006b74 <HAL_GetTick>
 800c1ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c1b0:	e011      	b.n	800c1d6 <HAL_RCC_OscConfig+0x78e>
 800c1b2:	bf00      	nop
 800c1b4:	58024400 	.word	0x58024400
 800c1b8:	58024800 	.word	0x58024800
 800c1bc:	fffffc0c 	.word	0xfffffc0c
 800c1c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1c4:	f7fa fcd6 	bl	8006b74 <HAL_GetTick>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d901      	bls.n	800c1d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	e08a      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c1d6:	4b47      	ldr	r3, [pc, #284]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0f0      	beq.n	800c1c4 <HAL_RCC_OscConfig+0x77c>
 800c1e2:	e082      	b.n	800c2ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1e4:	4b43      	ldr	r3, [pc, #268]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a42      	ldr	r2, [pc, #264]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c1ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c1ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1f0:	f7fa fcc0 	bl	8006b74 <HAL_GetTick>
 800c1f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c1f6:	e008      	b.n	800c20a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1f8:	f7fa fcbc 	bl	8006b74 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	2b02      	cmp	r3, #2
 800c204:	d901      	bls.n	800c20a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e070      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c20a:	4b3a      	ldr	r3, [pc, #232]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1f0      	bne.n	800c1f8 <HAL_RCC_OscConfig+0x7b0>
 800c216:	e068      	b.n	800c2ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c218:	4b36      	ldr	r3, [pc, #216]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c21c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c21e:	4b35      	ldr	r3, [pc, #212]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c222:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d031      	beq.n	800c290 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f003 0203 	and.w	r2, r3, #3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c236:	429a      	cmp	r2, r3
 800c238:	d12a      	bne.n	800c290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	091b      	lsrs	r3, r3, #4
 800c23e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c246:	429a      	cmp	r2, r3
 800c248:	d122      	bne.n	800c290 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c254:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c256:	429a      	cmp	r2, r3
 800c258:	d11a      	bne.n	800c290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	0a5b      	lsrs	r3, r3, #9
 800c25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c266:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c268:	429a      	cmp	r2, r3
 800c26a:	d111      	bne.n	800c290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	0c1b      	lsrs	r3, r3, #16
 800c270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c278:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d108      	bne.n	800c290 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	0e1b      	lsrs	r3, r3, #24
 800c282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d001      	beq.n	800c294 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e02b      	b.n	800c2ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c294:	4b17      	ldr	r3, [pc, #92]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c298:	08db      	lsrs	r3, r3, #3
 800c29a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c29e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d01f      	beq.n	800c2ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c2aa:	4b12      	ldr	r3, [pc, #72]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ae:	4a11      	ldr	r2, [pc, #68]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2b0:	f023 0301 	bic.w	r3, r3, #1
 800c2b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c2b6:	f7fa fc5d 	bl	8006b74 <HAL_GetTick>
 800c2ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c2bc:	bf00      	nop
 800c2be:	f7fa fc59 	bl	8006b74 <HAL_GetTick>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d0f9      	beq.n	800c2be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c2ca:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f8 <HAL_RCC_OscConfig+0x8b0>)
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c2d6:	00d2      	lsls	r2, r2, #3
 800c2d8:	4906      	ldr	r1, [pc, #24]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c2de:	4b05      	ldr	r3, [pc, #20]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e2:	4a04      	ldr	r2, [pc, #16]	@ (800c2f4 <HAL_RCC_OscConfig+0x8ac>)
 800c2e4:	f043 0301 	orr.w	r3, r3, #1
 800c2e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3730      	adds	r7, #48	@ 0x30
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	58024400 	.word	0x58024400
 800c2f8:	ffff0007 	.word	0xffff0007

0800c2fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e19c      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c310:	4b8a      	ldr	r3, [pc, #552]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 030f 	and.w	r3, r3, #15
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d910      	bls.n	800c340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c31e:	4b87      	ldr	r3, [pc, #540]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f023 020f 	bic.w	r2, r3, #15
 800c326:	4985      	ldr	r1, [pc, #532]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c32e:	4b83      	ldr	r3, [pc, #524]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 030f 	and.w	r3, r3, #15
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d001      	beq.n	800c340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e184      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d010      	beq.n	800c36e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691a      	ldr	r2, [r3, #16]
 800c350:	4b7b      	ldr	r3, [pc, #492]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c358:	429a      	cmp	r2, r3
 800c35a:	d908      	bls.n	800c36e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c35c:	4b78      	ldr	r3, [pc, #480]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	4975      	ldr	r1, [pc, #468]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 0308 	and.w	r3, r3, #8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d010      	beq.n	800c39c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	695a      	ldr	r2, [r3, #20]
 800c37e:	4b70      	ldr	r3, [pc, #448]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c386:	429a      	cmp	r2, r3
 800c388:	d908      	bls.n	800c39c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c38a:	4b6d      	ldr	r3, [pc, #436]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	496a      	ldr	r1, [pc, #424]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c398:	4313      	orrs	r3, r2
 800c39a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0310 	and.w	r3, r3, #16
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d010      	beq.n	800c3ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	699a      	ldr	r2, [r3, #24]
 800c3ac:	4b64      	ldr	r3, [pc, #400]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3ae:	69db      	ldr	r3, [r3, #28]
 800c3b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d908      	bls.n	800c3ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c3b8:	4b61      	ldr	r3, [pc, #388]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	495e      	ldr	r1, [pc, #376]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d010      	beq.n	800c3f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	69da      	ldr	r2, [r3, #28]
 800c3da:	4b59      	ldr	r3, [pc, #356]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d908      	bls.n	800c3f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c3e6:	4b56      	ldr	r3, [pc, #344]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	69db      	ldr	r3, [r3, #28]
 800c3f2:	4953      	ldr	r1, [pc, #332]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d010      	beq.n	800c426 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68da      	ldr	r2, [r3, #12]
 800c408:	4b4d      	ldr	r3, [pc, #308]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	f003 030f 	and.w	r3, r3, #15
 800c410:	429a      	cmp	r2, r3
 800c412:	d908      	bls.n	800c426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c414:	4b4a      	ldr	r3, [pc, #296]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	f023 020f 	bic.w	r2, r3, #15
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	4947      	ldr	r1, [pc, #284]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c422:	4313      	orrs	r3, r2
 800c424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d055      	beq.n	800c4de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c432:	4b43      	ldr	r3, [pc, #268]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	4940      	ldr	r1, [pc, #256]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c440:	4313      	orrs	r3, r2
 800c442:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d107      	bne.n	800c45c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c44c:	4b3c      	ldr	r3, [pc, #240]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d121      	bne.n	800c49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e0f6      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d107      	bne.n	800c474 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c464:	4b36      	ldr	r3, [pc, #216]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d115      	bne.n	800c49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e0ea      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d107      	bne.n	800c48c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c47c:	4b30      	ldr	r3, [pc, #192]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e0de      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c48c:	4b2c      	ldr	r3, [pc, #176]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	e0d6      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c49c:	4b28      	ldr	r3, [pc, #160]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	f023 0207 	bic.w	r2, r3, #7
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	4925      	ldr	r1, [pc, #148]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4ae:	f7fa fb61 	bl	8006b74 <HAL_GetTick>
 800c4b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4b4:	e00a      	b.n	800c4cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4b6:	f7fa fb5d 	bl	8006b74 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e0be      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4cc:	4b1c      	ldr	r3, [pc, #112]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d1eb      	bne.n	800c4b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d010      	beq.n	800c50c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	4b14      	ldr	r3, [pc, #80]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	f003 030f 	and.w	r3, r3, #15
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d208      	bcs.n	800c50c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4fa:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	f023 020f 	bic.w	r2, r3, #15
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	490e      	ldr	r1, [pc, #56]	@ (800c540 <HAL_RCC_ClockConfig+0x244>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c50c:	4b0b      	ldr	r3, [pc, #44]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 030f 	and.w	r3, r3, #15
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d214      	bcs.n	800c544 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c51a:	4b08      	ldr	r3, [pc, #32]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f023 020f 	bic.w	r2, r3, #15
 800c522:	4906      	ldr	r1, [pc, #24]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	4313      	orrs	r3, r2
 800c528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c52a:	4b04      	ldr	r3, [pc, #16]	@ (800c53c <HAL_RCC_ClockConfig+0x240>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 030f 	and.w	r3, r3, #15
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	429a      	cmp	r2, r3
 800c536:	d005      	beq.n	800c544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	e086      	b.n	800c64a <HAL_RCC_ClockConfig+0x34e>
 800c53c:	52002000 	.word	0x52002000
 800c540:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0304 	and.w	r3, r3, #4
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d010      	beq.n	800c572 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	691a      	ldr	r2, [r3, #16]
 800c554:	4b3f      	ldr	r3, [pc, #252]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d208      	bcs.n	800c572 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c560:	4b3c      	ldr	r3, [pc, #240]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	4939      	ldr	r1, [pc, #228]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d010      	beq.n	800c5a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695a      	ldr	r2, [r3, #20]
 800c582:	4b34      	ldr	r3, [pc, #208]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d208      	bcs.n	800c5a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c58e:	4b31      	ldr	r3, [pc, #196]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	492e      	ldr	r1, [pc, #184]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d010      	beq.n	800c5ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	4b28      	ldr	r3, [pc, #160]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d208      	bcs.n	800c5ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c5bc:	4b25      	ldr	r3, [pc, #148]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	4922      	ldr	r1, [pc, #136]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0320 	and.w	r3, r3, #32
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d010      	beq.n	800c5fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	69da      	ldr	r2, [r3, #28]
 800c5de:	4b1d      	ldr	r3, [pc, #116]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d208      	bcs.n	800c5fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c5ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	4917      	ldr	r1, [pc, #92]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c5fc:	f000 f834 	bl	800c668 <HAL_RCC_GetSysClockFreq>
 800c600:	4602      	mov	r2, r0
 800c602:	4b14      	ldr	r3, [pc, #80]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	f003 030f 	and.w	r3, r3, #15
 800c60c:	4912      	ldr	r1, [pc, #72]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c60e:	5ccb      	ldrb	r3, [r1, r3]
 800c610:	f003 031f 	and.w	r3, r3, #31
 800c614:	fa22 f303 	lsr.w	r3, r2, r3
 800c618:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c61a:	4b0e      	ldr	r3, [pc, #56]	@ (800c654 <HAL_RCC_ClockConfig+0x358>)
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	f003 030f 	and.w	r3, r3, #15
 800c622:	4a0d      	ldr	r2, [pc, #52]	@ (800c658 <HAL_RCC_ClockConfig+0x35c>)
 800c624:	5cd3      	ldrb	r3, [r2, r3]
 800c626:	f003 031f 	and.w	r3, r3, #31
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	fa22 f303 	lsr.w	r3, r2, r3
 800c630:	4a0a      	ldr	r2, [pc, #40]	@ (800c65c <HAL_RCC_ClockConfig+0x360>)
 800c632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c634:	4a0a      	ldr	r2, [pc, #40]	@ (800c660 <HAL_RCC_ClockConfig+0x364>)
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c63a:	4b0a      	ldr	r3, [pc, #40]	@ (800c664 <HAL_RCC_ClockConfig+0x368>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	f7f8 fe4c 	bl	80052dc <HAL_InitTick>
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	58024400 	.word	0x58024400
 800c658:	0802cf40 	.word	0x0802cf40
 800c65c:	240001e8 	.word	0x240001e8
 800c660:	240001e4 	.word	0x240001e4
 800c664:	240001ec 	.word	0x240001ec

0800c668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c668:	b480      	push	{r7}
 800c66a:	b089      	sub	sp, #36	@ 0x24
 800c66c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c66e:	4bb3      	ldr	r3, [pc, #716]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c676:	2b18      	cmp	r3, #24
 800c678:	f200 8155 	bhi.w	800c926 <HAL_RCC_GetSysClockFreq+0x2be>
 800c67c:	a201      	add	r2, pc, #4	@ (adr r2, 800c684 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c682:	bf00      	nop
 800c684:	0800c6e9 	.word	0x0800c6e9
 800c688:	0800c927 	.word	0x0800c927
 800c68c:	0800c927 	.word	0x0800c927
 800c690:	0800c927 	.word	0x0800c927
 800c694:	0800c927 	.word	0x0800c927
 800c698:	0800c927 	.word	0x0800c927
 800c69c:	0800c927 	.word	0x0800c927
 800c6a0:	0800c927 	.word	0x0800c927
 800c6a4:	0800c70f 	.word	0x0800c70f
 800c6a8:	0800c927 	.word	0x0800c927
 800c6ac:	0800c927 	.word	0x0800c927
 800c6b0:	0800c927 	.word	0x0800c927
 800c6b4:	0800c927 	.word	0x0800c927
 800c6b8:	0800c927 	.word	0x0800c927
 800c6bc:	0800c927 	.word	0x0800c927
 800c6c0:	0800c927 	.word	0x0800c927
 800c6c4:	0800c715 	.word	0x0800c715
 800c6c8:	0800c927 	.word	0x0800c927
 800c6cc:	0800c927 	.word	0x0800c927
 800c6d0:	0800c927 	.word	0x0800c927
 800c6d4:	0800c927 	.word	0x0800c927
 800c6d8:	0800c927 	.word	0x0800c927
 800c6dc:	0800c927 	.word	0x0800c927
 800c6e0:	0800c927 	.word	0x0800c927
 800c6e4:	0800c71b 	.word	0x0800c71b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6e8:	4b94      	ldr	r3, [pc, #592]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0320 	and.w	r3, r3, #32
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d009      	beq.n	800c708 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6f4:	4b91      	ldr	r3, [pc, #580]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	08db      	lsrs	r3, r3, #3
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	4a90      	ldr	r2, [pc, #576]	@ (800c940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c700:	fa22 f303 	lsr.w	r3, r2, r3
 800c704:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c706:	e111      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c708:	4b8d      	ldr	r3, [pc, #564]	@ (800c940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c70a:	61bb      	str	r3, [r7, #24]
      break;
 800c70c:	e10e      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c70e:	4b8d      	ldr	r3, [pc, #564]	@ (800c944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c710:	61bb      	str	r3, [r7, #24]
      break;
 800c712:	e10b      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c714:	4b8c      	ldr	r3, [pc, #560]	@ (800c948 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c716:	61bb      	str	r3, [r7, #24]
      break;
 800c718:	e108      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c71a:	4b88      	ldr	r3, [pc, #544]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c724:	4b85      	ldr	r3, [pc, #532]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c728:	091b      	lsrs	r3, r3, #4
 800c72a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c72e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c730:	4b82      	ldr	r3, [pc, #520]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c73a:	4b80      	ldr	r3, [pc, #512]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c73e:	08db      	lsrs	r3, r3, #3
 800c740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	fb02 f303 	mul.w	r3, r2, r3
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 80e1 	beq.w	800c920 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b02      	cmp	r3, #2
 800c762:	f000 8083 	beq.w	800c86c <HAL_RCC_GetSysClockFreq+0x204>
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	f200 80a1 	bhi.w	800c8b0 <HAL_RCC_GetSysClockFreq+0x248>
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <HAL_RCC_GetSysClockFreq+0x114>
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d056      	beq.n	800c828 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c77a:	e099      	b.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c77c:	4b6f      	ldr	r3, [pc, #444]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 0320 	and.w	r3, r3, #32
 800c784:	2b00      	cmp	r3, #0
 800c786:	d02d      	beq.n	800c7e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c788:	4b6c      	ldr	r3, [pc, #432]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	08db      	lsrs	r3, r3, #3
 800c78e:	f003 0303 	and.w	r3, r3, #3
 800c792:	4a6b      	ldr	r2, [pc, #428]	@ (800c940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c794:	fa22 f303 	lsr.w	r3, r2, r3
 800c798:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7b2:	4b62      	ldr	r3, [pc, #392]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c7e2:	e087      	b.n	800c8f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c950 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f6:	4b51      	ldr	r3, [pc, #324]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c806:	ed97 6a02 	vldr	s12, [r7, #8]
 800c80a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c826:	e065      	b.n	800c8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c832:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c954 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c83a:	4b40      	ldr	r3, [pc, #256]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c84a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c84e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c85a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c86a:	e043      	b.n	800c8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c876:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c958 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87e:	4b2f      	ldr	r3, [pc, #188]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c886:	ee07 3a90 	vmov	s15, r3
 800c88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c892:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c8ae:	e021      	b.n	800c8f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c954 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8c2:	4b1e      	ldr	r3, [pc, #120]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c94c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c8f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c8f4:	4b11      	ldr	r3, [pc, #68]	@ (800c93c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f8:	0a5b      	lsrs	r3, r3, #9
 800c8fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8fe:	3301      	adds	r3, #1
 800c900:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	ee07 3a90 	vmov	s15, r3
 800c908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c90c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c918:	ee17 3a90 	vmov	r3, s15
 800c91c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c91e:	e005      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	61bb      	str	r3, [r7, #24]
      break;
 800c924:	e002      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c926:	4b07      	ldr	r3, [pc, #28]	@ (800c944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c928:	61bb      	str	r3, [r7, #24]
      break;
 800c92a:	bf00      	nop
  }

  return sysclockfreq;
 800c92c:	69bb      	ldr	r3, [r7, #24]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3724      	adds	r7, #36	@ 0x24
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	58024400 	.word	0x58024400
 800c940:	03d09000 	.word	0x03d09000
 800c944:	003d0900 	.word	0x003d0900
 800c948:	017d7840 	.word	0x017d7840
 800c94c:	46000000 	.word	0x46000000
 800c950:	4c742400 	.word	0x4c742400
 800c954:	4a742400 	.word	0x4a742400
 800c958:	4bbebc20 	.word	0x4bbebc20

0800c95c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c962:	f7ff fe81 	bl	800c668 <HAL_RCC_GetSysClockFreq>
 800c966:	4602      	mov	r2, r0
 800c968:	4b10      	ldr	r3, [pc, #64]	@ (800c9ac <HAL_RCC_GetHCLKFreq+0x50>)
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	490f      	ldr	r1, [pc, #60]	@ (800c9b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c974:	5ccb      	ldrb	r3, [r1, r3]
 800c976:	f003 031f 	and.w	r3, r3, #31
 800c97a:	fa22 f303 	lsr.w	r3, r2, r3
 800c97e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c980:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <HAL_RCC_GetHCLKFreq+0x50>)
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	f003 030f 	and.w	r3, r3, #15
 800c988:	4a09      	ldr	r2, [pc, #36]	@ (800c9b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c98a:	5cd3      	ldrb	r3, [r2, r3]
 800c98c:	f003 031f 	and.w	r3, r3, #31
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	fa22 f303 	lsr.w	r3, r2, r3
 800c996:	4a07      	ldr	r2, [pc, #28]	@ (800c9b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c998:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c99a:	4a07      	ldr	r2, [pc, #28]	@ (800c9b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c9a0:	4b04      	ldr	r3, [pc, #16]	@ (800c9b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	0802cf40 	.word	0x0802cf40
 800c9b4:	240001e8 	.word	0x240001e8
 800c9b8:	240001e4 	.word	0x240001e4

0800c9bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c9c0:	f7ff ffcc 	bl	800c95c <HAL_RCC_GetHCLKFreq>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	4b06      	ldr	r3, [pc, #24]	@ (800c9e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c9c8:	69db      	ldr	r3, [r3, #28]
 800c9ca:	091b      	lsrs	r3, r3, #4
 800c9cc:	f003 0307 	and.w	r3, r3, #7
 800c9d0:	4904      	ldr	r1, [pc, #16]	@ (800c9e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c9d2:	5ccb      	ldrb	r3, [r1, r3]
 800c9d4:	f003 031f 	and.w	r3, r3, #31
 800c9d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	58024400 	.word	0x58024400
 800c9e4:	0802cf40 	.word	0x0802cf40

0800c9e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c9ec:	f7ff ffb6 	bl	800c95c <HAL_RCC_GetHCLKFreq>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	4b06      	ldr	r3, [pc, #24]	@ (800ca0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	0a1b      	lsrs	r3, r3, #8
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	4904      	ldr	r1, [pc, #16]	@ (800ca10 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c9fe:	5ccb      	ldrb	r3, [r1, r3]
 800ca00:	f003 031f 	and.w	r3, r3, #31
 800ca04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	58024400 	.word	0x58024400
 800ca10:	0802cf40 	.word	0x0802cf40

0800ca14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	223f      	movs	r2, #63	@ 0x3f
 800ca22:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ca24:	4b1a      	ldr	r3, [pc, #104]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	f003 0207 	and.w	r2, r3, #7
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ca30:	4b17      	ldr	r3, [pc, #92]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ca3c:	4b14      	ldr	r3, [pc, #80]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	f003 020f 	and.w	r2, r3, #15
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ca48:	4b11      	ldr	r3, [pc, #68]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ca54:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ca60:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca62:	69db      	ldr	r3, [r3, #28]
 800ca64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ca6c:	4b08      	ldr	r3, [pc, #32]	@ (800ca90 <HAL_RCC_GetClockConfig+0x7c>)
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ca78:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <HAL_RCC_GetClockConfig+0x80>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 020f 	and.w	r2, r3, #15
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	58024400 	.word	0x58024400
 800ca94:	52002000 	.word	0x52002000

0800ca98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca9c:	b0ca      	sub	sp, #296	@ 0x128
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800caaa:	2300      	movs	r3, #0
 800caac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cabc:	2500      	movs	r5, #0
 800cabe:	ea54 0305 	orrs.w	r3, r4, r5
 800cac2:	d049      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cace:	d02f      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cad4:	d828      	bhi.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cada:	d01a      	beq.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cadc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cae0:	d822      	bhi.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caea:	d007      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800caec:	e01c      	b.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caee:	4bb8      	ldr	r3, [pc, #736]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800caf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf2:	4ab7      	ldr	r2, [pc, #732]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800caf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800caf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cafa:	e01a      	b.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb00:	3308      	adds	r3, #8
 800cb02:	2102      	movs	r1, #2
 800cb04:	4618      	mov	r0, r3
 800cb06:	f001 fc8f 	bl	800e428 <RCCEx_PLL2_Config>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cb10:	e00f      	b.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb16:	3328      	adds	r3, #40	@ 0x28
 800cb18:	2102      	movs	r1, #2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f001 fd36 	bl	800e58c <RCCEx_PLL3_Config>
 800cb20:	4603      	mov	r3, r0
 800cb22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cb26:	e004      	b.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cb2e:	e000      	b.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cb30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10a      	bne.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cb3a:	4ba5      	ldr	r3, [pc, #660]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb48:	4aa1      	ldr	r2, [pc, #644]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb4a:	430b      	orrs	r3, r1
 800cb4c:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb4e:	e003      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800cb64:	f04f 0900 	mov.w	r9, #0
 800cb68:	ea58 0309 	orrs.w	r3, r8, r9
 800cb6c:	d047      	beq.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	d82a      	bhi.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cb78:	a201      	add	r2, pc, #4	@ (adr r2, 800cb80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7e:	bf00      	nop
 800cb80:	0800cb95 	.word	0x0800cb95
 800cb84:	0800cba3 	.word	0x0800cba3
 800cb88:	0800cbb9 	.word	0x0800cbb9
 800cb8c:	0800cbd7 	.word	0x0800cbd7
 800cb90:	0800cbd7 	.word	0x0800cbd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb94:	4b8e      	ldr	r3, [pc, #568]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb98:	4a8d      	ldr	r2, [pc, #564]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cba0:	e01a      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cba6:	3308      	adds	r3, #8
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f001 fc3c 	bl	800e428 <RCCEx_PLL2_Config>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbb6:	e00f      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbbc:	3328      	adds	r3, #40	@ 0x28
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f001 fce3 	bl	800e58c <RCCEx_PLL3_Config>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbcc:	e004      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cbd4:	e000      	b.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cbd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10a      	bne.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cbe0:	4b7b      	ldr	r3, [pc, #492]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbe4:	f023 0107 	bic.w	r1, r3, #7
 800cbe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbee:	4a78      	ldr	r2, [pc, #480]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	6513      	str	r3, [r2, #80]	@ 0x50
 800cbf4:	e003      	b.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800cc0a:	f04f 0b00 	mov.w	fp, #0
 800cc0e:	ea5a 030b 	orrs.w	r3, sl, fp
 800cc12:	d04c      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc1e:	d030      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cc20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc24:	d829      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cc26:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc28:	d02d      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cc2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc2c:	d825      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cc2e:	2b80      	cmp	r3, #128	@ 0x80
 800cc30:	d018      	beq.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cc32:	2b80      	cmp	r3, #128	@ 0x80
 800cc34:	d821      	bhi.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cc3a:	2b40      	cmp	r3, #64	@ 0x40
 800cc3c:	d007      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cc3e:	e01c      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc40:	4b63      	ldr	r3, [pc, #396]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc44:	4a62      	ldr	r2, [pc, #392]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cc4c:	e01c      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc52:	3308      	adds	r3, #8
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f001 fbe6 	bl	800e428 <RCCEx_PLL2_Config>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cc62:	e011      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc68:	3328      	adds	r3, #40	@ 0x28
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f001 fc8d 	bl	800e58c <RCCEx_PLL3_Config>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cc78:	e006      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc80:	e002      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cc82:	bf00      	nop
 800cc84:	e000      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cc86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cc90:	4b4f      	ldr	r3, [pc, #316]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc94:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc9e:	4a4c      	ldr	r2, [pc, #304]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cca0:	430b      	orrs	r3, r1
 800cca2:	6513      	str	r3, [r2, #80]	@ 0x50
 800cca4:	e003      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ccae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ccba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800ccc4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4313      	orrs	r3, r2
 800cccc:	d053      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ccce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ccd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ccda:	d035      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ccdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cce0:	d82e      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cce2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cce6:	d031      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cce8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ccec:	d828      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ccee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccf2:	d01a      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ccf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccf8:	d822      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ccfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd02:	d007      	beq.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cd04:	e01c      	b.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd06:	4b32      	ldr	r3, [pc, #200]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	4a31      	ldr	r2, [pc, #196]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd12:	e01c      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd18:	3308      	adds	r3, #8
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f001 fb83 	bl	800e428 <RCCEx_PLL2_Config>
 800cd22:	4603      	mov	r3, r0
 800cd24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cd28:	e011      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd2e:	3328      	adds	r3, #40	@ 0x28
 800cd30:	2100      	movs	r1, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f001 fc2a 	bl	800e58c <RCCEx_PLL3_Config>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd3e:	e006      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd46:	e002      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cd48:	bf00      	nop
 800cd4a:	e000      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cd4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cd56:	4b1e      	ldr	r3, [pc, #120]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd5a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800cd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cd66:	4a1a      	ldr	r2, [pc, #104]	@ (800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd6c:	e003      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cd82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd86:	2300      	movs	r3, #0
 800cd88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cd8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cd90:	460b      	mov	r3, r1
 800cd92:	4313      	orrs	r3, r2
 800cd94:	d056      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cd9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cda2:	d038      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cda4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cda8:	d831      	bhi.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cdaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cdae:	d034      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cdb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cdb4:	d82b      	bhi.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cdb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cdba:	d01d      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cdbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cdc0:	d825      	bhi.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d006      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cdc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdca:	d00a      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cdcc:	e01f      	b.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cdce:	bf00      	nop
 800cdd0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdd4:	4ba2      	ldr	r3, [pc, #648]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd8:	4aa1      	ldr	r2, [pc, #644]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cdda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cde0:	e01c      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cde6:	3308      	adds	r3, #8
 800cde8:	2100      	movs	r1, #0
 800cdea:	4618      	mov	r0, r3
 800cdec:	f001 fb1c 	bl	800e428 <RCCEx_PLL2_Config>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cdf6:	e011      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdfc:	3328      	adds	r3, #40	@ 0x28
 800cdfe:	2100      	movs	r1, #0
 800ce00:	4618      	mov	r0, r3
 800ce02:	f001 fbc3 	bl	800e58c <RCCEx_PLL3_Config>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce0c:	e006      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ce14:	e002      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ce16:	bf00      	nop
 800ce18:	e000      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ce1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ce24:	4b8e      	ldr	r3, [pc, #568]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ce2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ce34:	4a8a      	ldr	r2, [pc, #552]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce36:	430b      	orrs	r3, r1
 800ce38:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce3a:	e003      	b.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ce44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ce50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce54:	2300      	movs	r3, #0
 800ce56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ce5e:	460b      	mov	r3, r1
 800ce60:	4313      	orrs	r3, r2
 800ce62:	d03a      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ce64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce6a:	2b30      	cmp	r3, #48	@ 0x30
 800ce6c:	d01f      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ce6e:	2b30      	cmp	r3, #48	@ 0x30
 800ce70:	d819      	bhi.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ce72:	2b20      	cmp	r3, #32
 800ce74:	d00c      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ce76:	2b20      	cmp	r3, #32
 800ce78:	d815      	bhi.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d019      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ce7e:	2b10      	cmp	r3, #16
 800ce80:	d111      	bne.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce82:	4b77      	ldr	r3, [pc, #476]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce86:	4a76      	ldr	r2, [pc, #472]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ce8e:	e011      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce94:	3308      	adds	r3, #8
 800ce96:	2102      	movs	r1, #2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f001 fac5 	bl	800e428 <RCCEx_PLL2_Config>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cea4:	e006      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ceac:	e002      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ceae:	bf00      	nop
 800ceb0:	e000      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ceb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cebc:	4b68      	ldr	r3, [pc, #416]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cec0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800cec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ceca:	4a65      	ldr	r2, [pc, #404]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cecc:	430b      	orrs	r3, r1
 800cece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ced0:	e003      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ced2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ced6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ceda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800cee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cef0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800cef4:	460b      	mov	r3, r1
 800cef6:	4313      	orrs	r3, r2
 800cef8:	d051      	beq.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cefe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf04:	d035      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cf06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf0a:	d82e      	bhi.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf10:	d031      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cf12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf16:	d828      	bhi.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf1c:	d01a      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cf1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf22:	d822      	bhi.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d003      	beq.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cf28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf2c:	d007      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cf2e:	e01c      	b.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf30:	4b4b      	ldr	r3, [pc, #300]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf34:	4a4a      	ldr	r2, [pc, #296]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cf3c:	e01c      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf42:	3308      	adds	r3, #8
 800cf44:	2100      	movs	r1, #0
 800cf46:	4618      	mov	r0, r3
 800cf48:	f001 fa6e 	bl	800e428 <RCCEx_PLL2_Config>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cf52:	e011      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf58:	3328      	adds	r3, #40	@ 0x28
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 fb15 	bl	800e58c <RCCEx_PLL3_Config>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cf68:	e006      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf70:	e002      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cf72:	bf00      	nop
 800cf74:	e000      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cf76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cf80:	4b37      	ldr	r3, [pc, #220]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800cf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf8e:	4a34      	ldr	r2, [pc, #208]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf90:	430b      	orrs	r3, r1
 800cf92:	6513      	str	r3, [r2, #80]	@ 0x50
 800cf94:	e003      	b.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cf9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800cfaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cfb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800cfb8:	460b      	mov	r3, r1
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	d056      	beq.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfc8:	d033      	beq.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cfca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfce:	d82c      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cfd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfd4:	d02f      	beq.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cfd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfda:	d826      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cfdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cfe0:	d02b      	beq.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cfe2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cfe6:	d820      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cfe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfec:	d012      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cfee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cff2:	d81a      	bhi.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d022      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cffc:	d115      	bne.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d002:	3308      	adds	r3, #8
 800d004:	2101      	movs	r1, #1
 800d006:	4618      	mov	r0, r3
 800d008:	f001 fa0e 	bl	800e428 <RCCEx_PLL2_Config>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d012:	e015      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d018:	3328      	adds	r3, #40	@ 0x28
 800d01a:	2101      	movs	r1, #1
 800d01c:	4618      	mov	r0, r3
 800d01e:	f001 fab5 	bl	800e58c <RCCEx_PLL3_Config>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d028:	e00a      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d030:	e006      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d032:	bf00      	nop
 800d034:	e004      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d036:	bf00      	nop
 800d038:	e002      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d03a:	bf00      	nop
 800d03c:	e000      	b.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d03e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10d      	bne.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d048:	4b05      	ldr	r3, [pc, #20]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d04a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d04c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d056:	4a02      	ldr	r2, [pc, #8]	@ (800d060 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d058:	430b      	orrs	r3, r1
 800d05a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d05c:	e006      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d05e:	bf00      	nop
 800d060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d07c:	2300      	movs	r3, #0
 800d07e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d082:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d086:	460b      	mov	r3, r1
 800d088:	4313      	orrs	r3, r2
 800d08a:	d055      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d098:	d033      	beq.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d09a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d09e:	d82c      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0a4:	d02f      	beq.n	800d106 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0aa:	d826      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d0ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0b0:	d02b      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d0b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0b6:	d820      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d0b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0bc:	d012      	beq.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0c2:	d81a      	bhi.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d022      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d0c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0cc:	d115      	bne.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0d2:	3308      	adds	r3, #8
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f001 f9a6 	bl	800e428 <RCCEx_PLL2_Config>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d0e2:	e015      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0e8:	3328      	adds	r3, #40	@ 0x28
 800d0ea:	2101      	movs	r1, #1
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f001 fa4d 	bl	800e58c <RCCEx_PLL3_Config>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d0f8:	e00a      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d100:	e006      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d102:	bf00      	nop
 800d104:	e004      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d106:	bf00      	nop
 800d108:	e002      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d10a:	bf00      	nop
 800d10c:	e000      	b.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10b      	bne.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d118:	4ba3      	ldr	r3, [pc, #652]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d11a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d11c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d128:	4a9f      	ldr	r2, [pc, #636]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d12a:	430b      	orrs	r3, r1
 800d12c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d12e:	e003      	b.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d148:	2300      	movs	r3, #0
 800d14a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d14e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d152:	460b      	mov	r3, r1
 800d154:	4313      	orrs	r3, r2
 800d156:	d037      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d15e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d162:	d00e      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d168:	d816      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d018      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d16e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d172:	d111      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d174:	4b8c      	ldr	r3, [pc, #560]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d178:	4a8b      	ldr	r2, [pc, #556]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d180:	e00f      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d186:	3308      	adds	r3, #8
 800d188:	2101      	movs	r1, #1
 800d18a:	4618      	mov	r0, r3
 800d18c:	f001 f94c 	bl	800e428 <RCCEx_PLL2_Config>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d196:	e004      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d19e:	e000      	b.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d1a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d1aa:	4b7f      	ldr	r3, [pc, #508]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1b8:	4a7b      	ldr	r2, [pc, #492]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1ba:	430b      	orrs	r3, r1
 800d1bc:	6513      	str	r3, [r2, #80]	@ 0x50
 800d1be:	e003      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d1d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d1de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	d039      	beq.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1ee:	2b03      	cmp	r3, #3
 800d1f0:	d81c      	bhi.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d1f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f8:	0800d235 	.word	0x0800d235
 800d1fc:	0800d209 	.word	0x0800d209
 800d200:	0800d217 	.word	0x0800d217
 800d204:	0800d235 	.word	0x0800d235
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d208:	4b67      	ldr	r3, [pc, #412]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20c:	4a66      	ldr	r2, [pc, #408]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d20e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d214:	e00f      	b.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d21a:	3308      	adds	r3, #8
 800d21c:	2102      	movs	r1, #2
 800d21e:	4618      	mov	r0, r3
 800d220:	f001 f902 	bl	800e428 <RCCEx_PLL2_Config>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d22a:	e004      	b.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d232:	e000      	b.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d234:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d23e:	4b5a      	ldr	r3, [pc, #360]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d242:	f023 0103 	bic.w	r1, r3, #3
 800d246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d24a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d24c:	4a56      	ldr	r2, [pc, #344]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d24e:	430b      	orrs	r3, r1
 800d250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d252:	e003      	b.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d26c:	2300      	movs	r3, #0
 800d26e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d272:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d276:	460b      	mov	r3, r1
 800d278:	4313      	orrs	r3, r2
 800d27a:	f000 809f 	beq.w	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d27e:	4b4b      	ldr	r3, [pc, #300]	@ (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a4a      	ldr	r2, [pc, #296]	@ (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d288:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d28a:	f7f9 fc73 	bl	8006b74 <HAL_GetTick>
 800d28e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d292:	e00b      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d294:	f7f9 fc6e 	bl	8006b74 <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	2b64      	cmp	r3, #100	@ 0x64
 800d2a2:	d903      	bls.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2aa:	e005      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d2ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0ed      	beq.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d2b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d179      	bne.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d2c0:	4b39      	ldr	r3, [pc, #228]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d2cc:	4053      	eors	r3, r2
 800d2ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d015      	beq.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d2d6:	4b34      	ldr	r3, [pc, #208]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d2e2:	4b31      	ldr	r3, [pc, #196]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2e6:	4a30      	ldr	r2, [pc, #192]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d2ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2f2:	4a2d      	ldr	r2, [pc, #180]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d2fa:	4a2b      	ldr	r2, [pc, #172]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d300:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d30a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d30e:	d118      	bne.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d310:	f7f9 fc30 	bl	8006b74 <HAL_GetTick>
 800d314:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d318:	e00d      	b.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d31a:	f7f9 fc2b 	bl	8006b74 <HAL_GetTick>
 800d31e:	4602      	mov	r2, r0
 800d320:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d324:	1ad2      	subs	r2, r2, r3
 800d326:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d903      	bls.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d32e:	2303      	movs	r3, #3
 800d330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d334:	e005      	b.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d336:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d0eb      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d346:	2b00      	cmp	r3, #0
 800d348:	d129      	bne.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d34e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d35a:	d10e      	bne.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d35c:	4b12      	ldr	r3, [pc, #72]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d36c:	091a      	lsrs	r2, r3, #4
 800d36e:	4b10      	ldr	r3, [pc, #64]	@ (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d370:	4013      	ands	r3, r2
 800d372:	4a0d      	ldr	r2, [pc, #52]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d374:	430b      	orrs	r3, r1
 800d376:	6113      	str	r3, [r2, #16]
 800d378:	e005      	b.n	800d386 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d37a:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	4a0a      	ldr	r2, [pc, #40]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d380:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d384:	6113      	str	r3, [r2, #16]
 800d386:	4b08      	ldr	r3, [pc, #32]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d388:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d38e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d396:	4a04      	ldr	r2, [pc, #16]	@ (800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d398:	430b      	orrs	r3, r1
 800d39a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d39c:	e00e      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d39e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d3a6:	e009      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d3a8:	58024400 	.word	0x58024400
 800d3ac:	58024800 	.word	0x58024800
 800d3b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f002 0301 	and.w	r3, r2, #1
 800d3c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	f000 8089 	beq.w	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3e4:	2b28      	cmp	r3, #40	@ 0x28
 800d3e6:	d86b      	bhi.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ee:	bf00      	nop
 800d3f0:	0800d4c9 	.word	0x0800d4c9
 800d3f4:	0800d4c1 	.word	0x0800d4c1
 800d3f8:	0800d4c1 	.word	0x0800d4c1
 800d3fc:	0800d4c1 	.word	0x0800d4c1
 800d400:	0800d4c1 	.word	0x0800d4c1
 800d404:	0800d4c1 	.word	0x0800d4c1
 800d408:	0800d4c1 	.word	0x0800d4c1
 800d40c:	0800d4c1 	.word	0x0800d4c1
 800d410:	0800d495 	.word	0x0800d495
 800d414:	0800d4c1 	.word	0x0800d4c1
 800d418:	0800d4c1 	.word	0x0800d4c1
 800d41c:	0800d4c1 	.word	0x0800d4c1
 800d420:	0800d4c1 	.word	0x0800d4c1
 800d424:	0800d4c1 	.word	0x0800d4c1
 800d428:	0800d4c1 	.word	0x0800d4c1
 800d42c:	0800d4c1 	.word	0x0800d4c1
 800d430:	0800d4ab 	.word	0x0800d4ab
 800d434:	0800d4c1 	.word	0x0800d4c1
 800d438:	0800d4c1 	.word	0x0800d4c1
 800d43c:	0800d4c1 	.word	0x0800d4c1
 800d440:	0800d4c1 	.word	0x0800d4c1
 800d444:	0800d4c1 	.word	0x0800d4c1
 800d448:	0800d4c1 	.word	0x0800d4c1
 800d44c:	0800d4c1 	.word	0x0800d4c1
 800d450:	0800d4c9 	.word	0x0800d4c9
 800d454:	0800d4c1 	.word	0x0800d4c1
 800d458:	0800d4c1 	.word	0x0800d4c1
 800d45c:	0800d4c1 	.word	0x0800d4c1
 800d460:	0800d4c1 	.word	0x0800d4c1
 800d464:	0800d4c1 	.word	0x0800d4c1
 800d468:	0800d4c1 	.word	0x0800d4c1
 800d46c:	0800d4c1 	.word	0x0800d4c1
 800d470:	0800d4c9 	.word	0x0800d4c9
 800d474:	0800d4c1 	.word	0x0800d4c1
 800d478:	0800d4c1 	.word	0x0800d4c1
 800d47c:	0800d4c1 	.word	0x0800d4c1
 800d480:	0800d4c1 	.word	0x0800d4c1
 800d484:	0800d4c1 	.word	0x0800d4c1
 800d488:	0800d4c1 	.word	0x0800d4c1
 800d48c:	0800d4c1 	.word	0x0800d4c1
 800d490:	0800d4c9 	.word	0x0800d4c9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d498:	3308      	adds	r3, #8
 800d49a:	2101      	movs	r1, #1
 800d49c:	4618      	mov	r0, r3
 800d49e:	f000 ffc3 	bl	800e428 <RCCEx_PLL2_Config>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d4a8:	e00f      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ae:	3328      	adds	r3, #40	@ 0x28
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f001 f86a 	bl	800e58c <RCCEx_PLL3_Config>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d4be:	e004      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4c6:	e000      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d4c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d4d2:	4bbf      	ldr	r3, [pc, #764]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d4e0:	4abb      	ldr	r2, [pc, #748]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d4e2:	430b      	orrs	r3, r1
 800d4e4:	6553      	str	r3, [r2, #84]	@ 0x54
 800d4e6:	e003      	b.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f002 0302 	and.w	r3, r2, #2
 800d4fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d500:	2300      	movs	r3, #0
 800d502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d506:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d50a:	460b      	mov	r3, r1
 800d50c:	4313      	orrs	r3, r2
 800d50e:	d041      	beq.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d516:	2b05      	cmp	r3, #5
 800d518:	d824      	bhi.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d51a:	a201      	add	r2, pc, #4	@ (adr r2, 800d520 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d56d 	.word	0x0800d56d
 800d524:	0800d539 	.word	0x0800d539
 800d528:	0800d54f 	.word	0x0800d54f
 800d52c:	0800d56d 	.word	0x0800d56d
 800d530:	0800d56d 	.word	0x0800d56d
 800d534:	0800d56d 	.word	0x0800d56d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d53c:	3308      	adds	r3, #8
 800d53e:	2101      	movs	r1, #1
 800d540:	4618      	mov	r0, r3
 800d542:	f000 ff71 	bl	800e428 <RCCEx_PLL2_Config>
 800d546:	4603      	mov	r3, r0
 800d548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d54c:	e00f      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d552:	3328      	adds	r3, #40	@ 0x28
 800d554:	2101      	movs	r1, #1
 800d556:	4618      	mov	r0, r3
 800d558:	f001 f818 	bl	800e58c <RCCEx_PLL3_Config>
 800d55c:	4603      	mov	r3, r0
 800d55e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d562:	e004      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d56a:	e000      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d56c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10a      	bne.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d576:	4b96      	ldr	r3, [pc, #600]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d57a:	f023 0107 	bic.w	r1, r3, #7
 800d57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d584:	4a92      	ldr	r2, [pc, #584]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d586:	430b      	orrs	r3, r1
 800d588:	6553      	str	r3, [r2, #84]	@ 0x54
 800d58a:	e003      	b.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d58c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f002 0304 	and.w	r3, r2, #4
 800d5a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d5aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	d044      	beq.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d5bc:	2b05      	cmp	r3, #5
 800d5be:	d825      	bhi.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c6:	bf00      	nop
 800d5c8:	0800d615 	.word	0x0800d615
 800d5cc:	0800d5e1 	.word	0x0800d5e1
 800d5d0:	0800d5f7 	.word	0x0800d5f7
 800d5d4:	0800d615 	.word	0x0800d615
 800d5d8:	0800d615 	.word	0x0800d615
 800d5dc:	0800d615 	.word	0x0800d615
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 ff1d 	bl	800e428 <RCCEx_PLL2_Config>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d5f4:	e00f      	b.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5fa:	3328      	adds	r3, #40	@ 0x28
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 ffc4 	bl	800e58c <RCCEx_PLL3_Config>
 800d604:	4603      	mov	r3, r0
 800d606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d60a:	e004      	b.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d612:	e000      	b.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10b      	bne.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d61e:	4b6c      	ldr	r3, [pc, #432]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d622:	f023 0107 	bic.w	r1, r3, #7
 800d626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d62a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d62e:	4a68      	ldr	r2, [pc, #416]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d630:	430b      	orrs	r3, r1
 800d632:	6593      	str	r3, [r2, #88]	@ 0x58
 800d634:	e003      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d63a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f002 0320 	and.w	r3, r2, #32
 800d64a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d64e:	2300      	movs	r3, #0
 800d650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d658:	460b      	mov	r3, r1
 800d65a:	4313      	orrs	r3, r2
 800d65c:	d055      	beq.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d66a:	d033      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d66c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d670:	d82c      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d676:	d02f      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d67c:	d826      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d67e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d682:	d02b      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d688:	d820      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d68e:	d012      	beq.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d694:	d81a      	bhi.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d696:	2b00      	cmp	r3, #0
 800d698:	d022      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d69a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d69e:	d115      	bne.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 febd 	bl	800e428 <RCCEx_PLL2_Config>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d6b4:	e015      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ba:	3328      	adds	r3, #40	@ 0x28
 800d6bc:	2102      	movs	r1, #2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 ff64 	bl	800e58c <RCCEx_PLL3_Config>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d6ca:	e00a      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d6d2:	e006      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d6d4:	bf00      	nop
 800d6d6:	e004      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d6d8:	bf00      	nop
 800d6da:	e002      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d6dc:	bf00      	nop
 800d6de:	e000      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d6ea:	4b39      	ldr	r3, [pc, #228]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6fa:	4a35      	ldr	r2, [pc, #212]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800d700:	e003      	b.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d71a:	2300      	movs	r3, #0
 800d71c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d720:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d724:	460b      	mov	r3, r1
 800d726:	4313      	orrs	r3, r2
 800d728:	d058      	beq.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d732:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d736:	d033      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d738:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d73c:	d82c      	bhi.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d73e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d742:	d02f      	beq.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d748:	d826      	bhi.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d74a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d74e:	d02b      	beq.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d754:	d820      	bhi.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d75a:	d012      	beq.n	800d782 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d75c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d760:	d81a      	bhi.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d022      	beq.n	800d7ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d76a:	d115      	bne.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d770:	3308      	adds	r3, #8
 800d772:	2100      	movs	r1, #0
 800d774:	4618      	mov	r0, r3
 800d776:	f000 fe57 	bl	800e428 <RCCEx_PLL2_Config>
 800d77a:	4603      	mov	r3, r0
 800d77c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d780:	e015      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d786:	3328      	adds	r3, #40	@ 0x28
 800d788:	2102      	movs	r1, #2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 fefe 	bl	800e58c <RCCEx_PLL3_Config>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d796:	e00a      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d798:	2301      	movs	r3, #1
 800d79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d79e:	e006      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d7a0:	bf00      	nop
 800d7a2:	e004      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d7a4:	bf00      	nop
 800d7a6:	e002      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d7a8:	bf00      	nop
 800d7aa:	e000      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10e      	bne.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d7b6:	4b06      	ldr	r3, [pc, #24]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d7c6:	4a02      	ldr	r2, [pc, #8]	@ (800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800d7cc:	e006      	b.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d7ce:	bf00      	nop
 800d7d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d7e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d7f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	d055      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d804:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d808:	d033      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d80a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d80e:	d82c      	bhi.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d814:	d02f      	beq.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d81a:	d826      	bhi.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d81c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d820:	d02b      	beq.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d822:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d826:	d820      	bhi.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d82c:	d012      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d82e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d832:	d81a      	bhi.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d834:	2b00      	cmp	r3, #0
 800d836:	d022      	beq.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d83c:	d115      	bne.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d842:	3308      	adds	r3, #8
 800d844:	2100      	movs	r1, #0
 800d846:	4618      	mov	r0, r3
 800d848:	f000 fdee 	bl	800e428 <RCCEx_PLL2_Config>
 800d84c:	4603      	mov	r3, r0
 800d84e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d852:	e015      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d858:	3328      	adds	r3, #40	@ 0x28
 800d85a:	2102      	movs	r1, #2
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fe95 	bl	800e58c <RCCEx_PLL3_Config>
 800d862:	4603      	mov	r3, r0
 800d864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d868:	e00a      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d870:	e006      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d872:	bf00      	nop
 800d874:	e004      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d876:	bf00      	nop
 800d878:	e002      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d87a:	bf00      	nop
 800d87c:	e000      	b.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d87e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10b      	bne.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d888:	4ba1      	ldr	r3, [pc, #644]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d88a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d88c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d898:	4a9d      	ldr	r2, [pc, #628]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d89a:	430b      	orrs	r3, r1
 800d89c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d89e:	e003      	b.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f002 0308 	and.w	r3, r2, #8
 800d8b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d8be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	d01e      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8d4:	d10c      	bne.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8da:	3328      	adds	r3, #40	@ 0x28
 800d8dc:	2102      	movs	r1, #2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 fe54 	bl	800e58c <RCCEx_PLL3_Config>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d002      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d8f0:	4b87      	ldr	r3, [pc, #540]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d900:	4a83      	ldr	r2, [pc, #524]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d902:	430b      	orrs	r3, r1
 800d904:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90e:	f002 0310 	and.w	r3, r2, #16
 800d912:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d916:	2300      	movs	r3, #0
 800d918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d91c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d920:	460b      	mov	r3, r1
 800d922:	4313      	orrs	r3, r2
 800d924:	d01e      	beq.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d92a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d92e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d932:	d10c      	bne.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d938:	3328      	adds	r3, #40	@ 0x28
 800d93a:	2102      	movs	r1, #2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fe25 	bl	800e58c <RCCEx_PLL3_Config>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d948:	2301      	movs	r3, #1
 800d94a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d94e:	4b70      	ldr	r3, [pc, #448]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d95a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d95e:	4a6c      	ldr	r2, [pc, #432]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d960:	430b      	orrs	r3, r1
 800d962:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d970:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d974:	2300      	movs	r3, #0
 800d976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d97a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d97e:	460b      	mov	r3, r1
 800d980:	4313      	orrs	r3, r2
 800d982:	d03e      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d98c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d990:	d022      	beq.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d996:	d81b      	bhi.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a0:	d00b      	beq.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d9a2:	e015      	b.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fd3b 	bl	800e428 <RCCEx_PLL2_Config>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d9b8:	e00f      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9be:	3328      	adds	r3, #40	@ 0x28
 800d9c0:	2102      	movs	r1, #2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 fde2 	bl	800e58c <RCCEx_PLL3_Config>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d9ce:	e004      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9d6:	e000      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d9d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10b      	bne.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d9e2:	4b4b      	ldr	r3, [pc, #300]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9f2:	4a47      	ldr	r2, [pc, #284]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9f4:	430b      	orrs	r3, r1
 800d9f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9f8:	e003      	b.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800da02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800da0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da10:	2300      	movs	r3, #0
 800da12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800da18:	460b      	mov	r3, r1
 800da1a:	4313      	orrs	r3, r2
 800da1c:	d03b      	beq.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da2a:	d01f      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800da2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800da30:	d818      	bhi.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800da32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da36:	d003      	beq.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800da38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800da3c:	d007      	beq.n	800da4e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800da3e:	e011      	b.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da40:	4b33      	ldr	r3, [pc, #204]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da44:	4a32      	ldr	r2, [pc, #200]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800da4c:	e00f      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da52:	3328      	adds	r3, #40	@ 0x28
 800da54:	2101      	movs	r1, #1
 800da56:	4618      	mov	r0, r3
 800da58:	f000 fd98 	bl	800e58c <RCCEx_PLL3_Config>
 800da5c:	4603      	mov	r3, r0
 800da5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800da62:	e004      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da6a:	e000      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800da6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10b      	bne.n	800da8e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800da76:	4b26      	ldr	r3, [pc, #152]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800da7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da86:	4a22      	ldr	r2, [pc, #136]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da88:	430b      	orrs	r3, r1
 800da8a:	6553      	str	r3, [r2, #84]	@ 0x54
 800da8c:	e003      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800da96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800daa2:	673b      	str	r3, [r7, #112]	@ 0x70
 800daa4:	2300      	movs	r3, #0
 800daa6:	677b      	str	r3, [r7, #116]	@ 0x74
 800daa8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800daac:	460b      	mov	r3, r1
 800daae:	4313      	orrs	r3, r2
 800dab0:	d034      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d003      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dabc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dac0:	d007      	beq.n	800dad2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dac2:	e011      	b.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dac4:	4b12      	ldr	r3, [pc, #72]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac8:	4a11      	ldr	r2, [pc, #68]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800daca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dad0:	e00e      	b.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dad6:	3308      	adds	r3, #8
 800dad8:	2102      	movs	r1, #2
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 fca4 	bl	800e428 <RCCEx_PLL2_Config>
 800dae0:	4603      	mov	r3, r0
 800dae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dae6:	e003      	b.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800daee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800daf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10d      	bne.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800daf8:	4b05      	ldr	r3, [pc, #20]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dafc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db06:	4a02      	ldr	r2, [pc, #8]	@ (800db10 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db08:	430b      	orrs	r3, r1
 800db0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db0c:	e006      	b.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800db0e:	bf00      	nop
 800db10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800db1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800db28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db2a:	2300      	movs	r3, #0
 800db2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800db32:	460b      	mov	r3, r1
 800db34:	4313      	orrs	r3, r2
 800db36:	d00c      	beq.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800db38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db3c:	3328      	adds	r3, #40	@ 0x28
 800db3e:	2102      	movs	r1, #2
 800db40:	4618      	mov	r0, r3
 800db42:	f000 fd23 	bl	800e58c <RCCEx_PLL3_Config>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800db52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800db5e:	663b      	str	r3, [r7, #96]	@ 0x60
 800db60:	2300      	movs	r3, #0
 800db62:	667b      	str	r3, [r7, #100]	@ 0x64
 800db64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800db68:	460b      	mov	r3, r1
 800db6a:	4313      	orrs	r3, r2
 800db6c:	d038      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800db6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db7a:	d018      	beq.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800db7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db80:	d811      	bhi.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800db82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db86:	d014      	beq.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800db88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db8c:	d80b      	bhi.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d011      	beq.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800db92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db96:	d106      	bne.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db98:	4bc3      	ldr	r3, [pc, #780]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db9c:	4ac2      	ldr	r2, [pc, #776]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dba4:	e008      	b.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbac:	e004      	b.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dbae:	bf00      	nop
 800dbb0:	e002      	b.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dbb2:	bf00      	nop
 800dbb4:	e000      	b.n	800dbb8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dbb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10b      	bne.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dbc0:	4bb9      	ldr	r3, [pc, #740]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbd0:	4ab5      	ldr	r2, [pc, #724]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbd2:	430b      	orrs	r3, r1
 800dbd4:	6553      	str	r3, [r2, #84]	@ 0x54
 800dbd6:	e003      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dbec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dbee:	2300      	movs	r3, #0
 800dbf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbf2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	d009      	beq.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dbfc:	4baa      	ldr	r3, [pc, #680]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc0a:	4aa7      	ldr	r2, [pc, #668]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc0c:	430b      	orrs	r3, r1
 800dc0e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800dc1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc1e:	2300      	movs	r3, #0
 800dc20:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dc26:	460b      	mov	r3, r1
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	d00a      	beq.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dc2c:	4b9e      	ldr	r3, [pc, #632]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dc3c:	4a9a      	ldr	r2, [pc, #616]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc3e:	430b      	orrs	r3, r1
 800dc40:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dc4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc50:	2300      	movs	r3, #0
 800dc52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc54:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800dc58:	460b      	mov	r3, r1
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	d009      	beq.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dc5e:	4b92      	ldr	r3, [pc, #584]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc62:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800dc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc6c:	4a8e      	ldr	r2, [pc, #568]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc6e:	430b      	orrs	r3, r1
 800dc70:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800dc7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc80:	2300      	movs	r3, #0
 800dc82:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc84:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	d00e      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dc8e:	4b86      	ldr	r3, [pc, #536]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	4a85      	ldr	r2, [pc, #532]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dc98:	6113      	str	r3, [r2, #16]
 800dc9a:	4b83      	ldr	r3, [pc, #524]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dc9c:	6919      	ldr	r1, [r3, #16]
 800dc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dca2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dca6:	4a80      	ldr	r2, [pc, #512]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dca8:	430b      	orrs	r3, r1
 800dcaa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800dcb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcba:	2300      	movs	r3, #0
 800dcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	d009      	beq.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dcc8:	4b77      	ldr	r3, [pc, #476]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dccc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dcd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcd6:	4a74      	ldr	r2, [pc, #464]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800dce8:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcea:	2300      	movs	r3, #0
 800dcec:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	d00a      	beq.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dcf8:	4b6b      	ldr	r3, [pc, #428]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcfc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800dd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd08:	4a67      	ldr	r2, [pc, #412]	@ (800dea8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	2100      	movs	r1, #0
 800dd18:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800dd24:	460b      	mov	r3, r1
 800dd26:	4313      	orrs	r3, r2
 800dd28:	d011      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd2e:	3308      	adds	r3, #8
 800dd30:	2100      	movs	r1, #0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 fb78 	bl	800e428 <RCCEx_PLL2_Config>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dd3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	2100      	movs	r1, #0
 800dd58:	6239      	str	r1, [r7, #32]
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dd64:	460b      	mov	r3, r1
 800dd66:	4313      	orrs	r3, r2
 800dd68:	d011      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd6e:	3308      	adds	r3, #8
 800dd70:	2101      	movs	r1, #1
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 fb58 	bl	800e428 <RCCEx_PLL2_Config>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d003      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	2100      	movs	r1, #0
 800dd98:	61b9      	str	r1, [r7, #24]
 800dd9a:	f003 0304 	and.w	r3, r3, #4
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dda4:	460b      	mov	r3, r1
 800dda6:	4313      	orrs	r3, r2
 800dda8:	d011      	beq.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ddaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddae:	3308      	adds	r3, #8
 800ddb0:	2102      	movs	r1, #2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fb38 	bl	800e428 <RCCEx_PLL2_Config>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ddbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ddce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	6139      	str	r1, [r7, #16]
 800ddda:	f003 0308 	and.w	r3, r3, #8
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dde4:	460b      	mov	r3, r1
 800dde6:	4313      	orrs	r3, r2
 800dde8:	d011      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddee:	3328      	adds	r3, #40	@ 0x28
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 fbca 	bl	800e58c <RCCEx_PLL3_Config>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ddfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800de0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	2100      	movs	r1, #0
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	f003 0310 	and.w	r3, r3, #16
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800de24:	460b      	mov	r3, r1
 800de26:	4313      	orrs	r3, r2
 800de28:	d011      	beq.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de2e:	3328      	adds	r3, #40	@ 0x28
 800de30:	2101      	movs	r1, #1
 800de32:	4618      	mov	r0, r3
 800de34:	f000 fbaa 	bl	800e58c <RCCEx_PLL3_Config>
 800de38:	4603      	mov	r3, r0
 800de3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800de3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800de4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	2100      	movs	r1, #0
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	f003 0320 	and.w	r3, r3, #32
 800de5e:	607b      	str	r3, [r7, #4]
 800de60:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de64:	460b      	mov	r3, r1
 800de66:	4313      	orrs	r3, r2
 800de68:	d011      	beq.n	800de8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de6e:	3328      	adds	r3, #40	@ 0x28
 800de70:	2102      	movs	r1, #2
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fb8a 	bl	800e58c <RCCEx_PLL3_Config>
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800de7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800de8e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800de92:	2b00      	cmp	r3, #0
 800de94:	d101      	bne.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	e000      	b.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800dea2:	46bd      	mov	sp, r7
 800dea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dea8:	58024400 	.word	0x58024400

0800deac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800deb0:	f7fe fd54 	bl	800c95c <HAL_RCC_GetHCLKFreq>
 800deb4:	4602      	mov	r2, r0
 800deb6:	4b06      	ldr	r3, [pc, #24]	@ (800ded0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	091b      	lsrs	r3, r3, #4
 800debc:	f003 0307 	and.w	r3, r3, #7
 800dec0:	4904      	ldr	r1, [pc, #16]	@ (800ded4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dec2:	5ccb      	ldrb	r3, [r1, r3]
 800dec4:	f003 031f 	and.w	r3, r3, #31
 800dec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800decc:	4618      	mov	r0, r3
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	58024400 	.word	0x58024400
 800ded4:	0802cf40 	.word	0x0802cf40

0800ded8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ded8:	b480      	push	{r7}
 800deda:	b089      	sub	sp, #36	@ 0x24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dee0:	4ba1      	ldr	r3, [pc, #644]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dee4:	f003 0303 	and.w	r3, r3, #3
 800dee8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800deea:	4b9f      	ldr	r3, [pc, #636]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800deec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deee:	0b1b      	lsrs	r3, r3, #12
 800def0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800def4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800def6:	4b9c      	ldr	r3, [pc, #624]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800def8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defa:	091b      	lsrs	r3, r3, #4
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800df02:	4b99      	ldr	r3, [pc, #612]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df06:	08db      	lsrs	r3, r3, #3
 800df08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	fb02 f303 	mul.w	r3, r2, r3
 800df12:	ee07 3a90 	vmov	s15, r3
 800df16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 8111 	beq.w	800e148 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	2b02      	cmp	r3, #2
 800df2a:	f000 8083 	beq.w	800e034 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	2b02      	cmp	r3, #2
 800df32:	f200 80a1 	bhi.w	800e078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d056      	beq.n	800dff0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800df42:	e099      	b.n	800e078 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df44:	4b88      	ldr	r3, [pc, #544]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f003 0320 	and.w	r3, r3, #32
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d02d      	beq.n	800dfac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df50:	4b85      	ldr	r3, [pc, #532]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	08db      	lsrs	r3, r3, #3
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	4a84      	ldr	r2, [pc, #528]	@ (800e16c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800df5c:	fa22 f303 	lsr.w	r3, r2, r3
 800df60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	ee07 3a90 	vmov	s15, r3
 800df68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	ee07 3a90 	vmov	s15, r3
 800df72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df7a:	4b7b      	ldr	r3, [pc, #492]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df82:	ee07 3a90 	vmov	s15, r3
 800df86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800df8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dfaa:	e087      	b.n	800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	ee07 3a90 	vmov	s15, r3
 800dfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e174 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800dfba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfbe:	4b6a      	ldr	r3, [pc, #424]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc6:	ee07 3a90 	vmov	s15, r3
 800dfca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfce:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfee:	e065      	b.n	800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	ee07 3a90 	vmov	s15, r3
 800dff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dffa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e002:	4b59      	ldr	r3, [pc, #356]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e012:	ed97 6a03 	vldr	s12, [r7, #12]
 800e016:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e02e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e032:	e043      	b.n	800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	ee07 3a90 	vmov	s15, r3
 800e03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e03e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e17c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e046:	4b48      	ldr	r3, [pc, #288]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e04e:	ee07 3a90 	vmov	s15, r3
 800e052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e056:	ed97 6a03 	vldr	s12, [r7, #12]
 800e05a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e076:	e021      	b.n	800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e082:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e08a:	4b37      	ldr	r3, [pc, #220]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e092:	ee07 3a90 	vmov	s15, r3
 800e096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e09e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e170 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e0bc:	4b2a      	ldr	r3, [pc, #168]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c0:	0a5b      	lsrs	r3, r3, #9
 800e0c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0c6:	ee07 3a90 	vmov	s15, r3
 800e0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0e2:	ee17 2a90 	vmov	r2, s15
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e0ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ee:	0c1b      	lsrs	r3, r3, #16
 800e0f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0f4:	ee07 3a90 	vmov	s15, r3
 800e0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e100:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e104:	edd7 6a07 	vldr	s13, [r7, #28]
 800e108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e10c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e110:	ee17 2a90 	vmov	r2, s15
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e118:	4b13      	ldr	r3, [pc, #76]	@ (800e168 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e11c:	0e1b      	lsrs	r3, r3, #24
 800e11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e122:	ee07 3a90 	vmov	s15, r3
 800e126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e132:	edd7 6a07 	vldr	s13, [r7, #28]
 800e136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e13e:	ee17 2a90 	vmov	r2, s15
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e146:	e008      	b.n	800e15a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	609a      	str	r2, [r3, #8]
}
 800e15a:	bf00      	nop
 800e15c:	3724      	adds	r7, #36	@ 0x24
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	58024400 	.word	0x58024400
 800e16c:	03d09000 	.word	0x03d09000
 800e170:	46000000 	.word	0x46000000
 800e174:	4c742400 	.word	0x4c742400
 800e178:	4a742400 	.word	0x4a742400
 800e17c:	4bbebc20 	.word	0x4bbebc20

0800e180 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e180:	b480      	push	{r7}
 800e182:	b089      	sub	sp, #36	@ 0x24
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e188:	4ba1      	ldr	r3, [pc, #644]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18c:	f003 0303 	and.w	r3, r3, #3
 800e190:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e192:	4b9f      	ldr	r3, [pc, #636]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e196:	0d1b      	lsrs	r3, r3, #20
 800e198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e19c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e19e:	4b9c      	ldr	r3, [pc, #624]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a2:	0a1b      	lsrs	r3, r3, #8
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e1aa:	4b99      	ldr	r3, [pc, #612]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ae:	08db      	lsrs	r3, r3, #3
 800e1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	fb02 f303 	mul.w	r3, r2, r3
 800e1ba:	ee07 3a90 	vmov	s15, r3
 800e1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f000 8111 	beq.w	800e3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	f000 8083 	beq.w	800e2dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	f200 80a1 	bhi.w	800e320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d003      	beq.n	800e1ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d056      	beq.n	800e298 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e1ea:	e099      	b.n	800e320 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ec:	4b88      	ldr	r3, [pc, #544]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 0320 	and.w	r3, r3, #32
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02d      	beq.n	800e254 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1f8:	4b85      	ldr	r3, [pc, #532]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	08db      	lsrs	r3, r3, #3
 800e1fe:	f003 0303 	and.w	r3, r3, #3
 800e202:	4a84      	ldr	r2, [pc, #528]	@ (800e414 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e204:	fa22 f303 	lsr.w	r3, r2, r3
 800e208:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	ee07 3a90 	vmov	s15, r3
 800e210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e222:	4b7b      	ldr	r3, [pc, #492]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e232:	ed97 6a03 	vldr	s12, [r7, #12]
 800e236:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e252:	e087      	b.n	800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e41c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e266:	4b6a      	ldr	r3, [pc, #424]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26e:	ee07 3a90 	vmov	s15, r3
 800e272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e276:	ed97 6a03 	vldr	s12, [r7, #12]
 800e27a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e296:	e065      	b.n	800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	ee07 3a90 	vmov	s15, r3
 800e29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2aa:	4b59      	ldr	r3, [pc, #356]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2da:	e043      	b.n	800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	ee07 3a90 	vmov	s15, r3
 800e2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e424 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ee:	4b48      	ldr	r3, [pc, #288]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f6:	ee07 3a90 	vmov	s15, r3
 800e2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e302:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e31e:	e021      	b.n	800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	ee07 3a90 	vmov	s15, r3
 800e326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e32a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e332:	4b37      	ldr	r3, [pc, #220]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e33a:	ee07 3a90 	vmov	s15, r3
 800e33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e342:	ed97 6a03 	vldr	s12, [r7, #12]
 800e346:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e418 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e362:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e364:	4b2a      	ldr	r3, [pc, #168]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e368:	0a5b      	lsrs	r3, r3, #9
 800e36a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e36e:	ee07 3a90 	vmov	s15, r3
 800e372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e37e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e38a:	ee17 2a90 	vmov	r2, s15
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e392:	4b1f      	ldr	r3, [pc, #124]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e396:	0c1b      	lsrs	r3, r3, #16
 800e398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e39c:	ee07 3a90 	vmov	s15, r3
 800e3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3b8:	ee17 2a90 	vmov	r2, s15
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e3c0:	4b13      	ldr	r3, [pc, #76]	@ (800e410 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3c4:	0e1b      	lsrs	r3, r3, #24
 800e3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ca:	ee07 3a90 	vmov	s15, r3
 800e3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3e6:	ee17 2a90 	vmov	r2, s15
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e3ee:	e008      	b.n	800e402 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	609a      	str	r2, [r3, #8]
}
 800e402:	bf00      	nop
 800e404:	3724      	adds	r7, #36	@ 0x24
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	58024400 	.word	0x58024400
 800e414:	03d09000 	.word	0x03d09000
 800e418:	46000000 	.word	0x46000000
 800e41c:	4c742400 	.word	0x4c742400
 800e420:	4a742400 	.word	0x4a742400
 800e424:	4bbebc20 	.word	0x4bbebc20

0800e428 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e436:	4b53      	ldr	r3, [pc, #332]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e43a:	f003 0303 	and.w	r3, r3, #3
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d101      	bne.n	800e446 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e442:	2301      	movs	r3, #1
 800e444:	e099      	b.n	800e57a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e446:	4b4f      	ldr	r3, [pc, #316]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a4e      	ldr	r2, [pc, #312]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e44c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e452:	f7f8 fb8f 	bl	8006b74 <HAL_GetTick>
 800e456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e458:	e008      	b.n	800e46c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e45a:	f7f8 fb8b 	bl	8006b74 <HAL_GetTick>
 800e45e:	4602      	mov	r2, r0
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	2b02      	cmp	r3, #2
 800e466:	d901      	bls.n	800e46c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e468:	2303      	movs	r3, #3
 800e46a:	e086      	b.n	800e57a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e46c:	4b45      	ldr	r3, [pc, #276]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1f0      	bne.n	800e45a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e478:	4b42      	ldr	r3, [pc, #264]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	031b      	lsls	r3, r3, #12
 800e486:	493f      	ldr	r1, [pc, #252]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e488:	4313      	orrs	r3, r2
 800e48a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	3b01      	subs	r3, #1
 800e492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	025b      	lsls	r3, r3, #9
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	041b      	lsls	r3, r3, #16
 800e4aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	691b      	ldr	r3, [r3, #16]
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	061b      	lsls	r3, r3, #24
 800e4b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e4bc:	4931      	ldr	r1, [pc, #196]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e4c2:	4b30      	ldr	r3, [pc, #192]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	492d      	ldr	r1, [pc, #180]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	f023 0220 	bic.w	r2, r3, #32
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	699b      	ldr	r3, [r3, #24]
 800e4e0:	4928      	ldr	r1, [pc, #160]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e4e6:	4b27      	ldr	r3, [pc, #156]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ea:	4a26      	ldr	r2, [pc, #152]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4ec:	f023 0310 	bic.w	r3, r3, #16
 800e4f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e4f2:	4b24      	ldr	r3, [pc, #144]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e4f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4f6:	4b24      	ldr	r3, [pc, #144]	@ (800e588 <RCCEx_PLL2_Config+0x160>)
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	69d2      	ldr	r2, [r2, #28]
 800e4fe:	00d2      	lsls	r2, r2, #3
 800e500:	4920      	ldr	r1, [pc, #128]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e502:	4313      	orrs	r3, r2
 800e504:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e506:	4b1f      	ldr	r3, [pc, #124]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	4a1e      	ldr	r2, [pc, #120]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e50c:	f043 0310 	orr.w	r3, r3, #16
 800e510:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e518:	4b1a      	ldr	r3, [pc, #104]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51c:	4a19      	ldr	r2, [pc, #100]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e51e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e522:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e524:	e00f      	b.n	800e546 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d106      	bne.n	800e53a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e52c:	4b15      	ldr	r3, [pc, #84]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e530:	4a14      	ldr	r2, [pc, #80]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e536:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e538:	e005      	b.n	800e546 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e53a:	4b12      	ldr	r3, [pc, #72]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53e:	4a11      	ldr	r2, [pc, #68]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e544:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e546:	4b0f      	ldr	r3, [pc, #60]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a0e      	ldr	r2, [pc, #56]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e54c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e552:	f7f8 fb0f 	bl	8006b74 <HAL_GetTick>
 800e556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e558:	e008      	b.n	800e56c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e55a:	f7f8 fb0b 	bl	8006b74 <HAL_GetTick>
 800e55e:	4602      	mov	r2, r0
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	2b02      	cmp	r3, #2
 800e566:	d901      	bls.n	800e56c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e568:	2303      	movs	r3, #3
 800e56a:	e006      	b.n	800e57a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e56c:	4b05      	ldr	r3, [pc, #20]	@ (800e584 <RCCEx_PLL2_Config+0x15c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d0f0      	beq.n	800e55a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e578:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	58024400 	.word	0x58024400
 800e588:	ffff0007 	.word	0xffff0007

0800e58c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e59a:	4b53      	ldr	r3, [pc, #332]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d101      	bne.n	800e5aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e099      	b.n	800e6de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e5aa:	4b4f      	ldr	r3, [pc, #316]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a4e      	ldr	r2, [pc, #312]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e5b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5b6:	f7f8 fadd 	bl	8006b74 <HAL_GetTick>
 800e5ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e5bc:	e008      	b.n	800e5d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e5be:	f7f8 fad9 	bl	8006b74 <HAL_GetTick>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d901      	bls.n	800e5d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e5cc:	2303      	movs	r3, #3
 800e5ce:	e086      	b.n	800e6de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e5d0:	4b45      	ldr	r3, [pc, #276]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1f0      	bne.n	800e5be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e5dc:	4b42      	ldr	r3, [pc, #264]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	051b      	lsls	r3, r3, #20
 800e5ea:	493f      	ldr	r1, [pc, #252]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	628b      	str	r3, [r1, #40]	@ 0x28
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	025b      	lsls	r3, r3, #9
 800e602:	b29b      	uxth	r3, r3
 800e604:	431a      	orrs	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	041b      	lsls	r3, r3, #16
 800e60e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e612:	431a      	orrs	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	691b      	ldr	r3, [r3, #16]
 800e618:	3b01      	subs	r3, #1
 800e61a:	061b      	lsls	r3, r3, #24
 800e61c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e620:	4931      	ldr	r1, [pc, #196]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e622:	4313      	orrs	r3, r2
 800e624:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e626:	4b30      	ldr	r3, [pc, #192]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	492d      	ldr	r1, [pc, #180]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e634:	4313      	orrs	r3, r2
 800e636:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e638:	4b2b      	ldr	r3, [pc, #172]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e63c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	4928      	ldr	r1, [pc, #160]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e646:	4313      	orrs	r3, r2
 800e648:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e64a:	4b27      	ldr	r3, [pc, #156]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e64e:	4a26      	ldr	r2, [pc, #152]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e656:	4b24      	ldr	r3, [pc, #144]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e65a:	4b24      	ldr	r3, [pc, #144]	@ (800e6ec <RCCEx_PLL3_Config+0x160>)
 800e65c:	4013      	ands	r3, r2
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	69d2      	ldr	r2, [r2, #28]
 800e662:	00d2      	lsls	r2, r2, #3
 800e664:	4920      	ldr	r1, [pc, #128]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e666:	4313      	orrs	r3, r2
 800e668:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e66a:	4b1f      	ldr	r3, [pc, #124]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e674:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e67c:	4b1a      	ldr	r3, [pc, #104]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e680:	4a19      	ldr	r2, [pc, #100]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e682:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e688:	e00f      	b.n	800e6aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d106      	bne.n	800e69e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e690:	4b15      	ldr	r3, [pc, #84]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e694:	4a14      	ldr	r2, [pc, #80]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e696:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e69a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e69c:	e005      	b.n	800e6aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e69e:	4b12      	ldr	r3, [pc, #72]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6a2:	4a11      	ldr	r2, [pc, #68]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e6a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e6a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a0e      	ldr	r2, [pc, #56]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e6b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6b6:	f7f8 fa5d 	bl	8006b74 <HAL_GetTick>
 800e6ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e6bc:	e008      	b.n	800e6d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e6be:	f7f8 fa59 	bl	8006b74 <HAL_GetTick>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d901      	bls.n	800e6d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	e006      	b.n	800e6de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e6d0:	4b05      	ldr	r3, [pc, #20]	@ (800e6e8 <RCCEx_PLL3_Config+0x15c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0f0      	beq.n	800e6be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	58024400 	.word	0x58024400
 800e6ec:	ffff0007 	.word	0xffff0007

0800e6f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	e049      	b.n	800e796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d106      	bne.n	800e71c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f841 	bl	800e79e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3304      	adds	r3, #4
 800e72c:	4619      	mov	r1, r3
 800e72e:	4610      	mov	r0, r2
 800e730:	f000 f9e8 	bl	800eb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b083      	sub	sp, #12
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d001      	beq.n	800e7cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e054      	b.n	800e876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68da      	ldr	r2, [r3, #12]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f042 0201 	orr.w	r2, r2, #1
 800e7e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a26      	ldr	r2, [pc, #152]	@ (800e884 <HAL_TIM_Base_Start_IT+0xd0>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d022      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7f6:	d01d      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a22      	ldr	r2, [pc, #136]	@ (800e888 <HAL_TIM_Base_Start_IT+0xd4>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d018      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a21      	ldr	r2, [pc, #132]	@ (800e88c <HAL_TIM_Base_Start_IT+0xd8>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d013      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a1f      	ldr	r2, [pc, #124]	@ (800e890 <HAL_TIM_Base_Start_IT+0xdc>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d00e      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a1e      	ldr	r2, [pc, #120]	@ (800e894 <HAL_TIM_Base_Start_IT+0xe0>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d009      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a1c      	ldr	r2, [pc, #112]	@ (800e898 <HAL_TIM_Base_Start_IT+0xe4>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d004      	beq.n	800e834 <HAL_TIM_Base_Start_IT+0x80>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a1b      	ldr	r2, [pc, #108]	@ (800e89c <HAL_TIM_Base_Start_IT+0xe8>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d115      	bne.n	800e860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	689a      	ldr	r2, [r3, #8]
 800e83a:	4b19      	ldr	r3, [pc, #100]	@ (800e8a0 <HAL_TIM_Base_Start_IT+0xec>)
 800e83c:	4013      	ands	r3, r2
 800e83e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2b06      	cmp	r3, #6
 800e844:	d015      	beq.n	800e872 <HAL_TIM_Base_Start_IT+0xbe>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e84c:	d011      	beq.n	800e872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f042 0201 	orr.w	r2, r2, #1
 800e85c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e85e:	e008      	b.n	800e872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f042 0201 	orr.w	r2, r2, #1
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	e000      	b.n	800e874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	40010000 	.word	0x40010000
 800e888:	40000400 	.word	0x40000400
 800e88c:	40000800 	.word	0x40000800
 800e890:	40000c00 	.word	0x40000c00
 800e894:	40010400 	.word	0x40010400
 800e898:	40001800 	.word	0x40001800
 800e89c:	40014000 	.word	0x40014000
 800e8a0:	00010007 	.word	0x00010007

0800e8a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	f003 0302 	and.w	r3, r3, #2
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d020      	beq.n	800e908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f003 0302 	and.w	r3, r3, #2
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01b      	beq.n	800e908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f06f 0202 	mvn.w	r2, #2
 800e8d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2201      	movs	r2, #1
 800e8de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	f003 0303 	and.w	r3, r3, #3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f8e9 	bl	800eac6 <HAL_TIM_IC_CaptureCallback>
 800e8f4:	e005      	b.n	800e902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f8db 	bl	800eab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 f8ec 	bl	800eada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	f003 0304 	and.w	r3, r3, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d020      	beq.n	800e954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f003 0304 	and.w	r3, r3, #4
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d01b      	beq.n	800e954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f06f 0204 	mvn.w	r2, #4
 800e924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2202      	movs	r2, #2
 800e92a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f8c3 	bl	800eac6 <HAL_TIM_IC_CaptureCallback>
 800e940:	e005      	b.n	800e94e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f8b5 	bl	800eab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f8c6 	bl	800eada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f003 0308 	and.w	r3, r3, #8
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d020      	beq.n	800e9a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f003 0308 	and.w	r3, r3, #8
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01b      	beq.n	800e9a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f06f 0208 	mvn.w	r2, #8
 800e970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2204      	movs	r2, #4
 800e976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	f003 0303 	and.w	r3, r3, #3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 f89d 	bl	800eac6 <HAL_TIM_IC_CaptureCallback>
 800e98c:	e005      	b.n	800e99a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f88f 	bl	800eab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f8a0 	bl	800eada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	f003 0310 	and.w	r3, r3, #16
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d020      	beq.n	800e9ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f003 0310 	and.w	r3, r3, #16
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01b      	beq.n	800e9ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f06f 0210 	mvn.w	r2, #16
 800e9bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d003      	beq.n	800e9da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 f877 	bl	800eac6 <HAL_TIM_IC_CaptureCallback>
 800e9d8:	e005      	b.n	800e9e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f869 	bl	800eab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f87a 	bl	800eada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00c      	beq.n	800ea10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d007      	beq.n	800ea10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f06f 0201 	mvn.w	r2, #1
 800ea08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7f6 fc30 	bl	8005270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d104      	bne.n	800ea24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00c      	beq.n	800ea3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ea36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 f913 	bl	800ec64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00c      	beq.n	800ea62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d007      	beq.n	800ea62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ea5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f90b 	bl	800ec78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00c      	beq.n	800ea86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d007      	beq.n	800ea86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ea7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 f834 	bl	800eaee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f003 0320 	and.w	r3, r3, #32
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00c      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f003 0320 	and.w	r3, r3, #32
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f06f 0220 	mvn.w	r2, #32
 800eaa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f8d3 	bl	800ec50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b083      	sub	sp, #12
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaba:	bf00      	nop
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b083      	sub	sp, #12
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eace:	bf00      	nop
 800ead0:	370c      	adds	r7, #12
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr

0800eada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eada:	b480      	push	{r7}
 800eadc:	b083      	sub	sp, #12
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eae2:	bf00      	nop
 800eae4:	370c      	adds	r7, #12
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr

0800eaee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eaee:	b480      	push	{r7}
 800eaf0:	b083      	sub	sp, #12
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a46      	ldr	r2, [pc, #280]	@ (800ec30 <TIM_Base_SetConfig+0x12c>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d013      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb22:	d00f      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a43      	ldr	r2, [pc, #268]	@ (800ec34 <TIM_Base_SetConfig+0x130>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d00b      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a42      	ldr	r2, [pc, #264]	@ (800ec38 <TIM_Base_SetConfig+0x134>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d007      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a41      	ldr	r2, [pc, #260]	@ (800ec3c <TIM_Base_SetConfig+0x138>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d003      	beq.n	800eb44 <TIM_Base_SetConfig+0x40>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a40      	ldr	r2, [pc, #256]	@ (800ec40 <TIM_Base_SetConfig+0x13c>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d108      	bne.n	800eb56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a35      	ldr	r2, [pc, #212]	@ (800ec30 <TIM_Base_SetConfig+0x12c>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d01f      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb64:	d01b      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4a32      	ldr	r2, [pc, #200]	@ (800ec34 <TIM_Base_SetConfig+0x130>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d017      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a31      	ldr	r2, [pc, #196]	@ (800ec38 <TIM_Base_SetConfig+0x134>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d013      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a30      	ldr	r2, [pc, #192]	@ (800ec3c <TIM_Base_SetConfig+0x138>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d00f      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a2f      	ldr	r2, [pc, #188]	@ (800ec40 <TIM_Base_SetConfig+0x13c>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d00b      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a2e      	ldr	r2, [pc, #184]	@ (800ec44 <TIM_Base_SetConfig+0x140>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d007      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a2d      	ldr	r2, [pc, #180]	@ (800ec48 <TIM_Base_SetConfig+0x144>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d003      	beq.n	800eb9e <TIM_Base_SetConfig+0x9a>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a2c      	ldr	r2, [pc, #176]	@ (800ec4c <TIM_Base_SetConfig+0x148>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d108      	bne.n	800ebb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	689a      	ldr	r2, [r3, #8]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	4a16      	ldr	r2, [pc, #88]	@ (800ec30 <TIM_Base_SetConfig+0x12c>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d00f      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4a18      	ldr	r2, [pc, #96]	@ (800ec40 <TIM_Base_SetConfig+0x13c>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d00b      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	4a17      	ldr	r2, [pc, #92]	@ (800ec44 <TIM_Base_SetConfig+0x140>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d007      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4a16      	ldr	r2, [pc, #88]	@ (800ec48 <TIM_Base_SetConfig+0x144>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d003      	beq.n	800ebfc <TIM_Base_SetConfig+0xf8>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	4a15      	ldr	r2, [pc, #84]	@ (800ec4c <TIM_Base_SetConfig+0x148>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d103      	bne.n	800ec04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	691a      	ldr	r2, [r3, #16]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	f003 0301 	and.w	r3, r3, #1
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d105      	bne.n	800ec22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	f023 0201 	bic.w	r2, r3, #1
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	611a      	str	r2, [r3, #16]
  }
}
 800ec22:	bf00      	nop
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	40010000 	.word	0x40010000
 800ec34:	40000400 	.word	0x40000400
 800ec38:	40000800 	.word	0x40000800
 800ec3c:	40000c00 	.word	0x40000c00
 800ec40:	40010400 	.word	0x40010400
 800ec44:	40014000 	.word	0x40014000
 800ec48:	40014400 	.word	0x40014400
 800ec4c:	40014800 	.word	0x40014800

0800ec50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e042      	b.n	800ed24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d106      	bne.n	800ecb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7f6 ffc9 	bl	8005c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2224      	movs	r2, #36	@ 0x24
 800ecba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f022 0201 	bic.w	r2, r2, #1
 800eccc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d002      	beq.n	800ecdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f001 f9f6 	bl	80100c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fc8b 	bl	800f5f8 <UART_SetConfig>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d101      	bne.n	800ecec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e01b      	b.n	800ed24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	685a      	ldr	r2, [r3, #4]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ecfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689a      	ldr	r2, [r3, #8]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f042 0201 	orr.w	r2, r2, #1
 800ed1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 fa75 	bl	801020c <UART_CheckIdleState>
 800ed22:	4603      	mov	r3, r0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b08a      	sub	sp, #40	@ 0x28
 800ed30:	af02      	add	r7, sp, #8
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	603b      	str	r3, [r7, #0]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed42:	2b20      	cmp	r3, #32
 800ed44:	d17b      	bne.n	800ee3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <HAL_UART_Transmit+0x26>
 800ed4c:	88fb      	ldrh	r3, [r7, #6]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	e074      	b.n	800ee40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2221      	movs	r2, #33	@ 0x21
 800ed62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed66:	f7f7 ff05 	bl	8006b74 <HAL_GetTick>
 800ed6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	88fa      	ldrh	r2, [r7, #6]
 800ed70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	88fa      	ldrh	r2, [r7, #6]
 800ed78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed84:	d108      	bne.n	800ed98 <HAL_UART_Transmit+0x6c>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d104      	bne.n	800ed98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	61bb      	str	r3, [r7, #24]
 800ed96:	e003      	b.n	800eda0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eda0:	e030      	b.n	800ee04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	2200      	movs	r2, #0
 800edaa:	2180      	movs	r1, #128	@ 0x80
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f001 fad7 	bl	8010360 <UART_WaitOnFlagUntilTimeout>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d005      	beq.n	800edc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2220      	movs	r2, #32
 800edbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e03d      	b.n	800ee40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10b      	bne.n	800ede2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	3302      	adds	r3, #2
 800edde:	61bb      	str	r3, [r7, #24]
 800ede0:	e007      	b.n	800edf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	781a      	ldrb	r2, [r3, #0]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	3301      	adds	r3, #1
 800edf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	3b01      	subs	r3, #1
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1c8      	bne.n	800eda2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2200      	movs	r2, #0
 800ee18:	2140      	movs	r1, #64	@ 0x40
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f001 faa0 	bl	8010360 <UART_WaitOnFlagUntilTimeout>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d005      	beq.n	800ee32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2220      	movs	r2, #32
 800ee2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e006      	b.n	800ee40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2220      	movs	r2, #32
 800ee36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	e000      	b.n	800ee40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ee3e:	2302      	movs	r3, #2
  }
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3720      	adds	r7, #32
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b0ba      	sub	sp, #232	@ 0xe8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ee6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ee72:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ee76:	4013      	ands	r3, r2
 800ee78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ee7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d11b      	bne.n	800eebc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee88:	f003 0320 	and.w	r3, r3, #32
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d015      	beq.n	800eebc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee94:	f003 0320 	and.w	r3, r3, #32
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d105      	bne.n	800eea8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d009      	beq.n	800eebc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8377 	beq.w	800f5a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	4798      	blx	r3
      }
      return;
 800eeba:	e371      	b.n	800f5a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 8123 	beq.w	800f10c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eec6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eeca:	4b8d      	ldr	r3, [pc, #564]	@ (800f100 <HAL_UART_IRQHandler+0x2b8>)
 800eecc:	4013      	ands	r3, r2
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eed2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eed6:	4b8b      	ldr	r3, [pc, #556]	@ (800f104 <HAL_UART_IRQHandler+0x2bc>)
 800eed8:	4013      	ands	r3, r2
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 8116 	beq.w	800f10c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d011      	beq.n	800ef10 <HAL_UART_IRQHandler+0xc8>
 800eeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00b      	beq.n	800ef10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2201      	movs	r2, #1
 800eefe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef06:	f043 0201 	orr.w	r2, r3, #1
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef14:	f003 0302 	and.w	r3, r3, #2
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d011      	beq.n	800ef40 <HAL_UART_IRQHandler+0xf8>
 800ef1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef36:	f043 0204 	orr.w	r2, r3, #4
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef44:	f003 0304 	and.w	r3, r3, #4
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d011      	beq.n	800ef70 <HAL_UART_IRQHandler+0x128>
 800ef4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef50:	f003 0301 	and.w	r3, r3, #1
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00b      	beq.n	800ef70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2204      	movs	r2, #4
 800ef5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef66:	f043 0202 	orr.w	r2, r3, #2
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ef70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef74:	f003 0308 	and.w	r3, r3, #8
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d017      	beq.n	800efac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef80:	f003 0320 	and.w	r3, r3, #32
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d105      	bne.n	800ef94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ef88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef8c:	4b5c      	ldr	r3, [pc, #368]	@ (800f100 <HAL_UART_IRQHandler+0x2b8>)
 800ef8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00b      	beq.n	800efac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2208      	movs	r2, #8
 800ef9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa2:	f043 0208 	orr.w	r2, r3, #8
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800efac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d012      	beq.n	800efde <HAL_UART_IRQHandler+0x196>
 800efb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00c      	beq.n	800efde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800efcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efd4:	f043 0220 	orr.w	r2, r3, #32
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 82dd 	beq.w	800f5a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800efea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efee:	f003 0320 	and.w	r3, r3, #32
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d013      	beq.n	800f01e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800effa:	f003 0320 	and.w	r3, r3, #32
 800effe:	2b00      	cmp	r3, #0
 800f000:	d105      	bne.n	800f00e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d007      	beq.n	800f01e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f032:	2b40      	cmp	r3, #64	@ 0x40
 800f034:	d005      	beq.n	800f042 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f03a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d054      	beq.n	800f0ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f001 fc04 	bl	8010850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f052:	2b40      	cmp	r3, #64	@ 0x40
 800f054:	d146      	bne.n	800f0e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	3308      	adds	r3, #8
 800f05c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f064:	e853 3f00 	ldrex	r3, [r3]
 800f068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f06c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	3308      	adds	r3, #8
 800f07e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f08e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1d9      	bne.n	800f056 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d017      	beq.n	800f0dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0b2:	4a15      	ldr	r2, [pc, #84]	@ (800f108 <HAL_UART_IRQHandler+0x2c0>)
 800f0b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f8 ffe5 	bl	800808c <HAL_DMA_Abort_IT>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d019      	beq.n	800f0fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f0d6:	4610      	mov	r0, r2
 800f0d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0da:	e00f      	b.n	800f0fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7f5 fb21 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0e2:	e00b      	b.n	800f0fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7f5 fb1d 	bl	8004724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ea:	e007      	b.n	800f0fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f5 fb19 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f0fa:	e253      	b.n	800f5a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0fc:	bf00      	nop
    return;
 800f0fe:	e251      	b.n	800f5a4 <HAL_UART_IRQHandler+0x75c>
 800f100:	10000001 	.word	0x10000001
 800f104:	04000120 	.word	0x04000120
 800f108:	08010b03 	.word	0x08010b03

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f110:	2b01      	cmp	r3, #1
 800f112:	f040 81e7 	bne.w	800f4e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f11a:	f003 0310 	and.w	r3, r3, #16
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f000 81e0 	beq.w	800f4e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f128:	f003 0310 	and.w	r3, r3, #16
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 81d9 	beq.w	800f4e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2210      	movs	r2, #16
 800f138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f144:	2b40      	cmp	r3, #64	@ 0x40
 800f146:	f040 8151 	bne.w	800f3ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4a96      	ldr	r2, [pc, #600]	@ (800f3ac <HAL_UART_IRQHandler+0x564>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d068      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a93      	ldr	r2, [pc, #588]	@ (800f3b0 <HAL_UART_IRQHandler+0x568>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d061      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a91      	ldr	r2, [pc, #580]	@ (800f3b4 <HAL_UART_IRQHandler+0x56c>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d05a      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a8e      	ldr	r2, [pc, #568]	@ (800f3b8 <HAL_UART_IRQHandler+0x570>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d053      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a8c      	ldr	r2, [pc, #560]	@ (800f3bc <HAL_UART_IRQHandler+0x574>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d04c      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4a89      	ldr	r2, [pc, #548]	@ (800f3c0 <HAL_UART_IRQHandler+0x578>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d045      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a87      	ldr	r2, [pc, #540]	@ (800f3c4 <HAL_UART_IRQHandler+0x57c>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d03e      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a84      	ldr	r2, [pc, #528]	@ (800f3c8 <HAL_UART_IRQHandler+0x580>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d037      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a82      	ldr	r2, [pc, #520]	@ (800f3cc <HAL_UART_IRQHandler+0x584>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d030      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a7f      	ldr	r2, [pc, #508]	@ (800f3d0 <HAL_UART_IRQHandler+0x588>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d029      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4a7d      	ldr	r2, [pc, #500]	@ (800f3d4 <HAL_UART_IRQHandler+0x58c>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d022      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a7a      	ldr	r2, [pc, #488]	@ (800f3d8 <HAL_UART_IRQHandler+0x590>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d01b      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a78      	ldr	r2, [pc, #480]	@ (800f3dc <HAL_UART_IRQHandler+0x594>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d014      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a75      	ldr	r2, [pc, #468]	@ (800f3e0 <HAL_UART_IRQHandler+0x598>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d00d      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a73      	ldr	r2, [pc, #460]	@ (800f3e4 <HAL_UART_IRQHandler+0x59c>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d006      	beq.n	800f22a <HAL_UART_IRQHandler+0x3e2>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a70      	ldr	r2, [pc, #448]	@ (800f3e8 <HAL_UART_IRQHandler+0x5a0>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d106      	bne.n	800f238 <HAL_UART_IRQHandler+0x3f0>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	b29b      	uxth	r3, r3
 800f236:	e005      	b.n	800f244 <HAL_UART_IRQHandler+0x3fc>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	b29b      	uxth	r3, r3
 800f244:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 81ab 	beq.w	800f5a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f258:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f25c:	429a      	cmp	r2, r3
 800f25e:	f080 81a3 	bcs.w	800f5a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f268:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f278:	f000 8087 	beq.w	800f38a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f284:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f288:	e853 3f00 	ldrex	r3, [r3]
 800f28c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f2a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f2aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f2b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f2b6:	e841 2300 	strex	r3, r2, [r1]
 800f2ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f2be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1da      	bne.n	800f27c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f2d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f2d8:	f023 0301 	bic.w	r3, r3, #1
 800f2dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f2ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f2ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f2f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f2f6:	e841 2300 	strex	r3, r2, [r1]
 800f2fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f2fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1e1      	bne.n	800f2c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f30c:	e853 3f00 	ldrex	r3, [r3]
 800f310:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	3308      	adds	r3, #8
 800f322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f326:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f328:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f32c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f32e:	e841 2300 	strex	r3, r2, [r1]
 800f332:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e3      	bne.n	800f302 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2220      	movs	r2, #32
 800f33e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f350:	e853 3f00 	ldrex	r3, [r3]
 800f354:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f358:	f023 0310 	bic.w	r3, r3, #16
 800f35c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f36a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f36c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f36e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f372:	e841 2300 	strex	r3, r2, [r1]
 800f376:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1e4      	bne.n	800f348 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f384:	4618      	mov	r0, r3
 800f386:	f7f8 fb63 	bl	8007a50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2202      	movs	r2, #2
 800f38e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7f4 fbf7 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f3aa:	e0fd      	b.n	800f5a8 <HAL_UART_IRQHandler+0x760>
 800f3ac:	40020010 	.word	0x40020010
 800f3b0:	40020028 	.word	0x40020028
 800f3b4:	40020040 	.word	0x40020040
 800f3b8:	40020058 	.word	0x40020058
 800f3bc:	40020070 	.word	0x40020070
 800f3c0:	40020088 	.word	0x40020088
 800f3c4:	400200a0 	.word	0x400200a0
 800f3c8:	400200b8 	.word	0x400200b8
 800f3cc:	40020410 	.word	0x40020410
 800f3d0:	40020428 	.word	0x40020428
 800f3d4:	40020440 	.word	0x40020440
 800f3d8:	40020458 	.word	0x40020458
 800f3dc:	40020470 	.word	0x40020470
 800f3e0:	40020488 	.word	0x40020488
 800f3e4:	400204a0 	.word	0x400204a0
 800f3e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f406:	b29b      	uxth	r3, r3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80cf 	beq.w	800f5ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f40e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80ca 	beq.w	800f5ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f42c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f43a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f43c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f442:	e841 2300 	strex	r3, r2, [r1]
 800f446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1e4      	bne.n	800f418 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	3308      	adds	r3, #8
 800f454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f458:	e853 3f00 	ldrex	r3, [r3]
 800f45c:	623b      	str	r3, [r7, #32]
   return(result);
 800f45e:	6a3a      	ldr	r2, [r7, #32]
 800f460:	4b55      	ldr	r3, [pc, #340]	@ (800f5b8 <HAL_UART_IRQHandler+0x770>)
 800f462:	4013      	ands	r3, r2
 800f464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	3308      	adds	r3, #8
 800f46e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f472:	633a      	str	r2, [r7, #48]	@ 0x30
 800f474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f47a:	e841 2300 	strex	r3, r2, [r1]
 800f47e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1e3      	bne.n	800f44e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2220      	movs	r2, #32
 800f48a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	e853 3f00 	ldrex	r3, [r3]
 800f4a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f023 0310 	bic.w	r3, r3, #16
 800f4ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f4bc:	61fb      	str	r3, [r7, #28]
 800f4be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c0:	69b9      	ldr	r1, [r7, #24]
 800f4c2:	69fa      	ldr	r2, [r7, #28]
 800f4c4:	e841 2300 	strex	r3, r2, [r1]
 800f4c8:	617b      	str	r3, [r7, #20]
   return(result);
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1e4      	bne.n	800f49a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f4d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7f4 fb5b 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f4e2:	e063      	b.n	800f5ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00e      	beq.n	800f50e <HAL_UART_IRQHandler+0x6c6>
 800f4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f4f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d008      	beq.n	800f50e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f002 f858 	bl	80115bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f50c:	e051      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f516:	2b00      	cmp	r3, #0
 800f518:	d014      	beq.n	800f544 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f522:	2b00      	cmp	r3, #0
 800f524:	d105      	bne.n	800f532 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f52a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d008      	beq.n	800f544 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f536:	2b00      	cmp	r3, #0
 800f538:	d03a      	beq.n	800f5b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
    }
    return;
 800f542:	e035      	b.n	800f5b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d009      	beq.n	800f564 <HAL_UART_IRQHandler+0x71c>
 800f550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d003      	beq.n	800f564 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f001 fae6 	bl	8010b2e <UART_EndTransmit_IT>
    return;
 800f562:	e026      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <HAL_UART_IRQHandler+0x73c>
 800f570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f574:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d003      	beq.n	800f584 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f002 f831 	bl	80115e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f582:	e016      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d010      	beq.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
 800f590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f594:	2b00      	cmp	r3, #0
 800f596:	da0c      	bge.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f002 f819 	bl	80115d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f59e:	e008      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f5a0:	bf00      	nop
 800f5a2:	e006      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f5a4:	bf00      	nop
 800f5a6:	e004      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f5a8:	bf00      	nop
 800f5aa:	e002      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800f5ac:	bf00      	nop
 800f5ae:	e000      	b.n	800f5b2 <HAL_UART_IRQHandler+0x76a>
    return;
 800f5b0:	bf00      	nop
  }
}
 800f5b2:	37e8      	adds	r7, #232	@ 0xe8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	effffffe 	.word	0xeffffffe

0800f5bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f5ec:	bf00      	nop
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5fc:	b092      	sub	sp, #72	@ 0x48
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f602:	2300      	movs	r3, #0
 800f604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	689a      	ldr	r2, [r3, #8]
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	431a      	orrs	r2, r3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	695b      	ldr	r3, [r3, #20]
 800f616:	431a      	orrs	r2, r3
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	69db      	ldr	r3, [r3, #28]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	4bbe      	ldr	r3, [pc, #760]	@ (800f920 <UART_SetConfig+0x328>)
 800f628:	4013      	ands	r3, r2
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	6812      	ldr	r2, [r2, #0]
 800f62e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f630:	430b      	orrs	r3, r1
 800f632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	68da      	ldr	r2, [r3, #12]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	430a      	orrs	r2, r1
 800f648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	699b      	ldr	r3, [r3, #24]
 800f64e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4ab3      	ldr	r2, [pc, #716]	@ (800f924 <UART_SetConfig+0x32c>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d004      	beq.n	800f664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	6a1b      	ldr	r3, [r3, #32]
 800f65e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f660:	4313      	orrs	r3, r2
 800f662:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	689a      	ldr	r2, [r3, #8]
 800f66a:	4baf      	ldr	r3, [pc, #700]	@ (800f928 <UART_SetConfig+0x330>)
 800f66c:	4013      	ands	r3, r2
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	6812      	ldr	r2, [r2, #0]
 800f672:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f674:	430b      	orrs	r3, r1
 800f676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67e:	f023 010f 	bic.w	r1, r3, #15
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	430a      	orrs	r2, r1
 800f68c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4aa6      	ldr	r2, [pc, #664]	@ (800f92c <UART_SetConfig+0x334>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d177      	bne.n	800f788 <UART_SetConfig+0x190>
 800f698:	4ba5      	ldr	r3, [pc, #660]	@ (800f930 <UART_SetConfig+0x338>)
 800f69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f69c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6a0:	2b28      	cmp	r3, #40	@ 0x28
 800f6a2:	d86d      	bhi.n	800f780 <UART_SetConfig+0x188>
 800f6a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f6ac <UART_SetConfig+0xb4>)
 800f6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6aa:	bf00      	nop
 800f6ac:	0800f751 	.word	0x0800f751
 800f6b0:	0800f781 	.word	0x0800f781
 800f6b4:	0800f781 	.word	0x0800f781
 800f6b8:	0800f781 	.word	0x0800f781
 800f6bc:	0800f781 	.word	0x0800f781
 800f6c0:	0800f781 	.word	0x0800f781
 800f6c4:	0800f781 	.word	0x0800f781
 800f6c8:	0800f781 	.word	0x0800f781
 800f6cc:	0800f759 	.word	0x0800f759
 800f6d0:	0800f781 	.word	0x0800f781
 800f6d4:	0800f781 	.word	0x0800f781
 800f6d8:	0800f781 	.word	0x0800f781
 800f6dc:	0800f781 	.word	0x0800f781
 800f6e0:	0800f781 	.word	0x0800f781
 800f6e4:	0800f781 	.word	0x0800f781
 800f6e8:	0800f781 	.word	0x0800f781
 800f6ec:	0800f761 	.word	0x0800f761
 800f6f0:	0800f781 	.word	0x0800f781
 800f6f4:	0800f781 	.word	0x0800f781
 800f6f8:	0800f781 	.word	0x0800f781
 800f6fc:	0800f781 	.word	0x0800f781
 800f700:	0800f781 	.word	0x0800f781
 800f704:	0800f781 	.word	0x0800f781
 800f708:	0800f781 	.word	0x0800f781
 800f70c:	0800f769 	.word	0x0800f769
 800f710:	0800f781 	.word	0x0800f781
 800f714:	0800f781 	.word	0x0800f781
 800f718:	0800f781 	.word	0x0800f781
 800f71c:	0800f781 	.word	0x0800f781
 800f720:	0800f781 	.word	0x0800f781
 800f724:	0800f781 	.word	0x0800f781
 800f728:	0800f781 	.word	0x0800f781
 800f72c:	0800f771 	.word	0x0800f771
 800f730:	0800f781 	.word	0x0800f781
 800f734:	0800f781 	.word	0x0800f781
 800f738:	0800f781 	.word	0x0800f781
 800f73c:	0800f781 	.word	0x0800f781
 800f740:	0800f781 	.word	0x0800f781
 800f744:	0800f781 	.word	0x0800f781
 800f748:	0800f781 	.word	0x0800f781
 800f74c:	0800f779 	.word	0x0800f779
 800f750:	2301      	movs	r3, #1
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f756:	e222      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f758:	2304      	movs	r3, #4
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75e:	e21e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f760:	2308      	movs	r3, #8
 800f762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f766:	e21a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f768:	2310      	movs	r3, #16
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76e:	e216      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f770:	2320      	movs	r3, #32
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f776:	e212      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f778:	2340      	movs	r3, #64	@ 0x40
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77e:	e20e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f780:	2380      	movs	r3, #128	@ 0x80
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e20a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a69      	ldr	r2, [pc, #420]	@ (800f934 <UART_SetConfig+0x33c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d130      	bne.n	800f7f4 <UART_SetConfig+0x1fc>
 800f792:	4b67      	ldr	r3, [pc, #412]	@ (800f930 <UART_SetConfig+0x338>)
 800f794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b05      	cmp	r3, #5
 800f79c:	d826      	bhi.n	800f7ec <UART_SetConfig+0x1f4>
 800f79e:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a4 <UART_SetConfig+0x1ac>)
 800f7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a4:	0800f7bd 	.word	0x0800f7bd
 800f7a8:	0800f7c5 	.word	0x0800f7c5
 800f7ac:	0800f7cd 	.word	0x0800f7cd
 800f7b0:	0800f7d5 	.word	0x0800f7d5
 800f7b4:	0800f7dd 	.word	0x0800f7dd
 800f7b8:	0800f7e5 	.word	0x0800f7e5
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c2:	e1ec      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7c4:	2304      	movs	r3, #4
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ca:	e1e8      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7cc:	2308      	movs	r3, #8
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d2:	e1e4      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7d4:	2310      	movs	r3, #16
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7da:	e1e0      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7dc:	2320      	movs	r3, #32
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e2:	e1dc      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7e4:	2340      	movs	r3, #64	@ 0x40
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ea:	e1d8      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7ec:	2380      	movs	r3, #128	@ 0x80
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f2:	e1d4      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a4f      	ldr	r2, [pc, #316]	@ (800f938 <UART_SetConfig+0x340>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d130      	bne.n	800f860 <UART_SetConfig+0x268>
 800f7fe:	4b4c      	ldr	r3, [pc, #304]	@ (800f930 <UART_SetConfig+0x338>)
 800f800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f802:	f003 0307 	and.w	r3, r3, #7
 800f806:	2b05      	cmp	r3, #5
 800f808:	d826      	bhi.n	800f858 <UART_SetConfig+0x260>
 800f80a:	a201      	add	r2, pc, #4	@ (adr r2, 800f810 <UART_SetConfig+0x218>)
 800f80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f810:	0800f829 	.word	0x0800f829
 800f814:	0800f831 	.word	0x0800f831
 800f818:	0800f839 	.word	0x0800f839
 800f81c:	0800f841 	.word	0x0800f841
 800f820:	0800f849 	.word	0x0800f849
 800f824:	0800f851 	.word	0x0800f851
 800f828:	2300      	movs	r3, #0
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82e:	e1b6      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f830:	2304      	movs	r3, #4
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e1b2      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f838:	2308      	movs	r3, #8
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e1ae      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f840:	2310      	movs	r3, #16
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e1aa      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f848:	2320      	movs	r3, #32
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84e:	e1a6      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f850:	2340      	movs	r3, #64	@ 0x40
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f856:	e1a2      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f858:	2380      	movs	r3, #128	@ 0x80
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f85e:	e19e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a35      	ldr	r2, [pc, #212]	@ (800f93c <UART_SetConfig+0x344>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d130      	bne.n	800f8cc <UART_SetConfig+0x2d4>
 800f86a:	4b31      	ldr	r3, [pc, #196]	@ (800f930 <UART_SetConfig+0x338>)
 800f86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f86e:	f003 0307 	and.w	r3, r3, #7
 800f872:	2b05      	cmp	r3, #5
 800f874:	d826      	bhi.n	800f8c4 <UART_SetConfig+0x2cc>
 800f876:	a201      	add	r2, pc, #4	@ (adr r2, 800f87c <UART_SetConfig+0x284>)
 800f878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f87c:	0800f895 	.word	0x0800f895
 800f880:	0800f89d 	.word	0x0800f89d
 800f884:	0800f8a5 	.word	0x0800f8a5
 800f888:	0800f8ad 	.word	0x0800f8ad
 800f88c:	0800f8b5 	.word	0x0800f8b5
 800f890:	0800f8bd 	.word	0x0800f8bd
 800f894:	2300      	movs	r3, #0
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e180      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f89c:	2304      	movs	r3, #4
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a2:	e17c      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8a4:	2308      	movs	r3, #8
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e178      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8ac:	2310      	movs	r3, #16
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e174      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8b4:	2320      	movs	r3, #32
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ba:	e170      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8bc:	2340      	movs	r3, #64	@ 0x40
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c2:	e16c      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8c4:	2380      	movs	r3, #128	@ 0x80
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ca:	e168      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f940 <UART_SetConfig+0x348>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d142      	bne.n	800f95c <UART_SetConfig+0x364>
 800f8d6:	4b16      	ldr	r3, [pc, #88]	@ (800f930 <UART_SetConfig+0x338>)
 800f8d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8da:	f003 0307 	and.w	r3, r3, #7
 800f8de:	2b05      	cmp	r3, #5
 800f8e0:	d838      	bhi.n	800f954 <UART_SetConfig+0x35c>
 800f8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8e8 <UART_SetConfig+0x2f0>)
 800f8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e8:	0800f901 	.word	0x0800f901
 800f8ec:	0800f909 	.word	0x0800f909
 800f8f0:	0800f911 	.word	0x0800f911
 800f8f4:	0800f919 	.word	0x0800f919
 800f8f8:	0800f945 	.word	0x0800f945
 800f8fc:	0800f94d 	.word	0x0800f94d
 800f900:	2300      	movs	r3, #0
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f906:	e14a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f908:	2304      	movs	r3, #4
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e146      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f910:	2308      	movs	r3, #8
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e142      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f918:	2310      	movs	r3, #16
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e13e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f920:	cfff69f3 	.word	0xcfff69f3
 800f924:	58000c00 	.word	0x58000c00
 800f928:	11fff4ff 	.word	0x11fff4ff
 800f92c:	40011000 	.word	0x40011000
 800f930:	58024400 	.word	0x58024400
 800f934:	40004400 	.word	0x40004400
 800f938:	40004800 	.word	0x40004800
 800f93c:	40004c00 	.word	0x40004c00
 800f940:	40005000 	.word	0x40005000
 800f944:	2320      	movs	r3, #32
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f94a:	e128      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f94c:	2340      	movs	r3, #64	@ 0x40
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f952:	e124      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f954:	2380      	movs	r3, #128	@ 0x80
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95a:	e120      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4acb      	ldr	r2, [pc, #812]	@ (800fc90 <UART_SetConfig+0x698>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d176      	bne.n	800fa54 <UART_SetConfig+0x45c>
 800f966:	4bcb      	ldr	r3, [pc, #812]	@ (800fc94 <UART_SetConfig+0x69c>)
 800f968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f96a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f96e:	2b28      	cmp	r3, #40	@ 0x28
 800f970:	d86c      	bhi.n	800fa4c <UART_SetConfig+0x454>
 800f972:	a201      	add	r2, pc, #4	@ (adr r2, 800f978 <UART_SetConfig+0x380>)
 800f974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f978:	0800fa1d 	.word	0x0800fa1d
 800f97c:	0800fa4d 	.word	0x0800fa4d
 800f980:	0800fa4d 	.word	0x0800fa4d
 800f984:	0800fa4d 	.word	0x0800fa4d
 800f988:	0800fa4d 	.word	0x0800fa4d
 800f98c:	0800fa4d 	.word	0x0800fa4d
 800f990:	0800fa4d 	.word	0x0800fa4d
 800f994:	0800fa4d 	.word	0x0800fa4d
 800f998:	0800fa25 	.word	0x0800fa25
 800f99c:	0800fa4d 	.word	0x0800fa4d
 800f9a0:	0800fa4d 	.word	0x0800fa4d
 800f9a4:	0800fa4d 	.word	0x0800fa4d
 800f9a8:	0800fa4d 	.word	0x0800fa4d
 800f9ac:	0800fa4d 	.word	0x0800fa4d
 800f9b0:	0800fa4d 	.word	0x0800fa4d
 800f9b4:	0800fa4d 	.word	0x0800fa4d
 800f9b8:	0800fa2d 	.word	0x0800fa2d
 800f9bc:	0800fa4d 	.word	0x0800fa4d
 800f9c0:	0800fa4d 	.word	0x0800fa4d
 800f9c4:	0800fa4d 	.word	0x0800fa4d
 800f9c8:	0800fa4d 	.word	0x0800fa4d
 800f9cc:	0800fa4d 	.word	0x0800fa4d
 800f9d0:	0800fa4d 	.word	0x0800fa4d
 800f9d4:	0800fa4d 	.word	0x0800fa4d
 800f9d8:	0800fa35 	.word	0x0800fa35
 800f9dc:	0800fa4d 	.word	0x0800fa4d
 800f9e0:	0800fa4d 	.word	0x0800fa4d
 800f9e4:	0800fa4d 	.word	0x0800fa4d
 800f9e8:	0800fa4d 	.word	0x0800fa4d
 800f9ec:	0800fa4d 	.word	0x0800fa4d
 800f9f0:	0800fa4d 	.word	0x0800fa4d
 800f9f4:	0800fa4d 	.word	0x0800fa4d
 800f9f8:	0800fa3d 	.word	0x0800fa3d
 800f9fc:	0800fa4d 	.word	0x0800fa4d
 800fa00:	0800fa4d 	.word	0x0800fa4d
 800fa04:	0800fa4d 	.word	0x0800fa4d
 800fa08:	0800fa4d 	.word	0x0800fa4d
 800fa0c:	0800fa4d 	.word	0x0800fa4d
 800fa10:	0800fa4d 	.word	0x0800fa4d
 800fa14:	0800fa4d 	.word	0x0800fa4d
 800fa18:	0800fa45 	.word	0x0800fa45
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e0bc      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa24:	2304      	movs	r3, #4
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	e0b8      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa2c:	2308      	movs	r3, #8
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa32:	e0b4      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa34:	2310      	movs	r3, #16
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3a:	e0b0      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa3c:	2320      	movs	r3, #32
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa42:	e0ac      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa44:	2340      	movs	r3, #64	@ 0x40
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4a:	e0a8      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa4c:	2380      	movs	r3, #128	@ 0x80
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e0a4      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a8f      	ldr	r2, [pc, #572]	@ (800fc98 <UART_SetConfig+0x6a0>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d130      	bne.n	800fac0 <UART_SetConfig+0x4c8>
 800fa5e:	4b8d      	ldr	r3, [pc, #564]	@ (800fc94 <UART_SetConfig+0x69c>)
 800fa60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa62:	f003 0307 	and.w	r3, r3, #7
 800fa66:	2b05      	cmp	r3, #5
 800fa68:	d826      	bhi.n	800fab8 <UART_SetConfig+0x4c0>
 800fa6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa70 <UART_SetConfig+0x478>)
 800fa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa70:	0800fa89 	.word	0x0800fa89
 800fa74:	0800fa91 	.word	0x0800fa91
 800fa78:	0800fa99 	.word	0x0800fa99
 800fa7c:	0800faa1 	.word	0x0800faa1
 800fa80:	0800faa9 	.word	0x0800faa9
 800fa84:	0800fab1 	.word	0x0800fab1
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa8e:	e086      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa90:	2304      	movs	r3, #4
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa96:	e082      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fa98:	2308      	movs	r3, #8
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9e:	e07e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800faa0:	2310      	movs	r3, #16
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa6:	e07a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800faa8:	2320      	movs	r3, #32
 800faaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faae:	e076      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fab0:	2340      	movs	r3, #64	@ 0x40
 800fab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab6:	e072      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fab8:	2380      	movs	r3, #128	@ 0x80
 800faba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fabe:	e06e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4a75      	ldr	r2, [pc, #468]	@ (800fc9c <UART_SetConfig+0x6a4>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d130      	bne.n	800fb2c <UART_SetConfig+0x534>
 800faca:	4b72      	ldr	r3, [pc, #456]	@ (800fc94 <UART_SetConfig+0x69c>)
 800facc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800face:	f003 0307 	and.w	r3, r3, #7
 800fad2:	2b05      	cmp	r3, #5
 800fad4:	d826      	bhi.n	800fb24 <UART_SetConfig+0x52c>
 800fad6:	a201      	add	r2, pc, #4	@ (adr r2, 800fadc <UART_SetConfig+0x4e4>)
 800fad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fadc:	0800faf5 	.word	0x0800faf5
 800fae0:	0800fafd 	.word	0x0800fafd
 800fae4:	0800fb05 	.word	0x0800fb05
 800fae8:	0800fb0d 	.word	0x0800fb0d
 800faec:	0800fb15 	.word	0x0800fb15
 800faf0:	0800fb1d 	.word	0x0800fb1d
 800faf4:	2300      	movs	r3, #0
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafa:	e050      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fafc:	2304      	movs	r3, #4
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb02:	e04c      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb04:	2308      	movs	r3, #8
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e048      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb0c:	2310      	movs	r3, #16
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb12:	e044      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb14:	2320      	movs	r3, #32
 800fb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1a:	e040      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb1c:	2340      	movs	r3, #64	@ 0x40
 800fb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb22:	e03c      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb24:	2380      	movs	r3, #128	@ 0x80
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	e038      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a5b      	ldr	r2, [pc, #364]	@ (800fca0 <UART_SetConfig+0x6a8>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d130      	bne.n	800fb98 <UART_SetConfig+0x5a0>
 800fb36:	4b57      	ldr	r3, [pc, #348]	@ (800fc94 <UART_SetConfig+0x69c>)
 800fb38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb3a:	f003 0307 	and.w	r3, r3, #7
 800fb3e:	2b05      	cmp	r3, #5
 800fb40:	d826      	bhi.n	800fb90 <UART_SetConfig+0x598>
 800fb42:	a201      	add	r2, pc, #4	@ (adr r2, 800fb48 <UART_SetConfig+0x550>)
 800fb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb48:	0800fb61 	.word	0x0800fb61
 800fb4c:	0800fb69 	.word	0x0800fb69
 800fb50:	0800fb71 	.word	0x0800fb71
 800fb54:	0800fb79 	.word	0x0800fb79
 800fb58:	0800fb81 	.word	0x0800fb81
 800fb5c:	0800fb89 	.word	0x0800fb89
 800fb60:	2302      	movs	r3, #2
 800fb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb66:	e01a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb68:	2304      	movs	r3, #4
 800fb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6e:	e016      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb70:	2308      	movs	r3, #8
 800fb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb76:	e012      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb78:	2310      	movs	r3, #16
 800fb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7e:	e00e      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb80:	2320      	movs	r3, #32
 800fb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb86:	e00a      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb88:	2340      	movs	r3, #64	@ 0x40
 800fb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8e:	e006      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb90:	2380      	movs	r3, #128	@ 0x80
 800fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb96:	e002      	b.n	800fb9e <UART_SetConfig+0x5a6>
 800fb98:	2380      	movs	r3, #128	@ 0x80
 800fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a3f      	ldr	r2, [pc, #252]	@ (800fca0 <UART_SetConfig+0x6a8>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	f040 80f8 	bne.w	800fd9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fbaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbae:	2b20      	cmp	r3, #32
 800fbb0:	dc46      	bgt.n	800fc40 <UART_SetConfig+0x648>
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	f2c0 8082 	blt.w	800fcbc <UART_SetConfig+0x6c4>
 800fbb8:	3b02      	subs	r3, #2
 800fbba:	2b1e      	cmp	r3, #30
 800fbbc:	d87e      	bhi.n	800fcbc <UART_SetConfig+0x6c4>
 800fbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800fbc4 <UART_SetConfig+0x5cc>)
 800fbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc4:	0800fc47 	.word	0x0800fc47
 800fbc8:	0800fcbd 	.word	0x0800fcbd
 800fbcc:	0800fc4f 	.word	0x0800fc4f
 800fbd0:	0800fcbd 	.word	0x0800fcbd
 800fbd4:	0800fcbd 	.word	0x0800fcbd
 800fbd8:	0800fcbd 	.word	0x0800fcbd
 800fbdc:	0800fc5f 	.word	0x0800fc5f
 800fbe0:	0800fcbd 	.word	0x0800fcbd
 800fbe4:	0800fcbd 	.word	0x0800fcbd
 800fbe8:	0800fcbd 	.word	0x0800fcbd
 800fbec:	0800fcbd 	.word	0x0800fcbd
 800fbf0:	0800fcbd 	.word	0x0800fcbd
 800fbf4:	0800fcbd 	.word	0x0800fcbd
 800fbf8:	0800fcbd 	.word	0x0800fcbd
 800fbfc:	0800fc6f 	.word	0x0800fc6f
 800fc00:	0800fcbd 	.word	0x0800fcbd
 800fc04:	0800fcbd 	.word	0x0800fcbd
 800fc08:	0800fcbd 	.word	0x0800fcbd
 800fc0c:	0800fcbd 	.word	0x0800fcbd
 800fc10:	0800fcbd 	.word	0x0800fcbd
 800fc14:	0800fcbd 	.word	0x0800fcbd
 800fc18:	0800fcbd 	.word	0x0800fcbd
 800fc1c:	0800fcbd 	.word	0x0800fcbd
 800fc20:	0800fcbd 	.word	0x0800fcbd
 800fc24:	0800fcbd 	.word	0x0800fcbd
 800fc28:	0800fcbd 	.word	0x0800fcbd
 800fc2c:	0800fcbd 	.word	0x0800fcbd
 800fc30:	0800fcbd 	.word	0x0800fcbd
 800fc34:	0800fcbd 	.word	0x0800fcbd
 800fc38:	0800fcbd 	.word	0x0800fcbd
 800fc3c:	0800fcaf 	.word	0x0800fcaf
 800fc40:	2b40      	cmp	r3, #64	@ 0x40
 800fc42:	d037      	beq.n	800fcb4 <UART_SetConfig+0x6bc>
 800fc44:	e03a      	b.n	800fcbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc46:	f7fe f931 	bl	800deac <HAL_RCCEx_GetD3PCLK1Freq>
 800fc4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc4c:	e03c      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe f940 	bl	800ded8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc5c:	e034      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc5e:	f107 0318 	add.w	r3, r7, #24
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fa8c 	bl	800e180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc6c:	e02c      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc6e:	4b09      	ldr	r3, [pc, #36]	@ (800fc94 <UART_SetConfig+0x69c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f003 0320 	and.w	r3, r3, #32
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d016      	beq.n	800fca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc7a:	4b06      	ldr	r3, [pc, #24]	@ (800fc94 <UART_SetConfig+0x69c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	08db      	lsrs	r3, r3, #3
 800fc80:	f003 0303 	and.w	r3, r3, #3
 800fc84:	4a07      	ldr	r2, [pc, #28]	@ (800fca4 <UART_SetConfig+0x6ac>)
 800fc86:	fa22 f303 	lsr.w	r3, r2, r3
 800fc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc8c:	e01c      	b.n	800fcc8 <UART_SetConfig+0x6d0>
 800fc8e:	bf00      	nop
 800fc90:	40011400 	.word	0x40011400
 800fc94:	58024400 	.word	0x58024400
 800fc98:	40007800 	.word	0x40007800
 800fc9c:	40007c00 	.word	0x40007c00
 800fca0:	58000c00 	.word	0x58000c00
 800fca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fca8:	4b9d      	ldr	r3, [pc, #628]	@ (800ff20 <UART_SetConfig+0x928>)
 800fcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcac:	e00c      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcae:	4b9d      	ldr	r3, [pc, #628]	@ (800ff24 <UART_SetConfig+0x92c>)
 800fcb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcb2:	e009      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcba:	e005      	b.n	800fcc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fcc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fcc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 81de 	beq.w	801008c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcd4:	4a94      	ldr	r2, [pc, #592]	@ (800ff28 <UART_SetConfig+0x930>)
 800fcd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcda:	461a      	mov	r2, r3
 800fcdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcde:	fbb3 f3f2 	udiv	r3, r3, r2
 800fce2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d305      	bcc.n	800fd00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fcfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d903      	bls.n	800fd08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd06:	e1c1      	b.n	801008c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	60bb      	str	r3, [r7, #8]
 800fd0e:	60fa      	str	r2, [r7, #12]
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd14:	4a84      	ldr	r2, [pc, #528]	@ (800ff28 <UART_SetConfig+0x930>)
 800fd16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	603b      	str	r3, [r7, #0]
 800fd20:	607a      	str	r2, [r7, #4]
 800fd22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd2a:	f7f0 fced 	bl	8000708 <__aeabi_uldivmod>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	4610      	mov	r0, r2
 800fd34:	4619      	mov	r1, r3
 800fd36:	f04f 0200 	mov.w	r2, #0
 800fd3a:	f04f 0300 	mov.w	r3, #0
 800fd3e:	020b      	lsls	r3, r1, #8
 800fd40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd44:	0202      	lsls	r2, r0, #8
 800fd46:	6979      	ldr	r1, [r7, #20]
 800fd48:	6849      	ldr	r1, [r1, #4]
 800fd4a:	0849      	lsrs	r1, r1, #1
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	460c      	mov	r4, r1
 800fd50:	4605      	mov	r5, r0
 800fd52:	eb12 0804 	adds.w	r8, r2, r4
 800fd56:	eb43 0905 	adc.w	r9, r3, r5
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	469a      	mov	sl, r3
 800fd62:	4693      	mov	fp, r2
 800fd64:	4652      	mov	r2, sl
 800fd66:	465b      	mov	r3, fp
 800fd68:	4640      	mov	r0, r8
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	f7f0 fccc 	bl	8000708 <__aeabi_uldivmod>
 800fd70:	4602      	mov	r2, r0
 800fd72:	460b      	mov	r3, r1
 800fd74:	4613      	mov	r3, r2
 800fd76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fd7e:	d308      	bcc.n	800fd92 <UART_SetConfig+0x79a>
 800fd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd86:	d204      	bcs.n	800fd92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd8e:	60da      	str	r2, [r3, #12]
 800fd90:	e17c      	b.n	801008c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd98:	e178      	b.n	801008c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fda2:	f040 80c5 	bne.w	800ff30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fda6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fdaa:	2b20      	cmp	r3, #32
 800fdac:	dc48      	bgt.n	800fe40 <UART_SetConfig+0x848>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	db7b      	blt.n	800feaa <UART_SetConfig+0x8b2>
 800fdb2:	2b20      	cmp	r3, #32
 800fdb4:	d879      	bhi.n	800feaa <UART_SetConfig+0x8b2>
 800fdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800fdbc <UART_SetConfig+0x7c4>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fe47 	.word	0x0800fe47
 800fdc0:	0800fe4f 	.word	0x0800fe4f
 800fdc4:	0800feab 	.word	0x0800feab
 800fdc8:	0800feab 	.word	0x0800feab
 800fdcc:	0800fe57 	.word	0x0800fe57
 800fdd0:	0800feab 	.word	0x0800feab
 800fdd4:	0800feab 	.word	0x0800feab
 800fdd8:	0800feab 	.word	0x0800feab
 800fddc:	0800fe67 	.word	0x0800fe67
 800fde0:	0800feab 	.word	0x0800feab
 800fde4:	0800feab 	.word	0x0800feab
 800fde8:	0800feab 	.word	0x0800feab
 800fdec:	0800feab 	.word	0x0800feab
 800fdf0:	0800feab 	.word	0x0800feab
 800fdf4:	0800feab 	.word	0x0800feab
 800fdf8:	0800feab 	.word	0x0800feab
 800fdfc:	0800fe77 	.word	0x0800fe77
 800fe00:	0800feab 	.word	0x0800feab
 800fe04:	0800feab 	.word	0x0800feab
 800fe08:	0800feab 	.word	0x0800feab
 800fe0c:	0800feab 	.word	0x0800feab
 800fe10:	0800feab 	.word	0x0800feab
 800fe14:	0800feab 	.word	0x0800feab
 800fe18:	0800feab 	.word	0x0800feab
 800fe1c:	0800feab 	.word	0x0800feab
 800fe20:	0800feab 	.word	0x0800feab
 800fe24:	0800feab 	.word	0x0800feab
 800fe28:	0800feab 	.word	0x0800feab
 800fe2c:	0800feab 	.word	0x0800feab
 800fe30:	0800feab 	.word	0x0800feab
 800fe34:	0800feab 	.word	0x0800feab
 800fe38:	0800feab 	.word	0x0800feab
 800fe3c:	0800fe9d 	.word	0x0800fe9d
 800fe40:	2b40      	cmp	r3, #64	@ 0x40
 800fe42:	d02e      	beq.n	800fea2 <UART_SetConfig+0x8aa>
 800fe44:	e031      	b.n	800feaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe46:	f7fc fdb9 	bl	800c9bc <HAL_RCC_GetPCLK1Freq>
 800fe4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe4c:	e033      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe4e:	f7fc fdcb 	bl	800c9e8 <HAL_RCC_GetPCLK2Freq>
 800fe52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe54:	e02f      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7fe f83c 	bl	800ded8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe64:	e027      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe66:	f107 0318 	add.w	r3, r7, #24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe f988 	bl	800e180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe74:	e01f      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe76:	4b2d      	ldr	r3, [pc, #180]	@ (800ff2c <UART_SetConfig+0x934>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f003 0320 	and.w	r3, r3, #32
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d009      	beq.n	800fe96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe82:	4b2a      	ldr	r3, [pc, #168]	@ (800ff2c <UART_SetConfig+0x934>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	08db      	lsrs	r3, r3, #3
 800fe88:	f003 0303 	and.w	r3, r3, #3
 800fe8c:	4a24      	ldr	r2, [pc, #144]	@ (800ff20 <UART_SetConfig+0x928>)
 800fe8e:	fa22 f303 	lsr.w	r3, r2, r3
 800fe92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe94:	e00f      	b.n	800feb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fe96:	4b22      	ldr	r3, [pc, #136]	@ (800ff20 <UART_SetConfig+0x928>)
 800fe98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe9a:	e00c      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe9c:	4b21      	ldr	r3, [pc, #132]	@ (800ff24 <UART_SetConfig+0x92c>)
 800fe9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fea0:	e009      	b.n	800feb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fea8:	e005      	b.n	800feb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800feaa:	2300      	movs	r3, #0
 800feac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800feae:	2301      	movs	r3, #1
 800feb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800feb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800feb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 80e7 	beq.w	801008c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fec2:	4a19      	ldr	r2, [pc, #100]	@ (800ff28 <UART_SetConfig+0x930>)
 800fec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fec8:	461a      	mov	r2, r3
 800feca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fecc:	fbb3 f3f2 	udiv	r3, r3, r2
 800fed0:	005a      	lsls	r2, r3, #1
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	085b      	lsrs	r3, r3, #1
 800fed8:	441a      	add	r2, r3
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	fbb2 f3f3 	udiv	r3, r2, r3
 800fee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fee6:	2b0f      	cmp	r3, #15
 800fee8:	d916      	bls.n	800ff18 <UART_SetConfig+0x920>
 800feea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fef0:	d212      	bcs.n	800ff18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	f023 030f 	bic.w	r3, r3, #15
 800fefa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefe:	085b      	lsrs	r3, r3, #1
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	f003 0307 	and.w	r3, r3, #7
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ff14:	60da      	str	r2, [r3, #12]
 800ff16:	e0b9      	b.n	801008c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff1e:	e0b5      	b.n	801008c <UART_SetConfig+0xa94>
 800ff20:	03d09000 	.word	0x03d09000
 800ff24:	003d0900 	.word	0x003d0900
 800ff28:	0802cf58 	.word	0x0802cf58
 800ff2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ff30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff34:	2b20      	cmp	r3, #32
 800ff36:	dc49      	bgt.n	800ffcc <UART_SetConfig+0x9d4>
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	db7c      	blt.n	8010036 <UART_SetConfig+0xa3e>
 800ff3c:	2b20      	cmp	r3, #32
 800ff3e:	d87a      	bhi.n	8010036 <UART_SetConfig+0xa3e>
 800ff40:	a201      	add	r2, pc, #4	@ (adr r2, 800ff48 <UART_SetConfig+0x950>)
 800ff42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff46:	bf00      	nop
 800ff48:	0800ffd3 	.word	0x0800ffd3
 800ff4c:	0800ffdb 	.word	0x0800ffdb
 800ff50:	08010037 	.word	0x08010037
 800ff54:	08010037 	.word	0x08010037
 800ff58:	0800ffe3 	.word	0x0800ffe3
 800ff5c:	08010037 	.word	0x08010037
 800ff60:	08010037 	.word	0x08010037
 800ff64:	08010037 	.word	0x08010037
 800ff68:	0800fff3 	.word	0x0800fff3
 800ff6c:	08010037 	.word	0x08010037
 800ff70:	08010037 	.word	0x08010037
 800ff74:	08010037 	.word	0x08010037
 800ff78:	08010037 	.word	0x08010037
 800ff7c:	08010037 	.word	0x08010037
 800ff80:	08010037 	.word	0x08010037
 800ff84:	08010037 	.word	0x08010037
 800ff88:	08010003 	.word	0x08010003
 800ff8c:	08010037 	.word	0x08010037
 800ff90:	08010037 	.word	0x08010037
 800ff94:	08010037 	.word	0x08010037
 800ff98:	08010037 	.word	0x08010037
 800ff9c:	08010037 	.word	0x08010037
 800ffa0:	08010037 	.word	0x08010037
 800ffa4:	08010037 	.word	0x08010037
 800ffa8:	08010037 	.word	0x08010037
 800ffac:	08010037 	.word	0x08010037
 800ffb0:	08010037 	.word	0x08010037
 800ffb4:	08010037 	.word	0x08010037
 800ffb8:	08010037 	.word	0x08010037
 800ffbc:	08010037 	.word	0x08010037
 800ffc0:	08010037 	.word	0x08010037
 800ffc4:	08010037 	.word	0x08010037
 800ffc8:	08010029 	.word	0x08010029
 800ffcc:	2b40      	cmp	r3, #64	@ 0x40
 800ffce:	d02e      	beq.n	801002e <UART_SetConfig+0xa36>
 800ffd0:	e031      	b.n	8010036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffd2:	f7fc fcf3 	bl	800c9bc <HAL_RCC_GetPCLK1Freq>
 800ffd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffd8:	e033      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffda:	f7fc fd05 	bl	800c9e8 <HAL_RCC_GetPCLK2Freq>
 800ffde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffe0:	e02f      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd ff76 	bl	800ded8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ffec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fff0:	e027      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fff2:	f107 0318 	add.w	r3, r7, #24
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fe f8c2 	bl	800e180 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010000:	e01f      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010002:	4b2d      	ldr	r3, [pc, #180]	@ (80100b8 <UART_SetConfig+0xac0>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f003 0320 	and.w	r3, r3, #32
 801000a:	2b00      	cmp	r3, #0
 801000c:	d009      	beq.n	8010022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801000e:	4b2a      	ldr	r3, [pc, #168]	@ (80100b8 <UART_SetConfig+0xac0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	08db      	lsrs	r3, r3, #3
 8010014:	f003 0303 	and.w	r3, r3, #3
 8010018:	4a28      	ldr	r2, [pc, #160]	@ (80100bc <UART_SetConfig+0xac4>)
 801001a:	fa22 f303 	lsr.w	r3, r2, r3
 801001e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010020:	e00f      	b.n	8010042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010022:	4b26      	ldr	r3, [pc, #152]	@ (80100bc <UART_SetConfig+0xac4>)
 8010024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010026:	e00c      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010028:	4b25      	ldr	r3, [pc, #148]	@ (80100c0 <UART_SetConfig+0xac8>)
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801002c:	e009      	b.n	8010042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801002e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010034:	e005      	b.n	8010042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010036:	2300      	movs	r3, #0
 8010038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801003a:	2301      	movs	r3, #1
 801003c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010040:	bf00      	nop
    }

    if (pclk != 0U)
 8010042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010044:	2b00      	cmp	r3, #0
 8010046:	d021      	beq.n	801008c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801004c:	4a1d      	ldr	r2, [pc, #116]	@ (80100c4 <UART_SetConfig+0xacc>)
 801004e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010052:	461a      	mov	r2, r3
 8010054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010056:	fbb3 f2f2 	udiv	r2, r3, r2
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	085b      	lsrs	r3, r3, #1
 8010060:	441a      	add	r2, r3
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	fbb2 f3f3 	udiv	r3, r2, r3
 801006a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801006c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801006e:	2b0f      	cmp	r3, #15
 8010070:	d909      	bls.n	8010086 <UART_SetConfig+0xa8e>
 8010072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010078:	d205      	bcs.n	8010086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801007a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007c:	b29a      	uxth	r2, r3
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	60da      	str	r2, [r3, #12]
 8010084:	e002      	b.n	801008c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2201      	movs	r2, #1
 8010090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	2201      	movs	r2, #1
 8010098:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2200      	movs	r2, #0
 80100a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	2200      	movs	r2, #0
 80100a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80100a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3748      	adds	r7, #72	@ 0x48
 80100b0:	46bd      	mov	sp, r7
 80100b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80100b6:	bf00      	nop
 80100b8:	58024400 	.word	0x58024400
 80100bc:	03d09000 	.word	0x03d09000
 80100c0:	003d0900 	.word	0x003d0900
 80100c4:	0802cf58 	.word	0x0802cf58

080100c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d4:	f003 0308 	and.w	r3, r3, #8
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00a      	beq.n	80100f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	430a      	orrs	r2, r1
 80100f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100f6:	f003 0301 	and.w	r3, r3, #1
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00a      	beq.n	8010114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	430a      	orrs	r2, r1
 8010112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010118:	f003 0302 	and.w	r3, r3, #2
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00a      	beq.n	8010136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	430a      	orrs	r2, r1
 8010134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801013a:	f003 0304 	and.w	r3, r3, #4
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00a      	beq.n	8010158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	430a      	orrs	r2, r1
 8010156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801015c:	f003 0310 	and.w	r3, r3, #16
 8010160:	2b00      	cmp	r3, #0
 8010162:	d00a      	beq.n	801017a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	430a      	orrs	r2, r1
 8010178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801017e:	f003 0320 	and.w	r3, r3, #32
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00a      	beq.n	801019c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	689b      	ldr	r3, [r3, #8]
 801018c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	430a      	orrs	r2, r1
 801019a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d01a      	beq.n	80101de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	430a      	orrs	r2, r1
 80101bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101c6:	d10a      	bne.n	80101de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	430a      	orrs	r2, r1
 80101dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00a      	beq.n	8010200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	430a      	orrs	r2, r1
 80101fe:	605a      	str	r2, [r3, #4]
  }
}
 8010200:	bf00      	nop
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b098      	sub	sp, #96	@ 0x60
 8010210:	af02      	add	r7, sp, #8
 8010212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2200      	movs	r2, #0
 8010218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801021c:	f7f6 fcaa 	bl	8006b74 <HAL_GetTick>
 8010220:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f003 0308 	and.w	r3, r3, #8
 801022c:	2b08      	cmp	r3, #8
 801022e:	d12f      	bne.n	8010290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010238:	2200      	movs	r2, #0
 801023a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 f88e 	bl	8010360 <UART_WaitOnFlagUntilTimeout>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d022      	beq.n	8010290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010252:	e853 3f00 	ldrex	r3, [r3]
 8010256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801025a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801025e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010268:	647b      	str	r3, [r7, #68]	@ 0x44
 801026a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801026e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010270:	e841 2300 	strex	r3, r2, [r1]
 8010274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1e6      	bne.n	801024a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2220      	movs	r2, #32
 8010280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801028c:	2303      	movs	r3, #3
 801028e:	e063      	b.n	8010358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f003 0304 	and.w	r3, r3, #4
 801029a:	2b04      	cmp	r3, #4
 801029c:	d149      	bne.n	8010332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801029e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a6:	2200      	movs	r2, #0
 80102a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f857 	bl	8010360 <UART_WaitOnFlagUntilTimeout>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d03c      	beq.n	8010332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c0:	e853 3f00 	ldrex	r3, [r3]
 80102c4:	623b      	str	r3, [r7, #32]
   return(result);
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80102d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102de:	e841 2300 	strex	r3, r2, [r1]
 80102e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80102e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1e6      	bne.n	80102b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3308      	adds	r3, #8
 80102f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	e853 3f00 	ldrex	r3, [r3]
 80102f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f023 0301 	bic.w	r3, r3, #1
 8010300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	3308      	adds	r3, #8
 8010308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801030a:	61fa      	str	r2, [r7, #28]
 801030c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030e:	69b9      	ldr	r1, [r7, #24]
 8010310:	69fa      	ldr	r2, [r7, #28]
 8010312:	e841 2300 	strex	r3, r2, [r1]
 8010316:	617b      	str	r3, [r7, #20]
   return(result);
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1e5      	bne.n	80102ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2220      	movs	r2, #32
 8010322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801032e:	2303      	movs	r3, #3
 8010330:	e012      	b.n	8010358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2220      	movs	r2, #32
 8010336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2220      	movs	r2, #32
 801033e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3758      	adds	r7, #88	@ 0x58
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	603b      	str	r3, [r7, #0]
 801036c:	4613      	mov	r3, r2
 801036e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010370:	e04f      	b.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010378:	d04b      	beq.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801037a:	f7f6 fbfb 	bl	8006b74 <HAL_GetTick>
 801037e:	4602      	mov	r2, r0
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	69ba      	ldr	r2, [r7, #24]
 8010386:	429a      	cmp	r2, r3
 8010388:	d302      	bcc.n	8010390 <UART_WaitOnFlagUntilTimeout+0x30>
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010390:	2303      	movs	r3, #3
 8010392:	e04e      	b.n	8010432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f003 0304 	and.w	r3, r3, #4
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d037      	beq.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b80      	cmp	r3, #128	@ 0x80
 80103a6:	d034      	beq.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	2b40      	cmp	r3, #64	@ 0x40
 80103ac:	d031      	beq.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	69db      	ldr	r3, [r3, #28]
 80103b4:	f003 0308 	and.w	r3, r3, #8
 80103b8:	2b08      	cmp	r3, #8
 80103ba:	d110      	bne.n	80103de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	2208      	movs	r2, #8
 80103c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f000 fa43 	bl	8010850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2208      	movs	r2, #8
 80103ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2200      	movs	r2, #0
 80103d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80103da:	2301      	movs	r3, #1
 80103dc:	e029      	b.n	8010432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	69db      	ldr	r3, [r3, #28]
 80103e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80103ec:	d111      	bne.n	8010412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80103f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f000 fa29 	bl	8010850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2220      	movs	r2, #32
 8010402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801040e:	2303      	movs	r3, #3
 8010410:	e00f      	b.n	8010432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	69da      	ldr	r2, [r3, #28]
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	4013      	ands	r3, r2
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	429a      	cmp	r2, r3
 8010420:	bf0c      	ite	eq
 8010422:	2301      	moveq	r3, #1
 8010424:	2300      	movne	r3, #0
 8010426:	b2db      	uxtb	r3, r3
 8010428:	461a      	mov	r2, r3
 801042a:	79fb      	ldrb	r3, [r7, #7]
 801042c:	429a      	cmp	r2, r3
 801042e:	d0a0      	beq.n	8010372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
	...

0801043c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801043c:	b480      	push	{r7}
 801043e:	b0a3      	sub	sp, #140	@ 0x8c
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	4613      	mov	r3, r2
 8010448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	88fa      	ldrh	r2, [r7, #6]
 8010454:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	88fa      	ldrh	r2, [r7, #6]
 801045c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2200      	movs	r2, #0
 8010464:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801046e:	d10e      	bne.n	801048e <UART_Start_Receive_IT+0x52>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d105      	bne.n	8010484 <UART_Start_Receive_IT+0x48>
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801047e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010482:	e02d      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	22ff      	movs	r2, #255	@ 0xff
 8010488:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801048c:	e028      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10d      	bne.n	80104b2 <UART_Start_Receive_IT+0x76>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d104      	bne.n	80104a8 <UART_Start_Receive_IT+0x6c>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	22ff      	movs	r2, #255	@ 0xff
 80104a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104a6:	e01b      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	227f      	movs	r2, #127	@ 0x7f
 80104ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104b0:	e016      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	689b      	ldr	r3, [r3, #8]
 80104b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104ba:	d10d      	bne.n	80104d8 <UART_Start_Receive_IT+0x9c>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	691b      	ldr	r3, [r3, #16]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d104      	bne.n	80104ce <UART_Start_Receive_IT+0x92>
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	227f      	movs	r2, #127	@ 0x7f
 80104c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104cc:	e008      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	223f      	movs	r2, #63	@ 0x3f
 80104d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80104d6:	e003      	b.n	80104e0 <UART_Start_Receive_IT+0xa4>
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2200      	movs	r2, #0
 80104dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2222      	movs	r2, #34	@ 0x22
 80104ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3308      	adds	r3, #8
 80104f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104fa:	e853 3f00 	ldrex	r3, [r3]
 80104fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010502:	f043 0301 	orr.w	r3, r3, #1
 8010506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3308      	adds	r3, #8
 8010510:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010514:	673a      	str	r2, [r7, #112]	@ 0x70
 8010516:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010518:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801051a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801051c:	e841 2300 	strex	r3, r2, [r1]
 8010520:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1e3      	bne.n	80104f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801052c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010530:	d14f      	bne.n	80105d2 <UART_Start_Receive_IT+0x196>
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010538:	88fa      	ldrh	r2, [r7, #6]
 801053a:	429a      	cmp	r2, r3
 801053c:	d349      	bcc.n	80105d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010546:	d107      	bne.n	8010558 <UART_Start_Receive_IT+0x11c>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d103      	bne.n	8010558 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4a47      	ldr	r2, [pc, #284]	@ (8010670 <UART_Start_Receive_IT+0x234>)
 8010554:	675a      	str	r2, [r3, #116]	@ 0x74
 8010556:	e002      	b.n	801055e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	4a46      	ldr	r2, [pc, #280]	@ (8010674 <UART_Start_Receive_IT+0x238>)
 801055c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	691b      	ldr	r3, [r3, #16]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d01a      	beq.n	801059c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801056e:	e853 3f00 	ldrex	r3, [r3]
 8010572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801057a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	461a      	mov	r2, r3
 8010584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801058a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801058e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010590:	e841 2300 	strex	r3, r2, [r1]
 8010594:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e4      	bne.n	8010566 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3308      	adds	r3, #8
 80105a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105a6:	e853 3f00 	ldrex	r3, [r3]
 80105aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80105b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80105bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80105be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105c4:	e841 2300 	strex	r3, r2, [r1]
 80105c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1e5      	bne.n	801059c <UART_Start_Receive_IT+0x160>
 80105d0:	e046      	b.n	8010660 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105da:	d107      	bne.n	80105ec <UART_Start_Receive_IT+0x1b0>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d103      	bne.n	80105ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	4a24      	ldr	r2, [pc, #144]	@ (8010678 <UART_Start_Receive_IT+0x23c>)
 80105e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80105ea:	e002      	b.n	80105f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	4a23      	ldr	r2, [pc, #140]	@ (801067c <UART_Start_Receive_IT+0x240>)
 80105f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	691b      	ldr	r3, [r3, #16]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d019      	beq.n	801062e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010602:	e853 3f00 	ldrex	r3, [r3]
 8010606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801060e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	461a      	mov	r2, r3
 8010616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010618:	637b      	str	r3, [r7, #52]	@ 0x34
 801061a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801061e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010620:	e841 2300 	strex	r3, r2, [r1]
 8010624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1e6      	bne.n	80105fa <UART_Start_Receive_IT+0x1be>
 801062c:	e018      	b.n	8010660 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	613b      	str	r3, [r7, #16]
   return(result);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f043 0320 	orr.w	r3, r3, #32
 8010642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	461a      	mov	r2, r3
 801064a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801064c:	623b      	str	r3, [r7, #32]
 801064e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	69f9      	ldr	r1, [r7, #28]
 8010652:	6a3a      	ldr	r2, [r7, #32]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	61bb      	str	r3, [r7, #24]
   return(result);
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e6      	bne.n	801062e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	378c      	adds	r7, #140	@ 0x8c
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr
 801066e:	bf00      	nop
 8010670:	08011255 	.word	0x08011255
 8010674:	08010ef5 	.word	0x08010ef5
 8010678:	08010d3d 	.word	0x08010d3d
 801067c:	08010b85 	.word	0x08010b85

08010680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b096      	sub	sp, #88	@ 0x58
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	4613      	mov	r3, r2
 801068c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	88fa      	ldrh	r2, [r7, #6]
 8010698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2222      	movs	r2, #34	@ 0x22
 80106a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d02d      	beq.n	8010712 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106bc:	4a40      	ldr	r2, [pc, #256]	@ (80107c0 <UART_Start_Receive_DMA+0x140>)
 80106be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106c6:	4a3f      	ldr	r2, [pc, #252]	@ (80107c4 <UART_Start_Receive_DMA+0x144>)
 80106c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106d0:	4a3d      	ldr	r2, [pc, #244]	@ (80107c8 <UART_Start_Receive_DMA+0x148>)
 80106d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106da:	2200      	movs	r2, #0
 80106dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	3324      	adds	r3, #36	@ 0x24
 80106ea:	4619      	mov	r1, r3
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106f0:	461a      	mov	r2, r3
 80106f2:	88fb      	ldrh	r3, [r7, #6]
 80106f4:	f7f6 ff42 	bl	800757c <HAL_DMA_Start_IT>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d009      	beq.n	8010712 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2210      	movs	r2, #16
 8010702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2220      	movs	r2, #32
 801070a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e051      	b.n	80107b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d018      	beq.n	801074c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010722:	e853 3f00 	ldrex	r3, [r3]
 8010726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801072e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	461a      	mov	r2, r3
 8010736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010738:	64bb      	str	r3, [r7, #72]	@ 0x48
 801073a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801073e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010740:	e841 2300 	strex	r3, r2, [r1]
 8010744:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1e6      	bne.n	801071a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3308      	adds	r3, #8
 8010752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010756:	e853 3f00 	ldrex	r3, [r3]
 801075a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075e:	f043 0301 	orr.w	r3, r3, #1
 8010762:	653b      	str	r3, [r7, #80]	@ 0x50
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	3308      	adds	r3, #8
 801076a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801076c:	637a      	str	r2, [r7, #52]	@ 0x34
 801076e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010770:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010772:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010774:	e841 2300 	strex	r3, r2, [r1]
 8010778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801077a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077c:	2b00      	cmp	r3, #0
 801077e:	d1e5      	bne.n	801074c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3308      	adds	r3, #8
 8010786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	e853 3f00 	ldrex	r3, [r3]
 801078e:	613b      	str	r3, [r7, #16]
   return(result);
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3308      	adds	r3, #8
 801079e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80107a0:	623a      	str	r2, [r7, #32]
 80107a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a4:	69f9      	ldr	r1, [r7, #28]
 80107a6:	6a3a      	ldr	r2, [r7, #32]
 80107a8:	e841 2300 	strex	r3, r2, [r1]
 80107ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e5      	bne.n	8010780 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80107b4:	2300      	movs	r3, #0
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3758      	adds	r7, #88	@ 0x58
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	0801091d 	.word	0x0801091d
 80107c4:	08010a45 	.word	0x08010a45
 80107c8:	08010a83 	.word	0x08010a83

080107cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b08f      	sub	sp, #60	@ 0x3c
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	e853 3f00 	ldrex	r3, [r3]
 80107e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80107e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107fa:	e841 2300 	strex	r3, r2, [r1]
 80107fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1e6      	bne.n	80107d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3308      	adds	r3, #8
 801080c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	e853 3f00 	ldrex	r3, [r3]
 8010814:	60bb      	str	r3, [r7, #8]
   return(result);
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801081c:	633b      	str	r3, [r7, #48]	@ 0x30
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	3308      	adds	r3, #8
 8010824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010826:	61ba      	str	r2, [r7, #24]
 8010828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801082a:	6979      	ldr	r1, [r7, #20]
 801082c:	69ba      	ldr	r2, [r7, #24]
 801082e:	e841 2300 	strex	r3, r2, [r1]
 8010832:	613b      	str	r3, [r7, #16]
   return(result);
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1e5      	bne.n	8010806 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2220      	movs	r2, #32
 801083e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010842:	bf00      	nop
 8010844:	373c      	adds	r7, #60	@ 0x3c
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr
	...

08010850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010850:	b480      	push	{r7}
 8010852:	b095      	sub	sp, #84	@ 0x54
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010876:	643b      	str	r3, [r7, #64]	@ 0x40
 8010878:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801087c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801087e:	e841 2300 	strex	r3, r2, [r1]
 8010882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1e6      	bne.n	8010858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3308      	adds	r3, #8
 8010890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010892:	6a3b      	ldr	r3, [r7, #32]
 8010894:	e853 3f00 	ldrex	r3, [r3]
 8010898:	61fb      	str	r3, [r7, #28]
   return(result);
 801089a:	69fa      	ldr	r2, [r7, #28]
 801089c:	4b1e      	ldr	r3, [pc, #120]	@ (8010918 <UART_EndRxTransfer+0xc8>)
 801089e:	4013      	ands	r3, r2
 80108a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3308      	adds	r3, #8
 80108a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80108aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80108ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80108b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e5      	bne.n	801088a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d118      	bne.n	80108f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	e853 3f00 	ldrex	r3, [r3]
 80108d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	f023 0310 	bic.w	r3, r3, #16
 80108da:	647b      	str	r3, [r7, #68]	@ 0x44
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	461a      	mov	r2, r3
 80108e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108e4:	61bb      	str	r3, [r7, #24]
 80108e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e8:	6979      	ldr	r1, [r7, #20]
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	e841 2300 	strex	r3, r2, [r1]
 80108f0:	613b      	str	r3, [r7, #16]
   return(result);
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1e6      	bne.n	80108c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2220      	movs	r2, #32
 80108fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801090c:	bf00      	nop
 801090e:	3754      	adds	r7, #84	@ 0x54
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr
 8010918:	effffffe 	.word	0xeffffffe

0801091c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b09c      	sub	sp, #112	@ 0x70
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010928:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	69db      	ldr	r3, [r3, #28]
 801092e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010932:	d071      	beq.n	8010a18 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010936:	2200      	movs	r2, #0
 8010938:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801093c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010944:	e853 3f00 	ldrex	r3, [r3]
 8010948:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801094a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801094c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801095a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801095c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801095e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010962:	e841 2300 	strex	r3, r2, [r1]
 8010966:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1e6      	bne.n	801093c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801096e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3308      	adds	r3, #8
 8010974:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010978:	e853 3f00 	ldrex	r3, [r3]
 801097c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801097e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010980:	f023 0301 	bic.w	r3, r3, #1
 8010984:	667b      	str	r3, [r7, #100]	@ 0x64
 8010986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	3308      	adds	r3, #8
 801098c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801098e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010990:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010996:	e841 2300 	strex	r3, r2, [r1]
 801099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801099c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1e5      	bne.n	801096e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	3308      	adds	r3, #8
 80109a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ac:	e853 3f00 	ldrex	r3, [r3]
 80109b0:	623b      	str	r3, [r7, #32]
   return(result);
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80109b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80109ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3308      	adds	r3, #8
 80109c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80109c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80109c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109ca:	e841 2300 	strex	r3, r2, [r1]
 80109ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1e5      	bne.n	80109a2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80109d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109d8:	2220      	movs	r2, #32
 80109da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d118      	bne.n	8010a18 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	e853 3f00 	ldrex	r3, [r3]
 80109f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f023 0310 	bic.w	r3, r3, #16
 80109fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	461a      	mov	r2, r3
 8010a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a04:	61fb      	str	r3, [r7, #28]
 8010a06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a08:	69b9      	ldr	r1, [r7, #24]
 8010a0a:	69fa      	ldr	r2, [r7, #28]
 8010a0c:	e841 2300 	strex	r3, r2, [r1]
 8010a10:	617b      	str	r3, [r7, #20]
   return(result);
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e6      	bne.n	80109e6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d107      	bne.n	8010a36 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a30:	f7f3 f8b2 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a34:	e002      	b.n	8010a3c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010a36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010a38:	f7fe fdca 	bl	800f5d0 <HAL_UART_RxCpltCallback>
}
 8010a3c:	bf00      	nop
 8010a3e:	3770      	adds	r7, #112	@ 0x70
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2201      	movs	r2, #1
 8010a56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d109      	bne.n	8010a74 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a66:	085b      	lsrs	r3, r3, #1
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f7f3 f893 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010a72:	e002      	b.n	8010a7a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7fe fdb5 	bl	800f5e4 <HAL_UART_RxHalfCpltCallback>
}
 8010a7a:	bf00      	nop
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b086      	sub	sp, #24
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	689b      	ldr	r3, [r3, #8]
 8010aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010aaa:	2b80      	cmp	r3, #128	@ 0x80
 8010aac:	d109      	bne.n	8010ac2 <UART_DMAError+0x40>
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	2b21      	cmp	r3, #33	@ 0x21
 8010ab2:	d106      	bne.n	8010ac2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010abc:	6978      	ldr	r0, [r7, #20]
 8010abe:	f7ff fe85 	bl	80107cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010acc:	2b40      	cmp	r3, #64	@ 0x40
 8010ace:	d109      	bne.n	8010ae4 <UART_DMAError+0x62>
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2b22      	cmp	r3, #34	@ 0x22
 8010ad4:	d106      	bne.n	8010ae4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010ade:	6978      	ldr	r0, [r7, #20]
 8010ae0:	f7ff feb6 	bl	8010850 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010aea:	f043 0210 	orr.w	r2, r3, #16
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010af4:	6978      	ldr	r0, [r7, #20]
 8010af6:	f7f3 fe15 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010afa:	bf00      	nop
 8010afc:	3718      	adds	r7, #24
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2200      	movs	r2, #0
 8010b14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f7f3 fdff 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b26:	bf00      	nop
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b088      	sub	sp, #32
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	e853 3f00 	ldrex	r3, [r3]
 8010b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b4a:	61fb      	str	r3, [r7, #28]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	461a      	mov	r2, r3
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	61bb      	str	r3, [r7, #24]
 8010b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	6979      	ldr	r1, [r7, #20]
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	613b      	str	r3, [r7, #16]
   return(result);
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e6      	bne.n	8010b36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2220      	movs	r2, #32
 8010b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f7fe fd20 	bl	800f5bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b7c:	bf00      	nop
 8010b7e:	3720      	adds	r7, #32
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b09c      	sub	sp, #112	@ 0x70
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010b92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b9c:	2b22      	cmp	r3, #34	@ 0x22
 8010b9e:	f040 80be 	bne.w	8010d1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010bac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010bb0:	b2d9      	uxtb	r1, r3
 8010bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bbc:	400a      	ands	r2, r1
 8010bbe:	b2d2      	uxtb	r2, r2
 8010bc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bc6:	1c5a      	adds	r2, r3, #1
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f040 80a1 	bne.w	8010d2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bf4:	e853 3f00 	ldrex	r3, [r3]
 8010bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	461a      	mov	r2, r3
 8010c08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c12:	e841 2300 	strex	r3, r2, [r1]
 8010c16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1e6      	bne.n	8010bec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	3308      	adds	r3, #8
 8010c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c28:	e853 3f00 	ldrex	r3, [r3]
 8010c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c30:	f023 0301 	bic.w	r3, r3, #1
 8010c34:	667b      	str	r3, [r7, #100]	@ 0x64
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3308      	adds	r3, #8
 8010c3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c46:	e841 2300 	strex	r3, r2, [r1]
 8010c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1e5      	bne.n	8010c1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2220      	movs	r2, #32
 8010c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a33      	ldr	r2, [pc, #204]	@ (8010d38 <UART_RxISR_8BIT+0x1b4>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d01f      	beq.n	8010cb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d018      	beq.n	8010cb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c86:	e853 3f00 	ldrex	r3, [r3]
 8010c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8010c8c:	6a3b      	ldr	r3, [r7, #32]
 8010c8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010c92:	663b      	str	r3, [r7, #96]	@ 0x60
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ca4:	e841 2300 	strex	r3, r2, [r1]
 8010ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e6      	bne.n	8010c7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d12e      	bne.n	8010d16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	e853 3f00 	ldrex	r3, [r3]
 8010cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f023 0310 	bic.w	r3, r3, #16
 8010cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010cdc:	61fb      	str	r3, [r7, #28]
 8010cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce0:	69b9      	ldr	r1, [r7, #24]
 8010ce2:	69fa      	ldr	r2, [r7, #28]
 8010ce4:	e841 2300 	strex	r3, r2, [r1]
 8010ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1e6      	bne.n	8010cbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	69db      	ldr	r3, [r3, #28]
 8010cf6:	f003 0310 	and.w	r3, r3, #16
 8010cfa:	2b10      	cmp	r3, #16
 8010cfc:	d103      	bne.n	8010d06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2210      	movs	r2, #16
 8010d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7f2 ff42 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d14:	e00b      	b.n	8010d2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7fe fc5a 	bl	800f5d0 <HAL_UART_RxCpltCallback>
}
 8010d1c:	e007      	b.n	8010d2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	699a      	ldr	r2, [r3, #24]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	f042 0208 	orr.w	r2, r2, #8
 8010d2c:	619a      	str	r2, [r3, #24]
}
 8010d2e:	bf00      	nop
 8010d30:	3770      	adds	r7, #112	@ 0x70
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	58000c00 	.word	0x58000c00

08010d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b09c      	sub	sp, #112	@ 0x70
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010d4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d54:	2b22      	cmp	r3, #34	@ 0x22
 8010d56:	f040 80be 	bne.w	8010ed6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010d6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8010d6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010d72:	4013      	ands	r3, r2
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d7e:	1c9a      	adds	r2, r3, #2
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f040 80a1 	bne.w	8010ee6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010db8:	667b      	str	r3, [r7, #100]	@ 0x64
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8010dc4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010dc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010dca:	e841 2300 	strex	r3, r2, [r1]
 8010dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1e6      	bne.n	8010da4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de0:	e853 3f00 	ldrex	r3, [r3]
 8010de4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de8:	f023 0301 	bic.w	r3, r3, #1
 8010dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3308      	adds	r3, #8
 8010df4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010df6:	643a      	str	r2, [r7, #64]	@ 0x40
 8010df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010dfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010dfe:	e841 2300 	strex	r3, r2, [r1]
 8010e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e5      	bne.n	8010dd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2220      	movs	r2, #32
 8010e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2200      	movs	r2, #0
 8010e16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4a33      	ldr	r2, [pc, #204]	@ (8010ef0 <UART_RxISR_16BIT+0x1b4>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d01f      	beq.n	8010e68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d018      	beq.n	8010e68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e3c:	6a3b      	ldr	r3, [r7, #32]
 8010e3e:	e853 3f00 	ldrex	r3, [r3]
 8010e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	461a      	mov	r2, r3
 8010e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e5c:	e841 2300 	strex	r3, r2, [r1]
 8010e60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1e6      	bne.n	8010e36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d12e      	bne.n	8010ece <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	e853 3f00 	ldrex	r3, [r3]
 8010e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	f023 0310 	bic.w	r3, r3, #16
 8010e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	461a      	mov	r2, r3
 8010e92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010e94:	61bb      	str	r3, [r7, #24]
 8010e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e98:	6979      	ldr	r1, [r7, #20]
 8010e9a:	69ba      	ldr	r2, [r7, #24]
 8010e9c:	e841 2300 	strex	r3, r2, [r1]
 8010ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d1e6      	bne.n	8010e76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	f003 0310 	and.w	r3, r3, #16
 8010eb2:	2b10      	cmp	r3, #16
 8010eb4:	d103      	bne.n	8010ebe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2210      	movs	r2, #16
 8010ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7f2 fe66 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ecc:	e00b      	b.n	8010ee6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7fe fb7e 	bl	800f5d0 <HAL_UART_RxCpltCallback>
}
 8010ed4:	e007      	b.n	8010ee6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	699a      	ldr	r2, [r3, #24]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f042 0208 	orr.w	r2, r2, #8
 8010ee4:	619a      	str	r2, [r3, #24]
}
 8010ee6:	bf00      	nop
 8010ee8:	3770      	adds	r7, #112	@ 0x70
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	58000c00 	.word	0x58000c00

08010ef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b0ac      	sub	sp, #176	@ 0xb0
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f02:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	69db      	ldr	r3, [r3, #28]
 8010f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	689b      	ldr	r3, [r3, #8]
 8010f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f2a:	2b22      	cmp	r3, #34	@ 0x22
 8010f2c:	f040 8180 	bne.w	8011230 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010f36:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f3a:	e123      	b.n	8011184 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f42:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010f46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8010f4a:	b2d9      	uxtb	r1, r3
 8010f4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f56:	400a      	ands	r2, r1
 8010f58:	b2d2      	uxtb	r2, r2
 8010f5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d053      	beq.n	8011036 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f92:	f003 0301 	and.w	r3, r3, #1
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d011      	beq.n	8010fbe <UART_RxISR_8BIT_FIFOEN+0xca>
 8010f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d00b      	beq.n	8010fbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2201      	movs	r2, #1
 8010fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fb4:	f043 0201 	orr.w	r2, r3, #1
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fc2:	f003 0302 	and.w	r3, r3, #2
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d011      	beq.n	8010fee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010fce:	f003 0301 	and.w	r3, r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d00b      	beq.n	8010fee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2202      	movs	r2, #2
 8010fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fe4:	f043 0204 	orr.w	r2, r3, #4
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ff2:	f003 0304 	and.w	r3, r3, #4
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d011      	beq.n	801101e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00b      	beq.n	801101e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2204      	movs	r2, #4
 801100c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011014:	f043 0202 	orr.w	r2, r3, #2
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011024:	2b00      	cmp	r3, #0
 8011026:	d006      	beq.n	8011036 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7f3 fb7b 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801103c:	b29b      	uxth	r3, r3
 801103e:	2b00      	cmp	r3, #0
 8011040:	f040 80a0 	bne.w	8011184 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011066:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011068:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801106a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801106c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801106e:	e841 2300 	strex	r3, r2, [r1]
 8011072:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1e4      	bne.n	8011044 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	3308      	adds	r3, #8
 8011080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011084:	e853 3f00 	ldrex	r3, [r3]
 8011088:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801108a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801108c:	4b6e      	ldr	r3, [pc, #440]	@ (8011248 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801108e:	4013      	ands	r3, r2
 8011090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	3308      	adds	r3, #8
 801109a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801109e:	66ba      	str	r2, [r7, #104]	@ 0x68
 80110a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80110a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80110ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1e3      	bne.n	801107a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2220      	movs	r2, #32
 80110b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a60      	ldr	r2, [pc, #384]	@ (801124c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d021      	beq.n	8011114 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d01a      	beq.n	8011114 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e6:	e853 3f00 	ldrex	r3, [r3]
 80110ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80110ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80110f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	461a      	mov	r2, r3
 80110fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011100:	657b      	str	r3, [r7, #84]	@ 0x54
 8011102:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011104:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011108:	e841 2300 	strex	r3, r2, [r1]
 801110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801110e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1e4      	bne.n	80110de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011118:	2b01      	cmp	r3, #1
 801111a:	d130      	bne.n	801117e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801112a:	e853 3f00 	ldrex	r3, [r3]
 801112e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011132:	f023 0310 	bic.w	r3, r3, #16
 8011136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	461a      	mov	r2, r3
 8011140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011144:	643b      	str	r3, [r7, #64]	@ 0x40
 8011146:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011148:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801114a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801114c:	e841 2300 	strex	r3, r2, [r1]
 8011150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1e4      	bne.n	8011122 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	69db      	ldr	r3, [r3, #28]
 801115e:	f003 0310 	and.w	r3, r3, #16
 8011162:	2b10      	cmp	r3, #16
 8011164:	d103      	bne.n	801116e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2210      	movs	r2, #16
 801116c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011174:	4619      	mov	r1, r3
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7f2 fd0e 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
 801117c:	e002      	b.n	8011184 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7fe fa26 	bl	800f5d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011184:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011188:	2b00      	cmp	r3, #0
 801118a:	d006      	beq.n	801119a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801118c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011190:	f003 0320 	and.w	r3, r3, #32
 8011194:	2b00      	cmp	r3, #0
 8011196:	f47f aed1 	bne.w	8010f3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80111a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d049      	beq.n	8011240 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80111b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d242      	bcs.n	8011240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	3308      	adds	r3, #8
 80111c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3308      	adds	r3, #8
 80111da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80111de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80111e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111e6:	e841 2300 	strex	r3, r2, [r1]
 80111ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80111ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d1e3      	bne.n	80111ba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a16      	ldr	r2, [pc, #88]	@ (8011250 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80111f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	e853 3f00 	ldrex	r3, [r3]
 8011204:	60bb      	str	r3, [r7, #8]
   return(result);
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	f043 0320 	orr.w	r3, r3, #32
 801120c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	461a      	mov	r2, r3
 8011216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801121a:	61bb      	str	r3, [r7, #24]
 801121c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801121e:	6979      	ldr	r1, [r7, #20]
 8011220:	69ba      	ldr	r2, [r7, #24]
 8011222:	e841 2300 	strex	r3, r2, [r1]
 8011226:	613b      	str	r3, [r7, #16]
   return(result);
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d1e4      	bne.n	80111f8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801122e:	e007      	b.n	8011240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	699a      	ldr	r2, [r3, #24]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f042 0208 	orr.w	r2, r2, #8
 801123e:	619a      	str	r2, [r3, #24]
}
 8011240:	bf00      	nop
 8011242:	37b0      	adds	r7, #176	@ 0xb0
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	effffffe 	.word	0xeffffffe
 801124c:	58000c00 	.word	0x58000c00
 8011250:	08010b85 	.word	0x08010b85

08011254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b0ae      	sub	sp, #184	@ 0xb8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011262:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	69db      	ldr	r3, [r3, #28]
 801126c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801128a:	2b22      	cmp	r3, #34	@ 0x22
 801128c:	f040 8184 	bne.w	8011598 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011296:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801129a:	e127      	b.n	80114ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80112ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80112b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80112b6:	4013      	ands	r3, r2
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80112be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112c4:	1c9a      	adds	r2, r3, #2
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	3b01      	subs	r3, #1
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	69db      	ldr	r3, [r3, #28]
 80112e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80112e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80112ea:	f003 0307 	and.w	r3, r3, #7
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d053      	beq.n	801139a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80112f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d011      	beq.n	8011322 <UART_RxISR_16BIT_FIFOEN+0xce>
 80112fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00b      	beq.n	8011322 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2201      	movs	r2, #1
 8011310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011318:	f043 0201 	orr.w	r2, r3, #1
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011326:	f003 0302 	and.w	r3, r3, #2
 801132a:	2b00      	cmp	r3, #0
 801132c:	d011      	beq.n	8011352 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801132e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00b      	beq.n	8011352 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2202      	movs	r2, #2
 8011340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011348:	f043 0204 	orr.w	r2, r3, #4
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011356:	f003 0304 	and.w	r3, r3, #4
 801135a:	2b00      	cmp	r3, #0
 801135c:	d011      	beq.n	8011382 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801135e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00b      	beq.n	8011382 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2204      	movs	r2, #4
 8011370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011378:	f043 0202 	orr.w	r2, r3, #2
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011388:	2b00      	cmp	r3, #0
 801138a:	d006      	beq.n	801139a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7f3 f9c9 	bl	8004724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f040 80a2 	bne.w	80114ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113b0:	e853 3f00 	ldrex	r3, [r3]
 80113b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80113b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80113b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80113bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	461a      	mov	r2, r3
 80113c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80113ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80113d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80113d6:	e841 2300 	strex	r3, r2, [r1]
 80113da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80113dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1e2      	bne.n	80113a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	3308      	adds	r3, #8
 80113e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113ec:	e853 3f00 	ldrex	r3, [r3]
 80113f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80113f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80113f4:	4b6e      	ldr	r3, [pc, #440]	@ (80115b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80113f6:	4013      	ands	r3, r2
 80113f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3308      	adds	r3, #8
 8011402:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801140c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801140e:	e841 2300 	strex	r3, r2, [r1]
 8011412:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1e3      	bne.n	80113e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2220      	movs	r2, #32
 801141e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2200      	movs	r2, #0
 8011426:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4a60      	ldr	r2, [pc, #384]	@ (80115b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d021      	beq.n	801147c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d01a      	beq.n	801147c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801144c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801144e:	e853 3f00 	ldrex	r3, [r3]
 8011452:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801145a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	461a      	mov	r2, r3
 8011464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011468:	65bb      	str	r3, [r7, #88]	@ 0x58
 801146a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801146e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011470:	e841 2300 	strex	r3, r2, [r1]
 8011474:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1e4      	bne.n	8011446 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011480:	2b01      	cmp	r3, #1
 8011482:	d130      	bne.n	80114e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011492:	e853 3f00 	ldrex	r3, [r3]
 8011496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801149a:	f023 0310 	bic.w	r3, r3, #16
 801149e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	461a      	mov	r2, r3
 80114a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80114ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80114b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80114b4:	e841 2300 	strex	r3, r2, [r1]
 80114b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80114ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1e4      	bne.n	801148a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	69db      	ldr	r3, [r3, #28]
 80114c6:	f003 0310 	and.w	r3, r3, #16
 80114ca:	2b10      	cmp	r3, #16
 80114cc:	d103      	bne.n	80114d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2210      	movs	r2, #16
 80114d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7f2 fb5a 	bl	8003b98 <HAL_UARTEx_RxEventCallback>
 80114e4:	e002      	b.n	80114ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fe f872 	bl	800f5d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80114ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d006      	beq.n	8011502 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80114f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80114f8:	f003 0320 	and.w	r3, r3, #32
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f47f aecd 	bne.w	801129c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011508:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801150c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011510:	2b00      	cmp	r3, #0
 8011512:	d049      	beq.n	80115a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801151a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801151e:	429a      	cmp	r2, r3
 8011520:	d242      	bcs.n	80115a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	3308      	adds	r3, #8
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	e853 3f00 	ldrex	r3, [r3]
 8011530:	623b      	str	r3, [r7, #32]
   return(result);
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3308      	adds	r3, #8
 8011542:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011546:	633a      	str	r2, [r7, #48]	@ 0x30
 8011548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801154a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801154c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801154e:	e841 2300 	strex	r3, r2, [r1]
 8011552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1e3      	bne.n	8011522 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4a16      	ldr	r2, [pc, #88]	@ (80115b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801155e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	e853 3f00 	ldrex	r3, [r3]
 801156c:	60fb      	str	r3, [r7, #12]
   return(result);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f043 0320 	orr.w	r3, r3, #32
 8011574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	461a      	mov	r2, r3
 801157e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011582:	61fb      	str	r3, [r7, #28]
 8011584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011586:	69b9      	ldr	r1, [r7, #24]
 8011588:	69fa      	ldr	r2, [r7, #28]
 801158a:	e841 2300 	strex	r3, r2, [r1]
 801158e:	617b      	str	r3, [r7, #20]
   return(result);
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d1e4      	bne.n	8011560 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011596:	e007      	b.n	80115a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	699a      	ldr	r2, [r3, #24]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f042 0208 	orr.w	r2, r2, #8
 80115a6:	619a      	str	r2, [r3, #24]
}
 80115a8:	bf00      	nop
 80115aa:	37b8      	adds	r7, #184	@ 0xb8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	effffffe 	.word	0xeffffffe
 80115b4:	58000c00 	.word	0x58000c00
 80115b8:	08010d3d 	.word	0x08010d3d

080115bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80115d8:	bf00      	nop
 80115da:	370c      	adds	r7, #12
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr

080115e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011606:	2b01      	cmp	r3, #1
 8011608:	d101      	bne.n	801160e <HAL_UARTEx_DisableFifoMode+0x16>
 801160a:	2302      	movs	r3, #2
 801160c:	e027      	b.n	801165e <HAL_UARTEx_DisableFifoMode+0x66>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2224      	movs	r2, #36	@ 0x24
 801161a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f022 0201 	bic.w	r2, r2, #1
 8011634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801163c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2220      	movs	r2, #32
 8011650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3714      	adds	r7, #20
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr

0801166a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801166a:	b580      	push	{r7, lr}
 801166c:	b084      	sub	sp, #16
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801167a:	2b01      	cmp	r3, #1
 801167c:	d101      	bne.n	8011682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801167e:	2302      	movs	r3, #2
 8011680:	e02d      	b.n	80116de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2201      	movs	r2, #1
 8011686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2224      	movs	r2, #36	@ 0x24
 801168e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	f022 0201 	bic.w	r2, r2, #1
 80116a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	430a      	orrs	r2, r1
 80116bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f8f4 	bl	80118ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	68fa      	ldr	r2, [r7, #12]
 80116ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2220      	movs	r2, #32
 80116d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b084      	sub	sp, #16
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d101      	bne.n	80116fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80116fa:	2302      	movs	r3, #2
 80116fc:	e02d      	b.n	801175a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2224      	movs	r2, #36	@ 0x24
 801170a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	f022 0201 	bic.w	r2, r2, #1
 8011724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	430a      	orrs	r2, r1
 8011738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 f8b6 	bl	80118ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2220      	movs	r2, #32
 801174c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011758:	2300      	movs	r3, #0
}
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b08c      	sub	sp, #48	@ 0x30
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	4613      	mov	r3, r2
 801176e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801177c:	2b20      	cmp	r3, #32
 801177e:	d13b      	bne.n	80117f8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d002      	beq.n	801178c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8011786:	88fb      	ldrh	r3, [r7, #6]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d101      	bne.n	8011790 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 801178c:	2301      	movs	r3, #1
 801178e:	e034      	b.n	80117fa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2201      	movs	r2, #1
 8011794:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 801179c:	88fb      	ldrh	r3, [r7, #6]
 801179e:	461a      	mov	r2, r3
 80117a0:	68b9      	ldr	r1, [r7, #8]
 80117a2:	68f8      	ldr	r0, [r7, #12]
 80117a4:	f7fe fe4a 	bl	801043c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d11d      	bne.n	80117ec <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2210      	movs	r2, #16
 80117b6:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	e853 3f00 	ldrex	r3, [r3]
 80117c4:	617b      	str	r3, [r7, #20]
   return(result);
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	f043 0310 	orr.w	r3, r3, #16
 80117cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	461a      	mov	r2, r3
 80117d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80117d8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117da:	6a39      	ldr	r1, [r7, #32]
 80117dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117de:	e841 2300 	strex	r3, r2, [r1]
 80117e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1e6      	bne.n	80117b8 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80117ea:	e002      	b.n	80117f2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80117ec:	2301      	movs	r3, #1
 80117ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80117f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80117f6:	e000      	b.n	80117fa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80117f8:	2302      	movs	r3, #2
  }
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3730      	adds	r7, #48	@ 0x30
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b08c      	sub	sp, #48	@ 0x30
 8011806:	af00      	add	r7, sp, #0
 8011808:	60f8      	str	r0, [r7, #12]
 801180a:	60b9      	str	r1, [r7, #8]
 801180c:	4613      	mov	r3, r2
 801180e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011816:	2b20      	cmp	r3, #32
 8011818:	d142      	bne.n	80118a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011820:	88fb      	ldrh	r3, [r7, #6]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d101      	bne.n	801182a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	e03b      	b.n	80118a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2201      	movs	r2, #1
 801182e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011836:	88fb      	ldrh	r3, [r7, #6]
 8011838:	461a      	mov	r2, r3
 801183a:	68b9      	ldr	r1, [r7, #8]
 801183c:	68f8      	ldr	r0, [r7, #12]
 801183e:	f7fe ff1f 	bl	8010680 <UART_Start_Receive_DMA>
 8011842:	4603      	mov	r3, r0
 8011844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011848:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801184c:	2b00      	cmp	r3, #0
 801184e:	d124      	bne.n	801189a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011854:	2b01      	cmp	r3, #1
 8011856:	d11d      	bne.n	8011894 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2210      	movs	r2, #16
 801185e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	e853 3f00 	ldrex	r3, [r3]
 801186c:	617b      	str	r3, [r7, #20]
   return(result);
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	f043 0310 	orr.w	r3, r3, #16
 8011874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011880:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011882:	6a39      	ldr	r1, [r7, #32]
 8011884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011886:	e841 2300 	strex	r3, r2, [r1]
 801188a:	61fb      	str	r3, [r7, #28]
   return(result);
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1e6      	bne.n	8011860 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011892:	e002      	b.n	801189a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011894:	2301      	movs	r3, #1
 8011896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 801189a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801189e:	e000      	b.n	80118a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80118a0:	2302      	movs	r3, #2
  }
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3730      	adds	r7, #48	@ 0x30
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
	...

080118ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d108      	bne.n	80118ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2201      	movs	r2, #1
 80118c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2201      	movs	r2, #1
 80118c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80118cc:	e031      	b.n	8011932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80118ce:	2310      	movs	r3, #16
 80118d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80118d2:	2310      	movs	r3, #16
 80118d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	0e5b      	lsrs	r3, r3, #25
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	f003 0307 	and.w	r3, r3, #7
 80118e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	0f5b      	lsrs	r3, r3, #29
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	f003 0307 	and.w	r3, r3, #7
 80118f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80118f6:	7bbb      	ldrb	r3, [r7, #14]
 80118f8:	7b3a      	ldrb	r2, [r7, #12]
 80118fa:	4911      	ldr	r1, [pc, #68]	@ (8011940 <UARTEx_SetNbDataToProcess+0x94>)
 80118fc:	5c8a      	ldrb	r2, [r1, r2]
 80118fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011902:	7b3a      	ldrb	r2, [r7, #12]
 8011904:	490f      	ldr	r1, [pc, #60]	@ (8011944 <UARTEx_SetNbDataToProcess+0x98>)
 8011906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011908:	fb93 f3f2 	sdiv	r3, r3, r2
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011914:	7bfb      	ldrb	r3, [r7, #15]
 8011916:	7b7a      	ldrb	r2, [r7, #13]
 8011918:	4909      	ldr	r1, [pc, #36]	@ (8011940 <UARTEx_SetNbDataToProcess+0x94>)
 801191a:	5c8a      	ldrb	r2, [r1, r2]
 801191c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011920:	7b7a      	ldrb	r2, [r7, #13]
 8011922:	4908      	ldr	r1, [pc, #32]	@ (8011944 <UARTEx_SetNbDataToProcess+0x98>)
 8011924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011926:	fb93 f3f2 	sdiv	r3, r3, r2
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011932:	bf00      	nop
 8011934:	3714      	adds	r7, #20
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	0802cf70 	.word	0x0802cf70
 8011944:	0802cf78 	.word	0x0802cf78

08011948 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011948:	b5b0      	push	{r4, r5, r7, lr}
 801194a:	b08c      	sub	sp, #48	@ 0x30
 801194c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801194e:	4b8f      	ldr	r3, [pc, #572]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011950:	22c0      	movs	r2, #192	@ 0xc0
 8011952:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011954:	4b8d      	ldr	r3, [pc, #564]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011956:	22a8      	movs	r2, #168	@ 0xa8
 8011958:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801195a:	4b8c      	ldr	r3, [pc, #560]	@ (8011b8c <MX_LWIP_Init+0x244>)
 801195c:	2201      	movs	r2, #1
 801195e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8011960:	4b8a      	ldr	r3, [pc, #552]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011962:	2232      	movs	r2, #50	@ 0x32
 8011964:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8011966:	4b8a      	ldr	r3, [pc, #552]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011968:	22ff      	movs	r2, #255	@ 0xff
 801196a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801196c:	4b88      	ldr	r3, [pc, #544]	@ (8011b90 <MX_LWIP_Init+0x248>)
 801196e:	22ff      	movs	r2, #255	@ 0xff
 8011970:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8011972:	4b87      	ldr	r3, [pc, #540]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011974:	22ff      	movs	r2, #255	@ 0xff
 8011976:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011978:	4b85      	ldr	r3, [pc, #532]	@ (8011b90 <MX_LWIP_Init+0x248>)
 801197a:	2200      	movs	r2, #0
 801197c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801197e:	4b85      	ldr	r3, [pc, #532]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011980:	22c0      	movs	r2, #192	@ 0xc0
 8011982:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8011984:	4b83      	ldr	r3, [pc, #524]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011986:	22a8      	movs	r2, #168	@ 0xa8
 8011988:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 801198a:	4b82      	ldr	r3, [pc, #520]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 801198c:	2201      	movs	r2, #1
 801198e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8011990:	4b80      	ldr	r3, [pc, #512]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011992:	2201      	movs	r2, #1
 8011994:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8011996:	2100      	movs	r1, #0
 8011998:	2000      	movs	r0, #0
 801199a:	f007 f8f7 	bl	8018b8c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801199e:	4b7b      	ldr	r3, [pc, #492]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	061a      	lsls	r2, r3, #24
 80119a4:	4b79      	ldr	r3, [pc, #484]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119a6:	785b      	ldrb	r3, [r3, #1]
 80119a8:	041b      	lsls	r3, r3, #16
 80119aa:	431a      	orrs	r2, r3
 80119ac:	4b77      	ldr	r3, [pc, #476]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119ae:	789b      	ldrb	r3, [r3, #2]
 80119b0:	021b      	lsls	r3, r3, #8
 80119b2:	4313      	orrs	r3, r2
 80119b4:	4a75      	ldr	r2, [pc, #468]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119b6:	78d2      	ldrb	r2, [r2, #3]
 80119b8:	4313      	orrs	r3, r2
 80119ba:	061a      	lsls	r2, r3, #24
 80119bc:	4b73      	ldr	r3, [pc, #460]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	0619      	lsls	r1, r3, #24
 80119c2:	4b72      	ldr	r3, [pc, #456]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	041b      	lsls	r3, r3, #16
 80119c8:	4319      	orrs	r1, r3
 80119ca:	4b70      	ldr	r3, [pc, #448]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119cc:	789b      	ldrb	r3, [r3, #2]
 80119ce:	021b      	lsls	r3, r3, #8
 80119d0:	430b      	orrs	r3, r1
 80119d2:	496e      	ldr	r1, [pc, #440]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119d4:	78c9      	ldrb	r1, [r1, #3]
 80119d6:	430b      	orrs	r3, r1
 80119d8:	021b      	lsls	r3, r3, #8
 80119da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80119de:	431a      	orrs	r2, r3
 80119e0:	4b6a      	ldr	r3, [pc, #424]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	0619      	lsls	r1, r3, #24
 80119e6:	4b69      	ldr	r3, [pc, #420]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119e8:	785b      	ldrb	r3, [r3, #1]
 80119ea:	041b      	lsls	r3, r3, #16
 80119ec:	4319      	orrs	r1, r3
 80119ee:	4b67      	ldr	r3, [pc, #412]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119f0:	789b      	ldrb	r3, [r3, #2]
 80119f2:	021b      	lsls	r3, r3, #8
 80119f4:	430b      	orrs	r3, r1
 80119f6:	4965      	ldr	r1, [pc, #404]	@ (8011b8c <MX_LWIP_Init+0x244>)
 80119f8:	78c9      	ldrb	r1, [r1, #3]
 80119fa:	430b      	orrs	r3, r1
 80119fc:	0a1b      	lsrs	r3, r3, #8
 80119fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011a02:	431a      	orrs	r2, r3
 8011a04:	4b61      	ldr	r3, [pc, #388]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	0619      	lsls	r1, r3, #24
 8011a0a:	4b60      	ldr	r3, [pc, #384]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011a0c:	785b      	ldrb	r3, [r3, #1]
 8011a0e:	041b      	lsls	r3, r3, #16
 8011a10:	4319      	orrs	r1, r3
 8011a12:	4b5e      	ldr	r3, [pc, #376]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011a14:	789b      	ldrb	r3, [r3, #2]
 8011a16:	021b      	lsls	r3, r3, #8
 8011a18:	430b      	orrs	r3, r1
 8011a1a:	495c      	ldr	r1, [pc, #368]	@ (8011b8c <MX_LWIP_Init+0x244>)
 8011a1c:	78c9      	ldrb	r1, [r1, #3]
 8011a1e:	430b      	orrs	r3, r1
 8011a20:	0e1b      	lsrs	r3, r3, #24
 8011a22:	4313      	orrs	r3, r2
 8011a24:	4a5c      	ldr	r2, [pc, #368]	@ (8011b98 <MX_LWIP_Init+0x250>)
 8011a26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011a28:	4b59      	ldr	r3, [pc, #356]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	061a      	lsls	r2, r3, #24
 8011a2e:	4b58      	ldr	r3, [pc, #352]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a30:	785b      	ldrb	r3, [r3, #1]
 8011a32:	041b      	lsls	r3, r3, #16
 8011a34:	431a      	orrs	r2, r3
 8011a36:	4b56      	ldr	r3, [pc, #344]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a38:	789b      	ldrb	r3, [r3, #2]
 8011a3a:	021b      	lsls	r3, r3, #8
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	4a54      	ldr	r2, [pc, #336]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a40:	78d2      	ldrb	r2, [r2, #3]
 8011a42:	4313      	orrs	r3, r2
 8011a44:	061a      	lsls	r2, r3, #24
 8011a46:	4b52      	ldr	r3, [pc, #328]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	0619      	lsls	r1, r3, #24
 8011a4c:	4b50      	ldr	r3, [pc, #320]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	041b      	lsls	r3, r3, #16
 8011a52:	4319      	orrs	r1, r3
 8011a54:	4b4e      	ldr	r3, [pc, #312]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a56:	789b      	ldrb	r3, [r3, #2]
 8011a58:	021b      	lsls	r3, r3, #8
 8011a5a:	430b      	orrs	r3, r1
 8011a5c:	494c      	ldr	r1, [pc, #304]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a5e:	78c9      	ldrb	r1, [r1, #3]
 8011a60:	430b      	orrs	r3, r1
 8011a62:	021b      	lsls	r3, r3, #8
 8011a64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a68:	431a      	orrs	r2, r3
 8011a6a:	4b49      	ldr	r3, [pc, #292]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	0619      	lsls	r1, r3, #24
 8011a70:	4b47      	ldr	r3, [pc, #284]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a72:	785b      	ldrb	r3, [r3, #1]
 8011a74:	041b      	lsls	r3, r3, #16
 8011a76:	4319      	orrs	r1, r3
 8011a78:	4b45      	ldr	r3, [pc, #276]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a7a:	789b      	ldrb	r3, [r3, #2]
 8011a7c:	021b      	lsls	r3, r3, #8
 8011a7e:	430b      	orrs	r3, r1
 8011a80:	4943      	ldr	r1, [pc, #268]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a82:	78c9      	ldrb	r1, [r1, #3]
 8011a84:	430b      	orrs	r3, r1
 8011a86:	0a1b      	lsrs	r3, r3, #8
 8011a88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011a8c:	431a      	orrs	r2, r3
 8011a8e:	4b40      	ldr	r3, [pc, #256]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	0619      	lsls	r1, r3, #24
 8011a94:	4b3e      	ldr	r3, [pc, #248]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a96:	785b      	ldrb	r3, [r3, #1]
 8011a98:	041b      	lsls	r3, r3, #16
 8011a9a:	4319      	orrs	r1, r3
 8011a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011a9e:	789b      	ldrb	r3, [r3, #2]
 8011aa0:	021b      	lsls	r3, r3, #8
 8011aa2:	430b      	orrs	r3, r1
 8011aa4:	493a      	ldr	r1, [pc, #232]	@ (8011b90 <MX_LWIP_Init+0x248>)
 8011aa6:	78c9      	ldrb	r1, [r1, #3]
 8011aa8:	430b      	orrs	r3, r1
 8011aaa:	0e1b      	lsrs	r3, r3, #24
 8011aac:	4313      	orrs	r3, r2
 8011aae:	4a3b      	ldr	r2, [pc, #236]	@ (8011b9c <MX_LWIP_Init+0x254>)
 8011ab0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8011ab2:	4b38      	ldr	r3, [pc, #224]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	061a      	lsls	r2, r3, #24
 8011ab8:	4b36      	ldr	r3, [pc, #216]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011aba:	785b      	ldrb	r3, [r3, #1]
 8011abc:	041b      	lsls	r3, r3, #16
 8011abe:	431a      	orrs	r2, r3
 8011ac0:	4b34      	ldr	r3, [pc, #208]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ac2:	789b      	ldrb	r3, [r3, #2]
 8011ac4:	021b      	lsls	r3, r3, #8
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	4a32      	ldr	r2, [pc, #200]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011aca:	78d2      	ldrb	r2, [r2, #3]
 8011acc:	4313      	orrs	r3, r2
 8011ace:	061a      	lsls	r2, r3, #24
 8011ad0:	4b30      	ldr	r3, [pc, #192]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	0619      	lsls	r1, r3, #24
 8011ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ad8:	785b      	ldrb	r3, [r3, #1]
 8011ada:	041b      	lsls	r3, r3, #16
 8011adc:	4319      	orrs	r1, r3
 8011ade:	4b2d      	ldr	r3, [pc, #180]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ae0:	789b      	ldrb	r3, [r3, #2]
 8011ae2:	021b      	lsls	r3, r3, #8
 8011ae4:	430b      	orrs	r3, r1
 8011ae6:	492b      	ldr	r1, [pc, #172]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011ae8:	78c9      	ldrb	r1, [r1, #3]
 8011aea:	430b      	orrs	r3, r1
 8011aec:	021b      	lsls	r3, r3, #8
 8011aee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011af2:	431a      	orrs	r2, r3
 8011af4:	4b27      	ldr	r3, [pc, #156]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	0619      	lsls	r1, r3, #24
 8011afa:	4b26      	ldr	r3, [pc, #152]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011afc:	785b      	ldrb	r3, [r3, #1]
 8011afe:	041b      	lsls	r3, r3, #16
 8011b00:	4319      	orrs	r1, r3
 8011b02:	4b24      	ldr	r3, [pc, #144]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b04:	789b      	ldrb	r3, [r3, #2]
 8011b06:	021b      	lsls	r3, r3, #8
 8011b08:	430b      	orrs	r3, r1
 8011b0a:	4922      	ldr	r1, [pc, #136]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b0c:	78c9      	ldrb	r1, [r1, #3]
 8011b0e:	430b      	orrs	r3, r1
 8011b10:	0a1b      	lsrs	r3, r3, #8
 8011b12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b16:	431a      	orrs	r2, r3
 8011b18:	4b1e      	ldr	r3, [pc, #120]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	0619      	lsls	r1, r3, #24
 8011b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b20:	785b      	ldrb	r3, [r3, #1]
 8011b22:	041b      	lsls	r3, r3, #16
 8011b24:	4319      	orrs	r1, r3
 8011b26:	4b1b      	ldr	r3, [pc, #108]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b28:	789b      	ldrb	r3, [r3, #2]
 8011b2a:	021b      	lsls	r3, r3, #8
 8011b2c:	430b      	orrs	r3, r1
 8011b2e:	4919      	ldr	r1, [pc, #100]	@ (8011b94 <MX_LWIP_Init+0x24c>)
 8011b30:	78c9      	ldrb	r1, [r1, #3]
 8011b32:	430b      	orrs	r3, r1
 8011b34:	0e1b      	lsrs	r3, r3, #24
 8011b36:	4313      	orrs	r3, r2
 8011b38:	4a19      	ldr	r2, [pc, #100]	@ (8011ba0 <MX_LWIP_Init+0x258>)
 8011b3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8011b3c:	4b19      	ldr	r3, [pc, #100]	@ (8011ba4 <MX_LWIP_Init+0x25c>)
 8011b3e:	9302      	str	r3, [sp, #8]
 8011b40:	4b19      	ldr	r3, [pc, #100]	@ (8011ba8 <MX_LWIP_Init+0x260>)
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	2300      	movs	r3, #0
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	4b15      	ldr	r3, [pc, #84]	@ (8011ba0 <MX_LWIP_Init+0x258>)
 8011b4a:	4a14      	ldr	r2, [pc, #80]	@ (8011b9c <MX_LWIP_Init+0x254>)
 8011b4c:	4912      	ldr	r1, [pc, #72]	@ (8011b98 <MX_LWIP_Init+0x250>)
 8011b4e:	4817      	ldr	r0, [pc, #92]	@ (8011bac <MX_LWIP_Init+0x264>)
 8011b50:	f007 fe9e 	bl	8019890 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011b54:	4815      	ldr	r0, [pc, #84]	@ (8011bac <MX_LWIP_Init+0x264>)
 8011b56:	f008 f84d 	bl	8019bf4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8011b5a:	4814      	ldr	r0, [pc, #80]	@ (8011bac <MX_LWIP_Init+0x264>)
 8011b5c:	f008 f85a 	bl	8019c14 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8011b60:	4913      	ldr	r1, [pc, #76]	@ (8011bb0 <MX_LWIP_Init+0x268>)
 8011b62:	4812      	ldr	r0, [pc, #72]	@ (8011bac <MX_LWIP_Init+0x264>)
 8011b64:	f008 f958 	bl	8019e18 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8011b68:	4b12      	ldr	r3, [pc, #72]	@ (8011bb4 <MX_LWIP_Init+0x26c>)
 8011b6a:	1d3c      	adds	r4, r7, #4
 8011b6c:	461d      	mov	r5, r3
 8011b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8011b7a:	1d3b      	adds	r3, r7, #4
 8011b7c:	490b      	ldr	r1, [pc, #44]	@ (8011bac <MX_LWIP_Init+0x264>)
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f000 fd8c 	bl	801269c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011b84:	bf00      	nop
 8011b86:	3720      	adds	r7, #32
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8011b8c:	24001258 	.word	0x24001258
 8011b90:	2400125c 	.word	0x2400125c
 8011b94:	24001260 	.word	0x24001260
 8011b98:	2400124c 	.word	0x2400124c
 8011b9c:	24001250 	.word	0x24001250
 8011ba0:	24001254 	.word	0x24001254
 8011ba4:	08018a9d 	.word	0x08018a9d
 8011ba8:	080120c5 	.word	0x080120c5
 8011bac:	24001218 	.word	0x24001218
 8011bb0:	08011bb9 	.word	0x08011bb9
 8011bb4:	08029588 	.word	0x08029588

08011bb8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8011bd4:	4b04      	ldr	r3, [pc, #16]	@ (8011be8 <HAL_ETH_RxCpltCallback+0x1c>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fedb 	bl	8012994 <osSemaphoreRelease>
}
 8011bde:	bf00      	nop
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	2400126c 	.word	0x2400126c

08011bec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8011bf4:	4b04      	ldr	r3, [pc, #16]	@ (8011c08 <HAL_ETH_TxCpltCallback+0x1c>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f000 fecb 	bl	8012994 <osSemaphoreRelease>
}
 8011bfe:	bf00      	nop
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	24001270 	.word	0x24001270

08011c0c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7f8 ff6a 	bl	800aaee <HAL_ETH_GetDMAError>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c20:	2b80      	cmp	r3, #128	@ 0x80
 8011c22:	d104      	bne.n	8011c2e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8011c24:	4b04      	ldr	r3, [pc, #16]	@ (8011c38 <HAL_ETH_ErrorCallback+0x2c>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f000 feb3 	bl	8012994 <osSemaphoreRelease>
  }
}
 8011c2e:	bf00      	nop
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	2400126c 	.word	0x2400126c

08011c3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011c3c:	b5b0      	push	{r4, r5, r7, lr}
 8011c3e:	b0ac      	sub	sp, #176	@ 0xb0
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8011c50:	2300      	movs	r3, #0
 8011c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8011c56:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011c5a:	2264      	movs	r2, #100	@ 0x64
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f013 fcf4 	bl	802564c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011c64:	4b93      	ldr	r3, [pc, #588]	@ (8011eb4 <low_level_init+0x278>)
 8011c66:	4a94      	ldr	r2, [pc, #592]	@ (8011eb8 <low_level_init+0x27c>)
 8011c68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8011c70:	2380      	movs	r3, #128	@ 0x80
 8011c72:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8011c76:	23e1      	movs	r3, #225	@ 0xe1
 8011c78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8011c82:	2300      	movs	r3, #0
 8011c84:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8011c8e:	4a89      	ldr	r2, [pc, #548]	@ (8011eb4 <low_level_init+0x278>)
 8011c90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c94:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8011c96:	4b87      	ldr	r3, [pc, #540]	@ (8011eb4 <low_level_init+0x278>)
 8011c98:	2201      	movs	r2, #1
 8011c9a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011c9c:	4b85      	ldr	r3, [pc, #532]	@ (8011eb4 <low_level_init+0x278>)
 8011c9e:	4a87      	ldr	r2, [pc, #540]	@ (8011ebc <low_level_init+0x280>)
 8011ca0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011ca2:	4b84      	ldr	r3, [pc, #528]	@ (8011eb4 <low_level_init+0x278>)
 8011ca4:	4a86      	ldr	r2, [pc, #536]	@ (8011ec0 <low_level_init+0x284>)
 8011ca6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8011ca8:	4b82      	ldr	r3, [pc, #520]	@ (8011eb4 <low_level_init+0x278>)
 8011caa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8011cae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011cb0:	4880      	ldr	r0, [pc, #512]	@ (8011eb4 <low_level_init+0x278>)
 8011cb2:	f7f7 ff43 	bl	8009b3c <HAL_ETH_Init>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011cbc:	2238      	movs	r2, #56	@ 0x38
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	4880      	ldr	r0, [pc, #512]	@ (8011ec4 <low_level_init+0x288>)
 8011cc2:	f013 fcc3 	bl	802564c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8011cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8011ec4 <low_level_init+0x288>)
 8011cc8:	2221      	movs	r2, #33	@ 0x21
 8011cca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8011ec4 <low_level_init+0x288>)
 8011cce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8011cd2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8011cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8011ec4 <low_level_init+0x288>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011cda:	487b      	ldr	r0, [pc, #492]	@ (8011ec8 <low_level_init+0x28c>)
 8011cdc:	f007 fc92 	bl	8019604 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2206      	movs	r2, #6
 8011ce4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011ce8:	4b72      	ldr	r3, [pc, #456]	@ (8011eb4 <low_level_init+0x278>)
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	781a      	ldrb	r2, [r3, #0]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8011eb4 <low_level_init+0x278>)
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	785a      	ldrb	r2, [r3, #1]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011d00:	4b6c      	ldr	r3, [pc, #432]	@ (8011eb4 <low_level_init+0x278>)
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	789a      	ldrb	r2, [r3, #2]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011d0c:	4b69      	ldr	r3, [pc, #420]	@ (8011eb4 <low_level_init+0x278>)
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	78da      	ldrb	r2, [r3, #3]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011d18:	4b66      	ldr	r3, [pc, #408]	@ (8011eb4 <low_level_init+0x278>)
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	791a      	ldrb	r2, [r3, #4]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011d24:	4b63      	ldr	r3, [pc, #396]	@ (8011eb4 <low_level_init+0x278>)
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	795a      	ldrb	r2, [r3, #5]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8011d36:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011d3e:	f043 030a 	orr.w	r3, r3, #10
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d4e:	2300      	movs	r3, #0
 8011d50:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8011d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d56:	2101      	movs	r1, #1
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f000 fd9b 	bl	8012894 <osSemaphoreCreate>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	4a5a      	ldr	r2, [pc, #360]	@ (8011ecc <low_level_init+0x290>)
 8011d62:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8011d64:	2300      	movs	r3, #0
 8011d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d68:	2300      	movs	r3, #0
 8011d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8011d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011d70:	2101      	movs	r1, #1
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 fd8e 	bl	8012894 <osSemaphoreCreate>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	4a55      	ldr	r2, [pc, #340]	@ (8011ed0 <low_level_init+0x294>)
 8011d7c:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8011d7e:	4b53      	ldr	r3, [pc, #332]	@ (8011ecc <low_level_init+0x290>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2100      	movs	r1, #0
 8011d84:	4618      	mov	r0, r3
 8011d86:	f000 fdb7 	bl	80128f8 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8011d8a:	4b51      	ldr	r3, [pc, #324]	@ (8011ed0 <low_level_init+0x294>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2100      	movs	r1, #0
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 fdb1 	bl	80128f8 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011d96:	4b4f      	ldr	r3, [pc, #316]	@ (8011ed4 <low_level_init+0x298>)
 8011d98:	f107 0408 	add.w	r4, r7, #8
 8011d9c:	461d      	mov	r5, r3
 8011d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011daa:	f107 0308 	add.w	r3, r7, #8
 8011dae:	6879      	ldr	r1, [r7, #4]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f000 fc73 	bl	801269c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011db6:	4948      	ldr	r1, [pc, #288]	@ (8011ed8 <low_level_init+0x29c>)
 8011db8:	4848      	ldr	r0, [pc, #288]	@ (8011edc <low_level_init+0x2a0>)
 8011dba:	f7f4 fd84 	bl	80068c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8011dbe:	4847      	ldr	r0, [pc, #284]	@ (8011edc <low_level_init+0x2a0>)
 8011dc0:	f7f4 fdb3 	bl	800692a <LAN8742_Init>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d006      	beq.n	8011dd8 <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f007 fff4 	bl	8019db8 <netif_set_link_down>
    netif_set_down(netif);
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f007 ff8b 	bl	8019cec <netif_set_down>
 8011dd6:	e06a      	b.n	8011eae <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8011dd8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d164      	bne.n	8011eaa <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011de0:	483e      	ldr	r0, [pc, #248]	@ (8011edc <low_level_init+0x2a0>)
 8011de2:	f7f4 fdef 	bl	80069c4 <LAN8742_GetLinkState>
 8011de6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8011dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	dc06      	bgt.n	8011e00 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f007 ffe0 	bl	8019db8 <netif_set_link_down>
      netif_set_down(netif);
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f007 ff77 	bl	8019cec <netif_set_down>
 8011dfe:	e056      	b.n	8011eae <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8011e00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011e04:	3b02      	subs	r3, #2
 8011e06:	2b03      	cmp	r3, #3
 8011e08:	d82a      	bhi.n	8011e60 <low_level_init+0x224>
 8011e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e10 <low_level_init+0x1d4>)
 8011e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e10:	08011e21 	.word	0x08011e21
 8011e14:	08011e33 	.word	0x08011e33
 8011e18:	08011e43 	.word	0x08011e43
 8011e1c:	08011e53 	.word	0x08011e53
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011e28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011e30:	e01f      	b.n	8011e72 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011e32:	2300      	movs	r3, #0
 8011e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011e40:	e017      	b.n	8011e72 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8011e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011e50:	e00f      	b.n	8011e72 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8011e52:	2300      	movs	r3, #0
 8011e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011e5e:	e008      	b.n	8011e72 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8011e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8011e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8011e70:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011e72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011e76:	4619      	mov	r1, r3
 8011e78:	480e      	ldr	r0, [pc, #56]	@ (8011eb4 <low_level_init+0x278>)
 8011e7a:	f7f8 fbed 	bl	800a658 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8011e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e82:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8011e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e88:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011e8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4808      	ldr	r0, [pc, #32]	@ (8011eb4 <low_level_init+0x278>)
 8011e92:	f7f8 fdb5 	bl	800aa00 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8011e96:	4807      	ldr	r0, [pc, #28]	@ (8011eb4 <low_level_init+0x278>)
 8011e98:	f7f7 ff4e 	bl	8009d38 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f007 feb9 	bl	8019c14 <netif_set_up>
    netif_set_link_up(netif);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f007 ff54 	bl	8019d50 <netif_set_link_up>
 8011ea8:	e001      	b.n	8011eae <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8011eaa:	f7f3 f9f3 	bl	8005294 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011eae:	37b0      	adds	r7, #176	@ 0xb0
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8011eb4:	24001274 	.word	0x24001274
 8011eb8:	40028000 	.word	0x40028000
 8011ebc:	30000080 	.word	0x30000080
 8011ec0:	30000000 	.word	0x30000000
 8011ec4:	24001324 	.word	0x24001324
 8011ec8:	0802cf80 	.word	0x0802cf80
 8011ecc:	2400126c 	.word	0x2400126c
 8011ed0:	24001270 	.word	0x24001270
 8011ed4:	080295ac 	.word	0x080295ac
 8011ed8:	240001f4 	.word	0x240001f4
 8011edc:	2400135c 	.word	0x2400135c

08011ee0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b092      	sub	sp, #72	@ 0x48
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8011eea:	2300      	movs	r3, #0
 8011eec:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8011ef8:	f107 030c 	add.w	r3, r7, #12
 8011efc:	2230      	movs	r2, #48	@ 0x30
 8011efe:	2100      	movs	r1, #0
 8011f00:	4618      	mov	r0, r3
 8011f02:	f013 fba3 	bl	802564c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011f06:	f107 030c 	add.w	r3, r7, #12
 8011f0a:	2230      	movs	r2, #48	@ 0x30
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f013 fb9c 	bl	802564c <memset>

  for(q = p; q != NULL; q = q->next)
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f18:	e045      	b.n	8011fa6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f1c:	2b03      	cmp	r3, #3
 8011f1e:	d902      	bls.n	8011f26 <low_level_output+0x46>
      return ERR_IF;
 8011f20:	f06f 030b 	mvn.w	r3, #11
 8011f24:	e07f      	b.n	8012026 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8011f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f28:	6859      	ldr	r1, [r3, #4]
 8011f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	3348      	adds	r3, #72	@ 0x48
 8011f36:	443b      	add	r3, r7
 8011f38:	3b3c      	subs	r3, #60	@ 0x3c
 8011f3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8011f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f3e:	895b      	ldrh	r3, [r3, #10]
 8011f40:	4619      	mov	r1, r3
 8011f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f44:	4613      	mov	r3, r2
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	4413      	add	r3, r2
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	3348      	adds	r3, #72	@ 0x48
 8011f4e:	443b      	add	r3, r7
 8011f50:	3b38      	subs	r3, #56	@ 0x38
 8011f52:	6019      	str	r1, [r3, #0]

    if(i>0)
 8011f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d011      	beq.n	8011f7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8011f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f5c:	1e5a      	subs	r2, r3, #1
 8011f5e:	f107 000c 	add.w	r0, r7, #12
 8011f62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011f64:	460b      	mov	r3, r1
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	440b      	add	r3, r1
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	18c1      	adds	r1, r0, r3
 8011f6e:	4613      	mov	r3, r2
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	4413      	add	r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	3348      	adds	r3, #72	@ 0x48
 8011f78:	443b      	add	r3, r7
 8011f7a:	3b34      	subs	r3, #52	@ 0x34
 8011f7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8011f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d109      	bne.n	8011f9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8011f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f88:	4613      	mov	r3, r2
 8011f8a:	005b      	lsls	r3, r3, #1
 8011f8c:	4413      	add	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	3348      	adds	r3, #72	@ 0x48
 8011f92:	443b      	add	r3, r7
 8011f94:	3b34      	subs	r3, #52	@ 0x34
 8011f96:	2200      	movs	r2, #0
 8011f98:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8011fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8011fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1b6      	bne.n	8011f1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	891b      	ldrh	r3, [r3, #8]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8012030 <low_level_output+0x150>)
 8011fb4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8012030 <low_level_output+0x150>)
 8011fb8:	f107 030c 	add.w	r3, r7, #12
 8011fbc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8011fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8012030 <low_level_output+0x150>)
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8011fc4:	6838      	ldr	r0, [r7, #0]
 8011fc6:	f008 fbad 	bl	801a724 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8011fca:	4919      	ldr	r1, [pc, #100]	@ (8012030 <low_level_output+0x150>)
 8011fcc:	4819      	ldr	r0, [pc, #100]	@ (8012034 <low_level_output+0x154>)
 8011fce:	f7f7 ff9f 	bl	8009f10 <HAL_ETH_Transmit_IT>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d103      	bne.n	8011fe0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011fde:	e01b      	b.n	8012018 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8011fe0:	4814      	ldr	r0, [pc, #80]	@ (8012034 <low_level_output+0x154>)
 8011fe2:	f7f8 fd77 	bl	800aad4 <HAL_ETH_GetError>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	f003 0302 	and.w	r3, r3, #2
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00d      	beq.n	801200c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8011ff0:	4b11      	ldr	r3, [pc, #68]	@ (8012038 <low_level_output+0x158>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f000 fc7d 	bl	80128f8 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8011ffe:	480d      	ldr	r0, [pc, #52]	@ (8012034 <low_level_output+0x154>)
 8012000:	f7f8 f90d 	bl	800a21e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8012004:	23fe      	movs	r3, #254	@ 0xfe
 8012006:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801200a:	e005      	b.n	8012018 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 801200c:	6838      	ldr	r0, [r7, #0]
 801200e:	f008 fae3 	bl	801a5d8 <pbuf_free>
        errval =  ERR_IF;
 8012012:	23f4      	movs	r3, #244	@ 0xf4
 8012014:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8012018:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801201c:	f113 0f02 	cmn.w	r3, #2
 8012020:	d0d3      	beq.n	8011fca <low_level_output+0xea>

  return errval;
 8012022:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8012026:	4618      	mov	r0, r3
 8012028:	3748      	adds	r7, #72	@ 0x48
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
 801202e:	bf00      	nop
 8012030:	24001324 	.word	0x24001324
 8012034:	24001274 	.word	0x24001274
 8012038:	24001270 	.word	0x24001270

0801203c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8012044:	2300      	movs	r3, #0
 8012046:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8012048:	4b07      	ldr	r3, [pc, #28]	@ (8012068 <low_level_input+0x2c>)
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d105      	bne.n	801205c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8012050:	f107 030c 	add.w	r3, r7, #12
 8012054:	4619      	mov	r1, r3
 8012056:	4805      	ldr	r0, [pc, #20]	@ (801206c <low_level_input+0x30>)
 8012058:	f7f7 ffab 	bl	8009fb2 <HAL_ETH_ReadData>
  }

  return p;
 801205c:	68fb      	ldr	r3, [r7, #12]
}
 801205e:	4618      	mov	r0, r3
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	24001268 	.word	0x24001268
 801206c:	24001274 	.word	0x24001274

08012070 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8012078:	2300      	movs	r3, #0
 801207a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012080:	4b0f      	ldr	r3, [pc, #60]	@ (80120c0 <ethernetif_input+0x50>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f04f 31ff 	mov.w	r1, #4294967295
 8012088:	4618      	mov	r0, r3
 801208a:	f000 fc35 	bl	80128f8 <osSemaphoreWait>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d1f5      	bne.n	8012080 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8012094:	68b8      	ldr	r0, [r7, #8]
 8012096:	f7ff ffd1 	bl	801203c <low_level_input>
 801209a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00a      	beq.n	80120b8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	691b      	ldr	r3, [r3, #16]
 80120a6:	68b9      	ldr	r1, [r7, #8]
 80120a8:	68f8      	ldr	r0, [r7, #12]
 80120aa:	4798      	blx	r3
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f008 fa90 	bl	801a5d8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d1ea      	bne.n	8012094 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80120be:	e7df      	b.n	8012080 <ethernetif_input+0x10>
 80120c0:	2400126c 	.word	0x2400126c

080120c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <ethernetif_init+0x1c>
 80120d2:	4b0e      	ldr	r3, [pc, #56]	@ (801210c <ethernetif_init+0x48>)
 80120d4:	f240 2219 	movw	r2, #537	@ 0x219
 80120d8:	490d      	ldr	r1, [pc, #52]	@ (8012110 <ethernetif_init+0x4c>)
 80120da:	480e      	ldr	r0, [pc, #56]	@ (8012114 <ethernetif_init+0x50>)
 80120dc:	f013 f9ca 	bl	8025474 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2273      	movs	r2, #115	@ 0x73
 80120e4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2274      	movs	r2, #116	@ 0x74
 80120ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4a09      	ldr	r2, [pc, #36]	@ (8012118 <ethernetif_init+0x54>)
 80120f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4a08      	ldr	r2, [pc, #32]	@ (801211c <ethernetif_init+0x58>)
 80120fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7ff fd9d 	bl	8011c3c <low_level_init>

  return ERR_OK;
 8012102:	2300      	movs	r3, #0
}
 8012104:	4618      	mov	r0, r3
 8012106:	3708      	adds	r7, #8
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	080295c8 	.word	0x080295c8
 8012110:	080295e4 	.word	0x080295e4
 8012114:	080295f4 	.word	0x080295f4
 8012118:	08021ffd 	.word	0x08021ffd
 801211c:	08011ee1 	.word	0x08011ee1

08012120 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801212c:	68f9      	ldr	r1, [r7, #12]
 801212e:	4809      	ldr	r0, [pc, #36]	@ (8012154 <pbuf_free_custom+0x34>)
 8012130:	f007 fb58 	bl	80197e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8012134:	4b08      	ldr	r3, [pc, #32]	@ (8012158 <pbuf_free_custom+0x38>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d107      	bne.n	801214c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801213c:	4b06      	ldr	r3, [pc, #24]	@ (8012158 <pbuf_free_custom+0x38>)
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8012142:	4b06      	ldr	r3, [pc, #24]	@ (801215c <pbuf_free_custom+0x3c>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4618      	mov	r0, r3
 8012148:	f000 fc24 	bl	8012994 <osSemaphoreRelease>
  }
}
 801214c:	bf00      	nop
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	0802cf80 	.word	0x0802cf80
 8012158:	24001268 	.word	0x24001268
 801215c:	2400126c 	.word	0x2400126c

08012160 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012164:	f7f4 fd06 	bl	8006b74 <HAL_GetTick>
 8012168:	4603      	mov	r3, r0
}
 801216a:	4618      	mov	r0, r3
 801216c:	bd80      	pop	{r7, pc}
	...

08012170 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b08e      	sub	sp, #56	@ 0x38
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801217c:	2200      	movs	r2, #0
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	605a      	str	r2, [r3, #4]
 8012182:	609a      	str	r2, [r3, #8]
 8012184:	60da      	str	r2, [r3, #12]
 8012186:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4a5d      	ldr	r2, [pc, #372]	@ (8012304 <HAL_ETH_MspInit+0x194>)
 801218e:	4293      	cmp	r3, r2
 8012190:	f040 80b3 	bne.w	80122fa <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8012194:	4b5c      	ldr	r3, [pc, #368]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 8012196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801219a:	4a5b      	ldr	r2, [pc, #364]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801219c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80121a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80121a4:	4b58      	ldr	r3, [pc, #352]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80121ae:	623b      	str	r3, [r7, #32]
 80121b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80121b2:	4b55      	ldr	r3, [pc, #340]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121b8:	4a53      	ldr	r2, [pc, #332]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80121be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80121c2:	4b51      	ldr	r3, [pc, #324]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80121cc:	61fb      	str	r3, [r7, #28]
 80121ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80121d0:	4b4d      	ldr	r3, [pc, #308]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121d6:	4a4c      	ldr	r2, [pc, #304]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121dc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80121e0:	4b49      	ldr	r3, [pc, #292]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80121ea:	61bb      	str	r3, [r7, #24]
 80121ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80121ee:	4b46      	ldr	r3, [pc, #280]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80121f4:	4a44      	ldr	r2, [pc, #272]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 80121f6:	f043 0304 	orr.w	r3, r3, #4
 80121fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80121fe:	4b42      	ldr	r3, [pc, #264]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 8012200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012204:	f003 0304 	and.w	r3, r3, #4
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801220c:	4b3e      	ldr	r3, [pc, #248]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012212:	4a3d      	ldr	r2, [pc, #244]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 8012214:	f043 0301 	orr.w	r3, r3, #1
 8012218:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801221c:	4b3a      	ldr	r3, [pc, #232]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	613b      	str	r3, [r7, #16]
 8012228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801222a:	4b37      	ldr	r3, [pc, #220]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801222c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012230:	4a35      	ldr	r2, [pc, #212]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 8012232:	f043 0302 	orr.w	r3, r3, #2
 8012236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801223a:	4b33      	ldr	r3, [pc, #204]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801223c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012240:	f003 0302 	and.w	r3, r3, #2
 8012244:	60fb      	str	r3, [r7, #12]
 8012246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8012248:	4b2f      	ldr	r3, [pc, #188]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801224e:	4a2e      	ldr	r2, [pc, #184]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 8012250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012258:	4b2b      	ldr	r3, [pc, #172]	@ (8012308 <HAL_ETH_MspInit+0x198>)
 801225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012262:	60bb      	str	r3, [r7, #8]
 8012264:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8012266:	2332      	movs	r3, #50	@ 0x32
 8012268:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801226a:	2302      	movs	r3, #2
 801226c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801226e:	2300      	movs	r3, #0
 8012270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012272:	2303      	movs	r3, #3
 8012274:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012276:	230b      	movs	r3, #11
 8012278:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801227a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801227e:	4619      	mov	r1, r3
 8012280:	4822      	ldr	r0, [pc, #136]	@ (801230c <HAL_ETH_MspInit+0x19c>)
 8012282:	f7f9 f9c3 	bl	800b60c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8012286:	2386      	movs	r3, #134	@ 0x86
 8012288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801228a:	2302      	movs	r3, #2
 801228c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801228e:	2300      	movs	r3, #0
 8012290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012292:	2303      	movs	r3, #3
 8012294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012296:	230b      	movs	r3, #11
 8012298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801229a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801229e:	4619      	mov	r1, r3
 80122a0:	481b      	ldr	r0, [pc, #108]	@ (8012310 <HAL_ETH_MspInit+0x1a0>)
 80122a2:	f7f9 f9b3 	bl	800b60c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80122a6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80122aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ac:	2302      	movs	r3, #2
 80122ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122b0:	2300      	movs	r3, #0
 80122b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122b4:	2303      	movs	r3, #3
 80122b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80122b8:	230b      	movs	r3, #11
 80122ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80122bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122c0:	4619      	mov	r1, r3
 80122c2:	4814      	ldr	r0, [pc, #80]	@ (8012314 <HAL_ETH_MspInit+0x1a4>)
 80122c4:	f7f9 f9a2 	bl	800b60c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80122c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80122cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ce:	2302      	movs	r3, #2
 80122d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122d6:	2303      	movs	r3, #3
 80122d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80122da:	230b      	movs	r3, #11
 80122dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80122de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122e2:	4619      	mov	r1, r3
 80122e4:	480c      	ldr	r0, [pc, #48]	@ (8012318 <HAL_ETH_MspInit+0x1a8>)
 80122e6:	f7f9 f991 	bl	800b60c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80122ea:	2200      	movs	r2, #0
 80122ec:	2105      	movs	r1, #5
 80122ee:	203d      	movs	r0, #61	@ 0x3d
 80122f0:	f7f4 fd48 	bl	8006d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80122f4:	203d      	movs	r0, #61	@ 0x3d
 80122f6:	f7f4 fd5f 	bl	8006db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80122fa:	bf00      	nop
 80122fc:	3738      	adds	r7, #56	@ 0x38
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	40028000 	.word	0x40028000
 8012308:	58024400 	.word	0x58024400
 801230c:	58020800 	.word	0x58020800
 8012310:	58020000 	.word	0x58020000
 8012314:	58020400 	.word	0x58020400
 8012318:	58021800 	.word	0x58021800

0801231c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8012320:	4802      	ldr	r0, [pc, #8]	@ (801232c <ETH_PHY_IO_Init+0x10>)
 8012322:	f7f8 fb87 	bl	800aa34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	bd80      	pop	{r7, pc}
 801232c:	24001274 	.word	0x24001274

08012330 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8012330:	b480      	push	{r7}
 8012332:	af00      	add	r7, sp, #0
  return 0;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	68f9      	ldr	r1, [r7, #12]
 8012352:	4807      	ldr	r0, [pc, #28]	@ (8012370 <ETH_PHY_IO_ReadReg+0x30>)
 8012354:	f7f8 f8d8 	bl	800a508 <HAL_ETH_ReadPHYRegister>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801235e:	f04f 33ff 	mov.w	r3, #4294967295
 8012362:	e000      	b.n	8012366 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	24001274 	.word	0x24001274

08012374 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	68f9      	ldr	r1, [r7, #12]
 8012386:	4807      	ldr	r0, [pc, #28]	@ (80123a4 <ETH_PHY_IO_WriteReg+0x30>)
 8012388:	f7f8 f912 	bl	800a5b0 <HAL_ETH_WritePHYRegister>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d002      	beq.n	8012398 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8012392:	f04f 33ff 	mov.w	r3, #4294967295
 8012396:	e000      	b.n	801239a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8012398:	2300      	movs	r3, #0
}
 801239a:	4618      	mov	r0, r3
 801239c:	3710      	adds	r7, #16
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	24001274 	.word	0x24001274

080123a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80123ac:	f7f4 fbe2 	bl	8006b74 <HAL_GetTick>
 80123b0:	4603      	mov	r3, r0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b0a0      	sub	sp, #128	@ 0x80
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80123c0:	f107 0308 	add.w	r3, r7, #8
 80123c4:	2264      	movs	r2, #100	@ 0x64
 80123c6:	2100      	movs	r1, #0
 80123c8:	4618      	mov	r0, r3
 80123ca:	f013 f93f 	bl	802564c <memset>
  int32_t PHYLinkState = 0;
 80123ce:	2300      	movs	r3, #0
 80123d0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80123d2:	2300      	movs	r3, #0
 80123d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80123d6:	2300      	movs	r3, #0
 80123d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80123da:	2300      	movs	r3, #0
 80123dc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80123e2:	483a      	ldr	r0, [pc, #232]	@ (80124cc <ethernet_link_thread+0x114>)
 80123e4:	f7f4 faee 	bl	80069c4 <LAN8742_GetLinkState>
 80123e8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80123ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123f0:	089b      	lsrs	r3, r3, #2
 80123f2:	f003 0301 	and.w	r3, r3, #1
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00c      	beq.n	8012416 <ethernet_link_thread+0x5e>
 80123fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123fe:	2b01      	cmp	r3, #1
 8012400:	dc09      	bgt.n	8012416 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8012402:	4833      	ldr	r0, [pc, #204]	@ (80124d0 <ethernet_link_thread+0x118>)
 8012404:	f7f7 fd0c 	bl	8009e20 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8012408:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801240a:	f007 fc6f 	bl	8019cec <netif_set_down>
    netif_set_link_down(netif);
 801240e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012410:	f007 fcd2 	bl	8019db8 <netif_set_link_down>
 8012414:	e055      	b.n	80124c2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8012416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012418:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801241c:	f003 0304 	and.w	r3, r3, #4
 8012420:	2b00      	cmp	r3, #0
 8012422:	d14e      	bne.n	80124c2 <ethernet_link_thread+0x10a>
 8012424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012426:	2b01      	cmp	r3, #1
 8012428:	dd4b      	ble.n	80124c2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 801242a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801242c:	3b02      	subs	r3, #2
 801242e:	2b03      	cmp	r3, #3
 8012430:	d82a      	bhi.n	8012488 <ethernet_link_thread+0xd0>
 8012432:	a201      	add	r2, pc, #4	@ (adr r2, 8012438 <ethernet_link_thread+0x80>)
 8012434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012438:	08012449 	.word	0x08012449
 801243c:	0801245b 	.word	0x0801245b
 8012440:	0801246b 	.word	0x0801246b
 8012444:	0801247b 	.word	0x0801247b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8012448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801244c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801244e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012452:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012454:	2301      	movs	r3, #1
 8012456:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8012458:	e017      	b.n	801248a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801245a:	2300      	movs	r3, #0
 801245c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 801245e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012462:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012464:	2301      	movs	r3, #1
 8012466:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8012468:	e00f      	b.n	801248a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 801246a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801246e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8012470:	2300      	movs	r3, #0
 8012472:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012474:	2301      	movs	r3, #1
 8012476:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8012478:	e007      	b.n	801248a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 801247a:	2300      	movs	r3, #0
 801247c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 801247e:	2300      	movs	r3, #0
 8012480:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8012482:	2301      	movs	r3, #1
 8012484:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8012486:	e000      	b.n	801248a <ethernet_link_thread+0xd2>
    default:
      break;
 8012488:	bf00      	nop
    }

    if(linkchanged)
 801248a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801248c:	2b00      	cmp	r3, #0
 801248e:	d018      	beq.n	80124c2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012490:	f107 0308 	add.w	r3, r7, #8
 8012494:	4619      	mov	r1, r3
 8012496:	480e      	ldr	r0, [pc, #56]	@ (80124d0 <ethernet_link_thread+0x118>)
 8012498:	f7f8 f8de 	bl	800a658 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801249c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801249e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80124a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80124a2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80124a4:	f107 0308 	add.w	r3, r7, #8
 80124a8:	4619      	mov	r1, r3
 80124aa:	4809      	ldr	r0, [pc, #36]	@ (80124d0 <ethernet_link_thread+0x118>)
 80124ac:	f7f8 faa8 	bl	800aa00 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80124b0:	4807      	ldr	r0, [pc, #28]	@ (80124d0 <ethernet_link_thread+0x118>)
 80124b2:	f7f7 fc41 	bl	8009d38 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80124b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80124b8:	f007 fbac 	bl	8019c14 <netif_set_up>
      netif_set_link_up(netif);
 80124bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80124be:	f007 fc47 	bl	8019d50 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80124c2:	2064      	movs	r0, #100	@ 0x64
 80124c4:	f000 f936 	bl	8012734 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80124c8:	e78b      	b.n	80123e2 <ethernet_link_thread+0x2a>
 80124ca:	bf00      	nop
 80124cc:	2400135c 	.word	0x2400135c
 80124d0:	24001274 	.word	0x24001274

080124d4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af02      	add	r7, sp, #8
 80124da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80124dc:	4812      	ldr	r0, [pc, #72]	@ (8012528 <HAL_ETH_RxAllocateCallback+0x54>)
 80124de:	f007 f90d 	bl	80196fc <memp_malloc_pool>
 80124e2:	60f8      	str	r0, [r7, #12]
  if (p)
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d014      	beq.n	8012514 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f103 0220 	add.w	r2, r3, #32
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	4a0d      	ldr	r2, [pc, #52]	@ (801252c <HAL_ETH_RxAllocateCallback+0x58>)
 80124f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8012502:	9201      	str	r2, [sp, #4]
 8012504:	9300      	str	r3, [sp, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2241      	movs	r2, #65	@ 0x41
 801250a:	2100      	movs	r1, #0
 801250c:	2000      	movs	r0, #0
 801250e:	f007 fe77 	bl	801a200 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8012512:	e005      	b.n	8012520 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8012514:	4b06      	ldr	r3, [pc, #24]	@ (8012530 <HAL_ETH_RxAllocateCallback+0x5c>)
 8012516:	2201      	movs	r2, #1
 8012518:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	601a      	str	r2, [r3, #0]
}
 8012520:	bf00      	nop
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	0802cf80 	.word	0x0802cf80
 801252c:	08012121 	.word	0x08012121
 8012530:	24001268 	.word	0x24001268

08012534 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8012534:	b480      	push	{r7}
 8012536:	b08d      	sub	sp, #52	@ 0x34
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 801254a:	2300      	movs	r3, #0
 801254c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	3b20      	subs	r3, #32
 8012552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8012554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012556:	2200      	movs	r2, #0
 8012558:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 801255a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801255c:	2200      	movs	r2, #0
 801255e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8012560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012562:	887a      	ldrh	r2, [r7, #2]
 8012564:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8012566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d103      	bne.n	8012576 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 801256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012572:	601a      	str	r2, [r3, #0]
 8012574:	e003      	b.n	801257e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8012576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801257c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 801257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012582:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8012584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801258a:	e009      	b.n	80125a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 801258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258e:	891a      	ldrh	r2, [r3, #8]
 8012590:	887b      	ldrh	r3, [r7, #2]
 8012592:	4413      	add	r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012598:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 801259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1f2      	bne.n	801258c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80125a6:	887b      	ldrh	r3, [r7, #2]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	623a      	str	r2, [r7, #32]
 80125ac:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	dd1d      	ble.n	80125f0 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	f003 021f 	and.w	r2, r3, #31
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	4413      	add	r3, r2
 80125be:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80125c0:	6a3b      	ldr	r3, [r7, #32]
 80125c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80125c4:	f3bf 8f4f 	dsb	sy
}
 80125c8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80125ca:	4a0d      	ldr	r2, [pc, #52]	@ (8012600 <HAL_ETH_RxLinkCallback+0xcc>)
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	3320      	adds	r3, #32
 80125d6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	3b20      	subs	r3, #32
 80125dc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dcf2      	bgt.n	80125ca <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80125e4:	f3bf 8f4f 	dsb	sy
}
 80125e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80125ea:	f3bf 8f6f 	isb	sy
}
 80125ee:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80125f0:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80125f2:	bf00      	nop
 80125f4:	3734      	adds	r7, #52	@ 0x34
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	e000ed00 	.word	0xe000ed00

08012604 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b082      	sub	sp, #8
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f007 ffe3 	bl	801a5d8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801261a:	b480      	push	{r7}
 801261c:	b085      	sub	sp, #20
 801261e:	af00      	add	r7, sp, #0
 8012620:	4603      	mov	r3, r0
 8012622:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012624:	2300      	movs	r3, #0
 8012626:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801262c:	2b84      	cmp	r3, #132	@ 0x84
 801262e:	d005      	beq.n	801263c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012630:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	4413      	add	r3, r2
 8012638:	3303      	adds	r3, #3
 801263a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801263c:	68fb      	ldr	r3, [r7, #12]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801264a:	b480      	push	{r7}
 801264c:	b083      	sub	sp, #12
 801264e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012650:	f3ef 8305 	mrs	r3, IPSR
 8012654:	607b      	str	r3, [r7, #4]
  return(result);
 8012656:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012658:	2b00      	cmp	r3, #0
 801265a:	bf14      	ite	ne
 801265c:	2301      	movne	r3, #1
 801265e:	2300      	moveq	r3, #0
 8012660:	b2db      	uxtb	r3, r3
}
 8012662:	4618      	mov	r0, r3
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801266e:	b580      	push	{r7, lr}
 8012670:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012672:	f001 fddb 	bl	801422c <vTaskStartScheduler>
  
  return osOK;
 8012676:	2300      	movs	r3, #0
}
 8012678:	4618      	mov	r0, r3
 801267a:	bd80      	pop	{r7, pc}

0801267c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012680:	f7ff ffe3 	bl	801264a <inHandlerMode>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	d003      	beq.n	8012692 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801268a:	f001 feed 	bl	8014468 <xTaskGetTickCountFromISR>
 801268e:	4603      	mov	r3, r0
 8012690:	e002      	b.n	8012698 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012692:	f001 fed9 	bl	8014448 <xTaskGetTickCount>
 8012696:	4603      	mov	r3, r0
  }
}
 8012698:	4618      	mov	r0, r3
 801269a:	bd80      	pop	{r7, pc}

0801269c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801269e:	b089      	sub	sp, #36	@ 0x24
 80126a0:	af04      	add	r7, sp, #16
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	695b      	ldr	r3, [r3, #20]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d020      	beq.n	80126f0 <osThreadCreate+0x54>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	699b      	ldr	r3, [r3, #24]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d01c      	beq.n	80126f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	685c      	ldr	r4, [r3, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	691e      	ldr	r6, [r3, #16]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff ffa6 	bl	801261a <makeFreeRtosPriority>
 80126ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	695b      	ldr	r3, [r3, #20]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126d8:	9202      	str	r2, [sp, #8]
 80126da:	9301      	str	r3, [sp, #4]
 80126dc:	9100      	str	r1, [sp, #0]
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	4632      	mov	r2, r6
 80126e2:	4629      	mov	r1, r5
 80126e4:	4620      	mov	r0, r4
 80126e6:	f001 fb3f 	bl	8013d68 <xTaskCreateStatic>
 80126ea:	4603      	mov	r3, r0
 80126ec:	60fb      	str	r3, [r7, #12]
 80126ee:	e01c      	b.n	801272a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685c      	ldr	r4, [r3, #4]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80126fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012704:	4618      	mov	r0, r3
 8012706:	f7ff ff88 	bl	801261a <makeFreeRtosPriority>
 801270a:	4602      	mov	r2, r0
 801270c:	f107 030c 	add.w	r3, r7, #12
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	9200      	str	r2, [sp, #0]
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	4632      	mov	r2, r6
 8012718:	4629      	mov	r1, r5
 801271a:	4620      	mov	r0, r4
 801271c:	f001 fb84 	bl	8013e28 <xTaskCreate>
 8012720:	4603      	mov	r3, r0
 8012722:	2b01      	cmp	r3, #1
 8012724:	d001      	beq.n	801272a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012726:	2300      	movs	r3, #0
 8012728:	e000      	b.n	801272c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801272a:	68fb      	ldr	r3, [r7, #12]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012734 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b084      	sub	sp, #16
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <osDelay+0x16>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	e000      	b.n	801274c <osDelay+0x18>
 801274a:	2301      	movs	r3, #1
 801274c:	4618      	mov	r0, r3
 801274e:	f001 fca3 	bl	8014098 <vTaskDelay>
  
  return osOK;
 8012752:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d007      	beq.n	801277c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4619      	mov	r1, r3
 8012772:	2001      	movs	r0, #1
 8012774:	f000 fc85 	bl	8013082 <xQueueCreateMutexStatic>
 8012778:	4603      	mov	r3, r0
 801277a:	e003      	b.n	8012784 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801277c:	2001      	movs	r0, #1
 801277e:	f000 fc68 	bl	8013052 <xQueueCreateMutex>
 8012782:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012784:	4618      	mov	r0, r3
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012796:	2300      	movs	r3, #0
 8012798:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <osMutexWait+0x18>
    return osErrorParameter;
 80127a0:	2380      	movs	r3, #128	@ 0x80
 80127a2:	e03a      	b.n	801281a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80127a4:	2300      	movs	r3, #0
 80127a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ae:	d103      	bne.n	80127b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	60fb      	str	r3, [r7, #12]
 80127b6:	e009      	b.n	80127cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d006      	beq.n	80127cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <osMutexWait+0x40>
      ticks = 1;
 80127c8:	2301      	movs	r3, #1
 80127ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80127cc:	f7ff ff3d 	bl	801264a <inHandlerMode>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d017      	beq.n	8012806 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80127d6:	f107 0308 	add.w	r3, r7, #8
 80127da:	461a      	mov	r2, r3
 80127dc:	2100      	movs	r1, #0
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f001 f88c 	bl	80138fc <xQueueReceiveFromISR>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d001      	beq.n	80127ee <osMutexWait+0x62>
      return osErrorOS;
 80127ea:	23ff      	movs	r3, #255	@ 0xff
 80127ec:	e015      	b.n	801281a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d011      	beq.n	8012818 <osMutexWait+0x8c>
 80127f4:	4b0b      	ldr	r3, [pc, #44]	@ (8012824 <osMutexWait+0x98>)
 80127f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	f3bf 8f6f 	isb	sy
 8012804:	e008      	b.n	8012818 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012806:	68f9      	ldr	r1, [r7, #12]
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 ff67 	bl	80136dc <xQueueSemaphoreTake>
 801280e:	4603      	mov	r3, r0
 8012810:	2b01      	cmp	r3, #1
 8012812:	d001      	beq.n	8012818 <osMutexWait+0x8c>
    return osErrorOS;
 8012814:	23ff      	movs	r3, #255	@ 0xff
 8012816:	e000      	b.n	801281a <osMutexWait+0x8e>
  }
  
  return osOK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	e000ed04 	.word	0xe000ed04

08012828 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012830:	2300      	movs	r3, #0
 8012832:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012834:	2300      	movs	r3, #0
 8012836:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8012838:	f7ff ff07 	bl	801264a <inHandlerMode>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d016      	beq.n	8012870 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012842:	f107 0308 	add.w	r3, r7, #8
 8012846:	4619      	mov	r1, r3
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f000 fdd5 	bl	80133f8 <xQueueGiveFromISR>
 801284e:	4603      	mov	r3, r0
 8012850:	2b01      	cmp	r3, #1
 8012852:	d001      	beq.n	8012858 <osMutexRelease+0x30>
      return osErrorOS;
 8012854:	23ff      	movs	r3, #255	@ 0xff
 8012856:	e017      	b.n	8012888 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d013      	beq.n	8012886 <osMutexRelease+0x5e>
 801285e:	4b0c      	ldr	r3, [pc, #48]	@ (8012890 <osMutexRelease+0x68>)
 8012860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	f3bf 8f4f 	dsb	sy
 801286a:	f3bf 8f6f 	isb	sy
 801286e:	e00a      	b.n	8012886 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012870:	2300      	movs	r3, #0
 8012872:	2200      	movs	r2, #0
 8012874:	2100      	movs	r1, #0
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fc1e 	bl	80130b8 <xQueueGenericSend>
 801287c:	4603      	mov	r3, r0
 801287e:	2b01      	cmp	r3, #1
 8012880:	d001      	beq.n	8012886 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012882:	23ff      	movs	r3, #255	@ 0xff
 8012884:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8012886:	68fb      	ldr	r3, [r7, #12]
}
 8012888:	4618      	mov	r0, r3
 801288a:	3710      	adds	r7, #16
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	e000ed04 	.word	0xe000ed04

08012894 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af02      	add	r7, sp, #8
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00f      	beq.n	80128c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d10a      	bne.n	80128c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	2203      	movs	r2, #3
 80128b2:	9200      	str	r2, [sp, #0]
 80128b4:	2200      	movs	r2, #0
 80128b6:	2100      	movs	r1, #0
 80128b8:	2001      	movs	r0, #1
 80128ba:	f000 fad9 	bl	8012e70 <xQueueGenericCreateStatic>
 80128be:	4603      	mov	r3, r0
 80128c0:	e016      	b.n	80128f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80128c2:	2300      	movs	r3, #0
 80128c4:	e014      	b.n	80128f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d110      	bne.n	80128ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80128cc:	2203      	movs	r2, #3
 80128ce:	2100      	movs	r1, #0
 80128d0:	2001      	movs	r0, #1
 80128d2:	f000 fb4a 	bl	8012f6a <xQueueGenericCreate>
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d005      	beq.n	80128ea <osSemaphoreCreate+0x56>
 80128de:	2300      	movs	r3, #0
 80128e0:	2200      	movs	r2, #0
 80128e2:	2100      	movs	r1, #0
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f000 fbe7 	bl	80130b8 <xQueueGenericSend>
      return sema;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	e000      	b.n	80128f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80128ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012902:	2300      	movs	r3, #0
 8012904:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801290c:	2380      	movs	r3, #128	@ 0x80
 801290e:	e03a      	b.n	8012986 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801291a:	d103      	bne.n	8012924 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295
 8012920:	60fb      	str	r3, [r7, #12]
 8012922:	e009      	b.n	8012938 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d006      	beq.n	8012938 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <osSemaphoreWait+0x40>
      ticks = 1;
 8012934:	2301      	movs	r3, #1
 8012936:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012938:	f7ff fe87 	bl	801264a <inHandlerMode>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d017      	beq.n	8012972 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012942:	f107 0308 	add.w	r3, r7, #8
 8012946:	461a      	mov	r2, r3
 8012948:	2100      	movs	r1, #0
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 ffd6 	bl	80138fc <xQueueReceiveFromISR>
 8012950:	4603      	mov	r3, r0
 8012952:	2b01      	cmp	r3, #1
 8012954:	d001      	beq.n	801295a <osSemaphoreWait+0x62>
      return osErrorOS;
 8012956:	23ff      	movs	r3, #255	@ 0xff
 8012958:	e015      	b.n	8012986 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d011      	beq.n	8012984 <osSemaphoreWait+0x8c>
 8012960:	4b0b      	ldr	r3, [pc, #44]	@ (8012990 <osSemaphoreWait+0x98>)
 8012962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012966:	601a      	str	r2, [r3, #0]
 8012968:	f3bf 8f4f 	dsb	sy
 801296c:	f3bf 8f6f 	isb	sy
 8012970:	e008      	b.n	8012984 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012972:	68f9      	ldr	r1, [r7, #12]
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 feb1 	bl	80136dc <xQueueSemaphoreTake>
 801297a:	4603      	mov	r3, r0
 801297c:	2b01      	cmp	r3, #1
 801297e:	d001      	beq.n	8012984 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012980:	23ff      	movs	r3, #255	@ 0xff
 8012982:	e000      	b.n	8012986 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	e000ed04 	.word	0xe000ed04

08012994 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801299c:	2300      	movs	r3, #0
 801299e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80129a4:	f7ff fe51 	bl	801264a <inHandlerMode>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d016      	beq.n	80129dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80129ae:	f107 0308 	add.w	r3, r7, #8
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fd1f 	bl	80133f8 <xQueueGiveFromISR>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d001      	beq.n	80129c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80129c0:	23ff      	movs	r3, #255	@ 0xff
 80129c2:	e017      	b.n	80129f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d013      	beq.n	80129f2 <osSemaphoreRelease+0x5e>
 80129ca:	4b0c      	ldr	r3, [pc, #48]	@ (80129fc <osSemaphoreRelease+0x68>)
 80129cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	e00a      	b.n	80129f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80129dc:	2300      	movs	r3, #0
 80129de:	2200      	movs	r2, #0
 80129e0:	2100      	movs	r1, #0
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 fb68 	bl	80130b8 <xQueueGenericSend>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d001      	beq.n	80129f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80129ee:	23ff      	movs	r3, #255	@ 0xff
 80129f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80129f2:	68fb      	ldr	r3, [r7, #12]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	e000ed04 	.word	0xe000ed04

08012a00 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012a08:	f7ff fe1f 	bl	801264a <inHandlerMode>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012a12:	2382      	movs	r3, #130	@ 0x82
 8012a14:	e003      	b.n	8012a1e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f001 f830 	bl	8013a7c <vQueueDelete>

  return osOK; 
 8012a1c:	2300      	movs	r3, #0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012a26:	b590      	push	{r4, r7, lr}
 8012a28:	b085      	sub	sp, #20
 8012a2a:	af02      	add	r7, sp, #8
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	689b      	ldr	r3, [r3, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d011      	beq.n	8012a5c <osMessageCreate+0x36>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	68db      	ldr	r3, [r3, #12]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d00d      	beq.n	8012a5c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6818      	ldr	r0, [r3, #0]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6859      	ldr	r1, [r3, #4]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	689a      	ldr	r2, [r3, #8]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	2400      	movs	r4, #0
 8012a52:	9400      	str	r4, [sp, #0]
 8012a54:	f000 fa0c 	bl	8012e70 <xQueueGenericCreateStatic>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	e008      	b.n	8012a6e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6818      	ldr	r0, [r3, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	2200      	movs	r2, #0
 8012a66:	4619      	mov	r1, r3
 8012a68:	f000 fa7f 	bl	8012f6a <xQueueGenericCreate>
 8012a6c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	370c      	adds	r7, #12
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd90      	pop	{r4, r7, pc}
	...

08012a78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b086      	sub	sp, #24
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012a84:	2300      	movs	r3, #0
 8012a86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d101      	bne.n	8012a96 <osMessagePut+0x1e>
    ticks = 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012a96:	f7ff fdd8 	bl	801264a <inHandlerMode>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d018      	beq.n	8012ad2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012aa0:	f107 0210 	add.w	r2, r7, #16
 8012aa4:	f107 0108 	add.w	r1, r7, #8
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f000 fc06 	bl	80132bc <xQueueGenericSendFromISR>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d001      	beq.n	8012aba <osMessagePut+0x42>
      return osErrorOS;
 8012ab6:	23ff      	movs	r3, #255	@ 0xff
 8012ab8:	e018      	b.n	8012aec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d014      	beq.n	8012aea <osMessagePut+0x72>
 8012ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8012af4 <osMessagePut+0x7c>)
 8012ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ac6:	601a      	str	r2, [r3, #0]
 8012ac8:	f3bf 8f4f 	dsb	sy
 8012acc:	f3bf 8f6f 	isb	sy
 8012ad0:	e00b      	b.n	8012aea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012ad2:	f107 0108 	add.w	r1, r7, #8
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	697a      	ldr	r2, [r7, #20]
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f000 faec 	bl	80130b8 <xQueueGenericSend>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d001      	beq.n	8012aea <osMessagePut+0x72>
      return osErrorOS;
 8012ae6:	23ff      	movs	r3, #255	@ 0xff
 8012ae8:	e000      	b.n	8012aec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3718      	adds	r7, #24
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	e000ed04 	.word	0xe000ed04

08012af8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012af8:	b590      	push	{r4, r7, lr}
 8012afa:	b08b      	sub	sp, #44	@ 0x2c
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60f8      	str	r0, [r7, #12]
 8012b00:	60b9      	str	r1, [r7, #8]
 8012b02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d10a      	bne.n	8012b28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012b12:	2380      	movs	r3, #128	@ 0x80
 8012b14:	617b      	str	r3, [r7, #20]
    return event;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	461c      	mov	r4, r3
 8012b1a:	f107 0314 	add.w	r3, r7, #20
 8012b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012b26:	e054      	b.n	8012bd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b36:	d103      	bne.n	8012b40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012b38:	f04f 33ff 	mov.w	r3, #4294967295
 8012b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b3e:	e009      	b.n	8012b54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d006      	beq.n	8012b54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <osMessageGet+0x5c>
      ticks = 1;
 8012b50:	2301      	movs	r3, #1
 8012b52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012b54:	f7ff fd79 	bl	801264a <inHandlerMode>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d01c      	beq.n	8012b98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012b5e:	f107 0220 	add.w	r2, r7, #32
 8012b62:	f107 0314 	add.w	r3, r7, #20
 8012b66:	3304      	adds	r3, #4
 8012b68:	4619      	mov	r1, r3
 8012b6a:	68b8      	ldr	r0, [r7, #8]
 8012b6c:	f000 fec6 	bl	80138fc <xQueueReceiveFromISR>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d102      	bne.n	8012b7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012b76:	2310      	movs	r3, #16
 8012b78:	617b      	str	r3, [r7, #20]
 8012b7a:	e001      	b.n	8012b80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012b80:	6a3b      	ldr	r3, [r7, #32]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d01d      	beq.n	8012bc2 <osMessageGet+0xca>
 8012b86:	4b15      	ldr	r3, [pc, #84]	@ (8012bdc <osMessageGet+0xe4>)
 8012b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	f3bf 8f6f 	isb	sy
 8012b96:	e014      	b.n	8012bc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012b98:	f107 0314 	add.w	r3, r7, #20
 8012b9c:	3304      	adds	r3, #4
 8012b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	68b8      	ldr	r0, [r7, #8]
 8012ba4:	f000 fcb8 	bl	8013518 <xQueueReceive>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d102      	bne.n	8012bb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012bae:	2310      	movs	r3, #16
 8012bb0:	617b      	str	r3, [r7, #20]
 8012bb2:	e006      	b.n	8012bc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d101      	bne.n	8012bbe <osMessageGet+0xc6>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	e000      	b.n	8012bc0 <osMessageGet+0xc8>
 8012bbe:	2340      	movs	r3, #64	@ 0x40
 8012bc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	461c      	mov	r4, r3
 8012bc6:	f107 0314 	add.w	r3, r7, #20
 8012bca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	372c      	adds	r7, #44	@ 0x2c
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd90      	pop	{r4, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	e000ed04 	.word	0xe000ed04

08012be0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012be8:	f7ff fd2f 	bl	801264a <inHandlerMode>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d004      	beq.n	8012bfc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 ff23 	bl	8013a3e <uxQueueMessagesWaitingFromISR>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	e003      	b.n	8012c04 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f000 feff 	bl	8013a00 <uxQueueMessagesWaiting>
 8012c02:	4603      	mov	r3, r0
  }
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012c14:	f7ff fd19 	bl	801264a <inHandlerMode>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d001      	beq.n	8012c22 <osMessageDelete+0x16>
    return osErrorISR;
 8012c1e:	2382      	movs	r3, #130	@ 0x82
 8012c20:	e003      	b.n	8012c2a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 ff2a 	bl	8013a7c <vQueueDelete>

  return osOK; 
 8012c28:	2300      	movs	r3, #0
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3708      	adds	r7, #8
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}

08012c32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c32:	b480      	push	{r7}
 8012c34:	b083      	sub	sp, #12
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f103 0208 	add.w	r2, r3, #8
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f103 0208 	add.w	r2, r3, #8
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f103 0208 	add.w	r2, r3, #8
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012c66:	bf00      	nop
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c70:	4770      	bx	lr

08012c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012c72:	b480      	push	{r7}
 8012c74:	b083      	sub	sp, #12
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012c80:	bf00      	nop
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b085      	sub	sp, #20
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	68fa      	ldr	r2, [r7, #12]
 8012ca0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	689a      	ldr	r2, [r3, #8]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	683a      	ldr	r2, [r7, #0]
 8012cb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	683a      	ldr	r2, [r7, #0]
 8012cb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	1c5a      	adds	r2, r3, #1
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	601a      	str	r2, [r3, #0]
}
 8012cc8:	bf00      	nop
 8012cca:	3714      	adds	r7, #20
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b085      	sub	sp, #20
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cea:	d103      	bne.n	8012cf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	691b      	ldr	r3, [r3, #16]
 8012cf0:	60fb      	str	r3, [r7, #12]
 8012cf2:	e00c      	b.n	8012d0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3308      	adds	r3, #8
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	e002      	b.n	8012d02 <vListInsert+0x2e>
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	60fb      	str	r3, [r7, #12]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	68ba      	ldr	r2, [r7, #8]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d2f6      	bcs.n	8012cfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	685a      	ldr	r2, [r3, #4]
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	683a      	ldr	r2, [r7, #0]
 8012d1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	683a      	ldr	r2, [r7, #0]
 8012d28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	1c5a      	adds	r2, r3, #1
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	601a      	str	r2, [r3, #0]
}
 8012d3a:	bf00      	nop
 8012d3c:	3714      	adds	r7, #20
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr

08012d46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d46:	b480      	push	{r7}
 8012d48:	b085      	sub	sp, #20
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	6892      	ldr	r2, [r2, #8]
 8012d5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	689b      	ldr	r3, [r3, #8]
 8012d62:	687a      	ldr	r2, [r7, #4]
 8012d64:	6852      	ldr	r2, [r2, #4]
 8012d66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d103      	bne.n	8012d7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	689a      	ldr	r2, [r3, #8]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	1e5a      	subs	r2, r3, #1
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3714      	adds	r7, #20
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr
	...

08012d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d10b      	bne.n	8012dc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012dc2:	bf00      	nop
 8012dc4:	bf00      	nop
 8012dc6:	e7fd      	b.n	8012dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012dc8:	f002 f9b6 	bl	8015138 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012dd4:	68f9      	ldr	r1, [r7, #12]
 8012dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012dd8:	fb01 f303 	mul.w	r3, r1, r3
 8012ddc:	441a      	add	r2, r3
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	68f9      	ldr	r1, [r7, #12]
 8012dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012dfe:	fb01 f303 	mul.w	r3, r1, r3
 8012e02:	441a      	add	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	22ff      	movs	r2, #255	@ 0xff
 8012e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	22ff      	movs	r2, #255	@ 0xff
 8012e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d114      	bne.n	8012e48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	691b      	ldr	r3, [r3, #16]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d01a      	beq.n	8012e5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	3310      	adds	r3, #16
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f001 fc6a 	bl	8014704 <xTaskRemoveFromEventList>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d012      	beq.n	8012e5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e36:	4b0d      	ldr	r3, [pc, #52]	@ (8012e6c <xQueueGenericReset+0xd0>)
 8012e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e3c:	601a      	str	r2, [r3, #0]
 8012e3e:	f3bf 8f4f 	dsb	sy
 8012e42:	f3bf 8f6f 	isb	sy
 8012e46:	e009      	b.n	8012e5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	3310      	adds	r3, #16
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7ff fef0 	bl	8012c32 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	3324      	adds	r3, #36	@ 0x24
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff feeb 	bl	8012c32 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e5c:	f002 f99e 	bl	801519c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e60:	2301      	movs	r3, #1
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3710      	adds	r7, #16
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	e000ed04 	.word	0xe000ed04

08012e70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b08e      	sub	sp, #56	@ 0x38
 8012e74:	af02      	add	r7, sp, #8
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d10b      	bne.n	8012e9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012e96:	bf00      	nop
 8012e98:	bf00      	nop
 8012e9a:	e7fd      	b.n	8012e98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d10b      	bne.n	8012eba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ea6:	f383 8811 	msr	BASEPRI, r3
 8012eaa:	f3bf 8f6f 	isb	sy
 8012eae:	f3bf 8f4f 	dsb	sy
 8012eb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012eb4:	bf00      	nop
 8012eb6:	bf00      	nop
 8012eb8:	e7fd      	b.n	8012eb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d002      	beq.n	8012ec6 <xQueueGenericCreateStatic+0x56>
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d001      	beq.n	8012eca <xQueueGenericCreateStatic+0x5a>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e000      	b.n	8012ecc <xQueueGenericCreateStatic+0x5c>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10b      	bne.n	8012ee8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	623b      	str	r3, [r7, #32]
}
 8012ee2:	bf00      	nop
 8012ee4:	bf00      	nop
 8012ee6:	e7fd      	b.n	8012ee4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d102      	bne.n	8012ef4 <xQueueGenericCreateStatic+0x84>
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d101      	bne.n	8012ef8 <xQueueGenericCreateStatic+0x88>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e000      	b.n	8012efa <xQueueGenericCreateStatic+0x8a>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d10b      	bne.n	8012f16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f02:	f383 8811 	msr	BASEPRI, r3
 8012f06:	f3bf 8f6f 	isb	sy
 8012f0a:	f3bf 8f4f 	dsb	sy
 8012f0e:	61fb      	str	r3, [r7, #28]
}
 8012f10:	bf00      	nop
 8012f12:	bf00      	nop
 8012f14:	e7fd      	b.n	8012f12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f16:	2348      	movs	r3, #72	@ 0x48
 8012f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	2b48      	cmp	r3, #72	@ 0x48
 8012f1e:	d00b      	beq.n	8012f38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	61bb      	str	r3, [r7, #24]
}
 8012f32:	bf00      	nop
 8012f34:	bf00      	nop
 8012f36:	e7fd      	b.n	8012f34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00d      	beq.n	8012f60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f46:	2201      	movs	r2, #1
 8012f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	4613      	mov	r3, r2
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	68b9      	ldr	r1, [r7, #8]
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 f840 	bl	8012fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3730      	adds	r7, #48	@ 0x30
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b08a      	sub	sp, #40	@ 0x28
 8012f6e:	af02      	add	r7, sp, #8
 8012f70:	60f8      	str	r0, [r7, #12]
 8012f72:	60b9      	str	r1, [r7, #8]
 8012f74:	4613      	mov	r3, r2
 8012f76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10b      	bne.n	8012f96 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f82:	f383 8811 	msr	BASEPRI, r3
 8012f86:	f3bf 8f6f 	isb	sy
 8012f8a:	f3bf 8f4f 	dsb	sy
 8012f8e:	613b      	str	r3, [r7, #16]
}
 8012f90:	bf00      	nop
 8012f92:	bf00      	nop
 8012f94:	e7fd      	b.n	8012f92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68ba      	ldr	r2, [r7, #8]
 8012f9a:	fb02 f303 	mul.w	r3, r2, r3
 8012f9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	3348      	adds	r3, #72	@ 0x48
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f002 f9e9 	bl	801537c <pvPortMalloc>
 8012faa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012fac:	69bb      	ldr	r3, [r7, #24]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d011      	beq.n	8012fd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	3348      	adds	r3, #72	@ 0x48
 8012fba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012fc4:	79fa      	ldrb	r2, [r7, #7]
 8012fc6:	69bb      	ldr	r3, [r7, #24]
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	697a      	ldr	r2, [r7, #20]
 8012fce:	68b9      	ldr	r1, [r7, #8]
 8012fd0:	68f8      	ldr	r0, [r7, #12]
 8012fd2:	f000 f805 	bl	8012fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d103      	bne.n	8012ffc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	69ba      	ldr	r2, [r7, #24]
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	e002      	b.n	8013002 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	68ba      	ldr	r2, [r7, #8]
 801300c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801300e:	2101      	movs	r1, #1
 8013010:	69b8      	ldr	r0, [r7, #24]
 8013012:	f7ff fec3 	bl	8012d9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013016:	bf00      	nop
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801301e:	b580      	push	{r7, lr}
 8013020:	b082      	sub	sp, #8
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00e      	beq.n	801304a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2200      	movs	r2, #0
 8013030:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801303e:	2300      	movs	r3, #0
 8013040:	2200      	movs	r2, #0
 8013042:	2100      	movs	r1, #0
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 f837 	bl	80130b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801304a:	bf00      	nop
 801304c:	3708      	adds	r7, #8
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013052:	b580      	push	{r7, lr}
 8013054:	b086      	sub	sp, #24
 8013056:	af00      	add	r7, sp, #0
 8013058:	4603      	mov	r3, r0
 801305a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801305c:	2301      	movs	r3, #1
 801305e:	617b      	str	r3, [r7, #20]
 8013060:	2300      	movs	r3, #0
 8013062:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013064:	79fb      	ldrb	r3, [r7, #7]
 8013066:	461a      	mov	r2, r3
 8013068:	6939      	ldr	r1, [r7, #16]
 801306a:	6978      	ldr	r0, [r7, #20]
 801306c:	f7ff ff7d 	bl	8012f6a <xQueueGenericCreate>
 8013070:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7ff ffd3 	bl	801301e <prvInitialiseMutex>

		return xNewQueue;
 8013078:	68fb      	ldr	r3, [r7, #12]
	}
 801307a:	4618      	mov	r0, r3
 801307c:	3718      	adds	r7, #24
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013082:	b580      	push	{r7, lr}
 8013084:	b088      	sub	sp, #32
 8013086:	af02      	add	r7, sp, #8
 8013088:	4603      	mov	r3, r0
 801308a:	6039      	str	r1, [r7, #0]
 801308c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801308e:	2301      	movs	r3, #1
 8013090:	617b      	str	r3, [r7, #20]
 8013092:	2300      	movs	r3, #0
 8013094:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013096:	79fb      	ldrb	r3, [r7, #7]
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2200      	movs	r2, #0
 801309e:	6939      	ldr	r1, [r7, #16]
 80130a0:	6978      	ldr	r0, [r7, #20]
 80130a2:	f7ff fee5 	bl	8012e70 <xQueueGenericCreateStatic>
 80130a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80130a8:	68f8      	ldr	r0, [r7, #12]
 80130aa:	f7ff ffb8 	bl	801301e <prvInitialiseMutex>

		return xNewQueue;
 80130ae:	68fb      	ldr	r3, [r7, #12]
	}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3718      	adds	r7, #24
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08e      	sub	sp, #56	@ 0x38
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80130c6:	2300      	movs	r3, #0
 80130c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80130ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10b      	bne.n	80130ec <xQueueGenericSend+0x34>
	__asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f3bf 8f4f 	dsb	sy
 80130e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80130e6:	bf00      	nop
 80130e8:	bf00      	nop
 80130ea:	e7fd      	b.n	80130e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d103      	bne.n	80130fa <xQueueGenericSend+0x42>
 80130f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <xQueueGenericSend+0x46>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e000      	b.n	8013100 <xQueueGenericSend+0x48>
 80130fe:	2300      	movs	r3, #0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10b      	bne.n	801311c <xQueueGenericSend+0x64>
	__asm volatile
 8013104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013116:	bf00      	nop
 8013118:	bf00      	nop
 801311a:	e7fd      	b.n	8013118 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	2b02      	cmp	r3, #2
 8013120:	d103      	bne.n	801312a <xQueueGenericSend+0x72>
 8013122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013126:	2b01      	cmp	r3, #1
 8013128:	d101      	bne.n	801312e <xQueueGenericSend+0x76>
 801312a:	2301      	movs	r3, #1
 801312c:	e000      	b.n	8013130 <xQueueGenericSend+0x78>
 801312e:	2300      	movs	r3, #0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10b      	bne.n	801314c <xQueueGenericSend+0x94>
	__asm volatile
 8013134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013138:	f383 8811 	msr	BASEPRI, r3
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f3bf 8f4f 	dsb	sy
 8013144:	623b      	str	r3, [r7, #32]
}
 8013146:	bf00      	nop
 8013148:	bf00      	nop
 801314a:	e7fd      	b.n	8013148 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801314c:	f001 fc9a 	bl	8014a84 <xTaskGetSchedulerState>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d102      	bne.n	801315c <xQueueGenericSend+0xa4>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <xQueueGenericSend+0xa8>
 801315c:	2301      	movs	r3, #1
 801315e:	e000      	b.n	8013162 <xQueueGenericSend+0xaa>
 8013160:	2300      	movs	r3, #0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d10b      	bne.n	801317e <xQueueGenericSend+0xc6>
	__asm volatile
 8013166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801316a:	f383 8811 	msr	BASEPRI, r3
 801316e:	f3bf 8f6f 	isb	sy
 8013172:	f3bf 8f4f 	dsb	sy
 8013176:	61fb      	str	r3, [r7, #28]
}
 8013178:	bf00      	nop
 801317a:	bf00      	nop
 801317c:	e7fd      	b.n	801317a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801317e:	f001 ffdb 	bl	8015138 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801318a:	429a      	cmp	r2, r3
 801318c:	d302      	bcc.n	8013194 <xQueueGenericSend+0xdc>
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	2b02      	cmp	r3, #2
 8013192:	d129      	bne.n	80131e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013194:	683a      	ldr	r2, [r7, #0]
 8013196:	68b9      	ldr	r1, [r7, #8]
 8013198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801319a:	f000 fcab 	bl	8013af4 <prvCopyDataToQueue>
 801319e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d010      	beq.n	80131ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131aa:	3324      	adds	r3, #36	@ 0x24
 80131ac:	4618      	mov	r0, r3
 80131ae:	f001 faa9 	bl	8014704 <xTaskRemoveFromEventList>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d013      	beq.n	80131e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80131b8:	4b3f      	ldr	r3, [pc, #252]	@ (80132b8 <xQueueGenericSend+0x200>)
 80131ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131be:	601a      	str	r2, [r3, #0]
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	e00a      	b.n	80131e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80131ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d007      	beq.n	80131e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80131d0:	4b39      	ldr	r3, [pc, #228]	@ (80132b8 <xQueueGenericSend+0x200>)
 80131d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131d6:	601a      	str	r2, [r3, #0]
 80131d8:	f3bf 8f4f 	dsb	sy
 80131dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80131e0:	f001 ffdc 	bl	801519c <vPortExitCritical>
				return pdPASS;
 80131e4:	2301      	movs	r3, #1
 80131e6:	e063      	b.n	80132b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d103      	bne.n	80131f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80131ee:	f001 ffd5 	bl	801519c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	e05c      	b.n	80132b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d106      	bne.n	801320a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131fc:	f107 0314 	add.w	r3, r7, #20
 8013200:	4618      	mov	r0, r3
 8013202:	f001 fae3 	bl	80147cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013206:	2301      	movs	r3, #1
 8013208:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801320a:	f001 ffc7 	bl	801519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801320e:	f001 f86f 	bl	80142f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013212:	f001 ff91 	bl	8015138 <vPortEnterCritical>
 8013216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801321c:	b25b      	sxtb	r3, r3
 801321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013222:	d103      	bne.n	801322c <xQueueGenericSend+0x174>
 8013224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013226:	2200      	movs	r2, #0
 8013228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801322e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013232:	b25b      	sxtb	r3, r3
 8013234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013238:	d103      	bne.n	8013242 <xQueueGenericSend+0x18a>
 801323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323c:	2200      	movs	r2, #0
 801323e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013242:	f001 ffab 	bl	801519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013246:	1d3a      	adds	r2, r7, #4
 8013248:	f107 0314 	add.w	r3, r7, #20
 801324c:	4611      	mov	r1, r2
 801324e:	4618      	mov	r0, r3
 8013250:	f001 fad2 	bl	80147f8 <xTaskCheckForTimeOut>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d124      	bne.n	80132a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801325a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801325c:	f000 fd42 	bl	8013ce4 <prvIsQueueFull>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d018      	beq.n	8013298 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013268:	3310      	adds	r3, #16
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f001 fa22 	bl	80146b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013274:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013276:	f000 fccd 	bl	8013c14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801327a:	f001 f847 	bl	801430c <xTaskResumeAll>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	f47f af7c 	bne.w	801317e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013286:	4b0c      	ldr	r3, [pc, #48]	@ (80132b8 <xQueueGenericSend+0x200>)
 8013288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801328c:	601a      	str	r2, [r3, #0]
 801328e:	f3bf 8f4f 	dsb	sy
 8013292:	f3bf 8f6f 	isb	sy
 8013296:	e772      	b.n	801317e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801329a:	f000 fcbb 	bl	8013c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801329e:	f001 f835 	bl	801430c <xTaskResumeAll>
 80132a2:	e76c      	b.n	801317e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80132a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132a6:	f000 fcb5 	bl	8013c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132aa:	f001 f82f 	bl	801430c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80132ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3738      	adds	r7, #56	@ 0x38
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	e000ed04 	.word	0xe000ed04

080132bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b090      	sub	sp, #64	@ 0x40
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80132ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d10b      	bne.n	80132ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80132d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80132e6:	bf00      	nop
 80132e8:	bf00      	nop
 80132ea:	e7fd      	b.n	80132e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d103      	bne.n	80132fa <xQueueGenericSendFromISR+0x3e>
 80132f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d101      	bne.n	80132fe <xQueueGenericSendFromISR+0x42>
 80132fa:	2301      	movs	r3, #1
 80132fc:	e000      	b.n	8013300 <xQueueGenericSendFromISR+0x44>
 80132fe:	2300      	movs	r3, #0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d10b      	bne.n	801331c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013316:	bf00      	nop
 8013318:	bf00      	nop
 801331a:	e7fd      	b.n	8013318 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	2b02      	cmp	r3, #2
 8013320:	d103      	bne.n	801332a <xQueueGenericSendFromISR+0x6e>
 8013322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013326:	2b01      	cmp	r3, #1
 8013328:	d101      	bne.n	801332e <xQueueGenericSendFromISR+0x72>
 801332a:	2301      	movs	r3, #1
 801332c:	e000      	b.n	8013330 <xQueueGenericSendFromISR+0x74>
 801332e:	2300      	movs	r3, #0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d10b      	bne.n	801334c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013338:	f383 8811 	msr	BASEPRI, r3
 801333c:	f3bf 8f6f 	isb	sy
 8013340:	f3bf 8f4f 	dsb	sy
 8013344:	623b      	str	r3, [r7, #32]
}
 8013346:	bf00      	nop
 8013348:	bf00      	nop
 801334a:	e7fd      	b.n	8013348 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801334c:	f001 ffd4 	bl	80152f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013350:	f3ef 8211 	mrs	r2, BASEPRI
 8013354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013358:	f383 8811 	msr	BASEPRI, r3
 801335c:	f3bf 8f6f 	isb	sy
 8013360:	f3bf 8f4f 	dsb	sy
 8013364:	61fa      	str	r2, [r7, #28]
 8013366:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013368:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801336a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013374:	429a      	cmp	r2, r3
 8013376:	d302      	bcc.n	801337e <xQueueGenericSendFromISR+0xc2>
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	2b02      	cmp	r3, #2
 801337c:	d12f      	bne.n	80133de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013380:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013384:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801338e:	683a      	ldr	r2, [r7, #0]
 8013390:	68b9      	ldr	r1, [r7, #8]
 8013392:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013394:	f000 fbae 	bl	8013af4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013398:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133a0:	d112      	bne.n	80133c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d016      	beq.n	80133d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	3324      	adds	r3, #36	@ 0x24
 80133ae:	4618      	mov	r0, r3
 80133b0:	f001 f9a8 	bl	8014704 <xTaskRemoveFromEventList>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00e      	beq.n	80133d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00b      	beq.n	80133d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2201      	movs	r2, #1
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	e007      	b.n	80133d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80133c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80133cc:	3301      	adds	r3, #1
 80133ce:	b2db      	uxtb	r3, r3
 80133d0:	b25a      	sxtb	r2, r3
 80133d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80133d8:	2301      	movs	r3, #1
 80133da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80133dc:	e001      	b.n	80133e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80133de:	2300      	movs	r3, #0
 80133e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80133ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80133ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3740      	adds	r7, #64	@ 0x40
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b08e      	sub	sp, #56	@ 0x38
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013408:	2b00      	cmp	r3, #0
 801340a:	d10b      	bne.n	8013424 <xQueueGiveFromISR+0x2c>
	__asm volatile
 801340c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013410:	f383 8811 	msr	BASEPRI, r3
 8013414:	f3bf 8f6f 	isb	sy
 8013418:	f3bf 8f4f 	dsb	sy
 801341c:	623b      	str	r3, [r7, #32]
}
 801341e:	bf00      	nop
 8013420:	bf00      	nop
 8013422:	e7fd      	b.n	8013420 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00b      	beq.n	8013444 <xQueueGiveFromISR+0x4c>
	__asm volatile
 801342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013430:	f383 8811 	msr	BASEPRI, r3
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	61fb      	str	r3, [r7, #28]
}
 801343e:	bf00      	nop
 8013440:	bf00      	nop
 8013442:	e7fd      	b.n	8013440 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d103      	bne.n	8013454 <xQueueGiveFromISR+0x5c>
 801344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d101      	bne.n	8013458 <xQueueGiveFromISR+0x60>
 8013454:	2301      	movs	r3, #1
 8013456:	e000      	b.n	801345a <xQueueGiveFromISR+0x62>
 8013458:	2300      	movs	r3, #0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d10b      	bne.n	8013476 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013462:	f383 8811 	msr	BASEPRI, r3
 8013466:	f3bf 8f6f 	isb	sy
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	61bb      	str	r3, [r7, #24]
}
 8013470:	bf00      	nop
 8013472:	bf00      	nop
 8013474:	e7fd      	b.n	8013472 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013476:	f001 ff3f 	bl	80152f8 <vPortValidateInterruptPriority>
	__asm volatile
 801347a:	f3ef 8211 	mrs	r2, BASEPRI
 801347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013482:	f383 8811 	msr	BASEPRI, r3
 8013486:	f3bf 8f6f 	isb	sy
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	617a      	str	r2, [r7, #20]
 8013490:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013492:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013494:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801349a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d22b      	bcs.n	80134fe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80134a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80134ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80134b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b2:	1c5a      	adds	r2, r3, #1
 80134b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80134b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80134bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c0:	d112      	bne.n	80134e8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80134c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d016      	beq.n	80134f8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80134ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134cc:	3324      	adds	r3, #36	@ 0x24
 80134ce:	4618      	mov	r0, r3
 80134d0:	f001 f918 	bl	8014704 <xTaskRemoveFromEventList>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00e      	beq.n	80134f8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00b      	beq.n	80134f8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	2201      	movs	r2, #1
 80134e4:	601a      	str	r2, [r3, #0]
 80134e6:	e007      	b.n	80134f8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80134e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134ec:	3301      	adds	r3, #1
 80134ee:	b2db      	uxtb	r3, r3
 80134f0:	b25a      	sxtb	r2, r3
 80134f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80134f8:	2301      	movs	r3, #1
 80134fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80134fc:	e001      	b.n	8013502 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80134fe:	2300      	movs	r3, #0
 8013500:	637b      	str	r3, [r7, #52]	@ 0x34
 8013502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013504:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f383 8811 	msr	BASEPRI, r3
}
 801350c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801350e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013510:	4618      	mov	r0, r3
 8013512:	3738      	adds	r7, #56	@ 0x38
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b08c      	sub	sp, #48	@ 0x30
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	60b9      	str	r1, [r7, #8]
 8013522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013524:	2300      	movs	r3, #0
 8013526:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801352e:	2b00      	cmp	r3, #0
 8013530:	d10b      	bne.n	801354a <xQueueReceive+0x32>
	__asm volatile
 8013532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013536:	f383 8811 	msr	BASEPRI, r3
 801353a:	f3bf 8f6f 	isb	sy
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	623b      	str	r3, [r7, #32]
}
 8013544:	bf00      	nop
 8013546:	bf00      	nop
 8013548:	e7fd      	b.n	8013546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d103      	bne.n	8013558 <xQueueReceive+0x40>
 8013550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013554:	2b00      	cmp	r3, #0
 8013556:	d101      	bne.n	801355c <xQueueReceive+0x44>
 8013558:	2301      	movs	r3, #1
 801355a:	e000      	b.n	801355e <xQueueReceive+0x46>
 801355c:	2300      	movs	r3, #0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d10b      	bne.n	801357a <xQueueReceive+0x62>
	__asm volatile
 8013562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013566:	f383 8811 	msr	BASEPRI, r3
 801356a:	f3bf 8f6f 	isb	sy
 801356e:	f3bf 8f4f 	dsb	sy
 8013572:	61fb      	str	r3, [r7, #28]
}
 8013574:	bf00      	nop
 8013576:	bf00      	nop
 8013578:	e7fd      	b.n	8013576 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801357a:	f001 fa83 	bl	8014a84 <xTaskGetSchedulerState>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d102      	bne.n	801358a <xQueueReceive+0x72>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d101      	bne.n	801358e <xQueueReceive+0x76>
 801358a:	2301      	movs	r3, #1
 801358c:	e000      	b.n	8013590 <xQueueReceive+0x78>
 801358e:	2300      	movs	r3, #0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d10b      	bne.n	80135ac <xQueueReceive+0x94>
	__asm volatile
 8013594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013598:	f383 8811 	msr	BASEPRI, r3
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	61bb      	str	r3, [r7, #24]
}
 80135a6:	bf00      	nop
 80135a8:	bf00      	nop
 80135aa:	e7fd      	b.n	80135a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80135ac:	f001 fdc4 	bl	8015138 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d01f      	beq.n	80135fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80135bc:	68b9      	ldr	r1, [r7, #8]
 80135be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80135c0:	f000 fb02 	bl	8013bc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80135c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c6:	1e5a      	subs	r2, r3, #1
 80135c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ce:	691b      	ldr	r3, [r3, #16]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00f      	beq.n	80135f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d6:	3310      	adds	r3, #16
 80135d8:	4618      	mov	r0, r3
 80135da:	f001 f893 	bl	8014704 <xTaskRemoveFromEventList>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d007      	beq.n	80135f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80135e4:	4b3c      	ldr	r3, [pc, #240]	@ (80136d8 <xQueueReceive+0x1c0>)
 80135e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80135f4:	f001 fdd2 	bl	801519c <vPortExitCritical>
				return pdPASS;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e069      	b.n	80136d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d103      	bne.n	801360a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013602:	f001 fdcb 	bl	801519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013606:	2300      	movs	r3, #0
 8013608:	e062      	b.n	80136d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d106      	bne.n	801361e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013610:	f107 0310 	add.w	r3, r7, #16
 8013614:	4618      	mov	r0, r3
 8013616:	f001 f8d9 	bl	80147cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801361a:	2301      	movs	r3, #1
 801361c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801361e:	f001 fdbd 	bl	801519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013622:	f000 fe65 	bl	80142f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013626:	f001 fd87 	bl	8015138 <vPortEnterCritical>
 801362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801362c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013630:	b25b      	sxtb	r3, r3
 8013632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013636:	d103      	bne.n	8013640 <xQueueReceive+0x128>
 8013638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363a:	2200      	movs	r2, #0
 801363c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013646:	b25b      	sxtb	r3, r3
 8013648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801364c:	d103      	bne.n	8013656 <xQueueReceive+0x13e>
 801364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013650:	2200      	movs	r2, #0
 8013652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013656:	f001 fda1 	bl	801519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801365a:	1d3a      	adds	r2, r7, #4
 801365c:	f107 0310 	add.w	r3, r7, #16
 8013660:	4611      	mov	r1, r2
 8013662:	4618      	mov	r0, r3
 8013664:	f001 f8c8 	bl	80147f8 <xTaskCheckForTimeOut>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d123      	bne.n	80136b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801366e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013670:	f000 fb22 	bl	8013cb8 <prvIsQueueEmpty>
 8013674:	4603      	mov	r3, r0
 8013676:	2b00      	cmp	r3, #0
 8013678:	d017      	beq.n	80136aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367c:	3324      	adds	r3, #36	@ 0x24
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f001 f818 	bl	80146b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801368a:	f000 fac3 	bl	8013c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801368e:	f000 fe3d 	bl	801430c <xTaskResumeAll>
 8013692:	4603      	mov	r3, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d189      	bne.n	80135ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013698:	4b0f      	ldr	r3, [pc, #60]	@ (80136d8 <xQueueReceive+0x1c0>)
 801369a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801369e:	601a      	str	r2, [r3, #0]
 80136a0:	f3bf 8f4f 	dsb	sy
 80136a4:	f3bf 8f6f 	isb	sy
 80136a8:	e780      	b.n	80135ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80136aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136ac:	f000 fab2 	bl	8013c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80136b0:	f000 fe2c 	bl	801430c <xTaskResumeAll>
 80136b4:	e77a      	b.n	80135ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80136b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136b8:	f000 faac 	bl	8013c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80136bc:	f000 fe26 	bl	801430c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136c2:	f000 faf9 	bl	8013cb8 <prvIsQueueEmpty>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f43f af6f 	beq.w	80135ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80136ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3730      	adds	r7, #48	@ 0x30
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	e000ed04 	.word	0xe000ed04

080136dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08e      	sub	sp, #56	@ 0x38
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80136e6:	2300      	movs	r3, #0
 80136e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80136ee:	2300      	movs	r3, #0
 80136f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80136f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d10b      	bne.n	8013710 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	623b      	str	r3, [r7, #32]
}
 801370a:	bf00      	nop
 801370c:	bf00      	nop
 801370e:	e7fd      	b.n	801370c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013714:	2b00      	cmp	r3, #0
 8013716:	d00b      	beq.n	8013730 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801371c:	f383 8811 	msr	BASEPRI, r3
 8013720:	f3bf 8f6f 	isb	sy
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	61fb      	str	r3, [r7, #28]
}
 801372a:	bf00      	nop
 801372c:	bf00      	nop
 801372e:	e7fd      	b.n	801372c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013730:	f001 f9a8 	bl	8014a84 <xTaskGetSchedulerState>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d102      	bne.n	8013740 <xQueueSemaphoreTake+0x64>
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d101      	bne.n	8013744 <xQueueSemaphoreTake+0x68>
 8013740:	2301      	movs	r3, #1
 8013742:	e000      	b.n	8013746 <xQueueSemaphoreTake+0x6a>
 8013744:	2300      	movs	r3, #0
 8013746:	2b00      	cmp	r3, #0
 8013748:	d10b      	bne.n	8013762 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801374e:	f383 8811 	msr	BASEPRI, r3
 8013752:	f3bf 8f6f 	isb	sy
 8013756:	f3bf 8f4f 	dsb	sy
 801375a:	61bb      	str	r3, [r7, #24]
}
 801375c:	bf00      	nop
 801375e:	bf00      	nop
 8013760:	e7fd      	b.n	801375e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013762:	f001 fce9 	bl	8015138 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801376a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801376e:	2b00      	cmp	r3, #0
 8013770:	d024      	beq.n	80137bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013774:	1e5a      	subs	r2, r3, #1
 8013776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013778:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d104      	bne.n	801378c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013782:	f001 fb2b 	bl	8014ddc <pvTaskIncrementMutexHeldCount>
 8013786:	4602      	mov	r2, r0
 8013788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378e:	691b      	ldr	r3, [r3, #16]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d00f      	beq.n	80137b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013796:	3310      	adds	r3, #16
 8013798:	4618      	mov	r0, r3
 801379a:	f000 ffb3 	bl	8014704 <xTaskRemoveFromEventList>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d007      	beq.n	80137b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137a4:	4b54      	ldr	r3, [pc, #336]	@ (80138f8 <xQueueSemaphoreTake+0x21c>)
 80137a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137aa:	601a      	str	r2, [r3, #0]
 80137ac:	f3bf 8f4f 	dsb	sy
 80137b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80137b4:	f001 fcf2 	bl	801519c <vPortExitCritical>
				return pdPASS;
 80137b8:	2301      	movs	r3, #1
 80137ba:	e098      	b.n	80138ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d112      	bne.n	80137e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80137c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00b      	beq.n	80137e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80137c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	617b      	str	r3, [r7, #20]
}
 80137da:	bf00      	nop
 80137dc:	bf00      	nop
 80137de:	e7fd      	b.n	80137dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80137e0:	f001 fcdc 	bl	801519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80137e4:	2300      	movs	r3, #0
 80137e6:	e082      	b.n	80138ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d106      	bne.n	80137fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137ee:	f107 030c 	add.w	r3, r7, #12
 80137f2:	4618      	mov	r0, r3
 80137f4:	f000 ffea 	bl	80147cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137f8:	2301      	movs	r3, #1
 80137fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137fc:	f001 fcce 	bl	801519c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013800:	f000 fd76 	bl	80142f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013804:	f001 fc98 	bl	8015138 <vPortEnterCritical>
 8013808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801380e:	b25b      	sxtb	r3, r3
 8013810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013814:	d103      	bne.n	801381e <xQueueSemaphoreTake+0x142>
 8013816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013818:	2200      	movs	r2, #0
 801381a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013820:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013824:	b25b      	sxtb	r3, r3
 8013826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801382a:	d103      	bne.n	8013834 <xQueueSemaphoreTake+0x158>
 801382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801382e:	2200      	movs	r2, #0
 8013830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013834:	f001 fcb2 	bl	801519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013838:	463a      	mov	r2, r7
 801383a:	f107 030c 	add.w	r3, r7, #12
 801383e:	4611      	mov	r1, r2
 8013840:	4618      	mov	r0, r3
 8013842:	f000 ffd9 	bl	80147f8 <xTaskCheckForTimeOut>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d132      	bne.n	80138b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801384c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801384e:	f000 fa33 	bl	8013cb8 <prvIsQueueEmpty>
 8013852:	4603      	mov	r3, r0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d026      	beq.n	80138a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d109      	bne.n	8013874 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013860:	f001 fc6a 	bl	8015138 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	4618      	mov	r0, r3
 801386a:	f001 f929 	bl	8014ac0 <xTaskPriorityInherit>
 801386e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013870:	f001 fc94 	bl	801519c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013876:	3324      	adds	r3, #36	@ 0x24
 8013878:	683a      	ldr	r2, [r7, #0]
 801387a:	4611      	mov	r1, r2
 801387c:	4618      	mov	r0, r3
 801387e:	f000 ff1b 	bl	80146b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013884:	f000 f9c6 	bl	8013c14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013888:	f000 fd40 	bl	801430c <xTaskResumeAll>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	f47f af67 	bne.w	8013762 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013894:	4b18      	ldr	r3, [pc, #96]	@ (80138f8 <xQueueSemaphoreTake+0x21c>)
 8013896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801389a:	601a      	str	r2, [r3, #0]
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	e75d      	b.n	8013762 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80138a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138a8:	f000 f9b4 	bl	8013c14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80138ac:	f000 fd2e 	bl	801430c <xTaskResumeAll>
 80138b0:	e757      	b.n	8013762 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80138b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138b4:	f000 f9ae 	bl	8013c14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138b8:	f000 fd28 	bl	801430c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138be:	f000 f9fb 	bl	8013cb8 <prvIsQueueEmpty>
 80138c2:	4603      	mov	r3, r0
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f43f af4c 	beq.w	8013762 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80138ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00d      	beq.n	80138ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80138d0:	f001 fc32 	bl	8015138 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80138d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138d6:	f000 f8f5 	bl	8013ac4 <prvGetDisinheritPriorityAfterTimeout>
 80138da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80138dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80138e2:	4618      	mov	r0, r3
 80138e4:	f001 f9ea 	bl	8014cbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80138e8:	f001 fc58 	bl	801519c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80138ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3738      	adds	r7, #56	@ 0x38
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	e000ed04 	.word	0xe000ed04

080138fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b08e      	sub	sp, #56	@ 0x38
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10b      	bne.n	801392a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	623b      	str	r3, [r7, #32]
}
 8013924:	bf00      	nop
 8013926:	bf00      	nop
 8013928:	e7fd      	b.n	8013926 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d103      	bne.n	8013938 <xQueueReceiveFromISR+0x3c>
 8013930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013934:	2b00      	cmp	r3, #0
 8013936:	d101      	bne.n	801393c <xQueueReceiveFromISR+0x40>
 8013938:	2301      	movs	r3, #1
 801393a:	e000      	b.n	801393e <xQueueReceiveFromISR+0x42>
 801393c:	2300      	movs	r3, #0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d10b      	bne.n	801395a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	61fb      	str	r3, [r7, #28]
}
 8013954:	bf00      	nop
 8013956:	bf00      	nop
 8013958:	e7fd      	b.n	8013956 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801395a:	f001 fccd 	bl	80152f8 <vPortValidateInterruptPriority>
	__asm volatile
 801395e:	f3ef 8211 	mrs	r2, BASEPRI
 8013962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013966:	f383 8811 	msr	BASEPRI, r3
 801396a:	f3bf 8f6f 	isb	sy
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	61ba      	str	r2, [r7, #24]
 8013974:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013976:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013978:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801397e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013982:	2b00      	cmp	r3, #0
 8013984:	d02f      	beq.n	80139e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801398c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013990:	68b9      	ldr	r1, [r7, #8]
 8013992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013994:	f000 f918 	bl	8013bc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801399a:	1e5a      	subs	r2, r3, #1
 801399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801399e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80139a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80139a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a8:	d112      	bne.n	80139d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ac:	691b      	ldr	r3, [r3, #16]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d016      	beq.n	80139e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b4:	3310      	adds	r3, #16
 80139b6:	4618      	mov	r0, r3
 80139b8:	f000 fea4 	bl	8014704 <xTaskRemoveFromEventList>
 80139bc:	4603      	mov	r3, r0
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d00e      	beq.n	80139e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00b      	beq.n	80139e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2201      	movs	r2, #1
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	e007      	b.n	80139e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80139d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139d4:	3301      	adds	r3, #1
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	b25a      	sxtb	r2, r3
 80139da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80139e0:	2301      	movs	r3, #1
 80139e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80139e4:	e001      	b.n	80139ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80139ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	f383 8811 	msr	BASEPRI, r3
}
 80139f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3738      	adds	r7, #56	@ 0x38
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d10b      	bne.n	8013a26 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8013a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	60bb      	str	r3, [r7, #8]
}
 8013a20:	bf00      	nop
 8013a22:	bf00      	nop
 8013a24:	e7fd      	b.n	8013a22 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8013a26:	f001 fb87 	bl	8015138 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8013a30:	f001 fbb4 	bl	801519c <vPortExitCritical>

	return uxReturn;
 8013a34:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013a36:	4618      	mov	r0, r3
 8013a38:	3710      	adds	r7, #16
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013a3e:	b480      	push	{r7}
 8013a40:	b087      	sub	sp, #28
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10b      	bne.n	8013a68 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8013a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a54:	f383 8811 	msr	BASEPRI, r3
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	60fb      	str	r3, [r7, #12]
}
 8013a62:	bf00      	nop
 8013a64:	bf00      	nop
 8013a66:	e7fd      	b.n	8013a64 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a6c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8013a6e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013a70:	4618      	mov	r0, r3
 8013a72:	371c      	adds	r7, #28
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d10b      	bne.n	8013aa6 <vQueueDelete+0x2a>
	__asm volatile
 8013a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a92:	f383 8811 	msr	BASEPRI, r3
 8013a96:	f3bf 8f6f 	isb	sy
 8013a9a:	f3bf 8f4f 	dsb	sy
 8013a9e:	60bb      	str	r3, [r7, #8]
}
 8013aa0:	bf00      	nop
 8013aa2:	bf00      	nop
 8013aa4:	e7fd      	b.n	8013aa2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f000 f934 	bl	8013d14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d102      	bne.n	8013abc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f001 fd2e 	bl	8015518 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013abc:	bf00      	nop
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b085      	sub	sp, #20
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d006      	beq.n	8013ae2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f1c3 0307 	rsb	r3, r3, #7
 8013ade:	60fb      	str	r3, [r7, #12]
 8013ae0:	e001      	b.n	8013ae6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
	}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3714      	adds	r7, #20
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr

08013af4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b00:	2300      	movs	r3, #0
 8013b02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d10d      	bne.n	8013b2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d14d      	bne.n	8013bb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	689b      	ldr	r3, [r3, #8]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f001 f844 	bl	8014bac <xTaskPriorityDisinherit>
 8013b24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	609a      	str	r2, [r3, #8]
 8013b2c:	e043      	b.n	8013bb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d119      	bne.n	8013b68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6858      	ldr	r0, [r3, #4]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	68b9      	ldr	r1, [r7, #8]
 8013b40:	f011 fe25 	bl	802578e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	685a      	ldr	r2, [r3, #4]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b4c:	441a      	add	r2, r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	685a      	ldr	r2, [r3, #4]
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	689b      	ldr	r3, [r3, #8]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d32b      	bcc.n	8013bb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	605a      	str	r2, [r3, #4]
 8013b66:	e026      	b.n	8013bb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68d8      	ldr	r0, [r3, #12]
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b70:	461a      	mov	r2, r3
 8013b72:	68b9      	ldr	r1, [r7, #8]
 8013b74:	f011 fe0b 	bl	802578e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	68da      	ldr	r2, [r3, #12]
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b80:	425b      	negs	r3, r3
 8013b82:	441a      	add	r2, r3
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	68da      	ldr	r2, [r3, #12]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d207      	bcs.n	8013ba4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	689a      	ldr	r2, [r3, #8]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b9c:	425b      	negs	r3, r3
 8013b9e:	441a      	add	r2, r3
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b02      	cmp	r3, #2
 8013ba8:	d105      	bne.n	8013bb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d002      	beq.n	8013bb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	1c5a      	adds	r2, r3, #1
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013bbe:	697b      	ldr	r3, [r7, #20]
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3718      	adds	r7, #24
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}

08013bc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d018      	beq.n	8013c0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	68da      	ldr	r2, [r3, #12]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013be2:	441a      	add	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	68da      	ldr	r2, [r3, #12]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	689b      	ldr	r3, [r3, #8]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d303      	bcc.n	8013bfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681a      	ldr	r2, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	68d9      	ldr	r1, [r3, #12]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c04:	461a      	mov	r2, r3
 8013c06:	6838      	ldr	r0, [r7, #0]
 8013c08:	f011 fdc1 	bl	802578e <memcpy>
	}
}
 8013c0c:	bf00      	nop
 8013c0e:	3708      	adds	r7, #8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c1c:	f001 fa8c 	bl	8015138 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c28:	e011      	b.n	8013c4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d012      	beq.n	8013c58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3324      	adds	r3, #36	@ 0x24
 8013c36:	4618      	mov	r0, r3
 8013c38:	f000 fd64 	bl	8014704 <xTaskRemoveFromEventList>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d001      	beq.n	8013c46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c42:	f000 fe3d 	bl	80148c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c46:	7bfb      	ldrb	r3, [r7, #15]
 8013c48:	3b01      	subs	r3, #1
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	dce9      	bgt.n	8013c2a <prvUnlockQueue+0x16>
 8013c56:	e000      	b.n	8013c5a <prvUnlockQueue+0x46>
					break;
 8013c58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	22ff      	movs	r2, #255	@ 0xff
 8013c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013c62:	f001 fa9b 	bl	801519c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c66:	f001 fa67 	bl	8015138 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c72:	e011      	b.n	8013c98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	691b      	ldr	r3, [r3, #16]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d012      	beq.n	8013ca2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	3310      	adds	r3, #16
 8013c80:	4618      	mov	r0, r3
 8013c82:	f000 fd3f 	bl	8014704 <xTaskRemoveFromEventList>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c8c:	f000 fe18 	bl	80148c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c90:	7bbb      	ldrb	r3, [r7, #14]
 8013c92:	3b01      	subs	r3, #1
 8013c94:	b2db      	uxtb	r3, r3
 8013c96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dce9      	bgt.n	8013c74 <prvUnlockQueue+0x60>
 8013ca0:	e000      	b.n	8013ca4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013ca2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	22ff      	movs	r2, #255	@ 0xff
 8013ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013cac:	f001 fa76 	bl	801519c <vPortExitCritical>
}
 8013cb0:	bf00      	nop
 8013cb2:	3710      	adds	r7, #16
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cc0:	f001 fa3a 	bl	8015138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	60fb      	str	r3, [r7, #12]
 8013cd0:	e001      	b.n	8013cd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013cd6:	f001 fa61 	bl	801519c <vPortExitCritical>

	return xReturn;
 8013cda:	68fb      	ldr	r3, [r7, #12]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b084      	sub	sp, #16
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cec:	f001 fa24 	bl	8015138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d102      	bne.n	8013d02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	60fb      	str	r3, [r7, #12]
 8013d00:	e001      	b.n	8013d06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d02:	2300      	movs	r3, #0
 8013d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d06:	f001 fa49 	bl	801519c <vPortExitCritical>

	return xReturn;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d14:	b480      	push	{r7}
 8013d16:	b085      	sub	sp, #20
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	60fb      	str	r3, [r7, #12]
 8013d20:	e016      	b.n	8013d50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d22:	4a10      	ldr	r2, [pc, #64]	@ (8013d64 <vQueueUnregisterQueue+0x50>)
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	00db      	lsls	r3, r3, #3
 8013d28:	4413      	add	r3, r2
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d10b      	bne.n	8013d4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d32:	4a0c      	ldr	r2, [pc, #48]	@ (8013d64 <vQueueUnregisterQueue+0x50>)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2100      	movs	r1, #0
 8013d38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013d3c:	4a09      	ldr	r2, [pc, #36]	@ (8013d64 <vQueueUnregisterQueue+0x50>)
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	00db      	lsls	r3, r3, #3
 8013d42:	4413      	add	r3, r2
 8013d44:	2200      	movs	r2, #0
 8013d46:	605a      	str	r2, [r3, #4]
				break;
 8013d48:	e006      	b.n	8013d58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	60fb      	str	r3, [r7, #12]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b07      	cmp	r3, #7
 8013d54:	d9e5      	bls.n	8013d22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013d56:	bf00      	nop
 8013d58:	bf00      	nop
 8013d5a:	3714      	adds	r7, #20
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr
 8013d64:	2400137c 	.word	0x2400137c

08013d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08e      	sub	sp, #56	@ 0x38
 8013d6c:	af04      	add	r7, sp, #16
 8013d6e:	60f8      	str	r0, [r7, #12]
 8013d70:	60b9      	str	r1, [r7, #8]
 8013d72:	607a      	str	r2, [r7, #4]
 8013d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10b      	bne.n	8013d94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d80:	f383 8811 	msr	BASEPRI, r3
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	f3bf 8f4f 	dsb	sy
 8013d8c:	623b      	str	r3, [r7, #32]
}
 8013d8e:	bf00      	nop
 8013d90:	bf00      	nop
 8013d92:	e7fd      	b.n	8013d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10b      	bne.n	8013db2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d9e:	f383 8811 	msr	BASEPRI, r3
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	61fb      	str	r3, [r7, #28]
}
 8013dac:	bf00      	nop
 8013dae:	bf00      	nop
 8013db0:	e7fd      	b.n	8013dae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013db2:	2354      	movs	r3, #84	@ 0x54
 8013db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	2b54      	cmp	r3, #84	@ 0x54
 8013dba:	d00b      	beq.n	8013dd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc0:	f383 8811 	msr	BASEPRI, r3
 8013dc4:	f3bf 8f6f 	isb	sy
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	61bb      	str	r3, [r7, #24]
}
 8013dce:	bf00      	nop
 8013dd0:	bf00      	nop
 8013dd2:	e7fd      	b.n	8013dd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013dd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d01e      	beq.n	8013e1a <xTaskCreateStatic+0xb2>
 8013ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d01b      	beq.n	8013e1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013dea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dee:	2202      	movs	r2, #2
 8013df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013df4:	2300      	movs	r3, #0
 8013df6:	9303      	str	r3, [sp, #12]
 8013df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfa:	9302      	str	r3, [sp, #8]
 8013dfc:	f107 0314 	add.w	r3, r7, #20
 8013e00:	9301      	str	r3, [sp, #4]
 8013e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	68b9      	ldr	r1, [r7, #8]
 8013e0c:	68f8      	ldr	r0, [r7, #12]
 8013e0e:	f000 f850 	bl	8013eb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e14:	f000 f8d6 	bl	8013fc4 <prvAddNewTaskToReadyList>
 8013e18:	e001      	b.n	8013e1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e1e:	697b      	ldr	r3, [r7, #20]
	}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3728      	adds	r7, #40	@ 0x28
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b08c      	sub	sp, #48	@ 0x30
 8013e2c:	af04      	add	r7, sp, #16
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	603b      	str	r3, [r7, #0]
 8013e34:	4613      	mov	r3, r2
 8013e36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013e38:	88fb      	ldrh	r3, [r7, #6]
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f001 fa9d 	bl	801537c <pvPortMalloc>
 8013e42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d00e      	beq.n	8013e68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013e4a:	2054      	movs	r0, #84	@ 0x54
 8013e4c:	f001 fa96 	bl	801537c <pvPortMalloc>
 8013e50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d003      	beq.n	8013e60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	697a      	ldr	r2, [r7, #20]
 8013e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8013e5e:	e005      	b.n	8013e6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013e60:	6978      	ldr	r0, [r7, #20]
 8013e62:	f001 fb59 	bl	8015518 <vPortFree>
 8013e66:	e001      	b.n	8013e6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d017      	beq.n	8013ea2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	2200      	movs	r2, #0
 8013e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013e7a:	88fa      	ldrh	r2, [r7, #6]
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	9303      	str	r3, [sp, #12]
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	9302      	str	r3, [sp, #8]
 8013e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e86:	9301      	str	r3, [sp, #4]
 8013e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e8a:	9300      	str	r3, [sp, #0]
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	68b9      	ldr	r1, [r7, #8]
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	f000 f80e 	bl	8013eb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e96:	69f8      	ldr	r0, [r7, #28]
 8013e98:	f000 f894 	bl	8013fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	61bb      	str	r3, [r7, #24]
 8013ea0:	e002      	b.n	8013ea8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013ea8:	69bb      	ldr	r3, [r7, #24]
	}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3720      	adds	r7, #32
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}

08013eb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013eb2:	b580      	push	{r7, lr}
 8013eb4:	b088      	sub	sp, #32
 8013eb6:	af00      	add	r7, sp, #0
 8013eb8:	60f8      	str	r0, [r7, #12]
 8013eba:	60b9      	str	r1, [r7, #8]
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013ec4:	6879      	ldr	r1, [r7, #4]
 8013ec6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013eca:	440b      	add	r3, r1
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	4413      	add	r3, r2
 8013ed0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	f023 0307 	bic.w	r3, r3, #7
 8013ed8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013eda:	69bb      	ldr	r3, [r7, #24]
 8013edc:	f003 0307 	and.w	r3, r3, #7
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d00b      	beq.n	8013efc <prvInitialiseNewTask+0x4a>
	__asm volatile
 8013ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee8:	f383 8811 	msr	BASEPRI, r3
 8013eec:	f3bf 8f6f 	isb	sy
 8013ef0:	f3bf 8f4f 	dsb	sy
 8013ef4:	617b      	str	r3, [r7, #20]
}
 8013ef6:	bf00      	nop
 8013ef8:	bf00      	nop
 8013efa:	e7fd      	b.n	8013ef8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d01f      	beq.n	8013f42 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f02:	2300      	movs	r3, #0
 8013f04:	61fb      	str	r3, [r7, #28]
 8013f06:	e012      	b.n	8013f2e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f08:	68ba      	ldr	r2, [r7, #8]
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	7819      	ldrb	r1, [r3, #0]
 8013f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	4413      	add	r3, r2
 8013f16:	3334      	adds	r3, #52	@ 0x34
 8013f18:	460a      	mov	r2, r1
 8013f1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013f1c:	68ba      	ldr	r2, [r7, #8]
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	4413      	add	r3, r2
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d006      	beq.n	8013f36 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f28:	69fb      	ldr	r3, [r7, #28]
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	61fb      	str	r3, [r7, #28]
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	2b0f      	cmp	r3, #15
 8013f32:	d9e9      	bls.n	8013f08 <prvInitialiseNewTask+0x56>
 8013f34:	e000      	b.n	8013f38 <prvInitialiseNewTask+0x86>
			{
				break;
 8013f36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013f40:	e003      	b.n	8013f4a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f44:	2200      	movs	r2, #0
 8013f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f4c:	2b06      	cmp	r3, #6
 8013f4e:	d901      	bls.n	8013f54 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f50:	2306      	movs	r3, #6
 8013f52:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f58:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f5e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f62:	2200      	movs	r2, #0
 8013f64:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f68:	3304      	adds	r3, #4
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fe fe81 	bl	8012c72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f72:	3318      	adds	r3, #24
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7fe fe7c 	bl	8012c72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f82:	f1c3 0207 	rsb	r2, r3, #7
 8013f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f8e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f92:	2200      	movs	r2, #0
 8013f94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f9e:	683a      	ldr	r2, [r7, #0]
 8013fa0:	68f9      	ldr	r1, [r7, #12]
 8013fa2:	69b8      	ldr	r0, [r7, #24]
 8013fa4:	f000 ff94 	bl	8014ed0 <pxPortInitialiseStack>
 8013fa8:	4602      	mov	r2, r0
 8013faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013fba:	bf00      	nop
 8013fbc:	3720      	adds	r7, #32
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
	...

08013fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013fcc:	f001 f8b4 	bl	8015138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013fd0:	4b2a      	ldr	r3, [pc, #168]	@ (801407c <prvAddNewTaskToReadyList+0xb8>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	3301      	adds	r3, #1
 8013fd6:	4a29      	ldr	r2, [pc, #164]	@ (801407c <prvAddNewTaskToReadyList+0xb8>)
 8013fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013fda:	4b29      	ldr	r3, [pc, #164]	@ (8014080 <prvAddNewTaskToReadyList+0xbc>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d109      	bne.n	8013ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013fe2:	4a27      	ldr	r2, [pc, #156]	@ (8014080 <prvAddNewTaskToReadyList+0xbc>)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013fe8:	4b24      	ldr	r3, [pc, #144]	@ (801407c <prvAddNewTaskToReadyList+0xb8>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d110      	bne.n	8014012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013ff0:	f000 fc8a 	bl	8014908 <prvInitialiseTaskLists>
 8013ff4:	e00d      	b.n	8014012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ff6:	4b23      	ldr	r3, [pc, #140]	@ (8014084 <prvAddNewTaskToReadyList+0xc0>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d109      	bne.n	8014012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ffe:	4b20      	ldr	r3, [pc, #128]	@ (8014080 <prvAddNewTaskToReadyList+0xbc>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014008:	429a      	cmp	r2, r3
 801400a:	d802      	bhi.n	8014012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801400c:	4a1c      	ldr	r2, [pc, #112]	@ (8014080 <prvAddNewTaskToReadyList+0xbc>)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014012:	4b1d      	ldr	r3, [pc, #116]	@ (8014088 <prvAddNewTaskToReadyList+0xc4>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	3301      	adds	r3, #1
 8014018:	4a1b      	ldr	r2, [pc, #108]	@ (8014088 <prvAddNewTaskToReadyList+0xc4>)
 801401a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014020:	2201      	movs	r2, #1
 8014022:	409a      	lsls	r2, r3
 8014024:	4b19      	ldr	r3, [pc, #100]	@ (801408c <prvAddNewTaskToReadyList+0xc8>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4313      	orrs	r3, r2
 801402a:	4a18      	ldr	r2, [pc, #96]	@ (801408c <prvAddNewTaskToReadyList+0xc8>)
 801402c:	6013      	str	r3, [r2, #0]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014032:	4613      	mov	r3, r2
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	4413      	add	r3, r2
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	4a15      	ldr	r2, [pc, #84]	@ (8014090 <prvAddNewTaskToReadyList+0xcc>)
 801403c:	441a      	add	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	3304      	adds	r3, #4
 8014042:	4619      	mov	r1, r3
 8014044:	4610      	mov	r0, r2
 8014046:	f7fe fe21 	bl	8012c8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801404a:	f001 f8a7 	bl	801519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801404e:	4b0d      	ldr	r3, [pc, #52]	@ (8014084 <prvAddNewTaskToReadyList+0xc0>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00e      	beq.n	8014074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014056:	4b0a      	ldr	r3, [pc, #40]	@ (8014080 <prvAddNewTaskToReadyList+0xbc>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014060:	429a      	cmp	r2, r3
 8014062:	d207      	bcs.n	8014074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014064:	4b0b      	ldr	r3, [pc, #44]	@ (8014094 <prvAddNewTaskToReadyList+0xd0>)
 8014066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801406a:	601a      	str	r2, [r3, #0]
 801406c:	f3bf 8f4f 	dsb	sy
 8014070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014074:	bf00      	nop
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	240014bc 	.word	0x240014bc
 8014080:	240013bc 	.word	0x240013bc
 8014084:	240014c8 	.word	0x240014c8
 8014088:	240014d8 	.word	0x240014d8
 801408c:	240014c4 	.word	0x240014c4
 8014090:	240013c0 	.word	0x240013c0
 8014094:	e000ed04 	.word	0xe000ed04

08014098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80140a0:	2300      	movs	r3, #0
 80140a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d018      	beq.n	80140dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80140aa:	4b14      	ldr	r3, [pc, #80]	@ (80140fc <vTaskDelay+0x64>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d00b      	beq.n	80140ca <vTaskDelay+0x32>
	__asm volatile
 80140b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140b6:	f383 8811 	msr	BASEPRI, r3
 80140ba:	f3bf 8f6f 	isb	sy
 80140be:	f3bf 8f4f 	dsb	sy
 80140c2:	60bb      	str	r3, [r7, #8]
}
 80140c4:	bf00      	nop
 80140c6:	bf00      	nop
 80140c8:	e7fd      	b.n	80140c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80140ca:	f000 f911 	bl	80142f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80140ce:	2100      	movs	r1, #0
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f000 fe97 	bl	8014e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80140d6:	f000 f919 	bl	801430c <xTaskResumeAll>
 80140da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d107      	bne.n	80140f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80140e2:	4b07      	ldr	r3, [pc, #28]	@ (8014100 <vTaskDelay+0x68>)
 80140e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140e8:	601a      	str	r2, [r3, #0]
 80140ea:	f3bf 8f4f 	dsb	sy
 80140ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140f2:	bf00      	nop
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	240014e4 	.word	0x240014e4
 8014100:	e000ed04 	.word	0xe000ed04

08014104 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801410c:	f001 f814 	bl	8015138 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d102      	bne.n	801411c <vTaskSuspend+0x18>
 8014116:	4b3d      	ldr	r3, [pc, #244]	@ (801420c <vTaskSuspend+0x108>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	e000      	b.n	801411e <vTaskSuspend+0x1a>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	3304      	adds	r3, #4
 8014124:	4618      	mov	r0, r3
 8014126:	f7fe fe0e 	bl	8012d46 <uxListRemove>
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d115      	bne.n	801415c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014134:	4936      	ldr	r1, [pc, #216]	@ (8014210 <vTaskSuspend+0x10c>)
 8014136:	4613      	mov	r3, r2
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	4413      	add	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	440b      	add	r3, r1
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d10a      	bne.n	801415c <vTaskSuspend+0x58>
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801414a:	2201      	movs	r2, #1
 801414c:	fa02 f303 	lsl.w	r3, r2, r3
 8014150:	43da      	mvns	r2, r3
 8014152:	4b30      	ldr	r3, [pc, #192]	@ (8014214 <vTaskSuspend+0x110>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	4013      	ands	r3, r2
 8014158:	4a2e      	ldr	r2, [pc, #184]	@ (8014214 <vTaskSuspend+0x110>)
 801415a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014160:	2b00      	cmp	r3, #0
 8014162:	d004      	beq.n	801416e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	3318      	adds	r3, #24
 8014168:	4618      	mov	r0, r3
 801416a:	f7fe fdec 	bl	8012d46 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	3304      	adds	r3, #4
 8014172:	4619      	mov	r1, r3
 8014174:	4828      	ldr	r0, [pc, #160]	@ (8014218 <vTaskSuspend+0x114>)
 8014176:	f7fe fd89 	bl	8012c8c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8014180:	b2db      	uxtb	r3, r3
 8014182:	2b01      	cmp	r3, #1
 8014184:	d103      	bne.n	801418e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2200      	movs	r2, #0
 801418a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801418e:	f001 f805 	bl	801519c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014192:	4b22      	ldr	r3, [pc, #136]	@ (801421c <vTaskSuspend+0x118>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d005      	beq.n	80141a6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801419a:	f000 ffcd 	bl	8015138 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801419e:	f000 fc51 	bl	8014a44 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80141a2:	f000 fffb 	bl	801519c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80141a6:	4b19      	ldr	r3, [pc, #100]	@ (801420c <vTaskSuspend+0x108>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	68fa      	ldr	r2, [r7, #12]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d128      	bne.n	8014202 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80141b0:	4b1a      	ldr	r3, [pc, #104]	@ (801421c <vTaskSuspend+0x118>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d018      	beq.n	80141ea <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80141b8:	4b19      	ldr	r3, [pc, #100]	@ (8014220 <vTaskSuspend+0x11c>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <vTaskSuspend+0xd4>
	__asm volatile
 80141c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141c4:	f383 8811 	msr	BASEPRI, r3
 80141c8:	f3bf 8f6f 	isb	sy
 80141cc:	f3bf 8f4f 	dsb	sy
 80141d0:	60bb      	str	r3, [r7, #8]
}
 80141d2:	bf00      	nop
 80141d4:	bf00      	nop
 80141d6:	e7fd      	b.n	80141d4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80141d8:	4b12      	ldr	r3, [pc, #72]	@ (8014224 <vTaskSuspend+0x120>)
 80141da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141de:	601a      	str	r2, [r3, #0]
 80141e0:	f3bf 8f4f 	dsb	sy
 80141e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80141e8:	e00b      	b.n	8014202 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80141ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014218 <vTaskSuspend+0x114>)
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014228 <vTaskSuspend+0x124>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d103      	bne.n	80141fe <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80141f6:	4b05      	ldr	r3, [pc, #20]	@ (801420c <vTaskSuspend+0x108>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
	}
 80141fc:	e001      	b.n	8014202 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80141fe:	f000 f9ff 	bl	8014600 <vTaskSwitchContext>
	}
 8014202:	bf00      	nop
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	240013bc 	.word	0x240013bc
 8014210:	240013c0 	.word	0x240013c0
 8014214:	240014c4 	.word	0x240014c4
 8014218:	240014a8 	.word	0x240014a8
 801421c:	240014c8 	.word	0x240014c8
 8014220:	240014e4 	.word	0x240014e4
 8014224:	e000ed04 	.word	0xe000ed04
 8014228:	240014bc 	.word	0x240014bc

0801422c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b08a      	sub	sp, #40	@ 0x28
 8014230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014232:	2300      	movs	r3, #0
 8014234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014236:	2300      	movs	r3, #0
 8014238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801423a:	463a      	mov	r2, r7
 801423c:	1d39      	adds	r1, r7, #4
 801423e:	f107 0308 	add.w	r3, r7, #8
 8014242:	4618      	mov	r0, r3
 8014244:	f7ee fb88 	bl	8002958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	68ba      	ldr	r2, [r7, #8]
 801424e:	9202      	str	r2, [sp, #8]
 8014250:	9301      	str	r3, [sp, #4]
 8014252:	2300      	movs	r3, #0
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	2300      	movs	r3, #0
 8014258:	460a      	mov	r2, r1
 801425a:	491f      	ldr	r1, [pc, #124]	@ (80142d8 <vTaskStartScheduler+0xac>)
 801425c:	481f      	ldr	r0, [pc, #124]	@ (80142dc <vTaskStartScheduler+0xb0>)
 801425e:	f7ff fd83 	bl	8013d68 <xTaskCreateStatic>
 8014262:	4603      	mov	r3, r0
 8014264:	4a1e      	ldr	r2, [pc, #120]	@ (80142e0 <vTaskStartScheduler+0xb4>)
 8014266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014268:	4b1d      	ldr	r3, [pc, #116]	@ (80142e0 <vTaskStartScheduler+0xb4>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d002      	beq.n	8014276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014270:	2301      	movs	r3, #1
 8014272:	617b      	str	r3, [r7, #20]
 8014274:	e001      	b.n	801427a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014276:	2300      	movs	r3, #0
 8014278:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	2b01      	cmp	r3, #1
 801427e:	d116      	bne.n	80142ae <vTaskStartScheduler+0x82>
	__asm volatile
 8014280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014284:	f383 8811 	msr	BASEPRI, r3
 8014288:	f3bf 8f6f 	isb	sy
 801428c:	f3bf 8f4f 	dsb	sy
 8014290:	613b      	str	r3, [r7, #16]
}
 8014292:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014294:	4b13      	ldr	r3, [pc, #76]	@ (80142e4 <vTaskStartScheduler+0xb8>)
 8014296:	f04f 32ff 	mov.w	r2, #4294967295
 801429a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801429c:	4b12      	ldr	r3, [pc, #72]	@ (80142e8 <vTaskStartScheduler+0xbc>)
 801429e:	2201      	movs	r2, #1
 80142a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80142a2:	4b12      	ldr	r3, [pc, #72]	@ (80142ec <vTaskStartScheduler+0xc0>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80142a8:	f000 fea2 	bl	8014ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80142ac:	e00f      	b.n	80142ce <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b4:	d10b      	bne.n	80142ce <vTaskStartScheduler+0xa2>
	__asm volatile
 80142b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142ba:	f383 8811 	msr	BASEPRI, r3
 80142be:	f3bf 8f6f 	isb	sy
 80142c2:	f3bf 8f4f 	dsb	sy
 80142c6:	60fb      	str	r3, [r7, #12]
}
 80142c8:	bf00      	nop
 80142ca:	bf00      	nop
 80142cc:	e7fd      	b.n	80142ca <vTaskStartScheduler+0x9e>
}
 80142ce:	bf00      	nop
 80142d0:	3718      	adds	r7, #24
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	0802961c 	.word	0x0802961c
 80142dc:	080148d9 	.word	0x080148d9
 80142e0:	240014e0 	.word	0x240014e0
 80142e4:	240014dc 	.word	0x240014dc
 80142e8:	240014c8 	.word	0x240014c8
 80142ec:	240014c0 	.word	0x240014c0

080142f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80142f0:	b480      	push	{r7}
 80142f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80142f4:	4b04      	ldr	r3, [pc, #16]	@ (8014308 <vTaskSuspendAll+0x18>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	3301      	adds	r3, #1
 80142fa:	4a03      	ldr	r2, [pc, #12]	@ (8014308 <vTaskSuspendAll+0x18>)
 80142fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80142fe:	bf00      	nop
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr
 8014308:	240014e4 	.word	0x240014e4

0801430c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014312:	2300      	movs	r3, #0
 8014314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014316:	2300      	movs	r3, #0
 8014318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801431a:	4b42      	ldr	r3, [pc, #264]	@ (8014424 <xTaskResumeAll+0x118>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10b      	bne.n	801433a <xTaskResumeAll+0x2e>
	__asm volatile
 8014322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014326:	f383 8811 	msr	BASEPRI, r3
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	f3bf 8f4f 	dsb	sy
 8014332:	603b      	str	r3, [r7, #0]
}
 8014334:	bf00      	nop
 8014336:	bf00      	nop
 8014338:	e7fd      	b.n	8014336 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801433a:	f000 fefd 	bl	8015138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801433e:	4b39      	ldr	r3, [pc, #228]	@ (8014424 <xTaskResumeAll+0x118>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	3b01      	subs	r3, #1
 8014344:	4a37      	ldr	r2, [pc, #220]	@ (8014424 <xTaskResumeAll+0x118>)
 8014346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014348:	4b36      	ldr	r3, [pc, #216]	@ (8014424 <xTaskResumeAll+0x118>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d161      	bne.n	8014414 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014350:	4b35      	ldr	r3, [pc, #212]	@ (8014428 <xTaskResumeAll+0x11c>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d05d      	beq.n	8014414 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014358:	e02e      	b.n	80143b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801435a:	4b34      	ldr	r3, [pc, #208]	@ (801442c <xTaskResumeAll+0x120>)
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	3318      	adds	r3, #24
 8014366:	4618      	mov	r0, r3
 8014368:	f7fe fced 	bl	8012d46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	3304      	adds	r3, #4
 8014370:	4618      	mov	r0, r3
 8014372:	f7fe fce8 	bl	8012d46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437a:	2201      	movs	r2, #1
 801437c:	409a      	lsls	r2, r3
 801437e:	4b2c      	ldr	r3, [pc, #176]	@ (8014430 <xTaskResumeAll+0x124>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4313      	orrs	r3, r2
 8014384:	4a2a      	ldr	r2, [pc, #168]	@ (8014430 <xTaskResumeAll+0x124>)
 8014386:	6013      	str	r3, [r2, #0]
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801438c:	4613      	mov	r3, r2
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	4413      	add	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4a27      	ldr	r2, [pc, #156]	@ (8014434 <xTaskResumeAll+0x128>)
 8014396:	441a      	add	r2, r3
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	3304      	adds	r3, #4
 801439c:	4619      	mov	r1, r3
 801439e:	4610      	mov	r0, r2
 80143a0:	f7fe fc74 	bl	8012c8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143a8:	4b23      	ldr	r3, [pc, #140]	@ (8014438 <xTaskResumeAll+0x12c>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d302      	bcc.n	80143b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80143b2:	4b22      	ldr	r3, [pc, #136]	@ (801443c <xTaskResumeAll+0x130>)
 80143b4:	2201      	movs	r2, #1
 80143b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143b8:	4b1c      	ldr	r3, [pc, #112]	@ (801442c <xTaskResumeAll+0x120>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d1cc      	bne.n	801435a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d001      	beq.n	80143ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80143c6:	f000 fb3d 	bl	8014a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80143ca:	4b1d      	ldr	r3, [pc, #116]	@ (8014440 <xTaskResumeAll+0x134>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d010      	beq.n	80143f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80143d6:	f000 f859 	bl	801448c <xTaskIncrementTick>
 80143da:	4603      	mov	r3, r0
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d002      	beq.n	80143e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80143e0:	4b16      	ldr	r3, [pc, #88]	@ (801443c <xTaskResumeAll+0x130>)
 80143e2:	2201      	movs	r2, #1
 80143e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	3b01      	subs	r3, #1
 80143ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d1f1      	bne.n	80143d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80143f2:	4b13      	ldr	r3, [pc, #76]	@ (8014440 <xTaskResumeAll+0x134>)
 80143f4:	2200      	movs	r2, #0
 80143f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80143f8:	4b10      	ldr	r3, [pc, #64]	@ (801443c <xTaskResumeAll+0x130>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d009      	beq.n	8014414 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014400:	2301      	movs	r3, #1
 8014402:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014404:	4b0f      	ldr	r3, [pc, #60]	@ (8014444 <xTaskResumeAll+0x138>)
 8014406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801440a:	601a      	str	r2, [r3, #0]
 801440c:	f3bf 8f4f 	dsb	sy
 8014410:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014414:	f000 fec2 	bl	801519c <vPortExitCritical>

	return xAlreadyYielded;
 8014418:	68bb      	ldr	r3, [r7, #8]
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	240014e4 	.word	0x240014e4
 8014428:	240014bc 	.word	0x240014bc
 801442c:	2400147c 	.word	0x2400147c
 8014430:	240014c4 	.word	0x240014c4
 8014434:	240013c0 	.word	0x240013c0
 8014438:	240013bc 	.word	0x240013bc
 801443c:	240014d0 	.word	0x240014d0
 8014440:	240014cc 	.word	0x240014cc
 8014444:	e000ed04 	.word	0xe000ed04

08014448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801444e:	4b05      	ldr	r3, [pc, #20]	@ (8014464 <xTaskGetTickCount+0x1c>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014454:	687b      	ldr	r3, [r7, #4]
}
 8014456:	4618      	mov	r0, r3
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	240014c0 	.word	0x240014c0

08014468 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801446e:	f000 ff43 	bl	80152f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014472:	2300      	movs	r3, #0
 8014474:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014476:	4b04      	ldr	r3, [pc, #16]	@ (8014488 <xTaskGetTickCountFromISR+0x20>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801447c:	683b      	ldr	r3, [r7, #0]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	240014c0 	.word	0x240014c0

0801448c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014492:	2300      	movs	r3, #0
 8014494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014496:	4b4f      	ldr	r3, [pc, #316]	@ (80145d4 <xTaskIncrementTick+0x148>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	f040 808f 	bne.w	80145be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144a0:	4b4d      	ldr	r3, [pc, #308]	@ (80145d8 <xTaskIncrementTick+0x14c>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	3301      	adds	r3, #1
 80144a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80144a8:	4a4b      	ldr	r2, [pc, #300]	@ (80145d8 <xTaskIncrementTick+0x14c>)
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d121      	bne.n	80144f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80144b4:	4b49      	ldr	r3, [pc, #292]	@ (80145dc <xTaskIncrementTick+0x150>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00b      	beq.n	80144d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80144be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144c2:	f383 8811 	msr	BASEPRI, r3
 80144c6:	f3bf 8f6f 	isb	sy
 80144ca:	f3bf 8f4f 	dsb	sy
 80144ce:	603b      	str	r3, [r7, #0]
}
 80144d0:	bf00      	nop
 80144d2:	bf00      	nop
 80144d4:	e7fd      	b.n	80144d2 <xTaskIncrementTick+0x46>
 80144d6:	4b41      	ldr	r3, [pc, #260]	@ (80145dc <xTaskIncrementTick+0x150>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]
 80144dc:	4b40      	ldr	r3, [pc, #256]	@ (80145e0 <xTaskIncrementTick+0x154>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a3e      	ldr	r2, [pc, #248]	@ (80145dc <xTaskIncrementTick+0x150>)
 80144e2:	6013      	str	r3, [r2, #0]
 80144e4:	4a3e      	ldr	r2, [pc, #248]	@ (80145e0 <xTaskIncrementTick+0x154>)
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	4b3e      	ldr	r3, [pc, #248]	@ (80145e4 <xTaskIncrementTick+0x158>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	3301      	adds	r3, #1
 80144f0:	4a3c      	ldr	r2, [pc, #240]	@ (80145e4 <xTaskIncrementTick+0x158>)
 80144f2:	6013      	str	r3, [r2, #0]
 80144f4:	f000 faa6 	bl	8014a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80144f8:	4b3b      	ldr	r3, [pc, #236]	@ (80145e8 <xTaskIncrementTick+0x15c>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	693a      	ldr	r2, [r7, #16]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d348      	bcc.n	8014594 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014502:	4b36      	ldr	r3, [pc, #216]	@ (80145dc <xTaskIncrementTick+0x150>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d104      	bne.n	8014516 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801450c:	4b36      	ldr	r3, [pc, #216]	@ (80145e8 <xTaskIncrementTick+0x15c>)
 801450e:	f04f 32ff 	mov.w	r2, #4294967295
 8014512:	601a      	str	r2, [r3, #0]
					break;
 8014514:	e03e      	b.n	8014594 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014516:	4b31      	ldr	r3, [pc, #196]	@ (80145dc <xTaskIncrementTick+0x150>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014526:	693a      	ldr	r2, [r7, #16]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	429a      	cmp	r2, r3
 801452c:	d203      	bcs.n	8014536 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801452e:	4a2e      	ldr	r2, [pc, #184]	@ (80145e8 <xTaskIncrementTick+0x15c>)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014534:	e02e      	b.n	8014594 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	3304      	adds	r3, #4
 801453a:	4618      	mov	r0, r3
 801453c:	f7fe fc03 	bl	8012d46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014544:	2b00      	cmp	r3, #0
 8014546:	d004      	beq.n	8014552 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	3318      	adds	r3, #24
 801454c:	4618      	mov	r0, r3
 801454e:	f7fe fbfa 	bl	8012d46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014556:	2201      	movs	r2, #1
 8014558:	409a      	lsls	r2, r3
 801455a:	4b24      	ldr	r3, [pc, #144]	@ (80145ec <xTaskIncrementTick+0x160>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	4313      	orrs	r3, r2
 8014560:	4a22      	ldr	r2, [pc, #136]	@ (80145ec <xTaskIncrementTick+0x160>)
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014568:	4613      	mov	r3, r2
 801456a:	009b      	lsls	r3, r3, #2
 801456c:	4413      	add	r3, r2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4a1f      	ldr	r2, [pc, #124]	@ (80145f0 <xTaskIncrementTick+0x164>)
 8014572:	441a      	add	r2, r3
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	3304      	adds	r3, #4
 8014578:	4619      	mov	r1, r3
 801457a:	4610      	mov	r0, r2
 801457c:	f7fe fb86 	bl	8012c8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014584:	4b1b      	ldr	r3, [pc, #108]	@ (80145f4 <xTaskIncrementTick+0x168>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801458a:	429a      	cmp	r2, r3
 801458c:	d3b9      	bcc.n	8014502 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801458e:	2301      	movs	r3, #1
 8014590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014592:	e7b6      	b.n	8014502 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014594:	4b17      	ldr	r3, [pc, #92]	@ (80145f4 <xTaskIncrementTick+0x168>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801459a:	4915      	ldr	r1, [pc, #84]	@ (80145f0 <xTaskIncrementTick+0x164>)
 801459c:	4613      	mov	r3, r2
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4413      	add	r3, r2
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	440b      	add	r3, r1
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d901      	bls.n	80145b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80145ac:	2301      	movs	r3, #1
 80145ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80145b0:	4b11      	ldr	r3, [pc, #68]	@ (80145f8 <xTaskIncrementTick+0x16c>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d007      	beq.n	80145c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80145b8:	2301      	movs	r3, #1
 80145ba:	617b      	str	r3, [r7, #20]
 80145bc:	e004      	b.n	80145c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80145be:	4b0f      	ldr	r3, [pc, #60]	@ (80145fc <xTaskIncrementTick+0x170>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	3301      	adds	r3, #1
 80145c4:	4a0d      	ldr	r2, [pc, #52]	@ (80145fc <xTaskIncrementTick+0x170>)
 80145c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80145c8:	697b      	ldr	r3, [r7, #20]
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3718      	adds	r7, #24
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	240014e4 	.word	0x240014e4
 80145d8:	240014c0 	.word	0x240014c0
 80145dc:	24001474 	.word	0x24001474
 80145e0:	24001478 	.word	0x24001478
 80145e4:	240014d4 	.word	0x240014d4
 80145e8:	240014dc 	.word	0x240014dc
 80145ec:	240014c4 	.word	0x240014c4
 80145f0:	240013c0 	.word	0x240013c0
 80145f4:	240013bc 	.word	0x240013bc
 80145f8:	240014d0 	.word	0x240014d0
 80145fc:	240014cc 	.word	0x240014cc

08014600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014600:	b480      	push	{r7}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014606:	4b27      	ldr	r3, [pc, #156]	@ (80146a4 <vTaskSwitchContext+0xa4>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d003      	beq.n	8014616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801460e:	4b26      	ldr	r3, [pc, #152]	@ (80146a8 <vTaskSwitchContext+0xa8>)
 8014610:	2201      	movs	r2, #1
 8014612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014614:	e040      	b.n	8014698 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8014616:	4b24      	ldr	r3, [pc, #144]	@ (80146a8 <vTaskSwitchContext+0xa8>)
 8014618:	2200      	movs	r2, #0
 801461a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801461c:	4b23      	ldr	r3, [pc, #140]	@ (80146ac <vTaskSwitchContext+0xac>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	fab3 f383 	clz	r3, r3
 8014628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801462a:	7afb      	ldrb	r3, [r7, #11]
 801462c:	f1c3 031f 	rsb	r3, r3, #31
 8014630:	617b      	str	r3, [r7, #20]
 8014632:	491f      	ldr	r1, [pc, #124]	@ (80146b0 <vTaskSwitchContext+0xb0>)
 8014634:	697a      	ldr	r2, [r7, #20]
 8014636:	4613      	mov	r3, r2
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4413      	add	r3, r2
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	440b      	add	r3, r1
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d10b      	bne.n	801465e <vTaskSwitchContext+0x5e>
	__asm volatile
 8014646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801464a:	f383 8811 	msr	BASEPRI, r3
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	607b      	str	r3, [r7, #4]
}
 8014658:	bf00      	nop
 801465a:	bf00      	nop
 801465c:	e7fd      	b.n	801465a <vTaskSwitchContext+0x5a>
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	4613      	mov	r3, r2
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4413      	add	r3, r2
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	4a11      	ldr	r2, [pc, #68]	@ (80146b0 <vTaskSwitchContext+0xb0>)
 801466a:	4413      	add	r3, r2
 801466c:	613b      	str	r3, [r7, #16]
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	605a      	str	r2, [r3, #4]
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	685a      	ldr	r2, [r3, #4]
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	3308      	adds	r3, #8
 8014680:	429a      	cmp	r2, r3
 8014682:	d104      	bne.n	801468e <vTaskSwitchContext+0x8e>
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	685a      	ldr	r2, [r3, #4]
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	605a      	str	r2, [r3, #4]
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	4a07      	ldr	r2, [pc, #28]	@ (80146b4 <vTaskSwitchContext+0xb4>)
 8014696:	6013      	str	r3, [r2, #0]
}
 8014698:	bf00      	nop
 801469a:	371c      	adds	r7, #28
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr
 80146a4:	240014e4 	.word	0x240014e4
 80146a8:	240014d0 	.word	0x240014d0
 80146ac:	240014c4 	.word	0x240014c4
 80146b0:	240013c0 	.word	0x240013c0
 80146b4:	240013bc 	.word	0x240013bc

080146b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d10b      	bne.n	80146e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80146c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146cc:	f383 8811 	msr	BASEPRI, r3
 80146d0:	f3bf 8f6f 	isb	sy
 80146d4:	f3bf 8f4f 	dsb	sy
 80146d8:	60fb      	str	r3, [r7, #12]
}
 80146da:	bf00      	nop
 80146dc:	bf00      	nop
 80146de:	e7fd      	b.n	80146dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80146e0:	4b07      	ldr	r3, [pc, #28]	@ (8014700 <vTaskPlaceOnEventList+0x48>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	3318      	adds	r3, #24
 80146e6:	4619      	mov	r1, r3
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f7fe faf3 	bl	8012cd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80146ee:	2101      	movs	r1, #1
 80146f0:	6838      	ldr	r0, [r7, #0]
 80146f2:	f000 fb87 	bl	8014e04 <prvAddCurrentTaskToDelayedList>
}
 80146f6:	bf00      	nop
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	240013bc 	.word	0x240013bc

08014704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b086      	sub	sp, #24
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d10b      	bne.n	8014732 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801471e:	f383 8811 	msr	BASEPRI, r3
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	f3bf 8f4f 	dsb	sy
 801472a:	60fb      	str	r3, [r7, #12]
}
 801472c:	bf00      	nop
 801472e:	bf00      	nop
 8014730:	e7fd      	b.n	801472e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	3318      	adds	r3, #24
 8014736:	4618      	mov	r0, r3
 8014738:	f7fe fb05 	bl	8012d46 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801473c:	4b1d      	ldr	r3, [pc, #116]	@ (80147b4 <xTaskRemoveFromEventList+0xb0>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d11c      	bne.n	801477e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	3304      	adds	r3, #4
 8014748:	4618      	mov	r0, r3
 801474a:	f7fe fafc 	bl	8012d46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014752:	2201      	movs	r2, #1
 8014754:	409a      	lsls	r2, r3
 8014756:	4b18      	ldr	r3, [pc, #96]	@ (80147b8 <xTaskRemoveFromEventList+0xb4>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	4313      	orrs	r3, r2
 801475c:	4a16      	ldr	r2, [pc, #88]	@ (80147b8 <xTaskRemoveFromEventList+0xb4>)
 801475e:	6013      	str	r3, [r2, #0]
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014764:	4613      	mov	r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	4413      	add	r3, r2
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	4a13      	ldr	r2, [pc, #76]	@ (80147bc <xTaskRemoveFromEventList+0xb8>)
 801476e:	441a      	add	r2, r3
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	3304      	adds	r3, #4
 8014774:	4619      	mov	r1, r3
 8014776:	4610      	mov	r0, r2
 8014778:	f7fe fa88 	bl	8012c8c <vListInsertEnd>
 801477c:	e005      	b.n	801478a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	3318      	adds	r3, #24
 8014782:	4619      	mov	r1, r3
 8014784:	480e      	ldr	r0, [pc, #56]	@ (80147c0 <xTaskRemoveFromEventList+0xbc>)
 8014786:	f7fe fa81 	bl	8012c8c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801478e:	4b0d      	ldr	r3, [pc, #52]	@ (80147c4 <xTaskRemoveFromEventList+0xc0>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014794:	429a      	cmp	r2, r3
 8014796:	d905      	bls.n	80147a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014798:	2301      	movs	r3, #1
 801479a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801479c:	4b0a      	ldr	r3, [pc, #40]	@ (80147c8 <xTaskRemoveFromEventList+0xc4>)
 801479e:	2201      	movs	r2, #1
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	e001      	b.n	80147a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80147a4:	2300      	movs	r3, #0
 80147a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80147a8:	697b      	ldr	r3, [r7, #20]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3718      	adds	r7, #24
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	240014e4 	.word	0x240014e4
 80147b8:	240014c4 	.word	0x240014c4
 80147bc:	240013c0 	.word	0x240013c0
 80147c0:	2400147c 	.word	0x2400147c
 80147c4:	240013bc 	.word	0x240013bc
 80147c8:	240014d0 	.word	0x240014d0

080147cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80147d4:	4b06      	ldr	r3, [pc, #24]	@ (80147f0 <vTaskInternalSetTimeOutState+0x24>)
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80147dc:	4b05      	ldr	r3, [pc, #20]	@ (80147f4 <vTaskInternalSetTimeOutState+0x28>)
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	605a      	str	r2, [r3, #4]
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr
 80147f0:	240014d4 	.word	0x240014d4
 80147f4:	240014c0 	.word	0x240014c0

080147f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b088      	sub	sp, #32
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d10b      	bne.n	8014820 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801480c:	f383 8811 	msr	BASEPRI, r3
 8014810:	f3bf 8f6f 	isb	sy
 8014814:	f3bf 8f4f 	dsb	sy
 8014818:	613b      	str	r3, [r7, #16]
}
 801481a:	bf00      	nop
 801481c:	bf00      	nop
 801481e:	e7fd      	b.n	801481c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d10b      	bne.n	801483e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801482a:	f383 8811 	msr	BASEPRI, r3
 801482e:	f3bf 8f6f 	isb	sy
 8014832:	f3bf 8f4f 	dsb	sy
 8014836:	60fb      	str	r3, [r7, #12]
}
 8014838:	bf00      	nop
 801483a:	bf00      	nop
 801483c:	e7fd      	b.n	801483a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801483e:	f000 fc7b 	bl	8015138 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014842:	4b1d      	ldr	r3, [pc, #116]	@ (80148b8 <xTaskCheckForTimeOut+0xc0>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	69ba      	ldr	r2, [r7, #24]
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801485a:	d102      	bne.n	8014862 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801485c:	2300      	movs	r3, #0
 801485e:	61fb      	str	r3, [r7, #28]
 8014860:	e023      	b.n	80148aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	4b15      	ldr	r3, [pc, #84]	@ (80148bc <xTaskCheckForTimeOut+0xc4>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	429a      	cmp	r2, r3
 801486c:	d007      	beq.n	801487e <xTaskCheckForTimeOut+0x86>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	69ba      	ldr	r2, [r7, #24]
 8014874:	429a      	cmp	r2, r3
 8014876:	d302      	bcc.n	801487e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014878:	2301      	movs	r3, #1
 801487a:	61fb      	str	r3, [r7, #28]
 801487c:	e015      	b.n	80148aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	697a      	ldr	r2, [r7, #20]
 8014884:	429a      	cmp	r2, r3
 8014886:	d20b      	bcs.n	80148a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	681a      	ldr	r2, [r3, #0]
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	1ad2      	subs	r2, r2, r3
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7ff ff99 	bl	80147cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801489a:	2300      	movs	r3, #0
 801489c:	61fb      	str	r3, [r7, #28]
 801489e:	e004      	b.n	80148aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	2200      	movs	r2, #0
 80148a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80148a6:	2301      	movs	r3, #1
 80148a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80148aa:	f000 fc77 	bl	801519c <vPortExitCritical>

	return xReturn;
 80148ae:	69fb      	ldr	r3, [r7, #28]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3720      	adds	r7, #32
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	240014c0 	.word	0x240014c0
 80148bc:	240014d4 	.word	0x240014d4

080148c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80148c0:	b480      	push	{r7}
 80148c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80148c4:	4b03      	ldr	r3, [pc, #12]	@ (80148d4 <vTaskMissedYield+0x14>)
 80148c6:	2201      	movs	r2, #1
 80148c8:	601a      	str	r2, [r3, #0]
}
 80148ca:	bf00      	nop
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr
 80148d4:	240014d0 	.word	0x240014d0

080148d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80148e0:	f000 f852 	bl	8014988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80148e4:	4b06      	ldr	r3, [pc, #24]	@ (8014900 <prvIdleTask+0x28>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d9f9      	bls.n	80148e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80148ec:	4b05      	ldr	r3, [pc, #20]	@ (8014904 <prvIdleTask+0x2c>)
 80148ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	f3bf 8f4f 	dsb	sy
 80148f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80148fc:	e7f0      	b.n	80148e0 <prvIdleTask+0x8>
 80148fe:	bf00      	nop
 8014900:	240013c0 	.word	0x240013c0
 8014904:	e000ed04 	.word	0xe000ed04

08014908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801490e:	2300      	movs	r3, #0
 8014910:	607b      	str	r3, [r7, #4]
 8014912:	e00c      	b.n	801492e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	4613      	mov	r3, r2
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	4413      	add	r3, r2
 801491c:	009b      	lsls	r3, r3, #2
 801491e:	4a12      	ldr	r2, [pc, #72]	@ (8014968 <prvInitialiseTaskLists+0x60>)
 8014920:	4413      	add	r3, r2
 8014922:	4618      	mov	r0, r3
 8014924:	f7fe f985 	bl	8012c32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3301      	adds	r3, #1
 801492c:	607b      	str	r3, [r7, #4]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2b06      	cmp	r3, #6
 8014932:	d9ef      	bls.n	8014914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014934:	480d      	ldr	r0, [pc, #52]	@ (801496c <prvInitialiseTaskLists+0x64>)
 8014936:	f7fe f97c 	bl	8012c32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801493a:	480d      	ldr	r0, [pc, #52]	@ (8014970 <prvInitialiseTaskLists+0x68>)
 801493c:	f7fe f979 	bl	8012c32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014940:	480c      	ldr	r0, [pc, #48]	@ (8014974 <prvInitialiseTaskLists+0x6c>)
 8014942:	f7fe f976 	bl	8012c32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014946:	480c      	ldr	r0, [pc, #48]	@ (8014978 <prvInitialiseTaskLists+0x70>)
 8014948:	f7fe f973 	bl	8012c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801494c:	480b      	ldr	r0, [pc, #44]	@ (801497c <prvInitialiseTaskLists+0x74>)
 801494e:	f7fe f970 	bl	8012c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014952:	4b0b      	ldr	r3, [pc, #44]	@ (8014980 <prvInitialiseTaskLists+0x78>)
 8014954:	4a05      	ldr	r2, [pc, #20]	@ (801496c <prvInitialiseTaskLists+0x64>)
 8014956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014958:	4b0a      	ldr	r3, [pc, #40]	@ (8014984 <prvInitialiseTaskLists+0x7c>)
 801495a:	4a05      	ldr	r2, [pc, #20]	@ (8014970 <prvInitialiseTaskLists+0x68>)
 801495c:	601a      	str	r2, [r3, #0]
}
 801495e:	bf00      	nop
 8014960:	3708      	adds	r7, #8
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	240013c0 	.word	0x240013c0
 801496c:	2400144c 	.word	0x2400144c
 8014970:	24001460 	.word	0x24001460
 8014974:	2400147c 	.word	0x2400147c
 8014978:	24001490 	.word	0x24001490
 801497c:	240014a8 	.word	0x240014a8
 8014980:	24001474 	.word	0x24001474
 8014984:	24001478 	.word	0x24001478

08014988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801498e:	e019      	b.n	80149c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014990:	f000 fbd2 	bl	8015138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014994:	4b10      	ldr	r3, [pc, #64]	@ (80149d8 <prvCheckTasksWaitingTermination+0x50>)
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	68db      	ldr	r3, [r3, #12]
 801499a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	3304      	adds	r3, #4
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fe f9d0 	bl	8012d46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80149a6:	4b0d      	ldr	r3, [pc, #52]	@ (80149dc <prvCheckTasksWaitingTermination+0x54>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3b01      	subs	r3, #1
 80149ac:	4a0b      	ldr	r2, [pc, #44]	@ (80149dc <prvCheckTasksWaitingTermination+0x54>)
 80149ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80149b0:	4b0b      	ldr	r3, [pc, #44]	@ (80149e0 <prvCheckTasksWaitingTermination+0x58>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	3b01      	subs	r3, #1
 80149b6:	4a0a      	ldr	r2, [pc, #40]	@ (80149e0 <prvCheckTasksWaitingTermination+0x58>)
 80149b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80149ba:	f000 fbef 	bl	801519c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f000 f810 	bl	80149e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80149c4:	4b06      	ldr	r3, [pc, #24]	@ (80149e0 <prvCheckTasksWaitingTermination+0x58>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d1e1      	bne.n	8014990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80149cc:	bf00      	nop
 80149ce:	bf00      	nop
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	24001490 	.word	0x24001490
 80149dc:	240014bc 	.word	0x240014bc
 80149e0:	240014a4 	.word	0x240014a4

080149e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d108      	bne.n	8014a08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149fa:	4618      	mov	r0, r3
 80149fc:	f000 fd8c 	bl	8015518 <vPortFree>
				vPortFree( pxTCB );
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 fd89 	bl	8015518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014a06:	e019      	b.n	8014a3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d103      	bne.n	8014a1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fd80 	bl	8015518 <vPortFree>
	}
 8014a18:	e010      	b.n	8014a3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d00b      	beq.n	8014a3c <prvDeleteTCB+0x58>
	__asm volatile
 8014a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a28:	f383 8811 	msr	BASEPRI, r3
 8014a2c:	f3bf 8f6f 	isb	sy
 8014a30:	f3bf 8f4f 	dsb	sy
 8014a34:	60fb      	str	r3, [r7, #12]
}
 8014a36:	bf00      	nop
 8014a38:	bf00      	nop
 8014a3a:	e7fd      	b.n	8014a38 <prvDeleteTCB+0x54>
	}
 8014a3c:	bf00      	nop
 8014a3e:	3710      	adds	r7, #16
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8014a7c <prvResetNextTaskUnblockTime+0x38>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d104      	bne.n	8014a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014a54:	4b0a      	ldr	r3, [pc, #40]	@ (8014a80 <prvResetNextTaskUnblockTime+0x3c>)
 8014a56:	f04f 32ff 	mov.w	r2, #4294967295
 8014a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014a5c:	e008      	b.n	8014a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a5e:	4b07      	ldr	r3, [pc, #28]	@ (8014a7c <prvResetNextTaskUnblockTime+0x38>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	4a04      	ldr	r2, [pc, #16]	@ (8014a80 <prvResetNextTaskUnblockTime+0x3c>)
 8014a6e:	6013      	str	r3, [r2, #0]
}
 8014a70:	bf00      	nop
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr
 8014a7c:	24001474 	.word	0x24001474
 8014a80:	240014dc 	.word	0x240014dc

08014a84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8014ab8 <xTaskGetSchedulerState+0x34>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d102      	bne.n	8014a98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014a92:	2301      	movs	r3, #1
 8014a94:	607b      	str	r3, [r7, #4]
 8014a96:	e008      	b.n	8014aaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a98:	4b08      	ldr	r3, [pc, #32]	@ (8014abc <xTaskGetSchedulerState+0x38>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d102      	bne.n	8014aa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014aa0:	2302      	movs	r3, #2
 8014aa2:	607b      	str	r3, [r7, #4]
 8014aa4:	e001      	b.n	8014aaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014aaa:	687b      	ldr	r3, [r7, #4]
	}
 8014aac:	4618      	mov	r0, r3
 8014aae:	370c      	adds	r7, #12
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr
 8014ab8:	240014c8 	.word	0x240014c8
 8014abc:	240014e4 	.word	0x240014e4

08014ac0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014acc:	2300      	movs	r3, #0
 8014ace:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d05e      	beq.n	8014b94 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ada:	4b31      	ldr	r3, [pc, #196]	@ (8014ba0 <xTaskPriorityInherit+0xe0>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d24e      	bcs.n	8014b82 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	699b      	ldr	r3, [r3, #24]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	db06      	blt.n	8014afa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014aec:	4b2c      	ldr	r3, [pc, #176]	@ (8014ba0 <xTaskPriorityInherit+0xe0>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014af2:	f1c3 0207 	rsb	r2, r3, #7
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	6959      	ldr	r1, [r3, #20]
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b02:	4613      	mov	r3, r2
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	4413      	add	r3, r2
 8014b08:	009b      	lsls	r3, r3, #2
 8014b0a:	4a26      	ldr	r2, [pc, #152]	@ (8014ba4 <xTaskPriorityInherit+0xe4>)
 8014b0c:	4413      	add	r3, r2
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	d12f      	bne.n	8014b72 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	3304      	adds	r3, #4
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fe f915 	bl	8012d46 <uxListRemove>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10a      	bne.n	8014b38 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b26:	2201      	movs	r2, #1
 8014b28:	fa02 f303 	lsl.w	r3, r2, r3
 8014b2c:	43da      	mvns	r2, r3
 8014b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8014ba8 <xTaskPriorityInherit+0xe8>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	4013      	ands	r3, r2
 8014b34:	4a1c      	ldr	r2, [pc, #112]	@ (8014ba8 <xTaskPriorityInherit+0xe8>)
 8014b36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014b38:	4b19      	ldr	r3, [pc, #100]	@ (8014ba0 <xTaskPriorityInherit+0xe0>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b46:	2201      	movs	r2, #1
 8014b48:	409a      	lsls	r2, r3
 8014b4a:	4b17      	ldr	r3, [pc, #92]	@ (8014ba8 <xTaskPriorityInherit+0xe8>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	4313      	orrs	r3, r2
 8014b50:	4a15      	ldr	r2, [pc, #84]	@ (8014ba8 <xTaskPriorityInherit+0xe8>)
 8014b52:	6013      	str	r3, [r2, #0]
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b58:	4613      	mov	r3, r2
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	4413      	add	r3, r2
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	4a10      	ldr	r2, [pc, #64]	@ (8014ba4 <xTaskPriorityInherit+0xe4>)
 8014b62:	441a      	add	r2, r3
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	3304      	adds	r3, #4
 8014b68:	4619      	mov	r1, r3
 8014b6a:	4610      	mov	r0, r2
 8014b6c:	f7fe f88e 	bl	8012c8c <vListInsertEnd>
 8014b70:	e004      	b.n	8014b7c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014b72:	4b0b      	ldr	r3, [pc, #44]	@ (8014ba0 <xTaskPriorityInherit+0xe0>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	60fb      	str	r3, [r7, #12]
 8014b80:	e008      	b.n	8014b94 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014b86:	4b06      	ldr	r3, [pc, #24]	@ (8014ba0 <xTaskPriorityInherit+0xe0>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d201      	bcs.n	8014b94 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014b90:	2301      	movs	r3, #1
 8014b92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014b94:	68fb      	ldr	r3, [r7, #12]
	}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	240013bc 	.word	0x240013bc
 8014ba4:	240013c0 	.word	0x240013c0
 8014ba8:	240014c4 	.word	0x240014c4

08014bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d070      	beq.n	8014ca4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8014cb0 <xTaskPriorityDisinherit+0x104>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	693a      	ldr	r2, [r7, #16]
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d00b      	beq.n	8014be4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd0:	f383 8811 	msr	BASEPRI, r3
 8014bd4:	f3bf 8f6f 	isb	sy
 8014bd8:	f3bf 8f4f 	dsb	sy
 8014bdc:	60fb      	str	r3, [r7, #12]
}
 8014bde:	bf00      	nop
 8014be0:	bf00      	nop
 8014be2:	e7fd      	b.n	8014be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d10b      	bne.n	8014c04 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	60bb      	str	r3, [r7, #8]
}
 8014bfe:	bf00      	nop
 8014c00:	bf00      	nop
 8014c02:	e7fd      	b.n	8014c00 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c08:	1e5a      	subs	r2, r3, #1
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d044      	beq.n	8014ca4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d140      	bne.n	8014ca4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	3304      	adds	r3, #4
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fe f88d 	bl	8012d46 <uxListRemove>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d115      	bne.n	8014c5e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c36:	491f      	ldr	r1, [pc, #124]	@ (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c38:	4613      	mov	r3, r2
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	4413      	add	r3, r2
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	440b      	add	r3, r1
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d10a      	bne.n	8014c5e <xTaskPriorityDisinherit+0xb2>
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8014c52:	43da      	mvns	r2, r3
 8014c54:	4b18      	ldr	r3, [pc, #96]	@ (8014cb8 <xTaskPriorityDisinherit+0x10c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4013      	ands	r3, r2
 8014c5a:	4a17      	ldr	r2, [pc, #92]	@ (8014cb8 <xTaskPriorityDisinherit+0x10c>)
 8014c5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c6a:	f1c3 0207 	rsb	r2, r3, #7
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c76:	2201      	movs	r2, #1
 8014c78:	409a      	lsls	r2, r3
 8014c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8014cb8 <xTaskPriorityDisinherit+0x10c>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	4a0d      	ldr	r2, [pc, #52]	@ (8014cb8 <xTaskPriorityDisinherit+0x10c>)
 8014c82:	6013      	str	r3, [r2, #0]
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c88:	4613      	mov	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4a08      	ldr	r2, [pc, #32]	@ (8014cb4 <xTaskPriorityDisinherit+0x108>)
 8014c92:	441a      	add	r2, r3
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	3304      	adds	r3, #4
 8014c98:	4619      	mov	r1, r3
 8014c9a:	4610      	mov	r0, r2
 8014c9c:	f7fd fff6 	bl	8012c8c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ca4:	697b      	ldr	r3, [r7, #20]
	}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	240013bc 	.word	0x240013bc
 8014cb4:	240013c0 	.word	0x240013c0
 8014cb8:	240014c4 	.word	0x240014c4

08014cbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b088      	sub	sp, #32
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d079      	beq.n	8014dc8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10b      	bne.n	8014cf4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ce0:	f383 8811 	msr	BASEPRI, r3
 8014ce4:	f3bf 8f6f 	isb	sy
 8014ce8:	f3bf 8f4f 	dsb	sy
 8014cec:	60fb      	str	r3, [r7, #12]
}
 8014cee:	bf00      	nop
 8014cf0:	bf00      	nop
 8014cf2:	e7fd      	b.n	8014cf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cf8:	683a      	ldr	r2, [r7, #0]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d902      	bls.n	8014d04 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	61fb      	str	r3, [r7, #28]
 8014d02:	e002      	b.n	8014d0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d0e:	69fa      	ldr	r2, [r7, #28]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d059      	beq.n	8014dc8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014d14:	69bb      	ldr	r3, [r7, #24]
 8014d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d154      	bne.n	8014dc8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8014dd0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	69ba      	ldr	r2, [r7, #24]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d10b      	bne.n	8014d40 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d2c:	f383 8811 	msr	BASEPRI, r3
 8014d30:	f3bf 8f6f 	isb	sy
 8014d34:	f3bf 8f4f 	dsb	sy
 8014d38:	60bb      	str	r3, [r7, #8]
}
 8014d3a:	bf00      	nop
 8014d3c:	bf00      	nop
 8014d3e:	e7fd      	b.n	8014d3c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	69fa      	ldr	r2, [r7, #28]
 8014d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	699b      	ldr	r3, [r3, #24]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	db04      	blt.n	8014d5e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	f1c3 0207 	rsb	r2, r3, #7
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	6959      	ldr	r1, [r3, #20]
 8014d62:	693a      	ldr	r2, [r7, #16]
 8014d64:	4613      	mov	r3, r2
 8014d66:	009b      	lsls	r3, r3, #2
 8014d68:	4413      	add	r3, r2
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	4a19      	ldr	r2, [pc, #100]	@ (8014dd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014d6e:	4413      	add	r3, r2
 8014d70:	4299      	cmp	r1, r3
 8014d72:	d129      	bne.n	8014dc8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	3304      	adds	r3, #4
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7fd ffe4 	bl	8012d46 <uxListRemove>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d10a      	bne.n	8014d9a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014d84:	69bb      	ldr	r3, [r7, #24]
 8014d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d88:	2201      	movs	r2, #1
 8014d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8014d8e:	43da      	mvns	r2, r3
 8014d90:	4b11      	ldr	r3, [pc, #68]	@ (8014dd8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	4013      	ands	r3, r2
 8014d96:	4a10      	ldr	r2, [pc, #64]	@ (8014dd8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014d98:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014d9a:	69bb      	ldr	r3, [r7, #24]
 8014d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d9e:	2201      	movs	r2, #1
 8014da0:	409a      	lsls	r2, r3
 8014da2:	4b0d      	ldr	r3, [pc, #52]	@ (8014dd8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	4313      	orrs	r3, r2
 8014da8:	4a0b      	ldr	r2, [pc, #44]	@ (8014dd8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014db0:	4613      	mov	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	4413      	add	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4a06      	ldr	r2, [pc, #24]	@ (8014dd4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014dba:	441a      	add	r2, r3
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	3304      	adds	r3, #4
 8014dc0:	4619      	mov	r1, r3
 8014dc2:	4610      	mov	r0, r2
 8014dc4:	f7fd ff62 	bl	8012c8c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014dc8:	bf00      	nop
 8014dca:	3720      	adds	r7, #32
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	240013bc 	.word	0x240013bc
 8014dd4:	240013c0 	.word	0x240013c0
 8014dd8:	240014c4 	.word	0x240014c4

08014ddc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014ddc:	b480      	push	{r7}
 8014dde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014de0:	4b07      	ldr	r3, [pc, #28]	@ (8014e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d004      	beq.n	8014df2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014de8:	4b05      	ldr	r3, [pc, #20]	@ (8014e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014dee:	3201      	adds	r2, #1
 8014df0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8014df2:	4b03      	ldr	r3, [pc, #12]	@ (8014e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8014df4:	681b      	ldr	r3, [r3, #0]
	}
 8014df6:	4618      	mov	r0, r3
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr
 8014e00:	240013bc 	.word	0x240013bc

08014e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014e0e:	4b29      	ldr	r3, [pc, #164]	@ (8014eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e14:	4b28      	ldr	r3, [pc, #160]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	3304      	adds	r3, #4
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7fd ff93 	bl	8012d46 <uxListRemove>
 8014e20:	4603      	mov	r3, r0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d10b      	bne.n	8014e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014e26:	4b24      	ldr	r3, [pc, #144]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e32:	43da      	mvns	r2, r3
 8014e34:	4b21      	ldr	r3, [pc, #132]	@ (8014ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4013      	ands	r3, r2
 8014e3a:	4a20      	ldr	r2, [pc, #128]	@ (8014ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8014e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e44:	d10a      	bne.n	8014e5c <prvAddCurrentTaskToDelayedList+0x58>
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d007      	beq.n	8014e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	3304      	adds	r3, #4
 8014e52:	4619      	mov	r1, r3
 8014e54:	481a      	ldr	r0, [pc, #104]	@ (8014ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014e56:	f7fd ff19 	bl	8012c8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014e5a:	e026      	b.n	8014eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	4413      	add	r3, r2
 8014e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014e64:	4b14      	ldr	r3, [pc, #80]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	68ba      	ldr	r2, [r7, #8]
 8014e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014e6c:	68ba      	ldr	r2, [r7, #8]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d209      	bcs.n	8014e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e74:	4b13      	ldr	r3, [pc, #76]	@ (8014ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	4b0f      	ldr	r3, [pc, #60]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	3304      	adds	r3, #4
 8014e7e:	4619      	mov	r1, r3
 8014e80:	4610      	mov	r0, r2
 8014e82:	f7fd ff27 	bl	8012cd4 <vListInsert>
}
 8014e86:	e010      	b.n	8014eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e88:	4b0f      	ldr	r3, [pc, #60]	@ (8014ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8014eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	3304      	adds	r3, #4
 8014e92:	4619      	mov	r1, r3
 8014e94:	4610      	mov	r0, r2
 8014e96:	f7fd ff1d 	bl	8012cd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8014ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	68ba      	ldr	r2, [r7, #8]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d202      	bcs.n	8014eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014ea4:	4a09      	ldr	r2, [pc, #36]	@ (8014ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	6013      	str	r3, [r2, #0]
}
 8014eaa:	bf00      	nop
 8014eac:	3710      	adds	r7, #16
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	240014c0 	.word	0x240014c0
 8014eb8:	240013bc 	.word	0x240013bc
 8014ebc:	240014c4 	.word	0x240014c4
 8014ec0:	240014a8 	.word	0x240014a8
 8014ec4:	24001478 	.word	0x24001478
 8014ec8:	24001474 	.word	0x24001474
 8014ecc:	240014dc 	.word	0x240014dc

08014ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b085      	sub	sp, #20
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	60f8      	str	r0, [r7, #12]
 8014ed8:	60b9      	str	r1, [r7, #8]
 8014eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	3b04      	subs	r3, #4
 8014ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	3b04      	subs	r3, #4
 8014eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	f023 0201 	bic.w	r2, r3, #1
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	3b04      	subs	r3, #4
 8014efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f00:	4a0c      	ldr	r2, [pc, #48]	@ (8014f34 <pxPortInitialiseStack+0x64>)
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	3b14      	subs	r3, #20
 8014f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	3b04      	subs	r3, #4
 8014f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f06f 0202 	mvn.w	r2, #2
 8014f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	3b20      	subs	r3, #32
 8014f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014f26:	68fb      	ldr	r3, [r7, #12]
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3714      	adds	r7, #20
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f32:	4770      	bx	lr
 8014f34:	08014f39 	.word	0x08014f39

08014f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014f42:	4b13      	ldr	r3, [pc, #76]	@ (8014f90 <prvTaskExitError+0x58>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f4a:	d00b      	beq.n	8014f64 <prvTaskExitError+0x2c>
	__asm volatile
 8014f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f50:	f383 8811 	msr	BASEPRI, r3
 8014f54:	f3bf 8f6f 	isb	sy
 8014f58:	f3bf 8f4f 	dsb	sy
 8014f5c:	60fb      	str	r3, [r7, #12]
}
 8014f5e:	bf00      	nop
 8014f60:	bf00      	nop
 8014f62:	e7fd      	b.n	8014f60 <prvTaskExitError+0x28>
	__asm volatile
 8014f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f68:	f383 8811 	msr	BASEPRI, r3
 8014f6c:	f3bf 8f6f 	isb	sy
 8014f70:	f3bf 8f4f 	dsb	sy
 8014f74:	60bb      	str	r3, [r7, #8]
}
 8014f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014f78:	bf00      	nop
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d0fc      	beq.n	8014f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014f80:	bf00      	nop
 8014f82:	bf00      	nop
 8014f84:	3714      	adds	r7, #20
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop
 8014f90:	24000208 	.word	0x24000208
	...

08014fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014fa0:	4b07      	ldr	r3, [pc, #28]	@ (8014fc0 <pxCurrentTCBConst2>)
 8014fa2:	6819      	ldr	r1, [r3, #0]
 8014fa4:	6808      	ldr	r0, [r1, #0]
 8014fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014faa:	f380 8809 	msr	PSP, r0
 8014fae:	f3bf 8f6f 	isb	sy
 8014fb2:	f04f 0000 	mov.w	r0, #0
 8014fb6:	f380 8811 	msr	BASEPRI, r0
 8014fba:	4770      	bx	lr
 8014fbc:	f3af 8000 	nop.w

08014fc0 <pxCurrentTCBConst2>:
 8014fc0:	240013bc 	.word	0x240013bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014fc4:	bf00      	nop
 8014fc6:	bf00      	nop

08014fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014fc8:	4808      	ldr	r0, [pc, #32]	@ (8014fec <prvPortStartFirstTask+0x24>)
 8014fca:	6800      	ldr	r0, [r0, #0]
 8014fcc:	6800      	ldr	r0, [r0, #0]
 8014fce:	f380 8808 	msr	MSP, r0
 8014fd2:	f04f 0000 	mov.w	r0, #0
 8014fd6:	f380 8814 	msr	CONTROL, r0
 8014fda:	b662      	cpsie	i
 8014fdc:	b661      	cpsie	f
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	f3bf 8f6f 	isb	sy
 8014fe6:	df00      	svc	0
 8014fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014fea:	bf00      	nop
 8014fec:	e000ed08 	.word	0xe000ed08

08014ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b086      	sub	sp, #24
 8014ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014ff6:	4b47      	ldr	r3, [pc, #284]	@ (8015114 <xPortStartScheduler+0x124>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4a47      	ldr	r2, [pc, #284]	@ (8015118 <xPortStartScheduler+0x128>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d10b      	bne.n	8015018 <xPortStartScheduler+0x28>
	__asm volatile
 8015000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015004:	f383 8811 	msr	BASEPRI, r3
 8015008:	f3bf 8f6f 	isb	sy
 801500c:	f3bf 8f4f 	dsb	sy
 8015010:	613b      	str	r3, [r7, #16]
}
 8015012:	bf00      	nop
 8015014:	bf00      	nop
 8015016:	e7fd      	b.n	8015014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015018:	4b3e      	ldr	r3, [pc, #248]	@ (8015114 <xPortStartScheduler+0x124>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	4a3f      	ldr	r2, [pc, #252]	@ (801511c <xPortStartScheduler+0x12c>)
 801501e:	4293      	cmp	r3, r2
 8015020:	d10b      	bne.n	801503a <xPortStartScheduler+0x4a>
	__asm volatile
 8015022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015026:	f383 8811 	msr	BASEPRI, r3
 801502a:	f3bf 8f6f 	isb	sy
 801502e:	f3bf 8f4f 	dsb	sy
 8015032:	60fb      	str	r3, [r7, #12]
}
 8015034:	bf00      	nop
 8015036:	bf00      	nop
 8015038:	e7fd      	b.n	8015036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801503a:	4b39      	ldr	r3, [pc, #228]	@ (8015120 <xPortStartScheduler+0x130>)
 801503c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	b2db      	uxtb	r3, r3
 8015044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	22ff      	movs	r2, #255	@ 0xff
 801504a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	b2db      	uxtb	r3, r3
 8015052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015054:	78fb      	ldrb	r3, [r7, #3]
 8015056:	b2db      	uxtb	r3, r3
 8015058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801505c:	b2da      	uxtb	r2, r3
 801505e:	4b31      	ldr	r3, [pc, #196]	@ (8015124 <xPortStartScheduler+0x134>)
 8015060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015062:	4b31      	ldr	r3, [pc, #196]	@ (8015128 <xPortStartScheduler+0x138>)
 8015064:	2207      	movs	r2, #7
 8015066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015068:	e009      	b.n	801507e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801506a:	4b2f      	ldr	r3, [pc, #188]	@ (8015128 <xPortStartScheduler+0x138>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	3b01      	subs	r3, #1
 8015070:	4a2d      	ldr	r2, [pc, #180]	@ (8015128 <xPortStartScheduler+0x138>)
 8015072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015074:	78fb      	ldrb	r3, [r7, #3]
 8015076:	b2db      	uxtb	r3, r3
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	b2db      	uxtb	r3, r3
 801507c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801507e:	78fb      	ldrb	r3, [r7, #3]
 8015080:	b2db      	uxtb	r3, r3
 8015082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015086:	2b80      	cmp	r3, #128	@ 0x80
 8015088:	d0ef      	beq.n	801506a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801508a:	4b27      	ldr	r3, [pc, #156]	@ (8015128 <xPortStartScheduler+0x138>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f1c3 0307 	rsb	r3, r3, #7
 8015092:	2b04      	cmp	r3, #4
 8015094:	d00b      	beq.n	80150ae <xPortStartScheduler+0xbe>
	__asm volatile
 8015096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801509a:	f383 8811 	msr	BASEPRI, r3
 801509e:	f3bf 8f6f 	isb	sy
 80150a2:	f3bf 8f4f 	dsb	sy
 80150a6:	60bb      	str	r3, [r7, #8]
}
 80150a8:	bf00      	nop
 80150aa:	bf00      	nop
 80150ac:	e7fd      	b.n	80150aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80150ae:	4b1e      	ldr	r3, [pc, #120]	@ (8015128 <xPortStartScheduler+0x138>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	021b      	lsls	r3, r3, #8
 80150b4:	4a1c      	ldr	r2, [pc, #112]	@ (8015128 <xPortStartScheduler+0x138>)
 80150b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80150b8:	4b1b      	ldr	r3, [pc, #108]	@ (8015128 <xPortStartScheduler+0x138>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80150c0:	4a19      	ldr	r2, [pc, #100]	@ (8015128 <xPortStartScheduler+0x138>)
 80150c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	b2da      	uxtb	r2, r3
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80150cc:	4b17      	ldr	r3, [pc, #92]	@ (801512c <xPortStartScheduler+0x13c>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4a16      	ldr	r2, [pc, #88]	@ (801512c <xPortStartScheduler+0x13c>)
 80150d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80150d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80150d8:	4b14      	ldr	r3, [pc, #80]	@ (801512c <xPortStartScheduler+0x13c>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4a13      	ldr	r2, [pc, #76]	@ (801512c <xPortStartScheduler+0x13c>)
 80150de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80150e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80150e4:	f000 f8da 	bl	801529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80150e8:	4b11      	ldr	r3, [pc, #68]	@ (8015130 <xPortStartScheduler+0x140>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80150ee:	f000 f8f9 	bl	80152e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80150f2:	4b10      	ldr	r3, [pc, #64]	@ (8015134 <xPortStartScheduler+0x144>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	4a0f      	ldr	r2, [pc, #60]	@ (8015134 <xPortStartScheduler+0x144>)
 80150f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80150fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80150fe:	f7ff ff63 	bl	8014fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015102:	f7ff fa7d 	bl	8014600 <vTaskSwitchContext>
	prvTaskExitError();
 8015106:	f7ff ff17 	bl	8014f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801510a:	2300      	movs	r3, #0
}
 801510c:	4618      	mov	r0, r3
 801510e:	3718      	adds	r7, #24
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	e000ed00 	.word	0xe000ed00
 8015118:	410fc271 	.word	0x410fc271
 801511c:	410fc270 	.word	0x410fc270
 8015120:	e000e400 	.word	0xe000e400
 8015124:	240014e8 	.word	0x240014e8
 8015128:	240014ec 	.word	0x240014ec
 801512c:	e000ed20 	.word	0xe000ed20
 8015130:	24000208 	.word	0x24000208
 8015134:	e000ef34 	.word	0xe000ef34

08015138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
	__asm volatile
 801513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015142:	f383 8811 	msr	BASEPRI, r3
 8015146:	f3bf 8f6f 	isb	sy
 801514a:	f3bf 8f4f 	dsb	sy
 801514e:	607b      	str	r3, [r7, #4]
}
 8015150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015152:	4b10      	ldr	r3, [pc, #64]	@ (8015194 <vPortEnterCritical+0x5c>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	3301      	adds	r3, #1
 8015158:	4a0e      	ldr	r2, [pc, #56]	@ (8015194 <vPortEnterCritical+0x5c>)
 801515a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801515c:	4b0d      	ldr	r3, [pc, #52]	@ (8015194 <vPortEnterCritical+0x5c>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2b01      	cmp	r3, #1
 8015162:	d110      	bne.n	8015186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015164:	4b0c      	ldr	r3, [pc, #48]	@ (8015198 <vPortEnterCritical+0x60>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	b2db      	uxtb	r3, r3
 801516a:	2b00      	cmp	r3, #0
 801516c:	d00b      	beq.n	8015186 <vPortEnterCritical+0x4e>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	603b      	str	r3, [r7, #0]
}
 8015180:	bf00      	nop
 8015182:	bf00      	nop
 8015184:	e7fd      	b.n	8015182 <vPortEnterCritical+0x4a>
	}
}
 8015186:	bf00      	nop
 8015188:	370c      	adds	r7, #12
 801518a:	46bd      	mov	sp, r7
 801518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015190:	4770      	bx	lr
 8015192:	bf00      	nop
 8015194:	24000208 	.word	0x24000208
 8015198:	e000ed04 	.word	0xe000ed04

0801519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80151a2:	4b12      	ldr	r3, [pc, #72]	@ (80151ec <vPortExitCritical+0x50>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d10b      	bne.n	80151c2 <vPortExitCritical+0x26>
	__asm volatile
 80151aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ae:	f383 8811 	msr	BASEPRI, r3
 80151b2:	f3bf 8f6f 	isb	sy
 80151b6:	f3bf 8f4f 	dsb	sy
 80151ba:	607b      	str	r3, [r7, #4]
}
 80151bc:	bf00      	nop
 80151be:	bf00      	nop
 80151c0:	e7fd      	b.n	80151be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80151c2:	4b0a      	ldr	r3, [pc, #40]	@ (80151ec <vPortExitCritical+0x50>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	3b01      	subs	r3, #1
 80151c8:	4a08      	ldr	r2, [pc, #32]	@ (80151ec <vPortExitCritical+0x50>)
 80151ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80151cc:	4b07      	ldr	r3, [pc, #28]	@ (80151ec <vPortExitCritical+0x50>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d105      	bne.n	80151e0 <vPortExitCritical+0x44>
 80151d4:	2300      	movs	r3, #0
 80151d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	f383 8811 	msr	BASEPRI, r3
}
 80151de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80151e0:	bf00      	nop
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr
 80151ec:	24000208 	.word	0x24000208

080151f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80151f0:	f3ef 8009 	mrs	r0, PSP
 80151f4:	f3bf 8f6f 	isb	sy
 80151f8:	4b15      	ldr	r3, [pc, #84]	@ (8015250 <pxCurrentTCBConst>)
 80151fa:	681a      	ldr	r2, [r3, #0]
 80151fc:	f01e 0f10 	tst.w	lr, #16
 8015200:	bf08      	it	eq
 8015202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801520a:	6010      	str	r0, [r2, #0]
 801520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015214:	f380 8811 	msr	BASEPRI, r0
 8015218:	f3bf 8f4f 	dsb	sy
 801521c:	f3bf 8f6f 	isb	sy
 8015220:	f7ff f9ee 	bl	8014600 <vTaskSwitchContext>
 8015224:	f04f 0000 	mov.w	r0, #0
 8015228:	f380 8811 	msr	BASEPRI, r0
 801522c:	bc09      	pop	{r0, r3}
 801522e:	6819      	ldr	r1, [r3, #0]
 8015230:	6808      	ldr	r0, [r1, #0]
 8015232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015236:	f01e 0f10 	tst.w	lr, #16
 801523a:	bf08      	it	eq
 801523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015240:	f380 8809 	msr	PSP, r0
 8015244:	f3bf 8f6f 	isb	sy
 8015248:	4770      	bx	lr
 801524a:	bf00      	nop
 801524c:	f3af 8000 	nop.w

08015250 <pxCurrentTCBConst>:
 8015250:	240013bc 	.word	0x240013bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015254:	bf00      	nop
 8015256:	bf00      	nop

08015258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
	__asm volatile
 801525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	607b      	str	r3, [r7, #4]
}
 8015270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015272:	f7ff f90b 	bl	801448c <xTaskIncrementTick>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d003      	beq.n	8015284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801527c:	4b06      	ldr	r3, [pc, #24]	@ (8015298 <SysTick_Handler+0x40>)
 801527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015282:	601a      	str	r2, [r3, #0]
 8015284:	2300      	movs	r3, #0
 8015286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	f383 8811 	msr	BASEPRI, r3
}
 801528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015290:	bf00      	nop
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}
 8015298:	e000ed04 	.word	0xe000ed04

0801529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801529c:	b480      	push	{r7}
 801529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80152a0:	4b0b      	ldr	r3, [pc, #44]	@ (80152d0 <vPortSetupTimerInterrupt+0x34>)
 80152a2:	2200      	movs	r2, #0
 80152a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80152a6:	4b0b      	ldr	r3, [pc, #44]	@ (80152d4 <vPortSetupTimerInterrupt+0x38>)
 80152a8:	2200      	movs	r2, #0
 80152aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80152ac:	4b0a      	ldr	r3, [pc, #40]	@ (80152d8 <vPortSetupTimerInterrupt+0x3c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	4a0a      	ldr	r2, [pc, #40]	@ (80152dc <vPortSetupTimerInterrupt+0x40>)
 80152b2:	fba2 2303 	umull	r2, r3, r2, r3
 80152b6:	099b      	lsrs	r3, r3, #6
 80152b8:	4a09      	ldr	r2, [pc, #36]	@ (80152e0 <vPortSetupTimerInterrupt+0x44>)
 80152ba:	3b01      	subs	r3, #1
 80152bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80152be:	4b04      	ldr	r3, [pc, #16]	@ (80152d0 <vPortSetupTimerInterrupt+0x34>)
 80152c0:	2207      	movs	r2, #7
 80152c2:	601a      	str	r2, [r3, #0]
}
 80152c4:	bf00      	nop
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	e000e010 	.word	0xe000e010
 80152d4:	e000e018 	.word	0xe000e018
 80152d8:	240001e4 	.word	0x240001e4
 80152dc:	10624dd3 	.word	0x10624dd3
 80152e0:	e000e014 	.word	0xe000e014

080152e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80152e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80152f4 <vPortEnableVFP+0x10>
 80152e8:	6801      	ldr	r1, [r0, #0]
 80152ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80152ee:	6001      	str	r1, [r0, #0]
 80152f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80152f2:	bf00      	nop
 80152f4:	e000ed88 	.word	0xe000ed88

080152f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80152fe:	f3ef 8305 	mrs	r3, IPSR
 8015302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b0f      	cmp	r3, #15
 8015308:	d915      	bls.n	8015336 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801530a:	4a18      	ldr	r2, [pc, #96]	@ (801536c <vPortValidateInterruptPriority+0x74>)
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	4413      	add	r3, r2
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015314:	4b16      	ldr	r3, [pc, #88]	@ (8015370 <vPortValidateInterruptPriority+0x78>)
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	7afa      	ldrb	r2, [r7, #11]
 801531a:	429a      	cmp	r2, r3
 801531c:	d20b      	bcs.n	8015336 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015322:	f383 8811 	msr	BASEPRI, r3
 8015326:	f3bf 8f6f 	isb	sy
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	607b      	str	r3, [r7, #4]
}
 8015330:	bf00      	nop
 8015332:	bf00      	nop
 8015334:	e7fd      	b.n	8015332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015336:	4b0f      	ldr	r3, [pc, #60]	@ (8015374 <vPortValidateInterruptPriority+0x7c>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801533e:	4b0e      	ldr	r3, [pc, #56]	@ (8015378 <vPortValidateInterruptPriority+0x80>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	429a      	cmp	r2, r3
 8015344:	d90b      	bls.n	801535e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801534a:	f383 8811 	msr	BASEPRI, r3
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f3bf 8f4f 	dsb	sy
 8015356:	603b      	str	r3, [r7, #0]
}
 8015358:	bf00      	nop
 801535a:	bf00      	nop
 801535c:	e7fd      	b.n	801535a <vPortValidateInterruptPriority+0x62>
	}
 801535e:	bf00      	nop
 8015360:	3714      	adds	r7, #20
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	e000e3f0 	.word	0xe000e3f0
 8015370:	240014e8 	.word	0x240014e8
 8015374:	e000ed0c 	.word	0xe000ed0c
 8015378:	240014ec 	.word	0x240014ec

0801537c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08a      	sub	sp, #40	@ 0x28
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015384:	2300      	movs	r3, #0
 8015386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015388:	f7fe ffb2 	bl	80142f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801538c:	4b5c      	ldr	r3, [pc, #368]	@ (8015500 <pvPortMalloc+0x184>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d101      	bne.n	8015398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015394:	f000 f924 	bl	80155e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015398:	4b5a      	ldr	r3, [pc, #360]	@ (8015504 <pvPortMalloc+0x188>)
 801539a:	681a      	ldr	r2, [r3, #0]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	4013      	ands	r3, r2
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f040 8095 	bne.w	80154d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d01e      	beq.n	80153ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80153ac:	2208      	movs	r2, #8
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	4413      	add	r3, r2
 80153b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f003 0307 	and.w	r3, r3, #7
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d015      	beq.n	80153ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f023 0307 	bic.w	r3, r3, #7
 80153c4:	3308      	adds	r3, #8
 80153c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f003 0307 	and.w	r3, r3, #7
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d00b      	beq.n	80153ea <pvPortMalloc+0x6e>
	__asm volatile
 80153d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153d6:	f383 8811 	msr	BASEPRI, r3
 80153da:	f3bf 8f6f 	isb	sy
 80153de:	f3bf 8f4f 	dsb	sy
 80153e2:	617b      	str	r3, [r7, #20]
}
 80153e4:	bf00      	nop
 80153e6:	bf00      	nop
 80153e8:	e7fd      	b.n	80153e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d06f      	beq.n	80154d0 <pvPortMalloc+0x154>
 80153f0:	4b45      	ldr	r3, [pc, #276]	@ (8015508 <pvPortMalloc+0x18c>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d86a      	bhi.n	80154d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80153fa:	4b44      	ldr	r3, [pc, #272]	@ (801550c <pvPortMalloc+0x190>)
 80153fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80153fe:	4b43      	ldr	r3, [pc, #268]	@ (801550c <pvPortMalloc+0x190>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015404:	e004      	b.n	8015410 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	429a      	cmp	r2, r3
 8015418:	d903      	bls.n	8015422 <pvPortMalloc+0xa6>
 801541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d1f1      	bne.n	8015406 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015422:	4b37      	ldr	r3, [pc, #220]	@ (8015500 <pvPortMalloc+0x184>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015428:	429a      	cmp	r2, r3
 801542a:	d051      	beq.n	80154d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801542c:	6a3b      	ldr	r3, [r7, #32]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2208      	movs	r2, #8
 8015432:	4413      	add	r3, r2
 8015434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	6a3b      	ldr	r3, [r7, #32]
 801543c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015440:	685a      	ldr	r2, [r3, #4]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	1ad2      	subs	r2, r2, r3
 8015446:	2308      	movs	r3, #8
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	429a      	cmp	r2, r3
 801544c:	d920      	bls.n	8015490 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801544e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	4413      	add	r3, r2
 8015454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015456:	69bb      	ldr	r3, [r7, #24]
 8015458:	f003 0307 	and.w	r3, r3, #7
 801545c:	2b00      	cmp	r3, #0
 801545e:	d00b      	beq.n	8015478 <pvPortMalloc+0xfc>
	__asm volatile
 8015460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015464:	f383 8811 	msr	BASEPRI, r3
 8015468:	f3bf 8f6f 	isb	sy
 801546c:	f3bf 8f4f 	dsb	sy
 8015470:	613b      	str	r3, [r7, #16]
}
 8015472:	bf00      	nop
 8015474:	bf00      	nop
 8015476:	e7fd      	b.n	8015474 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547a:	685a      	ldr	r2, [r3, #4]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	1ad2      	subs	r2, r2, r3
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801548a:	69b8      	ldr	r0, [r7, #24]
 801548c:	f000 f90a 	bl	80156a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015490:	4b1d      	ldr	r3, [pc, #116]	@ (8015508 <pvPortMalloc+0x18c>)
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	1ad3      	subs	r3, r2, r3
 801549a:	4a1b      	ldr	r2, [pc, #108]	@ (8015508 <pvPortMalloc+0x18c>)
 801549c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801549e:	4b1a      	ldr	r3, [pc, #104]	@ (8015508 <pvPortMalloc+0x18c>)
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	4b1b      	ldr	r3, [pc, #108]	@ (8015510 <pvPortMalloc+0x194>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d203      	bcs.n	80154b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80154aa:	4b17      	ldr	r3, [pc, #92]	@ (8015508 <pvPortMalloc+0x18c>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	4a18      	ldr	r2, [pc, #96]	@ (8015510 <pvPortMalloc+0x194>)
 80154b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80154b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b4:	685a      	ldr	r2, [r3, #4]
 80154b6:	4b13      	ldr	r3, [pc, #76]	@ (8015504 <pvPortMalloc+0x188>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	431a      	orrs	r2, r3
 80154bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80154c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c2:	2200      	movs	r2, #0
 80154c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80154c6:	4b13      	ldr	r3, [pc, #76]	@ (8015514 <pvPortMalloc+0x198>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	3301      	adds	r3, #1
 80154cc:	4a11      	ldr	r2, [pc, #68]	@ (8015514 <pvPortMalloc+0x198>)
 80154ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80154d0:	f7fe ff1c 	bl	801430c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	f003 0307 	and.w	r3, r3, #7
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00b      	beq.n	80154f6 <pvPortMalloc+0x17a>
	__asm volatile
 80154de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e2:	f383 8811 	msr	BASEPRI, r3
 80154e6:	f3bf 8f6f 	isb	sy
 80154ea:	f3bf 8f4f 	dsb	sy
 80154ee:	60fb      	str	r3, [r7, #12]
}
 80154f0:	bf00      	nop
 80154f2:	bf00      	nop
 80154f4:	e7fd      	b.n	80154f2 <pvPortMalloc+0x176>
	return pvReturn;
 80154f6:	69fb      	ldr	r3, [r7, #28]
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3728      	adds	r7, #40	@ 0x28
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	24008cf8 	.word	0x24008cf8
 8015504:	24008d0c 	.word	0x24008d0c
 8015508:	24008cfc 	.word	0x24008cfc
 801550c:	24008cf0 	.word	0x24008cf0
 8015510:	24008d00 	.word	0x24008d00
 8015514:	24008d04 	.word	0x24008d04

08015518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b086      	sub	sp, #24
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d04f      	beq.n	80155ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801552a:	2308      	movs	r3, #8
 801552c:	425b      	negs	r3, r3
 801552e:	697a      	ldr	r2, [r7, #20]
 8015530:	4413      	add	r3, r2
 8015532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015538:	693b      	ldr	r3, [r7, #16]
 801553a:	685a      	ldr	r2, [r3, #4]
 801553c:	4b25      	ldr	r3, [pc, #148]	@ (80155d4 <vPortFree+0xbc>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4013      	ands	r3, r2
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10b      	bne.n	801555e <vPortFree+0x46>
	__asm volatile
 8015546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801554a:	f383 8811 	msr	BASEPRI, r3
 801554e:	f3bf 8f6f 	isb	sy
 8015552:	f3bf 8f4f 	dsb	sy
 8015556:	60fb      	str	r3, [r7, #12]
}
 8015558:	bf00      	nop
 801555a:	bf00      	nop
 801555c:	e7fd      	b.n	801555a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d00b      	beq.n	801557e <vPortFree+0x66>
	__asm volatile
 8015566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801556a:	f383 8811 	msr	BASEPRI, r3
 801556e:	f3bf 8f6f 	isb	sy
 8015572:	f3bf 8f4f 	dsb	sy
 8015576:	60bb      	str	r3, [r7, #8]
}
 8015578:	bf00      	nop
 801557a:	bf00      	nop
 801557c:	e7fd      	b.n	801557a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	685a      	ldr	r2, [r3, #4]
 8015582:	4b14      	ldr	r3, [pc, #80]	@ (80155d4 <vPortFree+0xbc>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	4013      	ands	r3, r2
 8015588:	2b00      	cmp	r3, #0
 801558a:	d01e      	beq.n	80155ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d11a      	bne.n	80155ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015594:	693b      	ldr	r3, [r7, #16]
 8015596:	685a      	ldr	r2, [r3, #4]
 8015598:	4b0e      	ldr	r3, [pc, #56]	@ (80155d4 <vPortFree+0xbc>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	43db      	mvns	r3, r3
 801559e:	401a      	ands	r2, r3
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80155a4:	f7fe fea4 	bl	80142f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	685a      	ldr	r2, [r3, #4]
 80155ac:	4b0a      	ldr	r3, [pc, #40]	@ (80155d8 <vPortFree+0xc0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	4413      	add	r3, r2
 80155b2:	4a09      	ldr	r2, [pc, #36]	@ (80155d8 <vPortFree+0xc0>)
 80155b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80155b6:	6938      	ldr	r0, [r7, #16]
 80155b8:	f000 f874 	bl	80156a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80155bc:	4b07      	ldr	r3, [pc, #28]	@ (80155dc <vPortFree+0xc4>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3301      	adds	r3, #1
 80155c2:	4a06      	ldr	r2, [pc, #24]	@ (80155dc <vPortFree+0xc4>)
 80155c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80155c6:	f7fe fea1 	bl	801430c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80155ca:	bf00      	nop
 80155cc:	3718      	adds	r7, #24
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	24008d0c 	.word	0x24008d0c
 80155d8:	24008cfc 	.word	0x24008cfc
 80155dc:	24008d08 	.word	0x24008d08

080155e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80155e6:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80155ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80155ec:	4b27      	ldr	r3, [pc, #156]	@ (801568c <prvHeapInit+0xac>)
 80155ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f003 0307 	and.w	r3, r3, #7
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d00c      	beq.n	8015614 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	3307      	adds	r3, #7
 80155fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f023 0307 	bic.w	r3, r3, #7
 8015606:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015608:	68ba      	ldr	r2, [r7, #8]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	1ad3      	subs	r3, r2, r3
 801560e:	4a1f      	ldr	r2, [pc, #124]	@ (801568c <prvHeapInit+0xac>)
 8015610:	4413      	add	r3, r2
 8015612:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015618:	4a1d      	ldr	r2, [pc, #116]	@ (8015690 <prvHeapInit+0xb0>)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801561e:	4b1c      	ldr	r3, [pc, #112]	@ (8015690 <prvHeapInit+0xb0>)
 8015620:	2200      	movs	r2, #0
 8015622:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	68ba      	ldr	r2, [r7, #8]
 8015628:	4413      	add	r3, r2
 801562a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801562c:	2208      	movs	r2, #8
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	1a9b      	subs	r3, r3, r2
 8015632:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f023 0307 	bic.w	r3, r3, #7
 801563a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	4a15      	ldr	r2, [pc, #84]	@ (8015694 <prvHeapInit+0xb4>)
 8015640:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015642:	4b14      	ldr	r3, [pc, #80]	@ (8015694 <prvHeapInit+0xb4>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	2200      	movs	r2, #0
 8015648:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801564a:	4b12      	ldr	r3, [pc, #72]	@ (8015694 <prvHeapInit+0xb4>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2200      	movs	r2, #0
 8015650:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	68fa      	ldr	r2, [r7, #12]
 801565a:	1ad2      	subs	r2, r2, r3
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015660:	4b0c      	ldr	r3, [pc, #48]	@ (8015694 <prvHeapInit+0xb4>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	4a0a      	ldr	r2, [pc, #40]	@ (8015698 <prvHeapInit+0xb8>)
 801566e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	4a09      	ldr	r2, [pc, #36]	@ (801569c <prvHeapInit+0xbc>)
 8015676:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015678:	4b09      	ldr	r3, [pc, #36]	@ (80156a0 <prvHeapInit+0xc0>)
 801567a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801567e:	601a      	str	r2, [r3, #0]
}
 8015680:	bf00      	nop
 8015682:	3714      	adds	r7, #20
 8015684:	46bd      	mov	sp, r7
 8015686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568a:	4770      	bx	lr
 801568c:	240014f0 	.word	0x240014f0
 8015690:	24008cf0 	.word	0x24008cf0
 8015694:	24008cf8 	.word	0x24008cf8
 8015698:	24008d00 	.word	0x24008d00
 801569c:	24008cfc 	.word	0x24008cfc
 80156a0:	24008d0c 	.word	0x24008d0c

080156a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80156a4:	b480      	push	{r7}
 80156a6:	b085      	sub	sp, #20
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80156ac:	4b28      	ldr	r3, [pc, #160]	@ (8015750 <prvInsertBlockIntoFreeList+0xac>)
 80156ae:	60fb      	str	r3, [r7, #12]
 80156b0:	e002      	b.n	80156b8 <prvInsertBlockIntoFreeList+0x14>
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	60fb      	str	r3, [r7, #12]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	429a      	cmp	r2, r3
 80156c0:	d8f7      	bhi.n	80156b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	68ba      	ldr	r2, [r7, #8]
 80156cc:	4413      	add	r3, r2
 80156ce:	687a      	ldr	r2, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d108      	bne.n	80156e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	685a      	ldr	r2, [r3, #4]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	441a      	add	r2, r3
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	68ba      	ldr	r2, [r7, #8]
 80156f0:	441a      	add	r2, r3
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d118      	bne.n	801572c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	4b15      	ldr	r3, [pc, #84]	@ (8015754 <prvInsertBlockIntoFreeList+0xb0>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	429a      	cmp	r2, r3
 8015704:	d00d      	beq.n	8015722 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	685a      	ldr	r2, [r3, #4]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	441a      	add	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	601a      	str	r2, [r3, #0]
 8015720:	e008      	b.n	8015734 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015722:	4b0c      	ldr	r3, [pc, #48]	@ (8015754 <prvInsertBlockIntoFreeList+0xb0>)
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	601a      	str	r2, [r3, #0]
 801572a:	e003      	b.n	8015734 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015734:	68fa      	ldr	r2, [r7, #12]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	429a      	cmp	r2, r3
 801573a:	d002      	beq.n	8015742 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015742:	bf00      	nop
 8015744:	3714      	adds	r7, #20
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr
 801574e:	bf00      	nop
 8015750:	24008cf0 	.word	0x24008cf0
 8015754:	24008cf8 	.word	0x24008cf8

08015758 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b084      	sub	sp, #16
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	330c      	adds	r3, #12
 8015768:	461a      	mov	r2, r3
 801576a:	6839      	ldr	r1, [r7, #0]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f003 f9f7 	bl	8018b60 <tcpip_send_msg_wait_sem>
 8015772:	4603      	mov	r3, r0
 8015774:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d103      	bne.n	8015786 <netconn_apimsg+0x2e>
    return apimsg->err;
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015784:	e001      	b.n	801578a <netconn_apimsg+0x32>
  }
  return err;
 8015786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801578a:	4618      	mov	r0, r3
 801578c:	3710      	adds	r7, #16
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
	...

08015794 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b08c      	sub	sp, #48	@ 0x30
 8015798:	af00      	add	r7, sp, #0
 801579a:	4603      	mov	r3, r0
 801579c:	603a      	str	r2, [r7, #0]
 801579e:	71fb      	strb	r3, [r7, #7]
 80157a0:	460b      	mov	r3, r1
 80157a2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80157a4:	79fb      	ldrb	r3, [r7, #7]
 80157a6:	6839      	ldr	r1, [r7, #0]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f001 f82f 	bl	801680c <netconn_alloc>
 80157ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80157b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d054      	beq.n	8015860 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80157b6:	79bb      	ldrb	r3, [r7, #6]
 80157b8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80157ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157bc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80157be:	f107 0308 	add.w	r3, r7, #8
 80157c2:	4619      	mov	r1, r3
 80157c4:	4829      	ldr	r0, [pc, #164]	@ (801586c <netconn_new_with_proto_and_callback+0xd8>)
 80157c6:	f7ff ffc7 	bl	8015758 <netconn_apimsg>
 80157ca:	4603      	mov	r3, r0
 80157cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80157d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d043      	beq.n	8015860 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80157d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157da:	685b      	ldr	r3, [r3, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d005      	beq.n	80157ec <netconn_new_with_proto_and_callback+0x58>
 80157e0:	4b23      	ldr	r3, [pc, #140]	@ (8015870 <netconn_new_with_proto_and_callback+0xdc>)
 80157e2:	22a3      	movs	r2, #163	@ 0xa3
 80157e4:	4923      	ldr	r1, [pc, #140]	@ (8015874 <netconn_new_with_proto_and_callback+0xe0>)
 80157e6:	4824      	ldr	r0, [pc, #144]	@ (8015878 <netconn_new_with_proto_and_callback+0xe4>)
 80157e8:	f00f fe44 	bl	8025474 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80157ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ee:	3310      	adds	r3, #16
 80157f0:	4618      	mov	r0, r3
 80157f2:	f00e fc8a 	bl	802410a <sys_mbox_valid>
 80157f6:	4603      	mov	r3, r0
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d105      	bne.n	8015808 <netconn_new_with_proto_and_callback+0x74>
 80157fc:	4b1c      	ldr	r3, [pc, #112]	@ (8015870 <netconn_new_with_proto_and_callback+0xdc>)
 80157fe:	22a4      	movs	r2, #164	@ 0xa4
 8015800:	491e      	ldr	r1, [pc, #120]	@ (801587c <netconn_new_with_proto_and_callback+0xe8>)
 8015802:	481d      	ldr	r0, [pc, #116]	@ (8015878 <netconn_new_with_proto_and_callback+0xe4>)
 8015804:	f00f fe36 	bl	8025474 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8015808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801580a:	3314      	adds	r3, #20
 801580c:	4618      	mov	r0, r3
 801580e:	f00e fc7c 	bl	802410a <sys_mbox_valid>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d005      	beq.n	8015824 <netconn_new_with_proto_and_callback+0x90>
 8015818:	4b15      	ldr	r3, [pc, #84]	@ (8015870 <netconn_new_with_proto_and_callback+0xdc>)
 801581a:	22a6      	movs	r2, #166	@ 0xa6
 801581c:	4918      	ldr	r1, [pc, #96]	@ (8015880 <netconn_new_with_proto_and_callback+0xec>)
 801581e:	4816      	ldr	r0, [pc, #88]	@ (8015878 <netconn_new_with_proto_and_callback+0xe4>)
 8015820:	f00f fe28 	bl	8025474 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8015824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015826:	330c      	adds	r3, #12
 8015828:	4618      	mov	r0, r3
 801582a:	f00e fcff 	bl	802422c <sys_sem_valid>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d105      	bne.n	8015840 <netconn_new_with_proto_and_callback+0xac>
 8015834:	4b0e      	ldr	r3, [pc, #56]	@ (8015870 <netconn_new_with_proto_and_callback+0xdc>)
 8015836:	22a9      	movs	r2, #169	@ 0xa9
 8015838:	4912      	ldr	r1, [pc, #72]	@ (8015884 <netconn_new_with_proto_and_callback+0xf0>)
 801583a:	480f      	ldr	r0, [pc, #60]	@ (8015878 <netconn_new_with_proto_and_callback+0xe4>)
 801583c:	f00f fe1a 	bl	8025474 <iprintf>
      sys_sem_free(&conn->op_completed);
 8015840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015842:	330c      	adds	r3, #12
 8015844:	4618      	mov	r0, r3
 8015846:	f00e fce4 	bl	8024212 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801584c:	3310      	adds	r3, #16
 801584e:	4618      	mov	r0, r3
 8015850:	f00e fbd4 	bl	8023ffc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8015854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015856:	2007      	movs	r0, #7
 8015858:	f003 ffe8 	bl	801982c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801585c:	2300      	movs	r3, #0
 801585e:	e000      	b.n	8015862 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8015860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8015862:	4618      	mov	r0, r3
 8015864:	3730      	adds	r7, #48	@ 0x30
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	080167e1 	.word	0x080167e1
 8015870:	08029624 	.word	0x08029624
 8015874:	08029658 	.word	0x08029658
 8015878:	0802967c 	.word	0x0802967c
 801587c:	080296a4 	.word	0x080296a4
 8015880:	080296bc 	.word	0x080296bc
 8015884:	080296e0 	.word	0x080296e0

08015888 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b08c      	sub	sp, #48	@ 0x30
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d101      	bne.n	801589a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e014      	b.n	80158c4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801589e:	2329      	movs	r3, #41	@ 0x29
 80158a0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80158a2:	f107 030c 	add.w	r3, r7, #12
 80158a6:	4619      	mov	r1, r3
 80158a8:	4808      	ldr	r0, [pc, #32]	@ (80158cc <netconn_prepare_delete+0x44>)
 80158aa:	f7ff ff55 	bl	8015758 <netconn_apimsg>
 80158ae:	4603      	mov	r3, r0
 80158b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80158b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d002      	beq.n	80158c2 <netconn_prepare_delete+0x3a>
    return err;
 80158bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80158c0:	e000      	b.n	80158c4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80158c2:	2300      	movs	r3, #0
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3730      	adds	r7, #48	@ 0x30
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	08016d4d 	.word	0x08016d4d

080158d0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d101      	bne.n	80158e2 <netconn_delete+0x12>
    return ERR_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	e00d      	b.n	80158fe <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f7ff ffd0 	bl	8015888 <netconn_prepare_delete>
 80158e8:	4603      	mov	r3, r0
 80158ea:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80158ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d102      	bne.n	80158fa <netconn_delete+0x2a>
    netconn_free(conn);
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 fff7 	bl	80168e8 <netconn_free>
  }
  return err;
 80158fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
	...

08015908 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b08e      	sub	sp, #56	@ 0x38
 801590c:	af00      	add	r7, sp, #0
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	60b9      	str	r1, [r7, #8]
 8015912:	607a      	str	r2, [r7, #4]
 8015914:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d109      	bne.n	8015930 <netconn_getaddr+0x28>
 801591c:	4b1d      	ldr	r3, [pc, #116]	@ (8015994 <netconn_getaddr+0x8c>)
 801591e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8015922:	491d      	ldr	r1, [pc, #116]	@ (8015998 <netconn_getaddr+0x90>)
 8015924:	481d      	ldr	r0, [pc, #116]	@ (801599c <netconn_getaddr+0x94>)
 8015926:	f00f fda5 	bl	8025474 <iprintf>
 801592a:	f06f 030f 	mvn.w	r3, #15
 801592e:	e02d      	b.n	801598c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d109      	bne.n	801594a <netconn_getaddr+0x42>
 8015936:	4b17      	ldr	r3, [pc, #92]	@ (8015994 <netconn_getaddr+0x8c>)
 8015938:	f240 1213 	movw	r2, #275	@ 0x113
 801593c:	4918      	ldr	r1, [pc, #96]	@ (80159a0 <netconn_getaddr+0x98>)
 801593e:	4817      	ldr	r0, [pc, #92]	@ (801599c <netconn_getaddr+0x94>)
 8015940:	f00f fd98 	bl	8025474 <iprintf>
 8015944:	f06f 030f 	mvn.w	r3, #15
 8015948:	e020      	b.n	801598c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d109      	bne.n	8015964 <netconn_getaddr+0x5c>
 8015950:	4b10      	ldr	r3, [pc, #64]	@ (8015994 <netconn_getaddr+0x8c>)
 8015952:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8015956:	4913      	ldr	r1, [pc, #76]	@ (80159a4 <netconn_getaddr+0x9c>)
 8015958:	4810      	ldr	r0, [pc, #64]	@ (801599c <netconn_getaddr+0x94>)
 801595a:	f00f fd8b 	bl	8025474 <iprintf>
 801595e:	f06f 030f 	mvn.w	r3, #15
 8015962:	e013      	b.n	801598c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8015968:	78fb      	ldrb	r3, [r7, #3]
 801596a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8015976:	f107 0314 	add.w	r3, r7, #20
 801597a:	4619      	mov	r1, r3
 801597c:	480a      	ldr	r0, [pc, #40]	@ (80159a8 <netconn_getaddr+0xa0>)
 801597e:	f7ff feeb 	bl	8015758 <netconn_apimsg>
 8015982:	4603      	mov	r3, r0
 8015984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8015988:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801598c:	4618      	mov	r0, r3
 801598e:	3738      	adds	r7, #56	@ 0x38
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}
 8015994:	08029624 	.word	0x08029624
 8015998:	080296fc 	.word	0x080296fc
 801599c:	0802967c 	.word	0x0802967c
 80159a0:	0802971c 	.word	0x0802971c
 80159a4:	0802973c 	.word	0x0802973c
 80159a8:	0801753d 	.word	0x0801753d

080159ac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b08e      	sub	sp, #56	@ 0x38
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	60f8      	str	r0, [r7, #12]
 80159b4:	60b9      	str	r1, [r7, #8]
 80159b6:	4613      	mov	r3, r2
 80159b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d109      	bne.n	80159d4 <netconn_bind+0x28>
 80159c0:	4b11      	ldr	r3, [pc, #68]	@ (8015a08 <netconn_bind+0x5c>)
 80159c2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80159c6:	4911      	ldr	r1, [pc, #68]	@ (8015a0c <netconn_bind+0x60>)
 80159c8:	4811      	ldr	r0, [pc, #68]	@ (8015a10 <netconn_bind+0x64>)
 80159ca:	f00f fd53 	bl	8025474 <iprintf>
 80159ce:	f06f 030f 	mvn.w	r3, #15
 80159d2:	e015      	b.n	8015a00 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d101      	bne.n	80159de <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80159da:	4b0e      	ldr	r3, [pc, #56]	@ (8015a14 <netconn_bind+0x68>)
 80159dc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80159e6:	88fb      	ldrh	r3, [r7, #6]
 80159e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80159ea:	f107 0314 	add.w	r3, r7, #20
 80159ee:	4619      	mov	r1, r3
 80159f0:	4809      	ldr	r0, [pc, #36]	@ (8015a18 <netconn_bind+0x6c>)
 80159f2:	f7ff feb1 	bl	8015758 <netconn_apimsg>
 80159f6:	4603      	mov	r3, r0
 80159f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80159fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3738      	adds	r7, #56	@ 0x38
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	08029624 	.word	0x08029624
 8015a0c:	0802975c 	.word	0x0802975c
 8015a10:	0802967c 	.word	0x0802967c
 8015a14:	0802d0e4 	.word	0x0802d0e4
 8015a18:	08016f15 	.word	0x08016f15

08015a1c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b088      	sub	sp, #32
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	4613      	mov	r3, r2
 8015a28:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d109      	bne.n	8015a48 <netconn_recv_data+0x2c>
 8015a34:	4b58      	ldr	r3, [pc, #352]	@ (8015b98 <netconn_recv_data+0x17c>)
 8015a36:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8015a3a:	4958      	ldr	r1, [pc, #352]	@ (8015b9c <netconn_recv_data+0x180>)
 8015a3c:	4858      	ldr	r0, [pc, #352]	@ (8015ba0 <netconn_recv_data+0x184>)
 8015a3e:	f00f fd19 	bl	8025474 <iprintf>
 8015a42:	f06f 030f 	mvn.w	r3, #15
 8015a46:	e0a2      	b.n	8015b8e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d109      	bne.n	8015a68 <netconn_recv_data+0x4c>
 8015a54:	4b50      	ldr	r3, [pc, #320]	@ (8015b98 <netconn_recv_data+0x17c>)
 8015a56:	f240 224a 	movw	r2, #586	@ 0x24a
 8015a5a:	4952      	ldr	r1, [pc, #328]	@ (8015ba4 <netconn_recv_data+0x188>)
 8015a5c:	4850      	ldr	r0, [pc, #320]	@ (8015ba0 <netconn_recv_data+0x184>)
 8015a5e:	f00f fd09 	bl	8025474 <iprintf>
 8015a62:	f06f 030f 	mvn.w	r3, #15
 8015a66:	e092      	b.n	8015b8e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	3310      	adds	r3, #16
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f00e fb4c 	bl	802410a <sys_mbox_valid>
 8015a72:	4603      	mov	r3, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d10e      	bne.n	8015a96 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8015a78:	68f8      	ldr	r0, [r7, #12]
 8015a7a:	f000 fb01 	bl	8016080 <netconn_err>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8015a82:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d002      	beq.n	8015a90 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8015a8a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015a8e:	e07e      	b.n	8015b8e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8015a90:	f06f 030a 	mvn.w	r3, #10
 8015a94:	e07b      	b.n	8015b8e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	7f1b      	ldrb	r3, [r3, #28]
 8015a9a:	f003 0302 	and.w	r3, r3, #2
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10f      	bne.n	8015ac2 <netconn_recv_data+0xa6>
 8015aa2:	79fb      	ldrb	r3, [r7, #7]
 8015aa4:	f003 0304 	and.w	r3, r3, #4
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10a      	bne.n	8015ac2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	7f1b      	ldrb	r3, [r3, #28]
 8015ab0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d104      	bne.n	8015ac2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d023      	beq.n	8015b0a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	3310      	adds	r3, #16
 8015ac6:	f107 0218 	add.w	r2, r7, #24
 8015aca:	4611      	mov	r1, r2
 8015acc:	4618      	mov	r0, r3
 8015ace:	f00e fb00 	bl	80240d2 <sys_arch_mbox_tryfetch>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ad8:	d11f      	bne.n	8015b1a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8015ada:	68f8      	ldr	r0, [r7, #12]
 8015adc:	f000 fad0 	bl	8016080 <netconn_err>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8015ae4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d002      	beq.n	8015af2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8015aec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015af0:	e04d      	b.n	8015b8e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	7f1b      	ldrb	r3, [r3, #28]
 8015af6:	f003 0301 	and.w	r3, r3, #1
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d002      	beq.n	8015b04 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8015afe:	f06f 030a 	mvn.w	r3, #10
 8015b02:	e044      	b.n	8015b8e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8015b04:	f06f 0306 	mvn.w	r3, #6
 8015b08:	e041      	b.n	8015b8e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	3310      	adds	r3, #16
 8015b0e:	f107 0118 	add.w	r1, r7, #24
 8015b12:	2200      	movs	r2, #0
 8015b14:	4618      	mov	r0, r3
 8015b16:	f00e fa9d 	bl	8024054 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015b22:	2b10      	cmp	r3, #16
 8015b24:	d117      	bne.n	8015b56 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	f107 0217 	add.w	r2, r7, #23
 8015b2c:	4611      	mov	r1, r2
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f000 faf8 	bl	8016124 <lwip_netconn_is_err_msg>
 8015b34:	4603      	mov	r3, r0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d009      	beq.n	8015b4e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8015b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b3e:	f113 0f0f 	cmn.w	r3, #15
 8015b42:	d101      	bne.n	8015b48 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8015b44:	2300      	movs	r3, #0
 8015b46:	e022      	b.n	8015b8e <netconn_recv_data+0x172>
      }
      return err;
 8015b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b4c:	e01f      	b.n	8015b8e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8015b4e:	69bb      	ldr	r3, [r7, #24]
 8015b50:	891b      	ldrh	r3, [r3, #8]
 8015b52:	83fb      	strh	r3, [r7, #30]
 8015b54:	e00d      	b.n	8015b72 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d106      	bne.n	8015b6a <netconn_recv_data+0x14e>
 8015b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8015b98 <netconn_recv_data+0x17c>)
 8015b5e:	f240 2291 	movw	r2, #657	@ 0x291
 8015b62:	4911      	ldr	r1, [pc, #68]	@ (8015ba8 <netconn_recv_data+0x18c>)
 8015b64:	480e      	ldr	r0, [pc, #56]	@ (8015ba0 <netconn_recv_data+0x184>)
 8015b66:	f00f fc85 	bl	8025474 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	891b      	ldrh	r3, [r3, #8]
 8015b70:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d005      	beq.n	8015b86 <netconn_recv_data+0x16a>
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b7e:	8bfa      	ldrh	r2, [r7, #30]
 8015b80:	2101      	movs	r1, #1
 8015b82:	68f8      	ldr	r0, [r7, #12]
 8015b84:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8015b86:	69ba      	ldr	r2, [r7, #24]
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8015b8c:	2300      	movs	r3, #0
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3720      	adds	r7, #32
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	08029624 	.word	0x08029624
 8015b9c:	0802983c 	.word	0x0802983c
 8015ba0:	0802967c 	.word	0x0802967c
 8015ba4:	0802985c 	.word	0x0802985c
 8015ba8:	08029878 	.word	0x08029878

08015bac <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d005      	beq.n	8015bca <netconn_tcp_recvd_msg+0x1e>
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015bc6:	2b10      	cmp	r3, #16
 8015bc8:	d009      	beq.n	8015bde <netconn_tcp_recvd_msg+0x32>
 8015bca:	4b0c      	ldr	r3, [pc, #48]	@ (8015bfc <netconn_tcp_recvd_msg+0x50>)
 8015bcc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8015bd0:	490b      	ldr	r1, [pc, #44]	@ (8015c00 <netconn_tcp_recvd_msg+0x54>)
 8015bd2:	480c      	ldr	r0, [pc, #48]	@ (8015c04 <netconn_tcp_recvd_msg+0x58>)
 8015bd4:	f00f fc4e 	bl	8025474 <iprintf>
 8015bd8:	f06f 030f 	mvn.w	r3, #15
 8015bdc:	e00a      	b.n	8015bf4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	68ba      	ldr	r2, [r7, #8]
 8015be8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8015bea:	6879      	ldr	r1, [r7, #4]
 8015bec:	4806      	ldr	r0, [pc, #24]	@ (8015c08 <netconn_tcp_recvd_msg+0x5c>)
 8015bee:	f7ff fdb3 	bl	8015758 <netconn_apimsg>
 8015bf2:	4603      	mov	r3, r0
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3710      	adds	r7, #16
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	08029624 	.word	0x08029624
 8015c00:	08029884 	.word	0x08029884
 8015c04:	0802967c 	.word	0x0802967c
 8015c08:	08017023 	.word	0x08017023

08015c0c <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b08c      	sub	sp, #48	@ 0x30
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d005      	beq.n	8015c28 <netconn_tcp_recvd+0x1c>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015c24:	2b10      	cmp	r3, #16
 8015c26:	d009      	beq.n	8015c3c <netconn_tcp_recvd+0x30>
 8015c28:	4b0c      	ldr	r3, [pc, #48]	@ (8015c5c <netconn_tcp_recvd+0x50>)
 8015c2a:	f240 22b5 	movw	r2, #693	@ 0x2b5
 8015c2e:	490c      	ldr	r1, [pc, #48]	@ (8015c60 <netconn_tcp_recvd+0x54>)
 8015c30:	480c      	ldr	r0, [pc, #48]	@ (8015c64 <netconn_tcp_recvd+0x58>)
 8015c32:	f00f fc1f 	bl	8025474 <iprintf>
 8015c36:	f06f 030f 	mvn.w	r3, #15
 8015c3a:	e00b      	b.n	8015c54 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8015c3c:	f107 030c 	add.w	r3, r7, #12
 8015c40:	461a      	mov	r2, r3
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f7ff ffb1 	bl	8015bac <netconn_tcp_recvd_msg>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8015c50:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3730      	adds	r7, #48	@ 0x30
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	08029624 	.word	0x08029624
 8015c60:	08029884 	.word	0x08029884
 8015c64:	0802967c 	.word	0x0802967c

08015c68 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b090      	sub	sp, #64	@ 0x40
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	60b9      	str	r1, [r7, #8]
 8015c72:	4613      	mov	r3, r2
 8015c74:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	3310      	adds	r3, #16
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f00e fa45 	bl	802410a <sys_mbox_valid>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d102      	bne.n	8015c8c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8015c86:	f06f 030a 	mvn.w	r3, #10
 8015c8a:	e06d      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	7f1b      	ldrb	r3, [r3, #28]
 8015c90:	b25b      	sxtb	r3, r3
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	da07      	bge.n	8015ca6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	7f1b      	ldrb	r3, [r3, #28]
 8015c9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015c9e:	b2da      	uxtb	r2, r3
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8015ca4:	e039      	b.n	8015d1a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015ca6:	79fb      	ldrb	r3, [r7, #7]
 8015ca8:	461a      	mov	r2, r3
 8015caa:	68b9      	ldr	r1, [r7, #8]
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f7ff feb5 	bl	8015a1c <netconn_recv_data>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8015cb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d002      	beq.n	8015cc6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8015cc0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015cc4:	e050      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8015ccc:	79fb      	ldrb	r3, [r7, #7]
 8015cce:	f003 0308 	and.w	r3, r3, #8
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d10e      	bne.n	8015cf4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8015cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d002      	beq.n	8015ce2 <netconn_recv_data_tcp+0x7a>
 8015cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cde:	891b      	ldrh	r3, [r3, #8]
 8015ce0:	e000      	b.n	8015ce4 <netconn_recv_data_tcp+0x7c>
 8015ce2:	2301      	movs	r3, #1
 8015ce4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8015ce6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015ce8:	f107 0214 	add.w	r2, r7, #20
 8015cec:	4619      	mov	r1, r3
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f7ff ff5c 	bl	8015bac <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8015cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d134      	bne.n	8015d64 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8015cfa:	79fb      	ldrb	r3, [r7, #7]
 8015cfc:	f003 0310 	and.w	r3, r3, #16
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d009      	beq.n	8015d18 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	7f1b      	ldrb	r3, [r3, #28]
 8015d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015d0c:	b2da      	uxtb	r2, r3
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8015d12:	f06f 0306 	mvn.w	r3, #6
 8015d16:	e027      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8015d18:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d005      	beq.n	8015d2e <netconn_recv_data_tcp+0xc6>
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d26:	2200      	movs	r2, #0
 8015d28:	2101      	movs	r1, #1
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d10f      	bne.n	8015d56 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8015d36:	68f8      	ldr	r0, [r7, #12]
 8015d38:	f000 f9a2 	bl	8016080 <netconn_err>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8015d42:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d002      	beq.n	8015d50 <netconn_recv_data_tcp+0xe8>
          return err;
 8015d4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015d4e:	e00b      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8015d50:	f06f 030d 	mvn.w	r3, #13
 8015d54:	e008      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8015d56:	2101      	movs	r1, #1
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	f000 f961 	bl	8016020 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8015d5e:	f06f 030e 	mvn.w	r3, #14
 8015d62:	e001      	b.n	8015d68 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8015d64:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	3740      	adds	r7, #64	@ 0x40
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	4613      	mov	r3, r2
 8015d7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d005      	beq.n	8015d90 <netconn_recv_tcp_pbuf_flags+0x20>
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015d8c:	2b10      	cmp	r3, #16
 8015d8e:	d009      	beq.n	8015da4 <netconn_recv_tcp_pbuf_flags+0x34>
 8015d90:	4b0a      	ldr	r3, [pc, #40]	@ (8015dbc <netconn_recv_tcp_pbuf_flags+0x4c>)
 8015d92:	f240 3225 	movw	r2, #805	@ 0x325
 8015d96:	490a      	ldr	r1, [pc, #40]	@ (8015dc0 <netconn_recv_tcp_pbuf_flags+0x50>)
 8015d98:	480a      	ldr	r0, [pc, #40]	@ (8015dc4 <netconn_recv_tcp_pbuf_flags+0x54>)
 8015d9a:	f00f fb6b 	bl	8025474 <iprintf>
 8015d9e:	f06f 030f 	mvn.w	r3, #15
 8015da2:	e006      	b.n	8015db2 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8015da4:	79fb      	ldrb	r3, [r7, #7]
 8015da6:	461a      	mov	r2, r3
 8015da8:	68b9      	ldr	r1, [r7, #8]
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	f7ff ff5c 	bl	8015c68 <netconn_recv_data_tcp>
 8015db0:	4603      	mov	r3, r0
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3710      	adds	r7, #16
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	08029624 	.word	0x08029624
 8015dc0:	08029884 	.word	0x08029884
 8015dc4:	0802967c 	.word	0x0802967c

08015dc8 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d005      	beq.n	8015de8 <netconn_recv_udp_raw_netbuf_flags+0x20>
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015de4:	2b10      	cmp	r3, #16
 8015de6:	d109      	bne.n	8015dfc <netconn_recv_udp_raw_netbuf_flags+0x34>
 8015de8:	4b0a      	ldr	r3, [pc, #40]	@ (8015e14 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8015dea:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8015dee:	490a      	ldr	r1, [pc, #40]	@ (8015e18 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8015df0:	480a      	ldr	r0, [pc, #40]	@ (8015e1c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8015df2:	f00f fb3f 	bl	8025474 <iprintf>
 8015df6:	f06f 030f 	mvn.w	r3, #15
 8015dfa:	e006      	b.n	8015e0a <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	68b9      	ldr	r1, [r7, #8]
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7ff fe0a 	bl	8015a1c <netconn_recv_data>
 8015e08:	4603      	mov	r3, r0
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	08029624 	.word	0x08029624
 8015e18:	080298a8 	.word	0x080298a8
 8015e1c:	0802967c 	.word	0x0802967c

08015e20 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08c      	sub	sp, #48	@ 0x30
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d109      	bne.n	8015e44 <netconn_send+0x24>
 8015e30:	4b0e      	ldr	r3, [pc, #56]	@ (8015e6c <netconn_send+0x4c>)
 8015e32:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8015e36:	490e      	ldr	r1, [pc, #56]	@ (8015e70 <netconn_send+0x50>)
 8015e38:	480e      	ldr	r0, [pc, #56]	@ (8015e74 <netconn_send+0x54>)
 8015e3a:	f00f fb1b 	bl	8025474 <iprintf>
 8015e3e:	f06f 030f 	mvn.w	r3, #15
 8015e42:	e00e      	b.n	8015e62 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8015e4c:	f107 030c 	add.w	r3, r7, #12
 8015e50:	4619      	mov	r1, r3
 8015e52:	4809      	ldr	r0, [pc, #36]	@ (8015e78 <netconn_send+0x58>)
 8015e54:	f7ff fc80 	bl	8015758 <netconn_apimsg>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015e5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3730      	adds	r7, #48	@ 0x30
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	08029624 	.word	0x08029624
 8015e70:	080298e0 	.word	0x080298e0
 8015e74:	0802967c 	.word	0x0802967c
 8015e78:	08016f89 	.word	0x08016f89

08015e7c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b088      	sub	sp, #32
 8015e80:	af02      	add	r7, sp, #8
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	607a      	str	r2, [r7, #4]
 8015e88:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8015e92:	78fa      	ldrb	r2, [r7, #3]
 8015e94:	f107 0110 	add.w	r1, r7, #16
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	68f8      	ldr	r0, [r7, #12]
 8015ea2:	f000 f805 	bl	8015eb0 <netconn_write_vectors_partly>
 8015ea6:	4603      	mov	r3, r0
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3718      	adds	r7, #24
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b092      	sub	sp, #72	@ 0x48
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	4611      	mov	r1, r2
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	460b      	mov	r3, r1
 8015ec0:	80fb      	strh	r3, [r7, #6]
 8015ec2:	4613      	mov	r3, r2
 8015ec4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d109      	bne.n	8015ee0 <netconn_write_vectors_partly+0x30>
 8015ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8016008 <netconn_write_vectors_partly+0x158>)
 8015ece:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015ed2:	494e      	ldr	r1, [pc, #312]	@ (801600c <netconn_write_vectors_partly+0x15c>)
 8015ed4:	484e      	ldr	r0, [pc, #312]	@ (8016010 <netconn_write_vectors_partly+0x160>)
 8015ed6:	f00f facd 	bl	8025474 <iprintf>
 8015eda:	f06f 030f 	mvn.w	r3, #15
 8015ede:	e08e      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015ee8:	2b10      	cmp	r3, #16
 8015eea:	d009      	beq.n	8015f00 <netconn_write_vectors_partly+0x50>
 8015eec:	4b46      	ldr	r3, [pc, #280]	@ (8016008 <netconn_write_vectors_partly+0x158>)
 8015eee:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8015ef2:	4948      	ldr	r1, [pc, #288]	@ (8016014 <netconn_write_vectors_partly+0x164>)
 8015ef4:	4846      	ldr	r0, [pc, #280]	@ (8016010 <netconn_write_vectors_partly+0x160>)
 8015ef6:	f00f fabd 	bl	8025474 <iprintf>
 8015efa:	f06f 0305 	mvn.w	r3, #5
 8015efe:	e07e      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	7f1b      	ldrb	r3, [r3, #28]
 8015f04:	f003 0302 	and.w	r3, r3, #2
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d104      	bne.n	8015f16 <netconn_write_vectors_partly+0x66>
 8015f0c:	797b      	ldrb	r3, [r7, #5]
 8015f0e:	f003 0304 	and.w	r3, r3, #4
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d001      	beq.n	8015f1a <netconn_write_vectors_partly+0x6a>
 8015f16:	2301      	movs	r3, #1
 8015f18:	e000      	b.n	8015f1c <netconn_write_vectors_partly+0x6c>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8015f20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d005      	beq.n	8015f34 <netconn_write_vectors_partly+0x84>
 8015f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d102      	bne.n	8015f34 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8015f2e:	f06f 0305 	mvn.w	r3, #5
 8015f32:	e064      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8015f34:	2300      	movs	r3, #0
 8015f36:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8015f38:	2300      	movs	r3, #0
 8015f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8015f3c:	e015      	b.n	8015f6a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8015f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f40:	00db      	lsls	r3, r3, #3
 8015f42:	68ba      	ldr	r2, [r7, #8]
 8015f44:	4413      	add	r3, r2
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015f4a:	4413      	add	r3, r2
 8015f4c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8015f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	4413      	add	r3, r2
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d202      	bcs.n	8015f64 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8015f5e:	f06f 0305 	mvn.w	r3, #5
 8015f62:	e04c      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f66:	3301      	adds	r3, #1
 8015f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8015f6a:	88fb      	ldrh	r3, [r7, #6]
 8015f6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	dbe5      	blt.n	8015f3e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d101      	bne.n	8015f7c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	e040      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8015f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	da0a      	bge.n	8015f98 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d102      	bne.n	8015f8e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015f88:	f06f 0305 	mvn.w	r3, #5
 8015f8c:	e037      	b.n	8015ffe <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8015f8e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015f92:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8015f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015f96:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8015fa0:	88fb      	ldrh	r3, [r7, #6]
 8015fa2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8015fa8:	797b      	ldrb	r3, [r7, #5]
 8015faa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8015fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015fb6:	f107 0314 	add.w	r3, r7, #20
 8015fba:	4619      	mov	r1, r3
 8015fbc:	4816      	ldr	r0, [pc, #88]	@ (8016018 <netconn_write_vectors_partly+0x168>)
 8015fbe:	f7ff fbcb 	bl	8015758 <netconn_apimsg>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8015fc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d114      	bne.n	8015ffa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d002      	beq.n	8015fdc <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015fda:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8015fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10a      	bne.n	8015ffa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d006      	beq.n	8015ffa <netconn_write_vectors_partly+0x14a>
 8015fec:	4b06      	ldr	r3, [pc, #24]	@ (8016008 <netconn_write_vectors_partly+0x158>)
 8015fee:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015ff2:	490a      	ldr	r1, [pc, #40]	@ (801601c <netconn_write_vectors_partly+0x16c>)
 8015ff4:	4806      	ldr	r0, [pc, #24]	@ (8016010 <netconn_write_vectors_partly+0x160>)
 8015ff6:	f00f fa3d 	bl	8025474 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8015ffa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3748      	adds	r7, #72	@ 0x48
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
 8016006:	bf00      	nop
 8016008:	08029624 	.word	0x08029624
 801600c:	080298fc 	.word	0x080298fc
 8016010:	0802967c 	.word	0x0802967c
 8016014:	08029918 	.word	0x08029918
 8016018:	08017425 	.word	0x08017425
 801601c:	0802993c 	.word	0x0802993c

08016020 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b08c      	sub	sp, #48	@ 0x30
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
 8016028:	460b      	mov	r3, r1
 801602a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d109      	bne.n	8016046 <netconn_close_shutdown+0x26>
 8016032:	4b0f      	ldr	r3, [pc, #60]	@ (8016070 <netconn_close_shutdown+0x50>)
 8016034:	f240 4247 	movw	r2, #1095	@ 0x447
 8016038:	490e      	ldr	r1, [pc, #56]	@ (8016074 <netconn_close_shutdown+0x54>)
 801603a:	480f      	ldr	r0, [pc, #60]	@ (8016078 <netconn_close_shutdown+0x58>)
 801603c:	f00f fa1a 	bl	8025474 <iprintf>
 8016040:	f06f 030f 	mvn.w	r3, #15
 8016044:	e010      	b.n	8016068 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801604a:	78fb      	ldrb	r3, [r7, #3]
 801604c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801604e:	2329      	movs	r3, #41	@ 0x29
 8016050:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8016052:	f107 030c 	add.w	r3, r7, #12
 8016056:	4619      	mov	r1, r3
 8016058:	4808      	ldr	r0, [pc, #32]	@ (801607c <netconn_close_shutdown+0x5c>)
 801605a:	f7ff fb7d 	bl	8015758 <netconn_apimsg>
 801605e:	4603      	mov	r3, r0
 8016060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8016064:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8016068:	4618      	mov	r0, r3
 801606a:	3730      	adds	r7, #48	@ 0x30
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	08029624 	.word	0x08029624
 8016074:	08029960 	.word	0x08029960
 8016078:	0802967c 	.word	0x0802967c
 801607c:	08017649 	.word	0x08017649

08016080 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d101      	bne.n	8016092 <netconn_err+0x12>
    return ERR_OK;
 801608e:	2300      	movs	r3, #0
 8016090:	e00d      	b.n	80160ae <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8016092:	f00e f955 	bl	8024340 <sys_arch_protect>
 8016096:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	7a1b      	ldrb	r3, [r3, #8]
 801609c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2200      	movs	r2, #0
 80160a2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80160a4:	68f8      	ldr	r0, [r7, #12]
 80160a6:	f00e f959 	bl	802435c <sys_arch_unprotect>
  return err;
 80160aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3710      	adds	r7, #16
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
	...

080160b8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80160c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160c6:	f113 0f0d 	cmn.w	r3, #13
 80160ca:	d009      	beq.n	80160e0 <lwip_netconn_err_to_msg+0x28>
 80160cc:	f113 0f0d 	cmn.w	r3, #13
 80160d0:	dc0c      	bgt.n	80160ec <lwip_netconn_err_to_msg+0x34>
 80160d2:	f113 0f0f 	cmn.w	r3, #15
 80160d6:	d007      	beq.n	80160e8 <lwip_netconn_err_to_msg+0x30>
 80160d8:	f113 0f0e 	cmn.w	r3, #14
 80160dc:	d002      	beq.n	80160e4 <lwip_netconn_err_to_msg+0x2c>
 80160de:	e005      	b.n	80160ec <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80160e0:	4b0a      	ldr	r3, [pc, #40]	@ (801610c <lwip_netconn_err_to_msg+0x54>)
 80160e2:	e00e      	b.n	8016102 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80160e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016110 <lwip_netconn_err_to_msg+0x58>)
 80160e6:	e00c      	b.n	8016102 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80160e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016114 <lwip_netconn_err_to_msg+0x5c>)
 80160ea:	e00a      	b.n	8016102 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80160ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d005      	beq.n	8016100 <lwip_netconn_err_to_msg+0x48>
 80160f4:	4b08      	ldr	r3, [pc, #32]	@ (8016118 <lwip_netconn_err_to_msg+0x60>)
 80160f6:	227d      	movs	r2, #125	@ 0x7d
 80160f8:	4908      	ldr	r1, [pc, #32]	@ (801611c <lwip_netconn_err_to_msg+0x64>)
 80160fa:	4809      	ldr	r0, [pc, #36]	@ (8016120 <lwip_netconn_err_to_msg+0x68>)
 80160fc:	f00f f9ba 	bl	8025474 <iprintf>
      return NULL;
 8016100:	2300      	movs	r3, #0
  }
}
 8016102:	4618      	mov	r0, r3
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	0802cf8c 	.word	0x0802cf8c
 8016110:	0802cf8d 	.word	0x0802cf8d
 8016114:	0802cf8e 	.word	0x0802cf8e
 8016118:	0802997c 	.word	0x0802997c
 801611c:	080299b0 	.word	0x080299b0
 8016120:	080299c0 	.word	0x080299c0

08016124 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d105      	bne.n	8016140 <lwip_netconn_is_err_msg+0x1c>
 8016134:	4b12      	ldr	r3, [pc, #72]	@ (8016180 <lwip_netconn_is_err_msg+0x5c>)
 8016136:	2285      	movs	r2, #133	@ 0x85
 8016138:	4912      	ldr	r1, [pc, #72]	@ (8016184 <lwip_netconn_is_err_msg+0x60>)
 801613a:	4813      	ldr	r0, [pc, #76]	@ (8016188 <lwip_netconn_is_err_msg+0x64>)
 801613c:	f00f f99a 	bl	8025474 <iprintf>

  if (msg == &netconn_aborted) {
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	4a12      	ldr	r2, [pc, #72]	@ (801618c <lwip_netconn_is_err_msg+0x68>)
 8016144:	4293      	cmp	r3, r2
 8016146:	d104      	bne.n	8016152 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	22f3      	movs	r2, #243	@ 0xf3
 801614c:	701a      	strb	r2, [r3, #0]
    return 1;
 801614e:	2301      	movs	r3, #1
 8016150:	e012      	b.n	8016178 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	4a0e      	ldr	r2, [pc, #56]	@ (8016190 <lwip_netconn_is_err_msg+0x6c>)
 8016156:	4293      	cmp	r3, r2
 8016158:	d104      	bne.n	8016164 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	22f2      	movs	r2, #242	@ 0xf2
 801615e:	701a      	strb	r2, [r3, #0]
    return 1;
 8016160:	2301      	movs	r3, #1
 8016162:	e009      	b.n	8016178 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	4a0b      	ldr	r2, [pc, #44]	@ (8016194 <lwip_netconn_is_err_msg+0x70>)
 8016168:	4293      	cmp	r3, r2
 801616a:	d104      	bne.n	8016176 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	22f1      	movs	r2, #241	@ 0xf1
 8016170:	701a      	strb	r2, [r3, #0]
    return 1;
 8016172:	2301      	movs	r3, #1
 8016174:	e000      	b.n	8016178 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8016176:	2300      	movs	r3, #0
}
 8016178:	4618      	mov	r0, r3
 801617a:	3708      	adds	r7, #8
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}
 8016180:	0802997c 	.word	0x0802997c
 8016184:	080299e8 	.word	0x080299e8
 8016188:	080299c0 	.word	0x080299c0
 801618c:	0802cf8c 	.word	0x0802cf8c
 8016190:	0802cf8d 	.word	0x0802cf8d
 8016194:	0802cf8e 	.word	0x0802cf8e

08016198 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b088      	sub	sp, #32
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	607a      	str	r2, [r7, #4]
 80161a4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d105      	bne.n	80161b8 <recv_udp+0x20>
 80161ac:	4b34      	ldr	r3, [pc, #208]	@ (8016280 <recv_udp+0xe8>)
 80161ae:	22e5      	movs	r2, #229	@ 0xe5
 80161b0:	4934      	ldr	r1, [pc, #208]	@ (8016284 <recv_udp+0xec>)
 80161b2:	4835      	ldr	r0, [pc, #212]	@ (8016288 <recv_udp+0xf0>)
 80161b4:	f00f f95e 	bl	8025474 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d105      	bne.n	80161ca <recv_udp+0x32>
 80161be:	4b30      	ldr	r3, [pc, #192]	@ (8016280 <recv_udp+0xe8>)
 80161c0:	22e6      	movs	r2, #230	@ 0xe6
 80161c2:	4932      	ldr	r1, [pc, #200]	@ (801628c <recv_udp+0xf4>)
 80161c4:	4830      	ldr	r0, [pc, #192]	@ (8016288 <recv_udp+0xf0>)
 80161c6:	f00f f955 	bl	8025474 <iprintf>
  conn = (struct netconn *)arg;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d103      	bne.n	80161dc <recv_udp+0x44>
    pbuf_free(p);
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f004 f9ff 	bl	801a5d8 <pbuf_free>
    return;
 80161da:	e04d      	b.n	8016278 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	68ba      	ldr	r2, [r7, #8]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d005      	beq.n	80161f2 <recv_udp+0x5a>
 80161e6:	4b26      	ldr	r3, [pc, #152]	@ (8016280 <recv_udp+0xe8>)
 80161e8:	22ee      	movs	r2, #238	@ 0xee
 80161ea:	4929      	ldr	r1, [pc, #164]	@ (8016290 <recv_udp+0xf8>)
 80161ec:	4826      	ldr	r0, [pc, #152]	@ (8016288 <recv_udp+0xf0>)
 80161ee:	f00f f941 	bl	8025474 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80161f2:	69fb      	ldr	r3, [r7, #28]
 80161f4:	3310      	adds	r3, #16
 80161f6:	4618      	mov	r0, r3
 80161f8:	f00d ff87 	bl	802410a <sys_mbox_valid>
 80161fc:	4603      	mov	r3, r0
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d103      	bne.n	801620a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f004 f9e8 	bl	801a5d8 <pbuf_free>
    return;
 8016208:	e036      	b.n	8016278 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801620a:	2006      	movs	r0, #6
 801620c:	f003 fa98 	bl	8019740 <memp_malloc>
 8016210:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d103      	bne.n	8016220 <recv_udp+0x88>
    pbuf_free(p);
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f004 f9dd 	bl	801a5d8 <pbuf_free>
    return;
 801621e:	e02b      	b.n	8016278 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8016220:	69bb      	ldr	r3, [r7, #24]
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d002      	beq.n	8016238 <recv_udp+0xa0>
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	e000      	b.n	801623a <recv_udp+0xa2>
 8016238:	2300      	movs	r3, #0
 801623a:	69ba      	ldr	r2, [r7, #24]
 801623c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016242:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	891b      	ldrh	r3, [r3, #8]
 8016248:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	3310      	adds	r3, #16
 801624e:	69b9      	ldr	r1, [r7, #24]
 8016250:	4618      	mov	r0, r3
 8016252:	f00d fee5 	bl	8024020 <sys_mbox_trypost>
 8016256:	4603      	mov	r3, r0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d003      	beq.n	8016264 <recv_udp+0xcc>
    netbuf_delete(buf);
 801625c:	69b8      	ldr	r0, [r7, #24]
 801625e:	f001 fa9d 	bl	801779c <netbuf_delete>
    return;
 8016262:	e009      	b.n	8016278 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016268:	2b00      	cmp	r3, #0
 801626a:	d005      	beq.n	8016278 <recv_udp+0xe0>
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016270:	8afa      	ldrh	r2, [r7, #22]
 8016272:	2100      	movs	r1, #0
 8016274:	69f8      	ldr	r0, [r7, #28]
 8016276:	4798      	blx	r3
  }
}
 8016278:	3720      	adds	r7, #32
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	0802997c 	.word	0x0802997c
 8016284:	080299f4 	.word	0x080299f4
 8016288:	080299c0 	.word	0x080299c0
 801628c:	08029a18 	.word	0x08029a18
 8016290:	08029a38 	.word	0x08029a38

08016294 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b088      	sub	sp, #32
 8016298:	af00      	add	r7, sp, #0
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
 80162a0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d106      	bne.n	80162b6 <recv_tcp+0x22>
 80162a8:	4b36      	ldr	r3, [pc, #216]	@ (8016384 <recv_tcp+0xf0>)
 80162aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80162ae:	4936      	ldr	r1, [pc, #216]	@ (8016388 <recv_tcp+0xf4>)
 80162b0:	4836      	ldr	r0, [pc, #216]	@ (801638c <recv_tcp+0xf8>)
 80162b2:	f00f f8df 	bl	8025474 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d106      	bne.n	80162ca <recv_tcp+0x36>
 80162bc:	4b31      	ldr	r3, [pc, #196]	@ (8016384 <recv_tcp+0xf0>)
 80162be:	f240 122d 	movw	r2, #301	@ 0x12d
 80162c2:	4933      	ldr	r1, [pc, #204]	@ (8016390 <recv_tcp+0xfc>)
 80162c4:	4831      	ldr	r0, [pc, #196]	@ (801638c <recv_tcp+0xf8>)
 80162c6:	f00f f8d5 	bl	8025474 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80162ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d006      	beq.n	80162e0 <recv_tcp+0x4c>
 80162d2:	4b2c      	ldr	r3, [pc, #176]	@ (8016384 <recv_tcp+0xf0>)
 80162d4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80162d8:	492e      	ldr	r1, [pc, #184]	@ (8016394 <recv_tcp+0x100>)
 80162da:	482c      	ldr	r0, [pc, #176]	@ (801638c <recv_tcp+0xf8>)
 80162dc:	f00f f8ca 	bl	8025474 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d102      	bne.n	80162f0 <recv_tcp+0x5c>
    return ERR_VAL;
 80162ea:	f06f 0305 	mvn.w	r3, #5
 80162ee:	e045      	b.n	801637c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	68ba      	ldr	r2, [r7, #8]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d006      	beq.n	8016308 <recv_tcp+0x74>
 80162fa:	4b22      	ldr	r3, [pc, #136]	@ (8016384 <recv_tcp+0xf0>)
 80162fc:	f240 1235 	movw	r2, #309	@ 0x135
 8016300:	4925      	ldr	r1, [pc, #148]	@ (8016398 <recv_tcp+0x104>)
 8016302:	4822      	ldr	r0, [pc, #136]	@ (801638c <recv_tcp+0xf8>)
 8016304:	f00f f8b6 	bl	8025474 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	3310      	adds	r3, #16
 801630c:	4618      	mov	r0, r3
 801630e:	f00d fefc 	bl	802410a <sys_mbox_valid>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d10d      	bne.n	8016334 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d008      	beq.n	8016330 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	891b      	ldrh	r3, [r3, #8]
 8016322:	4619      	mov	r1, r3
 8016324:	68b8      	ldr	r0, [r7, #8]
 8016326:	f005 f855 	bl	801b3d4 <tcp_recved>
      pbuf_free(p);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f004 f954 	bl	801a5d8 <pbuf_free>
    }
    return ERR_OK;
 8016330:	2300      	movs	r3, #0
 8016332:	e023      	b.n	801637c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d005      	beq.n	8016346 <recv_tcp+0xb2>
    msg = p;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	891b      	ldrh	r3, [r3, #8]
 8016342:	83fb      	strh	r3, [r7, #30]
 8016344:	e003      	b.n	801634e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8016346:	4b15      	ldr	r3, [pc, #84]	@ (801639c <recv_tcp+0x108>)
 8016348:	61bb      	str	r3, [r7, #24]
    len = 0;
 801634a:	2300      	movs	r3, #0
 801634c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801634e:	697b      	ldr	r3, [r7, #20]
 8016350:	3310      	adds	r3, #16
 8016352:	69b9      	ldr	r1, [r7, #24]
 8016354:	4618      	mov	r0, r3
 8016356:	f00d fe63 	bl	8024020 <sys_mbox_trypost>
 801635a:	4603      	mov	r3, r0
 801635c:	2b00      	cmp	r3, #0
 801635e:	d002      	beq.n	8016366 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8016360:	f04f 33ff 	mov.w	r3, #4294967295
 8016364:	e00a      	b.n	801637c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801636a:	2b00      	cmp	r3, #0
 801636c:	d005      	beq.n	801637a <recv_tcp+0xe6>
 801636e:	697b      	ldr	r3, [r7, #20]
 8016370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016372:	8bfa      	ldrh	r2, [r7, #30]
 8016374:	2100      	movs	r1, #0
 8016376:	6978      	ldr	r0, [r7, #20]
 8016378:	4798      	blx	r3
  }

  return ERR_OK;
 801637a:	2300      	movs	r3, #0
}
 801637c:	4618      	mov	r0, r3
 801637e:	3720      	adds	r7, #32
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}
 8016384:	0802997c 	.word	0x0802997c
 8016388:	08029a58 	.word	0x08029a58
 801638c:	080299c0 	.word	0x080299c0
 8016390:	08029a7c 	.word	0x08029a7c
 8016394:	08029a9c 	.word	0x08029a9c
 8016398:	08029ab4 	.word	0x08029ab4
 801639c:	0802cf8e 	.word	0x0802cf8e

080163a0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d106      	bne.n	80163c2 <poll_tcp+0x22>
 80163b4:	4b29      	ldr	r3, [pc, #164]	@ (801645c <poll_tcp+0xbc>)
 80163b6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80163ba:	4929      	ldr	r1, [pc, #164]	@ (8016460 <poll_tcp+0xc0>)
 80163bc:	4829      	ldr	r0, [pc, #164]	@ (8016464 <poll_tcp+0xc4>)
 80163be:	f00f f859 	bl	8025474 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	785b      	ldrb	r3, [r3, #1]
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d104      	bne.n	80163d4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80163ca:	2101      	movs	r1, #1
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	f000 fe5d 	bl	801708c <lwip_netconn_do_writemore>
 80163d2:	e016      	b.n	8016402 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	785b      	ldrb	r3, [r3, #1]
 80163d8:	2b04      	cmp	r3, #4
 80163da:	d112      	bne.n	8016402 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	6a1b      	ldr	r3, [r3, #32]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00a      	beq.n	80163fa <poll_tcp+0x5a>
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	6a1b      	ldr	r3, [r3, #32]
 80163e8:	7a5b      	ldrb	r3, [r3, #9]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d005      	beq.n	80163fa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6a1b      	ldr	r3, [r3, #32]
 80163f2:	7a5a      	ldrb	r2, [r3, #9]
 80163f4:	3a01      	subs	r2, #1
 80163f6:	b2d2      	uxtb	r2, r2
 80163f8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80163fa:	2101      	movs	r1, #1
 80163fc:	68f8      	ldr	r0, [r7, #12]
 80163fe:	f000 fb3b 	bl	8016a78 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	7f1b      	ldrb	r3, [r3, #28]
 8016406:	f003 0310 	and.w	r3, r3, #16
 801640a:	2b00      	cmp	r3, #0
 801640c:	d021      	beq.n	8016452 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d01d      	beq.n	8016452 <poll_tcp+0xb2>
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801641e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8016422:	d316      	bcc.n	8016452 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801642c:	2b04      	cmp	r3, #4
 801642e:	d810      	bhi.n	8016452 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	7f1b      	ldrb	r3, [r3, #28]
 8016434:	f023 0310 	bic.w	r3, r3, #16
 8016438:	b2da      	uxtb	r2, r3
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016442:	2b00      	cmp	r3, #0
 8016444:	d005      	beq.n	8016452 <poll_tcp+0xb2>
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801644a:	2200      	movs	r2, #0
 801644c:	2102      	movs	r1, #2
 801644e:	68f8      	ldr	r0, [r7, #12]
 8016450:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016452:	2300      	movs	r3, #0
}
 8016454:	4618      	mov	r0, r3
 8016456:	3710      	adds	r7, #16
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	0802997c 	.word	0x0802997c
 8016460:	08029ad4 	.word	0x08029ad4
 8016464:	080299c0 	.word	0x080299c0

08016468 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b086      	sub	sp, #24
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	4613      	mov	r3, r2
 8016474:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d106      	bne.n	801648e <sent_tcp+0x26>
 8016480:	4b20      	ldr	r3, [pc, #128]	@ (8016504 <sent_tcp+0x9c>)
 8016482:	f240 1293 	movw	r2, #403	@ 0x193
 8016486:	4920      	ldr	r1, [pc, #128]	@ (8016508 <sent_tcp+0xa0>)
 8016488:	4820      	ldr	r0, [pc, #128]	@ (801650c <sent_tcp+0xa4>)
 801648a:	f00e fff3 	bl	8025474 <iprintf>

  if (conn) {
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d032      	beq.n	80164fa <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	785b      	ldrb	r3, [r3, #1]
 8016498:	2b01      	cmp	r3, #1
 801649a:	d104      	bne.n	80164a6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801649c:	2101      	movs	r1, #1
 801649e:	6978      	ldr	r0, [r7, #20]
 80164a0:	f000 fdf4 	bl	801708c <lwip_netconn_do_writemore>
 80164a4:	e007      	b.n	80164b6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	785b      	ldrb	r3, [r3, #1]
 80164aa:	2b04      	cmp	r3, #4
 80164ac:	d103      	bne.n	80164b6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80164ae:	2101      	movs	r1, #1
 80164b0:	6978      	ldr	r0, [r7, #20]
 80164b2:	f000 fae1 	bl	8016a78 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80164b6:	697b      	ldr	r3, [r7, #20]
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d01d      	beq.n	80164fa <sent_tcp+0x92>
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80164c6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80164ca:	d316      	bcc.n	80164fa <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80164d4:	2b04      	cmp	r3, #4
 80164d6:	d810      	bhi.n	80164fa <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	7f1b      	ldrb	r3, [r3, #28]
 80164dc:	f023 0310 	bic.w	r3, r3, #16
 80164e0:	b2da      	uxtb	r2, r3
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d005      	beq.n	80164fa <sent_tcp+0x92>
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164f2:	88fa      	ldrh	r2, [r7, #6]
 80164f4:	2102      	movs	r1, #2
 80164f6:	6978      	ldr	r0, [r7, #20]
 80164f8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80164fa:	2300      	movs	r3, #0
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3718      	adds	r7, #24
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	0802997c 	.word	0x0802997c
 8016508:	08029ad4 	.word	0x08029ad4
 801650c:	080299c0 	.word	0x080299c0

08016510 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b088      	sub	sp, #32
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	460b      	mov	r3, r1
 801651a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d106      	bne.n	8016534 <err_tcp+0x24>
 8016526:	4b5f      	ldr	r3, [pc, #380]	@ (80166a4 <err_tcp+0x194>)
 8016528:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801652c:	495e      	ldr	r1, [pc, #376]	@ (80166a8 <err_tcp+0x198>)
 801652e:	485f      	ldr	r0, [pc, #380]	@ (80166ac <err_tcp+0x19c>)
 8016530:	f00e ffa0 	bl	8025474 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8016534:	f00d ff04 	bl	8024340 <sys_arch_protect>
 8016538:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801653a:	69fb      	ldr	r3, [r7, #28]
 801653c:	2200      	movs	r2, #0
 801653e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	78fa      	ldrb	r2, [r7, #3]
 8016544:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8016546:	69fb      	ldr	r3, [r7, #28]
 8016548:	7f1b      	ldrb	r3, [r3, #28]
 801654a:	f043 0301 	orr.w	r3, r3, #1
 801654e:	b2da      	uxtb	r2, r3
 8016550:	69fb      	ldr	r3, [r7, #28]
 8016552:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8016554:	69fb      	ldr	r3, [r7, #28]
 8016556:	785b      	ldrb	r3, [r3, #1]
 8016558:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	2200      	movs	r2, #0
 801655e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8016560:	69b8      	ldr	r0, [r7, #24]
 8016562:	f00d fefb 	bl	802435c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801656a:	2b00      	cmp	r3, #0
 801656c:	d005      	beq.n	801657a <err_tcp+0x6a>
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016572:	2200      	movs	r2, #0
 8016574:	2104      	movs	r1, #4
 8016576:	69f8      	ldr	r0, [r7, #28]
 8016578:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801657a:	69fb      	ldr	r3, [r7, #28]
 801657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801657e:	2b00      	cmp	r3, #0
 8016580:	d005      	beq.n	801658e <err_tcp+0x7e>
 8016582:	69fb      	ldr	r3, [r7, #28]
 8016584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016586:	2200      	movs	r2, #0
 8016588:	2100      	movs	r1, #0
 801658a:	69f8      	ldr	r0, [r7, #28]
 801658c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016592:	2b00      	cmp	r3, #0
 8016594:	d005      	beq.n	80165a2 <err_tcp+0x92>
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801659a:	2200      	movs	r2, #0
 801659c:	2102      	movs	r1, #2
 801659e:	69f8      	ldr	r0, [r7, #28]
 80165a0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80165a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7ff fd86 	bl	80160b8 <lwip_netconn_err_to_msg>
 80165ac:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80165ae:	69fb      	ldr	r3, [r7, #28]
 80165b0:	3310      	adds	r3, #16
 80165b2:	4618      	mov	r0, r3
 80165b4:	f00d fda9 	bl	802410a <sys_mbox_valid>
 80165b8:	4603      	mov	r3, r0
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d005      	beq.n	80165ca <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	3310      	adds	r3, #16
 80165c2:	6939      	ldr	r1, [r7, #16]
 80165c4:	4618      	mov	r0, r3
 80165c6:	f00d fd2b 	bl	8024020 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80165ca:	69fb      	ldr	r3, [r7, #28]
 80165cc:	3314      	adds	r3, #20
 80165ce:	4618      	mov	r0, r3
 80165d0:	f00d fd9b 	bl	802410a <sys_mbox_valid>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d005      	beq.n	80165e6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	3314      	adds	r3, #20
 80165de:	6939      	ldr	r1, [r7, #16]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f00d fd1d 	bl	8024020 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80165e6:	7dfb      	ldrb	r3, [r7, #23]
 80165e8:	2b01      	cmp	r3, #1
 80165ea:	d005      	beq.n	80165f8 <err_tcp+0xe8>
 80165ec:	7dfb      	ldrb	r3, [r7, #23]
 80165ee:	2b04      	cmp	r3, #4
 80165f0:	d002      	beq.n	80165f8 <err_tcp+0xe8>
 80165f2:	7dfb      	ldrb	r3, [r7, #23]
 80165f4:	2b03      	cmp	r3, #3
 80165f6:	d143      	bne.n	8016680 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	7f1b      	ldrb	r3, [r3, #28]
 80165fc:	f003 0304 	and.w	r3, r3, #4
 8016600:	2b00      	cmp	r3, #0
 8016602:	bf14      	ite	ne
 8016604:	2301      	movne	r3, #1
 8016606:	2300      	moveq	r3, #0
 8016608:	b2db      	uxtb	r3, r3
 801660a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801660c:	69fb      	ldr	r3, [r7, #28]
 801660e:	7f1b      	ldrb	r3, [r3, #28]
 8016610:	f023 0304 	bic.w	r3, r3, #4
 8016614:	b2da      	uxtb	r2, r3
 8016616:	69fb      	ldr	r3, [r7, #28]
 8016618:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d13b      	bne.n	8016698 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	6a1b      	ldr	r3, [r3, #32]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d106      	bne.n	8016636 <err_tcp+0x126>
 8016628:	4b1e      	ldr	r3, [pc, #120]	@ (80166a4 <err_tcp+0x194>)
 801662a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801662e:	4920      	ldr	r1, [pc, #128]	@ (80166b0 <err_tcp+0x1a0>)
 8016630:	481e      	ldr	r0, [pc, #120]	@ (80166ac <err_tcp+0x19c>)
 8016632:	f00e ff1f 	bl	8025474 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8016636:	7dfb      	ldrb	r3, [r7, #23]
 8016638:	2b04      	cmp	r3, #4
 801663a:	d104      	bne.n	8016646 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	6a1b      	ldr	r3, [r3, #32]
 8016640:	2200      	movs	r2, #0
 8016642:	711a      	strb	r2, [r3, #4]
 8016644:	e003      	b.n	801664e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8016646:	69fb      	ldr	r3, [r7, #28]
 8016648:	6a1b      	ldr	r3, [r3, #32]
 801664a:	78fa      	ldrb	r2, [r7, #3]
 801664c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	6a1b      	ldr	r3, [r3, #32]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	330c      	adds	r3, #12
 8016656:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8016658:	68b8      	ldr	r0, [r7, #8]
 801665a:	f00d fde7 	bl	802422c <sys_sem_valid>
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	d106      	bne.n	8016672 <err_tcp+0x162>
 8016664:	4b0f      	ldr	r3, [pc, #60]	@ (80166a4 <err_tcp+0x194>)
 8016666:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801666a:	4912      	ldr	r1, [pc, #72]	@ (80166b4 <err_tcp+0x1a4>)
 801666c:	480f      	ldr	r0, [pc, #60]	@ (80166ac <err_tcp+0x19c>)
 801666e:	f00e ff01 	bl	8025474 <iprintf>
      conn->current_msg = NULL;
 8016672:	69fb      	ldr	r3, [r7, #28]
 8016674:	2200      	movs	r2, #0
 8016676:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8016678:	68b8      	ldr	r0, [r7, #8]
 801667a:	f00d fdbd 	bl	80241f8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801667e:	e00b      	b.n	8016698 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	6a1b      	ldr	r3, [r3, #32]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d008      	beq.n	801669a <err_tcp+0x18a>
 8016688:	4b06      	ldr	r3, [pc, #24]	@ (80166a4 <err_tcp+0x194>)
 801668a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 801668e:	490a      	ldr	r1, [pc, #40]	@ (80166b8 <err_tcp+0x1a8>)
 8016690:	4806      	ldr	r0, [pc, #24]	@ (80166ac <err_tcp+0x19c>)
 8016692:	f00e feef 	bl	8025474 <iprintf>
  }
}
 8016696:	e000      	b.n	801669a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8016698:	bf00      	nop
}
 801669a:	bf00      	nop
 801669c:	3720      	adds	r7, #32
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	0802997c 	.word	0x0802997c
 80166a8:	08029ad4 	.word	0x08029ad4
 80166ac:	080299c0 	.word	0x080299c0
 80166b0:	08029ae4 	.word	0x08029ae4
 80166b4:	08029b00 	.word	0x08029b00
 80166b8:	08029b1c 	.word	0x08029b1c

080166bc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	685b      	ldr	r3, [r3, #4]
 80166c8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80166ca:	6879      	ldr	r1, [r7, #4]
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f005 fd49 	bl	801c164 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80166d2:	490a      	ldr	r1, [pc, #40]	@ (80166fc <setup_tcp+0x40>)
 80166d4:	68f8      	ldr	r0, [r7, #12]
 80166d6:	f005 fd57 	bl	801c188 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80166da:	4909      	ldr	r1, [pc, #36]	@ (8016700 <setup_tcp+0x44>)
 80166dc:	68f8      	ldr	r0, [r7, #12]
 80166de:	f005 fd75 	bl	801c1cc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80166e2:	2202      	movs	r2, #2
 80166e4:	4907      	ldr	r1, [pc, #28]	@ (8016704 <setup_tcp+0x48>)
 80166e6:	68f8      	ldr	r0, [r7, #12]
 80166e8:	f005 fdcc 	bl	801c284 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80166ec:	4906      	ldr	r1, [pc, #24]	@ (8016708 <setup_tcp+0x4c>)
 80166ee:	68f8      	ldr	r0, [r7, #12]
 80166f0:	f005 fd8e 	bl	801c210 <tcp_err>
}
 80166f4:	bf00      	nop
 80166f6:	3710      	adds	r7, #16
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	08016295 	.word	0x08016295
 8016700:	08016469 	.word	0x08016469
 8016704:	080163a1 	.word	0x080163a1
 8016708:	08016511 	.word	0x08016511

0801670c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801670c:	b590      	push	{r4, r7, lr}
 801670e:	b085      	sub	sp, #20
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8016714:	2300      	movs	r3, #0
 8016716:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d006      	beq.n	8016730 <pcb_new+0x24>
 8016722:	4b2b      	ldr	r3, [pc, #172]	@ (80167d0 <pcb_new+0xc4>)
 8016724:	f240 2265 	movw	r2, #613	@ 0x265
 8016728:	492a      	ldr	r1, [pc, #168]	@ (80167d4 <pcb_new+0xc8>)
 801672a:	482b      	ldr	r0, [pc, #172]	@ (80167d8 <pcb_new+0xcc>)
 801672c:	f00e fea2 	bl	8025474 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801673a:	2b10      	cmp	r3, #16
 801673c:	d022      	beq.n	8016784 <pcb_new+0x78>
 801673e:	2b20      	cmp	r3, #32
 8016740:	d133      	bne.n	80167aa <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681c      	ldr	r4, [r3, #0]
 8016746:	7bfb      	ldrb	r3, [r7, #15]
 8016748:	4618      	mov	r0, r3
 801674a:	f00a ffce 	bl	80216ea <udp_new_ip_type>
 801674e:	4603      	mov	r3, r0
 8016750:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d02a      	beq.n	80167b2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	2b22      	cmp	r3, #34	@ 0x22
 8016764:	d104      	bne.n	8016770 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	2201      	movs	r2, #1
 801676e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	6858      	ldr	r0, [r3, #4]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	461a      	mov	r2, r3
 801677c:	4917      	ldr	r1, [pc, #92]	@ (80167dc <pcb_new+0xd0>)
 801677e:	f00a ff3b 	bl	80215f8 <udp_recv>
      }
      break;
 8016782:	e016      	b.n	80167b2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681c      	ldr	r4, [r3, #0]
 8016788:	7bfb      	ldrb	r3, [r7, #15]
 801678a:	4618      	mov	r0, r3
 801678c:	f005 fcdc 	bl	801c148 <tcp_new_ip_type>
 8016790:	4603      	mov	r3, r0
 8016792:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d00b      	beq.n	80167b6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7ff ff8a 	bl	80166bc <setup_tcp>
      }
      break;
 80167a8:	e005      	b.n	80167b6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	22fa      	movs	r2, #250	@ 0xfa
 80167ae:	711a      	strb	r2, [r3, #4]
      return;
 80167b0:	e00a      	b.n	80167c8 <pcb_new+0xbc>
      break;
 80167b2:	bf00      	nop
 80167b4:	e000      	b.n	80167b8 <pcb_new+0xac>
      break;
 80167b6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d102      	bne.n	80167c8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	22ff      	movs	r2, #255	@ 0xff
 80167c6:	711a      	strb	r2, [r3, #4]
  }
}
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd90      	pop	{r4, r7, pc}
 80167ce:	bf00      	nop
 80167d0:	0802997c 	.word	0x0802997c
 80167d4:	08029b60 	.word	0x08029b60
 80167d8:	080299c0 	.word	0x080299c0
 80167dc:	08016199 	.word	0x08016199

080167e0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b084      	sub	sp, #16
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2200      	movs	r2, #0
 80167f0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d102      	bne.n	8016802 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	f7ff ff85 	bl	801670c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8016802:	bf00      	nop
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
	...

0801680c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b086      	sub	sp, #24
 8016810:	af00      	add	r7, sp, #0
 8016812:	4603      	mov	r3, r0
 8016814:	6039      	str	r1, [r7, #0]
 8016816:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8016818:	2300      	movs	r3, #0
 801681a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801681c:	2007      	movs	r0, #7
 801681e:	f002 ff8f 	bl	8019740 <memp_malloc>
 8016822:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d101      	bne.n	801682e <netconn_alloc+0x22>
    return NULL;
 801682a:	2300      	movs	r3, #0
 801682c:	e052      	b.n	80168d4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	2200      	movs	r2, #0
 8016832:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	79fa      	ldrb	r2, [r7, #7]
 8016838:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2200      	movs	r2, #0
 801683e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8016840:	79fb      	ldrb	r3, [r7, #7]
 8016842:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016846:	2b10      	cmp	r3, #16
 8016848:	d004      	beq.n	8016854 <netconn_alloc+0x48>
 801684a:	2b20      	cmp	r3, #32
 801684c:	d105      	bne.n	801685a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801684e:	2306      	movs	r3, #6
 8016850:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8016852:	e00a      	b.n	801686a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8016854:	2306      	movs	r3, #6
 8016856:	617b      	str	r3, [r7, #20]
      break;
 8016858:	e007      	b.n	801686a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801685a:	4b20      	ldr	r3, [pc, #128]	@ (80168dc <netconn_alloc+0xd0>)
 801685c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8016860:	491f      	ldr	r1, [pc, #124]	@ (80168e0 <netconn_alloc+0xd4>)
 8016862:	4820      	ldr	r0, [pc, #128]	@ (80168e4 <netconn_alloc+0xd8>)
 8016864:	f00e fe06 	bl	8025474 <iprintf>
      goto free_and_return;
 8016868:	e02f      	b.n	80168ca <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	3310      	adds	r3, #16
 801686e:	6979      	ldr	r1, [r7, #20]
 8016870:	4618      	mov	r0, r3
 8016872:	f00d fba1 	bl	8023fb8 <sys_mbox_new>
 8016876:	4603      	mov	r3, r0
 8016878:	2b00      	cmp	r3, #0
 801687a:	d125      	bne.n	80168c8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	330c      	adds	r3, #12
 8016880:	2100      	movs	r1, #0
 8016882:	4618      	mov	r0, r3
 8016884:	f00d fc5f 	bl	8024146 <sys_sem_new>
 8016888:	4603      	mov	r3, r0
 801688a:	2b00      	cmp	r3, #0
 801688c:	d005      	beq.n	801689a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	3310      	adds	r3, #16
 8016892:	4618      	mov	r0, r3
 8016894:	f00d fbb2 	bl	8023ffc <sys_mbox_free>
    goto free_and_return;
 8016898:	e017      	b.n	80168ca <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	3314      	adds	r3, #20
 801689e:	4618      	mov	r0, r3
 80168a0:	f00d fc44 	bl	802412c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2200      	movs	r2, #0
 80168a8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f04f 32ff 	mov.w	r2, #4294967295
 80168b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	683a      	ldr	r2, [r7, #0]
 80168b6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2200      	movs	r2, #0
 80168bc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	7cfa      	ldrb	r2, [r7, #19]
 80168c2:	771a      	strb	r2, [r3, #28]
  return conn;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	e005      	b.n	80168d4 <netconn_alloc+0xc8>
    goto free_and_return;
 80168c8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80168ca:	68f9      	ldr	r1, [r7, #12]
 80168cc:	2007      	movs	r0, #7
 80168ce:	f002 ffad 	bl	801982c <memp_free>
  return NULL;
 80168d2:	2300      	movs	r3, #0
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3718      	adds	r7, #24
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	0802997c 	.word	0x0802997c
 80168e0:	08029b80 	.word	0x08029b80
 80168e4:	080299c0 	.word	0x080299c0

080168e8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d006      	beq.n	8016906 <netconn_free+0x1e>
 80168f8:	4b1b      	ldr	r3, [pc, #108]	@ (8016968 <netconn_free+0x80>)
 80168fa:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80168fe:	491b      	ldr	r1, [pc, #108]	@ (801696c <netconn_free+0x84>)
 8016900:	481b      	ldr	r0, [pc, #108]	@ (8016970 <netconn_free+0x88>)
 8016902:	f00e fdb7 	bl	8025474 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	3310      	adds	r3, #16
 801690a:	4618      	mov	r0, r3
 801690c:	f00d fbfd 	bl	802410a <sys_mbox_valid>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	d006      	beq.n	8016924 <netconn_free+0x3c>
 8016916:	4b14      	ldr	r3, [pc, #80]	@ (8016968 <netconn_free+0x80>)
 8016918:	f240 3223 	movw	r2, #803	@ 0x323
 801691c:	4915      	ldr	r1, [pc, #84]	@ (8016974 <netconn_free+0x8c>)
 801691e:	4814      	ldr	r0, [pc, #80]	@ (8016970 <netconn_free+0x88>)
 8016920:	f00e fda8 	bl	8025474 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	3314      	adds	r3, #20
 8016928:	4618      	mov	r0, r3
 801692a:	f00d fbee 	bl	802410a <sys_mbox_valid>
 801692e:	4603      	mov	r3, r0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d006      	beq.n	8016942 <netconn_free+0x5a>
 8016934:	4b0c      	ldr	r3, [pc, #48]	@ (8016968 <netconn_free+0x80>)
 8016936:	f240 3226 	movw	r2, #806	@ 0x326
 801693a:	490f      	ldr	r1, [pc, #60]	@ (8016978 <netconn_free+0x90>)
 801693c:	480c      	ldr	r0, [pc, #48]	@ (8016970 <netconn_free+0x88>)
 801693e:	f00e fd99 	bl	8025474 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	330c      	adds	r3, #12
 8016946:	4618      	mov	r0, r3
 8016948:	f00d fc63 	bl	8024212 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	330c      	adds	r3, #12
 8016950:	4618      	mov	r0, r3
 8016952:	f00d fc7c 	bl	802424e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8016956:	6879      	ldr	r1, [r7, #4]
 8016958:	2007      	movs	r0, #7
 801695a:	f002 ff67 	bl	801982c <memp_free>
}
 801695e:	bf00      	nop
 8016960:	3708      	adds	r7, #8
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	0802997c 	.word	0x0802997c
 801696c:	08029ba8 	.word	0x08029ba8
 8016970:	080299c0 	.word	0x080299c0
 8016974:	08029bd8 	.word	0x08029bd8
 8016978:	08029c14 	.word	0x08029c14

0801697c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b086      	sub	sp, #24
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	3310      	adds	r3, #16
 8016988:	4618      	mov	r0, r3
 801698a:	f00d fbbe 	bl	802410a <sys_mbox_valid>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d02f      	beq.n	80169f4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016994:	e018      	b.n	80169c8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801699e:	2b10      	cmp	r3, #16
 80169a0:	d10e      	bne.n	80169c0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	f107 020f 	add.w	r2, r7, #15
 80169a8:	4611      	mov	r1, r2
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7ff fbba 	bl	8016124 <lwip_netconn_is_err_msg>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d108      	bne.n	80169c8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	4618      	mov	r0, r3
 80169ba:	f003 fe0d 	bl	801a5d8 <pbuf_free>
 80169be:	e003      	b.n	80169c8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f000 feea 	bl	801779c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	3310      	adds	r3, #16
 80169cc:	f107 0210 	add.w	r2, r7, #16
 80169d0:	4611      	mov	r1, r2
 80169d2:	4618      	mov	r0, r3
 80169d4:	f00d fb7d 	bl	80240d2 <sys_arch_mbox_tryfetch>
 80169d8:	4603      	mov	r3, r0
 80169da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169de:	d1da      	bne.n	8016996 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	3310      	adds	r3, #16
 80169e4:	4618      	mov	r0, r3
 80169e6:	f00d fb09 	bl	8023ffc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	3310      	adds	r3, #16
 80169ee:	4618      	mov	r0, r3
 80169f0:	f00d fb9c 	bl	802412c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	3314      	adds	r3, #20
 80169f8:	4618      	mov	r0, r3
 80169fa:	f00d fb86 	bl	802410a <sys_mbox_valid>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d034      	beq.n	8016a6e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a04:	e01d      	b.n	8016a42 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	f107 020e 	add.w	r2, r7, #14
 8016a0c:	4611      	mov	r1, r2
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7ff fb88 	bl	8016124 <lwip_netconn_is_err_msg>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d113      	bne.n	8016a42 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8016a1a:	693b      	ldr	r3, [r7, #16]
 8016a1c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8016a1e:	6978      	ldr	r0, [r7, #20]
 8016a20:	f7ff ffac 	bl	801697c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d007      	beq.n	8016a3c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f004 fbd1 	bl	801b1d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	2200      	movs	r2, #0
 8016a3a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8016a3c:	6978      	ldr	r0, [r7, #20]
 8016a3e:	f7ff ff53 	bl	80168e8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	3314      	adds	r3, #20
 8016a46:	f107 0210 	add.w	r2, r7, #16
 8016a4a:	4611      	mov	r1, r2
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f00d fb40 	bl	80240d2 <sys_arch_mbox_tryfetch>
 8016a52:	4603      	mov	r3, r0
 8016a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a58:	d1d5      	bne.n	8016a06 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	3314      	adds	r3, #20
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f00d facc 	bl	8023ffc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	3314      	adds	r3, #20
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f00d fb5f 	bl	802412c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8016a6e:	bf00      	nop
 8016a70:	3718      	adds	r7, #24
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}
	...

08016a78 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b086      	sub	sp, #24
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	460b      	mov	r3, r1
 8016a82:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8016a84:	2300      	movs	r3, #0
 8016a86:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d106      	bne.n	8016a9c <lwip_netconn_do_close_internal+0x24>
 8016a8e:	4b87      	ldr	r3, [pc, #540]	@ (8016cac <lwip_netconn_do_close_internal+0x234>)
 8016a90:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8016a94:	4986      	ldr	r1, [pc, #536]	@ (8016cb0 <lwip_netconn_do_close_internal+0x238>)
 8016a96:	4887      	ldr	r0, [pc, #540]	@ (8016cb4 <lwip_netconn_do_close_internal+0x23c>)
 8016a98:	f00e fcec 	bl	8025474 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016aa4:	2b10      	cmp	r3, #16
 8016aa6:	d006      	beq.n	8016ab6 <lwip_netconn_do_close_internal+0x3e>
 8016aa8:	4b80      	ldr	r3, [pc, #512]	@ (8016cac <lwip_netconn_do_close_internal+0x234>)
 8016aaa:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8016aae:	4982      	ldr	r1, [pc, #520]	@ (8016cb8 <lwip_netconn_do_close_internal+0x240>)
 8016ab0:	4880      	ldr	r0, [pc, #512]	@ (8016cb4 <lwip_netconn_do_close_internal+0x23c>)
 8016ab2:	f00e fcdf 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	785b      	ldrb	r3, [r3, #1]
 8016aba:	2b04      	cmp	r3, #4
 8016abc:	d006      	beq.n	8016acc <lwip_netconn_do_close_internal+0x54>
 8016abe:	4b7b      	ldr	r3, [pc, #492]	@ (8016cac <lwip_netconn_do_close_internal+0x234>)
 8016ac0:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8016ac4:	497d      	ldr	r1, [pc, #500]	@ (8016cbc <lwip_netconn_do_close_internal+0x244>)
 8016ac6:	487b      	ldr	r0, [pc, #492]	@ (8016cb4 <lwip_netconn_do_close_internal+0x23c>)
 8016ac8:	f00e fcd4 	bl	8025474 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d106      	bne.n	8016ae2 <lwip_netconn_do_close_internal+0x6a>
 8016ad4:	4b75      	ldr	r3, [pc, #468]	@ (8016cac <lwip_netconn_do_close_internal+0x234>)
 8016ad6:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8016ada:	4979      	ldr	r1, [pc, #484]	@ (8016cc0 <lwip_netconn_do_close_internal+0x248>)
 8016adc:	4875      	ldr	r0, [pc, #468]	@ (8016cb4 <lwip_netconn_do_close_internal+0x23c>)
 8016ade:	f00e fcc9 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6a1b      	ldr	r3, [r3, #32]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d106      	bne.n	8016af8 <lwip_netconn_do_close_internal+0x80>
 8016aea:	4b70      	ldr	r3, [pc, #448]	@ (8016cac <lwip_netconn_do_close_internal+0x234>)
 8016aec:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8016af0:	4974      	ldr	r1, [pc, #464]	@ (8016cc4 <lwip_netconn_do_close_internal+0x24c>)
 8016af2:	4870      	ldr	r0, [pc, #448]	@ (8016cb4 <lwip_netconn_do_close_internal+0x23c>)
 8016af4:	f00e fcbe 	bl	8025474 <iprintf>

  tpcb = conn->pcb.tcp;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6a1b      	ldr	r3, [r3, #32]
 8016b02:	7a1b      	ldrb	r3, [r3, #8]
 8016b04:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8016b06:	7bfb      	ldrb	r3, [r7, #15]
 8016b08:	f003 0301 	and.w	r3, r3, #1
 8016b0c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8016b0e:	7bfb      	ldrb	r3, [r7, #15]
 8016b10:	f003 0302 	and.w	r3, r3, #2
 8016b14:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8016b16:	7bfb      	ldrb	r3, [r7, #15]
 8016b18:	2b03      	cmp	r3, #3
 8016b1a:	d102      	bne.n	8016b22 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	75bb      	strb	r3, [r7, #22]
 8016b20:	e01f      	b.n	8016b62 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8016b22:	7bbb      	ldrb	r3, [r7, #14]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00e      	beq.n	8016b46 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8016b2c:	2b05      	cmp	r3, #5
 8016b2e:	d007      	beq.n	8016b40 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8016b34:	2b06      	cmp	r3, #6
 8016b36:	d003      	beq.n	8016b40 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8016b3c:	2b08      	cmp	r3, #8
 8016b3e:	d102      	bne.n	8016b46 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016b40:	2301      	movs	r3, #1
 8016b42:	75bb      	strb	r3, [r7, #22]
 8016b44:	e00d      	b.n	8016b62 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8016b46:	7b7b      	ldrb	r3, [r7, #13]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d008      	beq.n	8016b5e <lwip_netconn_do_close_internal+0xe6>
 8016b4c:	693b      	ldr	r3, [r7, #16]
 8016b4e:	8b5b      	ldrh	r3, [r3, #26]
 8016b50:	f003 0310 	and.w	r3, r3, #16
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d002      	beq.n	8016b5e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	75bb      	strb	r3, [r7, #22]
 8016b5c:	e001      	b.n	8016b62 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8016b62:	7dbb      	ldrb	r3, [r7, #22]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d003      	beq.n	8016b70 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8016b68:	2100      	movs	r1, #0
 8016b6a:	6938      	ldr	r0, [r7, #16]
 8016b6c:	f005 fafa 	bl	801c164 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	7d1b      	ldrb	r3, [r3, #20]
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	d104      	bne.n	8016b82 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8016b78:	2100      	movs	r1, #0
 8016b7a:	6938      	ldr	r0, [r7, #16]
 8016b7c:	f005 fb6a 	bl	801c254 <tcp_accept>
 8016b80:	e01d      	b.n	8016bbe <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8016b82:	7bbb      	ldrb	r3, [r7, #14]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d007      	beq.n	8016b98 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8016b88:	2100      	movs	r1, #0
 8016b8a:	6938      	ldr	r0, [r7, #16]
 8016b8c:	f005 fafc 	bl	801c188 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8016b90:	2100      	movs	r1, #0
 8016b92:	6938      	ldr	r0, [r7, #16]
 8016b94:	f005 fb5e 	bl	801c254 <tcp_accept>
    }
    if (shut_tx) {
 8016b98:	7b7b      	ldrb	r3, [r7, #13]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d003      	beq.n	8016ba6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8016b9e:	2100      	movs	r1, #0
 8016ba0:	6938      	ldr	r0, [r7, #16]
 8016ba2:	f005 fb13 	bl	801c1cc <tcp_sent>
    }
    if (shut_close) {
 8016ba6:	7dbb      	ldrb	r3, [r7, #22]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d008      	beq.n	8016bbe <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8016bac:	2200      	movs	r2, #0
 8016bae:	2100      	movs	r1, #0
 8016bb0:	6938      	ldr	r0, [r7, #16]
 8016bb2:	f005 fb67 	bl	801c284 <tcp_poll>
      tcp_err(tpcb, NULL);
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	6938      	ldr	r0, [r7, #16]
 8016bba:	f005 fb29 	bl	801c210 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8016bbe:	7dbb      	ldrb	r3, [r7, #22]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d005      	beq.n	8016bd0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8016bc4:	6938      	ldr	r0, [r7, #16]
 8016bc6:	f004 f9c1 	bl	801af4c <tcp_close>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	75fb      	strb	r3, [r7, #23]
 8016bce:	e007      	b.n	8016be0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016bd0:	7bbb      	ldrb	r3, [r7, #14]
 8016bd2:	7b7a      	ldrb	r2, [r7, #13]
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	6938      	ldr	r0, [r7, #16]
 8016bd8:	f004 f9e4 	bl	801afa4 <tcp_shutdown>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d102      	bne.n	8016bee <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016be8:	2301      	movs	r3, #1
 8016bea:	757b      	strb	r3, [r7, #21]
 8016bec:	e016      	b.n	8016c1c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8016bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bf6:	d10f      	bne.n	8016c18 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6a1b      	ldr	r3, [r3, #32]
 8016bfc:	7a5b      	ldrb	r3, [r3, #9]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d10c      	bne.n	8016c1c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8016c02:	2301      	movs	r3, #1
 8016c04:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8016c06:	7dbb      	ldrb	r3, [r7, #22]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d007      	beq.n	8016c1c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8016c0c:	6938      	ldr	r0, [r7, #16]
 8016c0e:	f004 fae3 	bl	801b1d8 <tcp_abort>
          err = ERR_OK;
 8016c12:	2300      	movs	r3, #0
 8016c14:	75fb      	strb	r3, [r7, #23]
 8016c16:	e001      	b.n	8016c1c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8016c1c:	7d7b      	ldrb	r3, [r7, #21]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d052      	beq.n	8016cc8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6a1b      	ldr	r3, [r3, #32]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	330c      	adds	r3, #12
 8016c2a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a1b      	ldr	r3, [r3, #32]
 8016c30:	7dfa      	ldrb	r2, [r7, #23]
 8016c32:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2200      	movs	r2, #0
 8016c38:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d129      	bne.n	8016c9c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016c48:	7dbb      	ldrb	r3, [r7, #22]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d00c      	beq.n	8016c68 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2200      	movs	r2, #0
 8016c52:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d005      	beq.n	8016c68 <lwip_netconn_do_close_internal+0x1f0>
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c60:	2200      	movs	r2, #0
 8016c62:	2104      	movs	r1, #4
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	4798      	blx	r3
      }
      if (shut_rx) {
 8016c68:	7bbb      	ldrb	r3, [r7, #14]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d009      	beq.n	8016c82 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d005      	beq.n	8016c82 <lwip_netconn_do_close_internal+0x20a>
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	4798      	blx	r3
      }
      if (shut_tx) {
 8016c82:	7b7b      	ldrb	r3, [r7, #13]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d009      	beq.n	8016c9c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d005      	beq.n	8016c9c <lwip_netconn_do_close_internal+0x224>
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c94:	2200      	movs	r2, #0
 8016c96:	2102      	movs	r1, #2
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016c9c:	78fb      	ldrb	r3, [r7, #3]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d002      	beq.n	8016ca8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8016ca2:	68b8      	ldr	r0, [r7, #8]
 8016ca4:	f00d faa8 	bl	80241f8 <sys_sem_signal>
    }
    return ERR_OK;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	e03c      	b.n	8016d26 <lwip_netconn_do_close_internal+0x2ae>
 8016cac:	0802997c 	.word	0x0802997c
 8016cb0:	08029c50 	.word	0x08029c50
 8016cb4:	080299c0 	.word	0x080299c0
 8016cb8:	08029c60 	.word	0x08029c60
 8016cbc:	08029c80 	.word	0x08029c80
 8016cc0:	08029ca4 	.word	0x08029ca4
 8016cc4:	08029ae4 	.word	0x08029ae4
  }
  if (!close_finished) {
 8016cc8:	7d7b      	ldrb	r3, [r7, #21]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d11e      	bne.n	8016d0c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	7d1b      	ldrb	r3, [r3, #20]
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d106      	bne.n	8016ce4 <lwip_netconn_do_close_internal+0x26c>
 8016cd6:	4b16      	ldr	r3, [pc, #88]	@ (8016d30 <lwip_netconn_do_close_internal+0x2b8>)
 8016cd8:	f240 4241 	movw	r2, #1089	@ 0x441
 8016cdc:	4915      	ldr	r1, [pc, #84]	@ (8016d34 <lwip_netconn_do_close_internal+0x2bc>)
 8016cde:	4816      	ldr	r0, [pc, #88]	@ (8016d38 <lwip_netconn_do_close_internal+0x2c0>)
 8016ce0:	f00e fbc8 	bl	8025474 <iprintf>
    if (shut_tx) {
 8016ce4:	7b7b      	ldrb	r3, [r7, #13]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d003      	beq.n	8016cf2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8016cea:	4914      	ldr	r1, [pc, #80]	@ (8016d3c <lwip_netconn_do_close_internal+0x2c4>)
 8016cec:	6938      	ldr	r0, [r7, #16]
 8016cee:	f005 fa6d 	bl	801c1cc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	4912      	ldr	r1, [pc, #72]	@ (8016d40 <lwip_netconn_do_close_internal+0x2c8>)
 8016cf6:	6938      	ldr	r0, [r7, #16]
 8016cf8:	f005 fac4 	bl	801c284 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8016cfc:	4911      	ldr	r1, [pc, #68]	@ (8016d44 <lwip_netconn_do_close_internal+0x2cc>)
 8016cfe:	6938      	ldr	r0, [r7, #16]
 8016d00:	f005 fa86 	bl	801c210 <tcp_err>
    tcp_arg(tpcb, conn);
 8016d04:	6879      	ldr	r1, [r7, #4]
 8016d06:	6938      	ldr	r0, [r7, #16]
 8016d08:	f005 fa2c 	bl	801c164 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8016d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d106      	bne.n	8016d22 <lwip_netconn_do_close_internal+0x2aa>
 8016d14:	4b06      	ldr	r3, [pc, #24]	@ (8016d30 <lwip_netconn_do_close_internal+0x2b8>)
 8016d16:	f240 424d 	movw	r2, #1101	@ 0x44d
 8016d1a:	490b      	ldr	r1, [pc, #44]	@ (8016d48 <lwip_netconn_do_close_internal+0x2d0>)
 8016d1c:	4806      	ldr	r0, [pc, #24]	@ (8016d38 <lwip_netconn_do_close_internal+0x2c0>)
 8016d1e:	f00e fba9 	bl	8025474 <iprintf>
  return err;
 8016d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3718      	adds	r7, #24
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	0802997c 	.word	0x0802997c
 8016d34:	08029cb8 	.word	0x08029cb8
 8016d38:	080299c0 	.word	0x080299c0
 8016d3c:	08016469 	.word	0x08016469
 8016d40:	080163a1 	.word	0x080163a1
 8016d44:	08016511 	.word	0x08016511
 8016d48:	08029cdc 	.word	0x08029cdc

08016d4c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b084      	sub	sp, #16
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	785b      	ldrb	r3, [r3, #1]
 8016d5e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8016d60:	7afb      	ldrb	r3, [r7, #11]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00d      	beq.n	8016d82 <lwip_netconn_do_delconn+0x36>
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016d70:	2b10      	cmp	r3, #16
 8016d72:	d006      	beq.n	8016d82 <lwip_netconn_do_delconn+0x36>
 8016d74:	4b60      	ldr	r3, [pc, #384]	@ (8016ef8 <lwip_netconn_do_delconn+0x1ac>)
 8016d76:	f240 425e 	movw	r2, #1118	@ 0x45e
 8016d7a:	4960      	ldr	r1, [pc, #384]	@ (8016efc <lwip_netconn_do_delconn+0x1b0>)
 8016d7c:	4860      	ldr	r0, [pc, #384]	@ (8016f00 <lwip_netconn_do_delconn+0x1b4>)
 8016d7e:	f00e fb79 	bl	8025474 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8016d82:	7afb      	ldrb	r3, [r7, #11]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d005      	beq.n	8016d94 <lwip_netconn_do_delconn+0x48>
 8016d88:	7afb      	ldrb	r3, [r7, #11]
 8016d8a:	2b02      	cmp	r3, #2
 8016d8c:	d002      	beq.n	8016d94 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8016d8e:	7afb      	ldrb	r3, [r7, #11]
 8016d90:	2b03      	cmp	r3, #3
 8016d92:	d109      	bne.n	8016da8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8016d94:	7afb      	ldrb	r3, [r7, #11]
 8016d96:	2b03      	cmp	r3, #3
 8016d98:	d10a      	bne.n	8016db0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	7f1b      	ldrb	r3, [r3, #28]
 8016da0:	f003 0304 	and.w	r3, r3, #4
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d103      	bne.n	8016db0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	22fb      	movs	r2, #251	@ 0xfb
 8016dac:	711a      	strb	r2, [r3, #4]
 8016dae:	e097      	b.n	8016ee0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016db0:	7afb      	ldrb	r3, [r7, #11]
 8016db2:	2b03      	cmp	r3, #3
 8016db4:	d10d      	bne.n	8016dd2 <lwip_netconn_do_delconn+0x86>
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	7f1b      	ldrb	r3, [r3, #28]
 8016dbc:	f003 0304 	and.w	r3, r3, #4
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d106      	bne.n	8016dd2 <lwip_netconn_do_delconn+0x86>
 8016dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8016ef8 <lwip_netconn_do_delconn+0x1ac>)
 8016dc6:	f240 427a 	movw	r2, #1146	@ 0x47a
 8016dca:	494e      	ldr	r1, [pc, #312]	@ (8016f04 <lwip_netconn_do_delconn+0x1b8>)
 8016dcc:	484c      	ldr	r0, [pc, #304]	@ (8016f00 <lwip_netconn_do_delconn+0x1b4>)
 8016dce:	f00e fb51 	bl	8025474 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ff fdcd 	bl	801697c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d05f      	beq.n	8016eac <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016df6:	2b10      	cmp	r3, #16
 8016df8:	d00d      	beq.n	8016e16 <lwip_netconn_do_delconn+0xca>
 8016dfa:	2b20      	cmp	r3, #32
 8016dfc:	d151      	bne.n	8016ea2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f00a fc12 	bl	8021638 <udp_remove>
          break;
 8016e14:	e046      	b.n	8016ea4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	6a1b      	ldr	r3, [r3, #32]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d006      	beq.n	8016e2e <lwip_netconn_do_delconn+0xe2>
 8016e20:	4b35      	ldr	r3, [pc, #212]	@ (8016ef8 <lwip_netconn_do_delconn+0x1ac>)
 8016e22:	f240 4294 	movw	r2, #1172	@ 0x494
 8016e26:	4938      	ldr	r1, [pc, #224]	@ (8016f08 <lwip_netconn_do_delconn+0x1bc>)
 8016e28:	4835      	ldr	r0, [pc, #212]	@ (8016f00 <lwip_netconn_do_delconn+0x1b4>)
 8016e2a:	f00e fb23 	bl	8025474 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2204      	movs	r2, #4
 8016e34:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	2203      	movs	r2, #3
 8016e3a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	68fa      	ldr	r2, [r7, #12]
 8016e42:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2100      	movs	r1, #0
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ff fe14 	bl	8016a78 <lwip_netconn_do_close_internal>
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d04b      	beq.n	8016eee <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	785b      	ldrb	r3, [r3, #1]
 8016e5c:	2b04      	cmp	r3, #4
 8016e5e:	d006      	beq.n	8016e6e <lwip_netconn_do_delconn+0x122>
 8016e60:	4b25      	ldr	r3, [pc, #148]	@ (8016ef8 <lwip_netconn_do_delconn+0x1ac>)
 8016e62:	f240 429a 	movw	r2, #1178	@ 0x49a
 8016e66:	4929      	ldr	r1, [pc, #164]	@ (8016f0c <lwip_netconn_do_delconn+0x1c0>)
 8016e68:	4825      	ldr	r0, [pc, #148]	@ (8016f00 <lwip_netconn_do_delconn+0x1b4>)
 8016e6a:	f00e fb03 	bl	8025474 <iprintf>
            UNLOCK_TCPIP_CORE();
 8016e6e:	4828      	ldr	r0, [pc, #160]	@ (8016f10 <lwip_netconn_do_delconn+0x1c4>)
 8016e70:	f00d fa33 	bl	80242da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	330c      	adds	r3, #12
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f00d f98a 	bl	8024196 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8016e82:	4823      	ldr	r0, [pc, #140]	@ (8016f10 <lwip_netconn_do_delconn+0x1c4>)
 8016e84:	f00d fa1a 	bl	80242bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	785b      	ldrb	r3, [r3, #1]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d02d      	beq.n	8016eee <lwip_netconn_do_delconn+0x1a2>
 8016e92:	4b19      	ldr	r3, [pc, #100]	@ (8016ef8 <lwip_netconn_do_delconn+0x1ac>)
 8016e94:	f240 429e 	movw	r2, #1182	@ 0x49e
 8016e98:	491c      	ldr	r1, [pc, #112]	@ (8016f0c <lwip_netconn_do_delconn+0x1c0>)
 8016e9a:	4819      	ldr	r0, [pc, #100]	@ (8016f00 <lwip_netconn_do_delconn+0x1b4>)
 8016e9c:	f00e faea 	bl	8025474 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8016ea0:	e025      	b.n	8016eee <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8016ea2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d007      	beq.n	8016ec6 <lwip_netconn_do_delconn+0x17a>
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ebc:	68fa      	ldr	r2, [r7, #12]
 8016ebe:	6810      	ldr	r0, [r2, #0]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d007      	beq.n	8016ee0 <lwip_netconn_do_delconn+0x194>
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ed6:	68fa      	ldr	r2, [r7, #12]
 8016ed8:	6810      	ldr	r0, [r2, #0]
 8016eda:	2200      	movs	r2, #0
 8016edc:	2102      	movs	r1, #2
 8016ede:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	330c      	adds	r3, #12
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f00d f9a0 	bl	802422c <sys_sem_valid>
 8016eec:	e000      	b.n	8016ef0 <lwip_netconn_do_delconn+0x1a4>
          return;
 8016eee:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016ef0:	3710      	adds	r7, #16
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	0802997c 	.word	0x0802997c
 8016efc:	08029cec 	.word	0x08029cec
 8016f00:	080299c0 	.word	0x080299c0
 8016f04:	08029d00 	.word	0x08029d00
 8016f08:	08029d20 	.word	0x08029d20
 8016f0c:	08029d3c 	.word	0x08029d3c
 8016f10:	24008d60 	.word	0x24008d60

08016f14 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b084      	sub	sp, #16
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d025      	beq.n	8016f76 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	781b      	ldrb	r3, [r3, #0]
 8016f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016f34:	2b10      	cmp	r3, #16
 8016f36:	d00e      	beq.n	8016f56 <lwip_netconn_do_bind+0x42>
 8016f38:	2b20      	cmp	r3, #32
 8016f3a:	d119      	bne.n	8016f70 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	6858      	ldr	r0, [r3, #4]
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	6899      	ldr	r1, [r3, #8]
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	899b      	ldrh	r3, [r3, #12]
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	f00a facc 	bl	80214e8 <udp_bind>
 8016f50:	4603      	mov	r3, r0
 8016f52:	73fb      	strb	r3, [r7, #15]
        break;
 8016f54:	e011      	b.n	8016f7a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	6858      	ldr	r0, [r3, #4]
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	6899      	ldr	r1, [r3, #8]
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	899b      	ldrh	r3, [r3, #12]
 8016f64:	461a      	mov	r2, r3
 8016f66:	f004 f943 	bl	801b1f0 <tcp_bind>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8016f6e:	e004      	b.n	8016f7a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8016f70:	23fa      	movs	r3, #250	@ 0xfa
 8016f72:	73fb      	strb	r3, [r7, #15]
        break;
 8016f74:	e001      	b.n	8016f7a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8016f76:	23fa      	movs	r3, #250	@ 0xfa
 8016f78:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	7bfa      	ldrb	r2, [r7, #15]
 8016f7e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016f80:	bf00      	nop
 8016f82:	3710      	adds	r7, #16
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016f94:	68bb      	ldr	r3, [r7, #8]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7ff f871 	bl	8016080 <netconn_err>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d134      	bne.n	8017014 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d02d      	beq.n	8017010 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016fbe:	2b20      	cmp	r3, #32
 8016fc0:	d123      	bne.n	801700a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	689b      	ldr	r3, [r3, #8]
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d10c      	bne.n	8016fe6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	685a      	ldr	r2, [r3, #4]
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	689b      	ldr	r3, [r3, #8]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4619      	mov	r1, r3
 8016fda:	4610      	mov	r0, r2
 8016fdc:	f00a f89a 	bl	8021114 <udp_send>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8016fe4:	e016      	b.n	8017014 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	6858      	ldr	r0, [r3, #4]
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	6819      	ldr	r1, [r3, #0]
 8016ff2:	68bb      	ldr	r3, [r7, #8]
 8016ff4:	689b      	ldr	r3, [r3, #8]
 8016ff6:	f103 0208 	add.w	r2, r3, #8
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	689b      	ldr	r3, [r3, #8]
 8016ffe:	899b      	ldrh	r3, [r3, #12]
 8017000:	f00a f8bc 	bl	802117c <udp_sendto>
 8017004:	4603      	mov	r3, r0
 8017006:	73fb      	strb	r3, [r7, #15]
          break;
 8017008:	e004      	b.n	8017014 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801700a:	23f5      	movs	r3, #245	@ 0xf5
 801700c:	73fb      	strb	r3, [r7, #15]
          break;
 801700e:	e001      	b.n	8017014 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8017010:	23f5      	movs	r3, #245	@ 0xf5
 8017012:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	7bfa      	ldrb	r2, [r7, #15]
 8017018:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801701a:	bf00      	nop
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}

08017022 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8017022:	b580      	push	{r7, lr}
 8017024:	b086      	sub	sp, #24
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 801702e:	693b      	ldr	r3, [r7, #16]
 8017030:	2200      	movs	r2, #0
 8017032:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	685b      	ldr	r3, [r3, #4]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d022      	beq.n	8017084 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017048:	2b10      	cmp	r3, #16
 801704a:	d11b      	bne.n	8017084 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	689b      	ldr	r3, [r3, #8]
 8017050:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017058:	d202      	bcs.n	8017060 <lwip_netconn_do_recv+0x3e>
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	b29b      	uxth	r3, r3
 801705e:	e001      	b.n	8017064 <lwip_netconn_do_recv+0x42>
 8017060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017064:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8017066:	693b      	ldr	r3, [r7, #16]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	685b      	ldr	r3, [r3, #4]
 801706c:	89fa      	ldrh	r2, [r7, #14]
 801706e:	4611      	mov	r1, r2
 8017070:	4618      	mov	r0, r3
 8017072:	f004 f9af 	bl	801b3d4 <tcp_recved>
        remaining -= recved;
 8017076:	89fb      	ldrh	r3, [r7, #14]
 8017078:	697a      	ldr	r2, [r7, #20]
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801707e:	697b      	ldr	r3, [r7, #20]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d1e6      	bne.n	8017052 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017084:	bf00      	nop
 8017086:	3718      	adds	r7, #24
 8017088:	46bd      	mov	sp, r7
 801708a:	bd80      	pop	{r7, pc}

0801708c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b088      	sub	sp, #32
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	460b      	mov	r3, r1
 8017096:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8017098:	2300      	movs	r3, #0
 801709a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d106      	bne.n	80170b0 <lwip_netconn_do_writemore+0x24>
 80170a2:	4b96      	ldr	r3, [pc, #600]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 80170a4:	f240 6273 	movw	r2, #1651	@ 0x673
 80170a8:	4995      	ldr	r1, [pc, #596]	@ (8017300 <lwip_netconn_do_writemore+0x274>)
 80170aa:	4896      	ldr	r0, [pc, #600]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 80170ac:	f00e f9e2 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	785b      	ldrb	r3, [r3, #1]
 80170b4:	2b01      	cmp	r3, #1
 80170b6:	d006      	beq.n	80170c6 <lwip_netconn_do_writemore+0x3a>
 80170b8:	4b90      	ldr	r3, [pc, #576]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 80170ba:	f240 6274 	movw	r2, #1652	@ 0x674
 80170be:	4992      	ldr	r1, [pc, #584]	@ (8017308 <lwip_netconn_do_writemore+0x27c>)
 80170c0:	4890      	ldr	r0, [pc, #576]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 80170c2:	f00e f9d7 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	6a1b      	ldr	r3, [r3, #32]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d106      	bne.n	80170dc <lwip_netconn_do_writemore+0x50>
 80170ce:	4b8b      	ldr	r3, [pc, #556]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 80170d0:	f240 6275 	movw	r2, #1653	@ 0x675
 80170d4:	498d      	ldr	r1, [pc, #564]	@ (801730c <lwip_netconn_do_writemore+0x280>)
 80170d6:	488b      	ldr	r0, [pc, #556]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 80170d8:	f00e f9cc 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d106      	bne.n	80170f2 <lwip_netconn_do_writemore+0x66>
 80170e4:	4b85      	ldr	r3, [pc, #532]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 80170e6:	f240 6276 	movw	r2, #1654	@ 0x676
 80170ea:	4989      	ldr	r1, [pc, #548]	@ (8017310 <lwip_netconn_do_writemore+0x284>)
 80170ec:	4885      	ldr	r0, [pc, #532]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 80170ee:	f00e f9c1 	bl	8025474 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6a1b      	ldr	r3, [r3, #32]
 80170f6:	699a      	ldr	r2, [r3, #24]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6a1b      	ldr	r3, [r3, #32]
 80170fc:	695b      	ldr	r3, [r3, #20]
 80170fe:	429a      	cmp	r2, r3
 8017100:	d306      	bcc.n	8017110 <lwip_netconn_do_writemore+0x84>
 8017102:	4b7e      	ldr	r3, [pc, #504]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 8017104:	f240 6277 	movw	r2, #1655	@ 0x677
 8017108:	4982      	ldr	r1, [pc, #520]	@ (8017314 <lwip_netconn_do_writemore+0x288>)
 801710a:	487e      	ldr	r0, [pc, #504]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 801710c:	f00e f9b2 	bl	8025474 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6a1b      	ldr	r3, [r3, #32]
 8017114:	899b      	ldrh	r3, [r3, #12]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d106      	bne.n	8017128 <lwip_netconn_do_writemore+0x9c>
 801711a:	4b78      	ldr	r3, [pc, #480]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 801711c:	f240 6279 	movw	r2, #1657	@ 0x679
 8017120:	497d      	ldr	r1, [pc, #500]	@ (8017318 <lwip_netconn_do_writemore+0x28c>)
 8017122:	4878      	ldr	r0, [pc, #480]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 8017124:	f00e f9a6 	bl	8025474 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6a1b      	ldr	r3, [r3, #32]
 801712c:	7f1b      	ldrb	r3, [r3, #28]
 801712e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	7f1b      	ldrb	r3, [r3, #28]
 8017134:	f003 0302 	and.w	r3, r3, #2
 8017138:	2b00      	cmp	r3, #0
 801713a:	d104      	bne.n	8017146 <lwip_netconn_do_writemore+0xba>
 801713c:	7ebb      	ldrb	r3, [r7, #26]
 801713e:	f003 0304 	and.w	r3, r3, #4
 8017142:	2b00      	cmp	r3, #0
 8017144:	d001      	beq.n	801714a <lwip_netconn_do_writemore+0xbe>
 8017146:	2301      	movs	r3, #1
 8017148:	e000      	b.n	801714c <lwip_netconn_do_writemore+0xc0>
 801714a:	2300      	movs	r3, #0
 801714c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6a1b      	ldr	r3, [r3, #32]
 8017152:	689b      	ldr	r3, [r3, #8]
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6a1b      	ldr	r3, [r3, #32]
 801715a:	691b      	ldr	r3, [r3, #16]
 801715c:	4413      	add	r3, r2
 801715e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6a1b      	ldr	r3, [r3, #32]
 8017164:	689b      	ldr	r3, [r3, #8]
 8017166:	685a      	ldr	r2, [r3, #4]
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a1b      	ldr	r3, [r3, #32]
 801716c:	691b      	ldr	r3, [r3, #16]
 801716e:	1ad3      	subs	r3, r2, r3
 8017170:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017178:	d307      	bcc.n	801718a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801717a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801717e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017180:	7ebb      	ldrb	r3, [r7, #26]
 8017182:	f043 0302 	orr.w	r3, r3, #2
 8017186:	76bb      	strb	r3, [r7, #26]
 8017188:	e001      	b.n	801718e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017196:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8017198:	89fa      	ldrh	r2, [r7, #14]
 801719a:	8bbb      	ldrh	r3, [r7, #28]
 801719c:	429a      	cmp	r2, r3
 801719e:	d216      	bcs.n	80171ce <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80171a0:	89fb      	ldrh	r3, [r7, #14]
 80171a2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80171a4:	7e3b      	ldrb	r3, [r7, #24]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d00d      	beq.n	80171c6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80171aa:	8bbb      	ldrh	r3, [r7, #28]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d10e      	bne.n	80171ce <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6a1b      	ldr	r3, [r3, #32]
 80171b4:	699b      	ldr	r3, [r3, #24]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d102      	bne.n	80171c0 <lwip_netconn_do_writemore+0x134>
 80171ba:	f06f 0306 	mvn.w	r3, #6
 80171be:	e000      	b.n	80171c2 <lwip_netconn_do_writemore+0x136>
 80171c0:	2300      	movs	r3, #0
 80171c2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80171c4:	e07d      	b.n	80172c2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80171c6:	7ebb      	ldrb	r3, [r7, #26]
 80171c8:	f043 0302 	orr.w	r3, r3, #2
 80171cc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	6a1b      	ldr	r3, [r3, #32]
 80171d2:	691a      	ldr	r2, [r3, #16]
 80171d4:	8bbb      	ldrh	r3, [r7, #28]
 80171d6:	441a      	add	r2, r3
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a1b      	ldr	r3, [r3, #32]
 80171dc:	689b      	ldr	r3, [r3, #8]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d906      	bls.n	80171f2 <lwip_netconn_do_writemore+0x166>
 80171e4:	4b45      	ldr	r3, [pc, #276]	@ (80172fc <lwip_netconn_do_writemore+0x270>)
 80171e6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80171ea:	494c      	ldr	r1, [pc, #304]	@ (801731c <lwip_netconn_do_writemore+0x290>)
 80171ec:	4845      	ldr	r0, [pc, #276]	@ (8017304 <lwip_netconn_do_writemore+0x278>)
 80171ee:	f00e f941 	bl	8025474 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80171f2:	8bbb      	ldrh	r3, [r7, #28]
 80171f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171f8:	4293      	cmp	r3, r2
 80171fa:	d103      	bne.n	8017204 <lwip_netconn_do_writemore+0x178>
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017202:	d209      	bcs.n	8017218 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017208:	8bba      	ldrh	r2, [r7, #28]
 801720a:	429a      	cmp	r2, r3
 801720c:	d10b      	bne.n	8017226 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6a1b      	ldr	r3, [r3, #32]
 8017212:	899b      	ldrh	r3, [r3, #12]
 8017214:	2b01      	cmp	r3, #1
 8017216:	d906      	bls.n	8017226 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8017218:	2301      	movs	r3, #1
 801721a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801721c:	7ebb      	ldrb	r3, [r7, #26]
 801721e:	f043 0302 	orr.w	r3, r3, #2
 8017222:	76bb      	strb	r3, [r7, #26]
 8017224:	e001      	b.n	801722a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8017226:	2300      	movs	r3, #0
 8017228:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	6858      	ldr	r0, [r3, #4]
 801722e:	7ebb      	ldrb	r3, [r7, #26]
 8017230:	8bba      	ldrh	r2, [r7, #28]
 8017232:	6979      	ldr	r1, [r7, #20]
 8017234:	f007 fed2 	bl	801efdc <tcp_write>
 8017238:	4603      	mov	r3, r0
 801723a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801723c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d12c      	bne.n	801729e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	6a1b      	ldr	r3, [r3, #32]
 8017248:	6999      	ldr	r1, [r3, #24]
 801724a:	8bba      	ldrh	r2, [r7, #28]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6a1b      	ldr	r3, [r3, #32]
 8017250:	440a      	add	r2, r1
 8017252:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6a1b      	ldr	r3, [r3, #32]
 8017258:	6919      	ldr	r1, [r3, #16]
 801725a:	8bba      	ldrh	r2, [r7, #28]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	6a1b      	ldr	r3, [r3, #32]
 8017260:	440a      	add	r2, r1
 8017262:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6a1b      	ldr	r3, [r3, #32]
 8017268:	691a      	ldr	r2, [r3, #16]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6a1b      	ldr	r3, [r3, #32]
 801726e:	689b      	ldr	r3, [r3, #8]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	429a      	cmp	r2, r3
 8017274:	d113      	bne.n	801729e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	6a1b      	ldr	r3, [r3, #32]
 801727a:	899a      	ldrh	r2, [r3, #12]
 801727c:	3a01      	subs	r2, #1
 801727e:	b292      	uxth	r2, r2
 8017280:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6a1b      	ldr	r3, [r3, #32]
 8017286:	899b      	ldrh	r3, [r3, #12]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d008      	beq.n	801729e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	6a1b      	ldr	r3, [r3, #32]
 8017290:	689a      	ldr	r2, [r3, #8]
 8017292:	3208      	adds	r2, #8
 8017294:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6a1b      	ldr	r3, [r3, #32]
 801729a:	2200      	movs	r2, #0
 801729c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801729e:	7e7b      	ldrb	r3, [r7, #25]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d004      	beq.n	80172ae <lwip_netconn_do_writemore+0x222>
 80172a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	f43f af50 	beq.w	801714e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80172ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d004      	beq.n	80172c0 <lwip_netconn_do_writemore+0x234>
 80172b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80172ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172be:	d146      	bne.n	801734e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80172c0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80172c2:	7e3b      	ldrb	r3, [r7, #24]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d02b      	beq.n	8017320 <lwip_netconn_do_writemore+0x294>
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	6a1b      	ldr	r3, [r3, #32]
 80172cc:	699a      	ldr	r2, [r3, #24]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6a1b      	ldr	r3, [r3, #32]
 80172d2:	695b      	ldr	r3, [r3, #20]
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d223      	bcs.n	8017320 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d005      	beq.n	80172ec <lwip_netconn_do_writemore+0x260>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172e4:	2200      	movs	r2, #0
 80172e6:	2103      	movs	r1, #3
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	7f1b      	ldrb	r3, [r3, #28]
 80172f0:	f043 0310 	orr.w	r3, r3, #16
 80172f4:	b2da      	uxtb	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	771a      	strb	r2, [r3, #28]
 80172fa:	e028      	b.n	801734e <lwip_netconn_do_writemore+0x2c2>
 80172fc:	0802997c 	.word	0x0802997c
 8017300:	08029ad4 	.word	0x08029ad4
 8017304:	080299c0 	.word	0x080299c0
 8017308:	08029ddc 	.word	0x08029ddc
 801730c:	08029ae4 	.word	0x08029ae4
 8017310:	08029dfc 	.word	0x08029dfc
 8017314:	08029e14 	.word	0x08029e14
 8017318:	08029e54 	.word	0x08029e54
 801731c:	08029e7c 	.word	0x08029e7c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	685b      	ldr	r3, [r3, #4]
 8017324:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017328:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801732c:	d305      	bcc.n	801733a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017336:	2b04      	cmp	r3, #4
 8017338:	d909      	bls.n	801734e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801733e:	2b00      	cmp	r3, #0
 8017340:	d005      	beq.n	801734e <lwip_netconn_do_writemore+0x2c2>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017346:	2200      	movs	r2, #0
 8017348:	2103      	movs	r1, #3
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801734e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d11d      	bne.n	8017392 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	6a1b      	ldr	r3, [r3, #32]
 801735a:	699a      	ldr	r2, [r3, #24]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	6a1b      	ldr	r3, [r3, #32]
 8017360:	695b      	ldr	r3, [r3, #20]
 8017362:	429a      	cmp	r2, r3
 8017364:	d002      	beq.n	801736c <lwip_netconn_do_writemore+0x2e0>
 8017366:	7e3b      	ldrb	r3, [r7, #24]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d001      	beq.n	8017370 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801736c:	2301      	movs	r3, #1
 801736e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	4618      	mov	r0, r3
 8017376:	f008 fc1b 	bl	801fbb0 <tcp_output>
 801737a:	4603      	mov	r3, r0
 801737c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801737e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8017382:	f113 0f04 	cmn.w	r3, #4
 8017386:	d12c      	bne.n	80173e2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017388:	7b3b      	ldrb	r3, [r7, #12]
 801738a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801738c:	2301      	movs	r3, #1
 801738e:	76fb      	strb	r3, [r7, #27]
 8017390:	e027      	b.n	80173e2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8017392:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801739a:	d120      	bne.n	80173de <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	4618      	mov	r0, r3
 80173a2:	f008 fc05 	bl	801fbb0 <tcp_output>
 80173a6:	4603      	mov	r3, r0
 80173a8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80173aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80173ae:	f113 0f04 	cmn.w	r3, #4
 80173b2:	d104      	bne.n	80173be <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80173b4:	7b7b      	ldrb	r3, [r7, #13]
 80173b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80173b8:	2301      	movs	r3, #1
 80173ba:	76fb      	strb	r3, [r7, #27]
 80173bc:	e011      	b.n	80173e2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80173be:	7e3b      	ldrb	r3, [r7, #24]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d00e      	beq.n	80173e2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	6a1b      	ldr	r3, [r3, #32]
 80173c8:	699b      	ldr	r3, [r3, #24]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d102      	bne.n	80173d4 <lwip_netconn_do_writemore+0x348>
 80173ce:	f06f 0306 	mvn.w	r3, #6
 80173d2:	e000      	b.n	80173d6 <lwip_netconn_do_writemore+0x34a>
 80173d4:	2300      	movs	r3, #0
 80173d6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80173d8:	2301      	movs	r3, #1
 80173da:	76fb      	strb	r3, [r7, #27]
 80173dc:	e001      	b.n	80173e2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80173de:	2301      	movs	r3, #1
 80173e0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80173e2:	7efb      	ldrb	r3, [r7, #27]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d015      	beq.n	8017414 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a1b      	ldr	r3, [r3, #32]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	330c      	adds	r3, #12
 80173f0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6a1b      	ldr	r3, [r3, #32]
 80173f6:	7ffa      	ldrb	r2, [r7, #31]
 80173f8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2200      	movs	r2, #0
 80173fe:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2200      	movs	r2, #0
 8017404:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017406:	78fb      	ldrb	r3, [r7, #3]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d006      	beq.n	801741a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801740c:	68b8      	ldr	r0, [r7, #8]
 801740e:	f00c fef3 	bl	80241f8 <sys_sem_signal>
 8017412:	e002      	b.n	801741a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8017414:	f04f 33ff 	mov.w	r3, #4294967295
 8017418:	e000      	b.n	801741c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801741a:	2300      	movs	r3, #0
}
 801741c:	4618      	mov	r0, r3
 801741e:	3720      	adds	r7, #32
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b084      	sub	sp, #16
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4618      	mov	r0, r3
 8017436:	f7fe fe23 	bl	8016080 <netconn_err>
 801743a:	4603      	mov	r3, r0
 801743c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801743e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d166      	bne.n	8017514 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017450:	2b10      	cmp	r3, #16
 8017452:	d15d      	bne.n	8017510 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	785b      	ldrb	r3, [r3, #1]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d002      	beq.n	8017464 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801745e:	23fb      	movs	r3, #251	@ 0xfb
 8017460:	73fb      	strb	r3, [r7, #15]
 8017462:	e057      	b.n	8017514 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d04d      	beq.n	801750a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2201      	movs	r2, #1
 8017474:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	6a1b      	ldr	r3, [r3, #32]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d006      	beq.n	801748e <lwip_netconn_do_write+0x6a>
 8017480:	4b28      	ldr	r3, [pc, #160]	@ (8017524 <lwip_netconn_do_write+0x100>)
 8017482:	f240 7223 	movw	r2, #1827	@ 0x723
 8017486:	4928      	ldr	r1, [pc, #160]	@ (8017528 <lwip_netconn_do_write+0x104>)
 8017488:	4828      	ldr	r0, [pc, #160]	@ (801752c <lwip_netconn_do_write+0x108>)
 801748a:	f00d fff3 	bl	8025474 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	695b      	ldr	r3, [r3, #20]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d106      	bne.n	80174a4 <lwip_netconn_do_write+0x80>
 8017496:	4b23      	ldr	r3, [pc, #140]	@ (8017524 <lwip_netconn_do_write+0x100>)
 8017498:	f240 7224 	movw	r2, #1828	@ 0x724
 801749c:	4924      	ldr	r1, [pc, #144]	@ (8017530 <lwip_netconn_do_write+0x10c>)
 801749e:	4823      	ldr	r0, [pc, #140]	@ (801752c <lwip_netconn_do_write+0x108>)
 80174a0:	f00d ffe8 	bl	8025474 <iprintf>
        msg->conn->current_msg = msg;
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	68ba      	ldr	r2, [r7, #8]
 80174aa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2100      	movs	r1, #0
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ff fdea 	bl	801708c <lwip_netconn_do_writemore>
 80174b8:	4603      	mov	r3, r0
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d02e      	beq.n	801751c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	785b      	ldrb	r3, [r3, #1]
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d006      	beq.n	80174d6 <lwip_netconn_do_write+0xb2>
 80174c8:	4b16      	ldr	r3, [pc, #88]	@ (8017524 <lwip_netconn_do_write+0x100>)
 80174ca:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80174ce:	4919      	ldr	r1, [pc, #100]	@ (8017534 <lwip_netconn_do_write+0x110>)
 80174d0:	4816      	ldr	r0, [pc, #88]	@ (801752c <lwip_netconn_do_write+0x108>)
 80174d2:	f00d ffcf 	bl	8025474 <iprintf>
          UNLOCK_TCPIP_CORE();
 80174d6:	4818      	ldr	r0, [pc, #96]	@ (8017538 <lwip_netconn_do_write+0x114>)
 80174d8:	f00c feff 	bl	80242da <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	330c      	adds	r3, #12
 80174e2:	2100      	movs	r1, #0
 80174e4:	4618      	mov	r0, r3
 80174e6:	f00c fe56 	bl	8024196 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80174ea:	4813      	ldr	r0, [pc, #76]	@ (8017538 <lwip_netconn_do_write+0x114>)
 80174ec:	f00c fee6 	bl	80242bc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	785b      	ldrb	r3, [r3, #1]
 80174f6:	2b01      	cmp	r3, #1
 80174f8:	d110      	bne.n	801751c <lwip_netconn_do_write+0xf8>
 80174fa:	4b0a      	ldr	r3, [pc, #40]	@ (8017524 <lwip_netconn_do_write+0x100>)
 80174fc:	f240 722c 	movw	r2, #1836	@ 0x72c
 8017500:	490c      	ldr	r1, [pc, #48]	@ (8017534 <lwip_netconn_do_write+0x110>)
 8017502:	480a      	ldr	r0, [pc, #40]	@ (801752c <lwip_netconn_do_write+0x108>)
 8017504:	f00d ffb6 	bl	8025474 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8017508:	e008      	b.n	801751c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801750a:	23f5      	movs	r3, #245	@ 0xf5
 801750c:	73fb      	strb	r3, [r7, #15]
 801750e:	e001      	b.n	8017514 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8017510:	23fa      	movs	r3, #250	@ 0xfa
 8017512:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	7bfa      	ldrb	r2, [r7, #15]
 8017518:	711a      	strb	r2, [r3, #4]
 801751a:	e000      	b.n	801751e <lwip_netconn_do_write+0xfa>
        return;
 801751c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	0802997c 	.word	0x0802997c
 8017528:	08029d20 	.word	0x08029d20
 801752c:	080299c0 	.word	0x080299c0
 8017530:	08029ea8 	.word	0x08029ea8
 8017534:	08029d3c 	.word	0x08029d3c
 8017538:	24008d60 	.word	0x24008d60

0801753c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b084      	sub	sp, #16
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d06b      	beq.n	801762a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	7c1b      	ldrb	r3, [r3, #16]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d007      	beq.n	801756a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	685a      	ldr	r2, [r3, #4]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	689b      	ldr	r3, [r3, #8]
 8017564:	6812      	ldr	r2, [r2, #0]
 8017566:	601a      	str	r2, [r3, #0]
 8017568:	e006      	b.n	8017578 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	685a      	ldr	r2, [r3, #4]
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	6852      	ldr	r2, [r2, #4]
 8017576:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2200      	movs	r2, #0
 801757c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017588:	2b10      	cmp	r3, #16
 801758a:	d021      	beq.n	80175d0 <lwip_netconn_do_getaddr+0x94>
 801758c:	2b20      	cmp	r3, #32
 801758e:	d144      	bne.n	801761a <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	7c1b      	ldrb	r3, [r3, #16]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d007      	beq.n	80175a8 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	685a      	ldr	r2, [r3, #4]
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	68db      	ldr	r3, [r3, #12]
 80175a2:	8a52      	ldrh	r2, [r2, #18]
 80175a4:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 80175a6:	e044      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	7c1b      	ldrb	r3, [r3, #16]
 80175b0:	f003 0304 	and.w	r3, r3, #4
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d103      	bne.n	80175c0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	22f5      	movs	r2, #245	@ 0xf5
 80175bc:	711a      	strb	r2, [r3, #4]
        break;
 80175be:	e038      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	685a      	ldr	r2, [r3, #4]
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	68db      	ldr	r3, [r3, #12]
 80175ca:	8a92      	ldrh	r2, [r2, #20]
 80175cc:	801a      	strh	r2, [r3, #0]
        break;
 80175ce:	e030      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	7c1b      	ldrb	r3, [r3, #16]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d10f      	bne.n	80175f8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d005      	beq.n	80175f0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	685b      	ldr	r3, [r3, #4]
 80175ea:	7d1b      	ldrb	r3, [r3, #20]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	d103      	bne.n	80175f8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	22f5      	movs	r2, #245	@ 0xf5
 80175f4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 80175f6:	e01c      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80175f8:	68fb      	ldr	r3, [r7, #12]
 80175fa:	7c1b      	ldrb	r3, [r3, #16]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d004      	beq.n	801760a <lwip_netconn_do_getaddr+0xce>
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	8adb      	ldrh	r3, [r3, #22]
 8017608:	e003      	b.n	8017612 <lwip_netconn_do_getaddr+0xd6>
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	685b      	ldr	r3, [r3, #4]
 8017610:	8b1b      	ldrh	r3, [r3, #24]
 8017612:	68fa      	ldr	r2, [r7, #12]
 8017614:	68d2      	ldr	r2, [r2, #12]
 8017616:	8013      	strh	r3, [r2, #0]
        break;
 8017618:	e00b      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801761a:	4b08      	ldr	r3, [pc, #32]	@ (801763c <lwip_netconn_do_getaddr+0x100>)
 801761c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017620:	4907      	ldr	r1, [pc, #28]	@ (8017640 <lwip_netconn_do_getaddr+0x104>)
 8017622:	4808      	ldr	r0, [pc, #32]	@ (8017644 <lwip_netconn_do_getaddr+0x108>)
 8017624:	f00d ff26 	bl	8025474 <iprintf>
        break;
 8017628:	e003      	b.n	8017632 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	22f5      	movs	r2, #245	@ 0xf5
 801762e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017630:	bf00      	nop
 8017632:	bf00      	nop
 8017634:	3710      	adds	r7, #16
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	bf00      	nop
 801763c:	0802997c 	.word	0x0802997c
 8017640:	08029ebc 	.word	0x08029ebc
 8017644:	080299c0 	.word	0x080299c0

08017648 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b084      	sub	sp, #16
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	785b      	ldrb	r3, [r3, #1]
 801765a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	685b      	ldr	r3, [r3, #4]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d069      	beq.n	801773a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8017670:	2b10      	cmp	r3, #16
 8017672:	d162      	bne.n	801773a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017678:	2b03      	cmp	r3, #3
 801767a:	d002      	beq.n	8017682 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801767c:	7afb      	ldrb	r3, [r7, #11]
 801767e:	2b02      	cmp	r3, #2
 8017680:	d05b      	beq.n	801773a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8017682:	7afb      	ldrb	r3, [r7, #11]
 8017684:	2b03      	cmp	r3, #3
 8017686:	d103      	bne.n	8017690 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	22f5      	movs	r2, #245	@ 0xf5
 801768c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801768e:	e059      	b.n	8017744 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8017690:	7afb      	ldrb	r3, [r7, #11]
 8017692:	2b01      	cmp	r3, #1
 8017694:	d103      	bne.n	801769e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	22fb      	movs	r2, #251	@ 0xfb
 801769a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801769c:	e052      	b.n	8017744 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	7a1b      	ldrb	r3, [r3, #8]
 80176a2:	f003 0301 	and.w	r3, r3, #1
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d004      	beq.n	80176b4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7ff f964 	bl	801697c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	6a1b      	ldr	r3, [r3, #32]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d006      	beq.n	80176cc <lwip_netconn_do_close+0x84>
 80176be:	4b23      	ldr	r3, [pc, #140]	@ (801774c <lwip_netconn_do_close+0x104>)
 80176c0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80176c4:	4922      	ldr	r1, [pc, #136]	@ (8017750 <lwip_netconn_do_close+0x108>)
 80176c6:	4823      	ldr	r0, [pc, #140]	@ (8017754 <lwip_netconn_do_close+0x10c>)
 80176c8:	f00d fed4 	bl	8025474 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2204      	movs	r2, #4
 80176d2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	68fa      	ldr	r2, [r7, #12]
 80176da:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2100      	movs	r1, #0
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7ff f9c8 	bl	8016a78 <lwip_netconn_do_close_internal>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d029      	beq.n	8017742 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	785b      	ldrb	r3, [r3, #1]
 80176f4:	2b04      	cmp	r3, #4
 80176f6:	d006      	beq.n	8017706 <lwip_netconn_do_close+0xbe>
 80176f8:	4b14      	ldr	r3, [pc, #80]	@ (801774c <lwip_netconn_do_close+0x104>)
 80176fa:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80176fe:	4916      	ldr	r1, [pc, #88]	@ (8017758 <lwip_netconn_do_close+0x110>)
 8017700:	4814      	ldr	r0, [pc, #80]	@ (8017754 <lwip_netconn_do_close+0x10c>)
 8017702:	f00d feb7 	bl	8025474 <iprintf>
        UNLOCK_TCPIP_CORE();
 8017706:	4815      	ldr	r0, [pc, #84]	@ (801775c <lwip_netconn_do_close+0x114>)
 8017708:	f00c fde7 	bl	80242da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	330c      	adds	r3, #12
 8017712:	2100      	movs	r1, #0
 8017714:	4618      	mov	r0, r3
 8017716:	f00c fd3e 	bl	8024196 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801771a:	4810      	ldr	r0, [pc, #64]	@ (801775c <lwip_netconn_do_close+0x114>)
 801771c:	f00c fdce 	bl	80242bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	785b      	ldrb	r3, [r3, #1]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d00b      	beq.n	8017742 <lwip_netconn_do_close+0xfa>
 801772a:	4b08      	ldr	r3, [pc, #32]	@ (801774c <lwip_netconn_do_close+0x104>)
 801772c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8017730:	4909      	ldr	r1, [pc, #36]	@ (8017758 <lwip_netconn_do_close+0x110>)
 8017732:	4808      	ldr	r0, [pc, #32]	@ (8017754 <lwip_netconn_do_close+0x10c>)
 8017734:	f00d fe9e 	bl	8025474 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8017738:	e003      	b.n	8017742 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	22f5      	movs	r2, #245	@ 0xf5
 801773e:	711a      	strb	r2, [r3, #4]
 8017740:	e000      	b.n	8017744 <lwip_netconn_do_close+0xfc>
      return;
 8017742:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017744:	3710      	adds	r7, #16
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	0802997c 	.word	0x0802997c
 8017750:	08029d20 	.word	0x08029d20
 8017754:	080299c0 	.word	0x080299c0
 8017758:	08029d3c 	.word	0x08029d3c
 801775c:	24008d60 	.word	0x24008d60

08017760 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8017760:	b480      	push	{r7}
 8017762:	b083      	sub	sp, #12
 8017764:	af00      	add	r7, sp, #0
 8017766:	4603      	mov	r3, r0
 8017768:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 801776a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801776e:	2b00      	cmp	r3, #0
 8017770:	dc04      	bgt.n	801777c <err_to_errno+0x1c>
 8017772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017776:	f113 0f10 	cmn.w	r3, #16
 801777a:	da01      	bge.n	8017780 <err_to_errno+0x20>
    return EIO;
 801777c:	2305      	movs	r3, #5
 801777e:	e005      	b.n	801778c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8017780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017784:	425b      	negs	r3, r3
 8017786:	4a04      	ldr	r2, [pc, #16]	@ (8017798 <err_to_errno+0x38>)
 8017788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801778c:	4618      	mov	r0, r3
 801778e:	370c      	adds	r7, #12
 8017790:	46bd      	mov	sp, r7
 8017792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017796:	4770      	bx	lr
 8017798:	0802cf90 	.word	0x0802cf90

0801779c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b082      	sub	sp, #8
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d013      	beq.n	80177d2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d00b      	beq.n	80177ca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	4618      	mov	r0, r3
 80177b8:	f002 ff0e 	bl	801a5d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2200      	movs	r2, #0
 80177c0:	605a      	str	r2, [r3, #4]
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	685a      	ldr	r2, [r3, #4]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80177ca:	6879      	ldr	r1, [r7, #4]
 80177cc:	2006      	movs	r0, #6
 80177ce:	f002 f82d 	bl	801982c <memp_free>
  }
}
 80177d2:	bf00      	nop
 80177d4:	3708      	adds	r7, #8
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
	...

080177dc <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d106      	bne.n	80177f8 <netbuf_free+0x1c>
 80177ea:	4b0d      	ldr	r3, [pc, #52]	@ (8017820 <netbuf_free+0x44>)
 80177ec:	2281      	movs	r2, #129	@ 0x81
 80177ee:	490d      	ldr	r1, [pc, #52]	@ (8017824 <netbuf_free+0x48>)
 80177f0:	480d      	ldr	r0, [pc, #52]	@ (8017828 <netbuf_free+0x4c>)
 80177f2:	f00d fe3f 	bl	8025474 <iprintf>
 80177f6:	e00f      	b.n	8017818 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d004      	beq.n	801780a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4618      	mov	r0, r3
 8017806:	f002 fee7 	bl	801a5d8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2200      	movs	r2, #0
 801780e:	605a      	str	r2, [r3, #4]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	685a      	ldr	r2, [r3, #4]
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8017818:	3708      	adds	r7, #8
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}
 801781e:	bf00      	nop
 8017820:	08029ed4 	.word	0x08029ed4
 8017824:	08029f70 	.word	0x08029f70
 8017828:	08029f24 	.word	0x08029f24

0801782c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b084      	sub	sp, #16
 8017830:	af00      	add	r7, sp, #0
 8017832:	60f8      	str	r0, [r7, #12]
 8017834:	60b9      	str	r1, [r7, #8]
 8017836:	4613      	mov	r3, r2
 8017838:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d108      	bne.n	8017852 <netbuf_ref+0x26>
 8017840:	4b1c      	ldr	r3, [pc, #112]	@ (80178b4 <netbuf_ref+0x88>)
 8017842:	2299      	movs	r2, #153	@ 0x99
 8017844:	491c      	ldr	r1, [pc, #112]	@ (80178b8 <netbuf_ref+0x8c>)
 8017846:	481d      	ldr	r0, [pc, #116]	@ (80178bc <netbuf_ref+0x90>)
 8017848:	f00d fe14 	bl	8025474 <iprintf>
 801784c:	f06f 030f 	mvn.w	r3, #15
 8017850:	e02b      	b.n	80178aa <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d004      	beq.n	8017864 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	4618      	mov	r0, r3
 8017860:	f002 feba 	bl	801a5d8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8017864:	2241      	movs	r2, #65	@ 0x41
 8017866:	2100      	movs	r1, #0
 8017868:	2036      	movs	r0, #54	@ 0x36
 801786a:	f002 fb9f 	bl	8019fac <pbuf_alloc>
 801786e:	4602      	mov	r2, r0
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d105      	bne.n	8017888 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2200      	movs	r2, #0
 8017880:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8017882:	f04f 33ff 	mov.w	r3, #4294967295
 8017886:	e010      	b.n	80178aa <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	68ba      	ldr	r2, [r7, #8]
 801788e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	88fa      	ldrh	r2, [r7, #6]
 8017896:	811a      	strh	r2, [r3, #8]
 8017898:	68fa      	ldr	r2, [r7, #12]
 801789a:	6812      	ldr	r2, [r2, #0]
 801789c:	891b      	ldrh	r3, [r3, #8]
 801789e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80178a8:	2300      	movs	r3, #0
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	08029ed4 	.word	0x08029ed4
 80178b8:	08029f8c 	.word	0x08029f8c
 80178bc:	08029f24 	.word	0x08029f24

080178c0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 80178c0:	b480      	push	{r7}
 80178c2:	b085      	sub	sp, #20
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	db02      	blt.n	80178d8 <tryget_socket_unconn_nouse+0x18>
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	2b03      	cmp	r3, #3
 80178d6:	dd01      	ble.n	80178dc <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 80178d8:	2300      	movs	r3, #0
 80178da:	e003      	b.n	80178e4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	011b      	lsls	r3, r3, #4
 80178e0:	4a03      	ldr	r2, [pc, #12]	@ (80178f0 <tryget_socket_unconn_nouse+0x30>)
 80178e2:	4413      	add	r3, r2
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3714      	adds	r7, #20
 80178e8:	46bd      	mov	sp, r7
 80178ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ee:	4770      	bx	lr
 80178f0:	24008d10 	.word	0x24008d10

080178f4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f7ff ffdf 	bl	80178c0 <tryget_socket_unconn_nouse>
 8017902:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8017904:	68fb      	ldr	r3, [r7, #12]
}
 8017906:	4618      	mov	r0, r3
 8017908:	3710      	adds	r7, #16
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801790e:	b580      	push	{r7, lr}
 8017910:	b084      	sub	sp, #16
 8017912:	af00      	add	r7, sp, #0
 8017914:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f7ff ffec 	bl	80178f4 <tryget_socket_unconn>
 801791c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d005      	beq.n	8017930 <tryget_socket+0x22>
    if (sock->conn) {
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d001      	beq.n	8017930 <tryget_socket+0x22>
      return sock;
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	e000      	b.n	8017932 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8017930:	2300      	movs	r3, #0
}
 8017932:	4618      	mov	r0, r3
 8017934:	3710      	adds	r7, #16
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}
	...

0801793c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7ff ffe2 	bl	801790e <tryget_socket>
 801794a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d104      	bne.n	801795c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8017952:	4b05      	ldr	r3, [pc, #20]	@ (8017968 <get_socket+0x2c>)
 8017954:	2209      	movs	r2, #9
 8017956:	601a      	str	r2, [r3, #0]
    return NULL;
 8017958:	2300      	movs	r3, #0
 801795a:	e000      	b.n	801795e <get_socket+0x22>
  }
  return sock;
 801795c:	68fb      	ldr	r3, [r7, #12]
}
 801795e:	4618      	mov	r0, r3
 8017960:	3710      	adds	r7, #16
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	2400bfc0 	.word	0x2400bfc0

0801796c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8017976:	2300      	movs	r3, #0
 8017978:	60fb      	str	r3, [r7, #12]
 801797a:	e052      	b.n	8017a22 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 801797c:	f00c fce0 	bl	8024340 <sys_arch_protect>
 8017980:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8017982:	4a2c      	ldr	r2, [pc, #176]	@ (8017a34 <alloc_socket+0xc8>)
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	011b      	lsls	r3, r3, #4
 8017988:	4413      	add	r3, r2
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d142      	bne.n	8017a16 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8017990:	4a28      	ldr	r2, [pc, #160]	@ (8017a34 <alloc_socket+0xc8>)
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	011b      	lsls	r3, r3, #4
 8017996:	4413      	add	r3, r2
 8017998:	687a      	ldr	r2, [r7, #4]
 801799a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 801799c:	68b8      	ldr	r0, [r7, #8]
 801799e:	f00c fcdd 	bl	802435c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 80179a2:	4a24      	ldr	r2, [pc, #144]	@ (8017a34 <alloc_socket+0xc8>)
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	011b      	lsls	r3, r3, #4
 80179a8:	4413      	add	r3, r2
 80179aa:	3304      	adds	r3, #4
 80179ac:	2200      	movs	r2, #0
 80179ae:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80179b0:	4a20      	ldr	r2, [pc, #128]	@ (8017a34 <alloc_socket+0xc8>)
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	011b      	lsls	r3, r3, #4
 80179b6:	4413      	add	r3, r2
 80179b8:	330e      	adds	r3, #14
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d006      	beq.n	80179ce <alloc_socket+0x62>
 80179c0:	4b1d      	ldr	r3, [pc, #116]	@ (8017a38 <alloc_socket+0xcc>)
 80179c2:	f240 220e 	movw	r2, #526	@ 0x20e
 80179c6:	491d      	ldr	r1, [pc, #116]	@ (8017a3c <alloc_socket+0xd0>)
 80179c8:	481d      	ldr	r0, [pc, #116]	@ (8017a40 <alloc_socket+0xd4>)
 80179ca:	f00d fd53 	bl	8025474 <iprintf>
      sockets[i].rcvevent   = 0;
 80179ce:	4a19      	ldr	r2, [pc, #100]	@ (8017a34 <alloc_socket+0xc8>)
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	011b      	lsls	r3, r3, #4
 80179d4:	4413      	add	r3, r2
 80179d6:	3308      	adds	r3, #8
 80179d8:	2200      	movs	r2, #0
 80179da:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80179e4:	2b10      	cmp	r3, #16
 80179e6:	d102      	bne.n	80179ee <alloc_socket+0x82>
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d001      	beq.n	80179f2 <alloc_socket+0x86>
 80179ee:	2301      	movs	r3, #1
 80179f0:	e000      	b.n	80179f4 <alloc_socket+0x88>
 80179f2:	2300      	movs	r3, #0
 80179f4:	b299      	uxth	r1, r3
 80179f6:	4a0f      	ldr	r2, [pc, #60]	@ (8017a34 <alloc_socket+0xc8>)
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	011b      	lsls	r3, r3, #4
 80179fc:	4413      	add	r3, r2
 80179fe:	330a      	adds	r3, #10
 8017a00:	460a      	mov	r2, r1
 8017a02:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8017a04:	4a0b      	ldr	r2, [pc, #44]	@ (8017a34 <alloc_socket+0xc8>)
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	011b      	lsls	r3, r3, #4
 8017a0a:	4413      	add	r3, r2
 8017a0c:	330c      	adds	r3, #12
 8017a0e:	2200      	movs	r2, #0
 8017a10:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	e00a      	b.n	8017a2c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 8017a16:	68b8      	ldr	r0, [r7, #8]
 8017a18:	f00c fca0 	bl	802435c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	3301      	adds	r3, #1
 8017a20:	60fb      	str	r3, [r7, #12]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	2b03      	cmp	r3, #3
 8017a26:	dda9      	ble.n	801797c <alloc_socket+0x10>
  }
  return -1;
 8017a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3710      	adds	r7, #16
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	24008d10 	.word	0x24008d10
 8017a38:	0802a06c 	.word	0x0802a06c
 8017a3c:	0802a0a0 	.word	0x0802a0a0
 8017a40:	0802a0c0 	.word	0x0802a0c0

08017a44 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8017a44:	b480      	push	{r7}
 8017a46:	b085      	sub	sp, #20
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60f8      	str	r0, [r7, #12]
 8017a4c:	60b9      	str	r1, [r7, #8]
 8017a4e:	607a      	str	r2, [r7, #4]
 8017a50:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	68fa      	ldr	r2, [r7, #12]
 8017a56:	6852      	ldr	r2, [r2, #4]
 8017a58:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	601a      	str	r2, [r3, #0]
  return 1;
 8017a6e:	2301      	movs	r3, #1
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3714      	adds	r7, #20
 8017a74:	46bd      	mov	sp, r7
 8017a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7a:	4770      	bx	lr

08017a7c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b084      	sub	sp, #16
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d00d      	beq.n	8017aac <free_socket_free_elements+0x30>
    if (is_tcp) {
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d005      	beq.n	8017aa2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f002 fd9c 	bl	801a5d8 <pbuf_free>
 8017aa0:	e004      	b.n	8017aac <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f7ff fe78 	bl	801779c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d002      	beq.n	8017ab8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8017ab2:	68b8      	ldr	r0, [r7, #8]
 8017ab4:	f7fd ff0c 	bl	80158d0 <netconn_delete>
  }
}
 8017ab8:	bf00      	nop
 8017aba:	3710      	adds	r7, #16
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}

08017ac0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
 8017ac8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8017aca:	f00c fc39 	bl	8024340 <sys_arch_protect>
 8017ace:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8017ad0:	f107 0308 	add.w	r3, r7, #8
 8017ad4:	f107 020c 	add.w	r2, r7, #12
 8017ad8:	6839      	ldr	r1, [r7, #0]
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f7ff ffb2 	bl	8017a44 <free_socket_locked>
 8017ae0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8017ae2:	6978      	ldr	r0, [r7, #20]
 8017ae4:	f00c fc3a 	bl	802435c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d006      	beq.n	8017afc <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	f107 0208 	add.w	r2, r7, #8
 8017af4:	4619      	mov	r1, r3
 8017af6:	6838      	ldr	r0, [r7, #0]
 8017af8:	f7ff ffc0 	bl	8017a7c <free_socket_free_elements>
  }
}
 8017afc:	bf00      	nop
 8017afe:	3718      	adds	r7, #24
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b08a      	sub	sp, #40	@ 0x28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8017b10:	68f8      	ldr	r0, [r7, #12]
 8017b12:	f7ff ff13 	bl	801793c <get_socket>
 8017b16:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 8017b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d102      	bne.n	8017b24 <lwip_bind+0x20>
    return -1;
 8017b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b22:	e051      	b.n	8017bc8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2b10      	cmp	r3, #16
 8017b28:	d108      	bne.n	8017b3c <lwip_bind+0x38>
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	785b      	ldrb	r3, [r3, #1]
 8017b2e:	2b02      	cmp	r3, #2
 8017b30:	d104      	bne.n	8017b3c <lwip_bind+0x38>
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	f003 0303 	and.w	r3, r3, #3
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d014      	beq.n	8017b66 <lwip_bind+0x62>
 8017b3c:	4b24      	ldr	r3, [pc, #144]	@ (8017bd0 <lwip_bind+0xcc>)
 8017b3e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8017b42:	4924      	ldr	r1, [pc, #144]	@ (8017bd4 <lwip_bind+0xd0>)
 8017b44:	4824      	ldr	r0, [pc, #144]	@ (8017bd8 <lwip_bind+0xd4>)
 8017b46:	f00d fc95 	bl	8025474 <iprintf>
 8017b4a:	f06f 000f 	mvn.w	r0, #15
 8017b4e:	f7ff fe07 	bl	8017760 <err_to_errno>
 8017b52:	6178      	str	r0, [r7, #20]
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d002      	beq.n	8017b60 <lwip_bind+0x5c>
 8017b5a:	4a20      	ldr	r2, [pc, #128]	@ (8017bdc <lwip_bind+0xd8>)
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	6013      	str	r3, [r2, #0]
 8017b60:	f04f 33ff 	mov.w	r3, #4294967295
 8017b64:	e030      	b.n	8017bc8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	613b      	str	r3, [r7, #16]
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	885b      	ldrh	r3, [r3, #2]
 8017b70:	4618      	mov	r0, r3
 8017b72:	f001 f855 	bl	8018c20 <lwip_htons>
 8017b76:	4603      	mov	r3, r0
 8017b78:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8017b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017b80:	f107 0110 	add.w	r1, r7, #16
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7fd ff11 	bl	80159ac <netconn_bind>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8017b90:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d00e      	beq.n	8017bb6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8017b98:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7ff fddf 	bl	8017760 <err_to_errno>
 8017ba2:	61b8      	str	r0, [r7, #24]
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d002      	beq.n	8017bb0 <lwip_bind+0xac>
 8017baa:	4a0c      	ldr	r2, [pc, #48]	@ (8017bdc <lwip_bind+0xd8>)
 8017bac:	69bb      	ldr	r3, [r7, #24]
 8017bae:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8017bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017bb4:	e008      	b.n	8017bc8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	61fb      	str	r3, [r7, #28]
 8017bba:	69fb      	ldr	r3, [r7, #28]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d002      	beq.n	8017bc6 <lwip_bind+0xc2>
 8017bc0:	4a06      	ldr	r2, [pc, #24]	@ (8017bdc <lwip_bind+0xd8>)
 8017bc2:	69fb      	ldr	r3, [r7, #28]
 8017bc4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8017bc6:	2300      	movs	r3, #0
}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3728      	adds	r7, #40	@ 0x28
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}
 8017bd0:	0802a06c 	.word	0x0802a06c
 8017bd4:	0802a110 	.word	0x0802a110
 8017bd8:	0802a0c0 	.word	0x0802a0c0
 8017bdc:	2400bfc0 	.word	0x2400bfc0

08017be0 <lwip_close>:

int
lwip_close(int s)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b086      	sub	sp, #24
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f7ff fea5 	bl	801793c <get_socket>
 8017bf2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d102      	bne.n	8017c00 <lwip_close+0x20>
    return -1;
 8017bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8017bfe:	e039      	b.n	8017c74 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d00b      	beq.n	8017c20 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8017c08:	693b      	ldr	r3, [r7, #16]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c12:	2b10      	cmp	r3, #16
 8017c14:	bf0c      	ite	eq
 8017c16:	2301      	moveq	r3, #1
 8017c18:	2300      	movne	r3, #0
 8017c1a:	b2db      	uxtb	r3, r3
 8017c1c:	617b      	str	r3, [r7, #20]
 8017c1e:	e00a      	b.n	8017c36 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d006      	beq.n	8017c36 <lwip_close+0x56>
 8017c28:	4b14      	ldr	r3, [pc, #80]	@ (8017c7c <lwip_close+0x9c>)
 8017c2a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8017c2e:	4914      	ldr	r1, [pc, #80]	@ (8017c80 <lwip_close+0xa0>)
 8017c30:	4814      	ldr	r0, [pc, #80]	@ (8017c84 <lwip_close+0xa4>)
 8017c32:	f00d fc1f 	bl	8025474 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7fd fe24 	bl	8015888 <netconn_prepare_delete>
 8017c40:	4603      	mov	r3, r0
 8017c42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d00e      	beq.n	8017c6a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8017c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c50:	4618      	mov	r0, r3
 8017c52:	f7ff fd85 	bl	8017760 <err_to_errno>
 8017c56:	60b8      	str	r0, [r7, #8]
 8017c58:	68bb      	ldr	r3, [r7, #8]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d002      	beq.n	8017c64 <lwip_close+0x84>
 8017c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8017c88 <lwip_close+0xa8>)
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8017c64:	f04f 33ff 	mov.w	r3, #4294967295
 8017c68:	e004      	b.n	8017c74 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8017c6a:	6979      	ldr	r1, [r7, #20]
 8017c6c:	6938      	ldr	r0, [r7, #16]
 8017c6e:	f7ff ff27 	bl	8017ac0 <free_socket>
  set_errno(0);
  return 0;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3718      	adds	r7, #24
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	0802a06c 	.word	0x0802a06c
 8017c80:	0802a12c 	.word	0x0802a12c
 8017c84:	0802a0c0 	.word	0x0802a0c0
 8017c88:	2400bfc0 	.word	0x2400bfc0

08017c8c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b08c      	sub	sp, #48	@ 0x30
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	607a      	str	r2, [r7, #4]
 8017c98:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8017c9a:	2308      	movs	r3, #8
 8017c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	db01      	blt.n	8017cae <lwip_recv_tcp+0x22>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	e001      	b.n	8017cb2 <lwip_recv_tcp+0x26>
 8017cae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017cb2:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d106      	bne.n	8017cc8 <lwip_recv_tcp+0x3c>
 8017cba:	4b74      	ldr	r3, [pc, #464]	@ (8017e8c <lwip_recv_tcp+0x200>)
 8017cbc:	f240 329e 	movw	r2, #926	@ 0x39e
 8017cc0:	4973      	ldr	r1, [pc, #460]	@ (8017e90 <lwip_recv_tcp+0x204>)
 8017cc2:	4874      	ldr	r0, [pc, #464]	@ (8017e94 <lwip_recv_tcp+0x208>)
 8017cc4:	f00d fbd6 	bl	8025474 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017cd2:	2b10      	cmp	r3, #16
 8017cd4:	d006      	beq.n	8017ce4 <lwip_recv_tcp+0x58>
 8017cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8017e8c <lwip_recv_tcp+0x200>)
 8017cd8:	f240 329f 	movw	r2, #927	@ 0x39f
 8017cdc:	496e      	ldr	r1, [pc, #440]	@ (8017e98 <lwip_recv_tcp+0x20c>)
 8017cde:	486d      	ldr	r0, [pc, #436]	@ (8017e94 <lwip_recv_tcp+0x208>)
 8017ce0:	f00d fbc8 	bl	8025474 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	f003 0308 	and.w	r3, r3, #8
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d005      	beq.n	8017cfa <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8017cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017cf2:	f043 0304 	orr.w	r3, r3, #4
 8017cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	685b      	ldr	r3, [r3, #4]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d003      	beq.n	8017d0a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	617b      	str	r3, [r7, #20]
 8017d08:	e036      	b.n	8017d78 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8017d12:	f107 0114 	add.w	r1, r7, #20
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7fe f82a 	bl	8015d70 <netconn_recv_tcp_pbuf_flags>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8017d22:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d019      	beq.n	8017d5e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8017d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	f300 808d 	bgt.w	8017e4c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8017d32:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7ff fd12 	bl	8017760 <err_to_errno>
 8017d3c:	61f8      	str	r0, [r7, #28]
 8017d3e:	69fb      	ldr	r3, [r7, #28]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d002      	beq.n	8017d4a <lwip_recv_tcp+0xbe>
 8017d44:	4a55      	ldr	r2, [pc, #340]	@ (8017e9c <lwip_recv_tcp+0x210>)
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8017d4a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8017d4e:	f113 0f0f 	cmn.w	r3, #15
 8017d52:	d101      	bne.n	8017d58 <lwip_recv_tcp+0xcc>
          return 0;
 8017d54:	2300      	movs	r3, #0
 8017d56:	e094      	b.n	8017e82 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8017d58:	f04f 33ff 	mov.w	r3, #4294967295
 8017d5c:	e091      	b.n	8017e82 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d106      	bne.n	8017d72 <lwip_recv_tcp+0xe6>
 8017d64:	4b49      	ldr	r3, [pc, #292]	@ (8017e8c <lwip_recv_tcp+0x200>)
 8017d66:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8017d6a:	494d      	ldr	r1, [pc, #308]	@ (8017ea0 <lwip_recv_tcp+0x214>)
 8017d6c:	4849      	ldr	r0, [pc, #292]	@ (8017e94 <lwip_recv_tcp+0x208>)
 8017d6e:	f00d fb81 	bl	8025474 <iprintf>
      sock->lastdata.pbuf = p;
 8017d72:	697a      	ldr	r2, [r7, #20]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	891b      	ldrh	r3, [r3, #8]
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d80:	4293      	cmp	r3, r2
 8017d82:	dd03      	ble.n	8017d8c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8017d84:	697b      	ldr	r3, [r7, #20]
 8017d86:	891b      	ldrh	r3, [r3, #8]
 8017d88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017d8a:	e001      	b.n	8017d90 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8017d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d8e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 8017d90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d94:	4413      	add	r3, r2
 8017d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	dd03      	ble.n	8017da4 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8017d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	43db      	mvns	r3, r3
 8017da2:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8017da4:	6978      	ldr	r0, [r7, #20]
 8017da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017da8:	68ba      	ldr	r2, [r7, #8]
 8017daa:	18d1      	adds	r1, r2, r3
 8017dac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017dae:	2300      	movs	r3, #0
 8017db0:	f002 fe18 	bl	801a9e4 <pbuf_copy_partial>

    recvd += copylen;
 8017db4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017db8:	4413      	add	r3, r2
 8017dba:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8017dbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	da06      	bge.n	8017dd2 <lwip_recv_tcp+0x146>
 8017dc4:	4b31      	ldr	r3, [pc, #196]	@ (8017e8c <lwip_recv_tcp+0x200>)
 8017dc6:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8017dca:	4936      	ldr	r1, [pc, #216]	@ (8017ea4 <lwip_recv_tcp+0x218>)
 8017dcc:	4831      	ldr	r0, [pc, #196]	@ (8017e94 <lwip_recv_tcp+0x208>)
 8017dce:	f00d fb51 	bl	8025474 <iprintf>
    recv_left -= copylen;
 8017dd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	f003 0301 	and.w	r3, r3, #1
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d123      	bne.n	8017e2c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8017de4:	697b      	ldr	r3, [r7, #20]
 8017de6:	891b      	ldrh	r3, [r3, #8]
 8017de8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017dea:	429a      	cmp	r2, r3
 8017dec:	d906      	bls.n	8017dfc <lwip_recv_tcp+0x170>
 8017dee:	4b27      	ldr	r3, [pc, #156]	@ (8017e8c <lwip_recv_tcp+0x200>)
 8017df0:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8017df4:	492c      	ldr	r1, [pc, #176]	@ (8017ea8 <lwip_recv_tcp+0x21c>)
 8017df6:	4827      	ldr	r0, [pc, #156]	@ (8017e94 <lwip_recv_tcp+0x208>)
 8017df8:	f00d fb3c 	bl	8025474 <iprintf>
      if (p->tot_len - copylen > 0) {
 8017dfc:	697b      	ldr	r3, [r7, #20]
 8017dfe:	891b      	ldrh	r3, [r3, #8]
 8017e00:	461a      	mov	r2, r3
 8017e02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e04:	1ad3      	subs	r3, r2, r3
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	dd09      	ble.n	8017e1e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e0e:	4611      	mov	r1, r2
 8017e10:	4618      	mov	r0, r3
 8017e12:	f002 fbae 	bl	801a572 <pbuf_free_header>
 8017e16:	4602      	mov	r2, r0
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	605a      	str	r2, [r3, #4]
 8017e1c:	e006      	b.n	8017e2c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	2200      	movs	r2, #0
 8017e22:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	4618      	mov	r0, r3
 8017e28:	f002 fbd6 	bl	801a5d8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8017e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017e30:	f043 0314 	orr.w	r3, r3, #20
 8017e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8017e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	dd08      	ble.n	8017e50 <lwip_recv_tcp+0x1c4>
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	f003 0301 	and.w	r3, r3, #1
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f43f af58 	beq.w	8017cfa <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8017e4a:	e001      	b.n	8017e50 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8017e4c:	bf00      	nop
 8017e4e:	e000      	b.n	8017e52 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8017e50:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8017e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	dd0b      	ble.n	8017e70 <lwip_recv_tcp+0x1e4>
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	f003 0301 	and.w	r3, r3, #1
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d106      	bne.n	8017e70 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e68:	4611      	mov	r1, r2
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fd fece 	bl	8015c0c <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8017e70:	2300      	movs	r3, #0
 8017e72:	61bb      	str	r3, [r7, #24]
 8017e74:	69bb      	ldr	r3, [r7, #24]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d002      	beq.n	8017e80 <lwip_recv_tcp+0x1f4>
 8017e7a:	4a08      	ldr	r2, [pc, #32]	@ (8017e9c <lwip_recv_tcp+0x210>)
 8017e7c:	69bb      	ldr	r3, [r7, #24]
 8017e7e:	6013      	str	r3, [r2, #0]
  return recvd;
 8017e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3730      	adds	r7, #48	@ 0x30
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	0802a06c 	.word	0x0802a06c
 8017e90:	0802a164 	.word	0x0802a164
 8017e94:	0802a0c0 	.word	0x0802a0c0
 8017e98:	0802a174 	.word	0x0802a174
 8017e9c:	2400bfc0 	.word	0x2400bfc0
 8017ea0:	0802a198 	.word	0x0802a198
 8017ea4:	0802a1a4 	.word	0x0802a1a4
 8017ea8:	0802a1cc 	.word	0x0802a1cc

08017eac <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8017eac:	b590      	push	{r4, r7, lr}
 8017eae:	b08b      	sub	sp, #44	@ 0x2c
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	60f8      	str	r0, [r7, #12]
 8017eb4:	60b9      	str	r1, [r7, #8]
 8017eb6:	603b      	str	r3, [r7, #0]
 8017eb8:	4613      	mov	r3, r2
 8017eba:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8017ec0:	68bb      	ldr	r3, [r7, #8]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d106      	bne.n	8017ed4 <lwip_sock_make_addr+0x28>
 8017ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8017f74 <lwip_sock_make_addr+0xc8>)
 8017ec8:	f240 4207 	movw	r2, #1031	@ 0x407
 8017ecc:	492a      	ldr	r1, [pc, #168]	@ (8017f78 <lwip_sock_make_addr+0xcc>)
 8017ece:	482b      	ldr	r0, [pc, #172]	@ (8017f7c <lwip_sock_make_addr+0xd0>)
 8017ed0:	f00d fad0 	bl	8025474 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8017ed4:	683b      	ldr	r3, [r7, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d106      	bne.n	8017ee8 <lwip_sock_make_addr+0x3c>
 8017eda:	4b26      	ldr	r3, [pc, #152]	@ (8017f74 <lwip_sock_make_addr+0xc8>)
 8017edc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8017ee0:	4927      	ldr	r1, [pc, #156]	@ (8017f80 <lwip_sock_make_addr+0xd4>)
 8017ee2:	4826      	ldr	r0, [pc, #152]	@ (8017f7c <lwip_sock_make_addr+0xd0>)
 8017ee4:	f00d fac6 	bl	8025474 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8017ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d106      	bne.n	8017efc <lwip_sock_make_addr+0x50>
 8017eee:	4b21      	ldr	r3, [pc, #132]	@ (8017f74 <lwip_sock_make_addr+0xc8>)
 8017ef0:	f240 4209 	movw	r2, #1033	@ 0x409
 8017ef4:	4923      	ldr	r1, [pc, #140]	@ (8017f84 <lwip_sock_make_addr+0xd8>)
 8017ef6:	4821      	ldr	r0, [pc, #132]	@ (8017f7c <lwip_sock_make_addr+0xd0>)
 8017ef8:	f00d fabc 	bl	8025474 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8017efc:	f107 0314 	add.w	r3, r7, #20
 8017f00:	2210      	movs	r2, #16
 8017f02:	701a      	strb	r2, [r3, #0]
 8017f04:	f107 0314 	add.w	r3, r7, #20
 8017f08:	2202      	movs	r2, #2
 8017f0a:	705a      	strb	r2, [r3, #1]
 8017f0c:	f107 0414 	add.w	r4, r7, #20
 8017f10:	88fb      	ldrh	r3, [r7, #6]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 fe84 	bl	8018c20 <lwip_htons>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	8063      	strh	r3, [r4, #2]
 8017f1c:	f107 0314 	add.w	r3, r7, #20
 8017f20:	68ba      	ldr	r2, [r7, #8]
 8017f22:	6812      	ldr	r2, [r2, #0]
 8017f24:	605a      	str	r2, [r3, #4]
 8017f26:	f107 0314 	add.w	r3, r7, #20
 8017f2a:	3308      	adds	r3, #8
 8017f2c:	2208      	movs	r2, #8
 8017f2e:	2100      	movs	r1, #0
 8017f30:	4618      	mov	r0, r3
 8017f32:	f00d fb8b 	bl	802564c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8017f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	7d3a      	ldrb	r2, [r7, #20]
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d202      	bcs.n	8017f46 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8017f40:	2301      	movs	r3, #1
 8017f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f44:	e008      	b.n	8017f58 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8017f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	7d3a      	ldrb	r2, [r7, #20]
 8017f4c:	4293      	cmp	r3, r2
 8017f4e:	d903      	bls.n	8017f58 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8017f50:	7d3b      	ldrb	r3, [r7, #20]
 8017f52:	461a      	mov	r2, r3
 8017f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f56:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8017f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f5a:	681a      	ldr	r2, [r3, #0]
 8017f5c:	f107 0314 	add.w	r3, r7, #20
 8017f60:	4619      	mov	r1, r3
 8017f62:	6838      	ldr	r0, [r7, #0]
 8017f64:	f00d fc13 	bl	802578e <memcpy>
  return truncated;
 8017f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	372c      	adds	r7, #44	@ 0x2c
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd90      	pop	{r4, r7, pc}
 8017f72:	bf00      	nop
 8017f74:	0802a06c 	.word	0x0802a06c
 8017f78:	0802a1dc 	.word	0x0802a1dc
 8017f7c:	0802a0c0 	.word	0x0802a0c0
 8017f80:	0802a1f0 	.word	0x0802a1f0
 8017f84:	0802a200 	.word	0x0802a200

08017f88 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b088      	sub	sp, #32
 8017f8c:	af02      	add	r7, sp, #8
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
 8017f94:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d101      	bne.n	8017fa0 <lwip_recv_tcp_from+0x18>
    return 0;
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	e021      	b.n	8017fe4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d01d      	beq.n	8017fe2 <lwip_recv_tcp_from+0x5a>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d01a      	beq.n	8017fe2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	6818      	ldr	r0, [r3, #0]
 8017fb0:	f107 0216 	add.w	r2, r7, #22
 8017fb4:	f107 0110 	add.w	r1, r7, #16
 8017fb8:	2300      	movs	r3, #0
 8017fba:	f7fd fca5 	bl	8015908 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d00e      	beq.n	8017fe2 <lwip_recv_tcp_from+0x5a>
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d00b      	beq.n	8017fe2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	6818      	ldr	r0, [r3, #0]
 8017fce:	8afa      	ldrh	r2, [r7, #22]
 8017fd0:	f107 0110 	add.w	r1, r7, #16
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	9300      	str	r3, [sp, #0]
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	f7ff ff67 	bl	8017eac <lwip_sock_make_addr>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	e000      	b.n	8017fe4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8017fe2:	2300      	movs	r3, #0
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3718      	adds	r7, #24
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}

08017fec <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8017fec:	b590      	push	{r4, r7, lr}
 8017fee:	b08d      	sub	sp, #52	@ 0x34
 8017ff0:	af02      	add	r7, sp, #8
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	60b9      	str	r1, [r7, #8]
 8017ff6:	607a      	str	r2, [r7, #4]
 8017ff8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	689b      	ldr	r3, [r3, #8]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d10d      	bne.n	801801e <lwip_recvfrom_udp_raw+0x32>
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	68db      	ldr	r3, [r3, #12]
 8018006:	2b00      	cmp	r3, #0
 8018008:	dd09      	ble.n	801801e <lwip_recvfrom_udp_raw+0x32>
 801800a:	4b5e      	ldr	r3, [pc, #376]	@ (8018184 <lwip_recvfrom_udp_raw+0x198>)
 801800c:	f240 4249 	movw	r2, #1097	@ 0x449
 8018010:	495d      	ldr	r1, [pc, #372]	@ (8018188 <lwip_recvfrom_udp_raw+0x19c>)
 8018012:	485e      	ldr	r0, [pc, #376]	@ (801818c <lwip_recvfrom_udp_raw+0x1a0>)
 8018014:	f00d fa2e 	bl	8025474 <iprintf>
 8018018:	f06f 030f 	mvn.w	r3, #15
 801801c:	e0ad      	b.n	801817a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	f003 0308 	and.w	r3, r3, #8
 8018024:	2b00      	cmp	r3, #0
 8018026:	d003      	beq.n	8018030 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8018028:	2304      	movs	r3, #4
 801802a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801802e:	e002      	b.n	8018036 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8018030:	2300      	movs	r3, #0
 8018032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	685b      	ldr	r3, [r3, #4]
 801803a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 801803c:	693b      	ldr	r3, [r7, #16]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d11e      	bne.n	8018080 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801804a:	f107 0110 	add.w	r1, r7, #16
 801804e:	4618      	mov	r0, r3
 8018050:	f7fd feba 	bl	8015dc8 <netconn_recv_udp_raw_netbuf_flags>
 8018054:	4603      	mov	r3, r0
 8018056:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8018058:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d002      	beq.n	8018066 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8018060:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018064:	e089      	b.n	801817a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d106      	bne.n	801807a <lwip_recvfrom_udp_raw+0x8e>
 801806c:	4b45      	ldr	r3, [pc, #276]	@ (8018184 <lwip_recvfrom_udp_raw+0x198>)
 801806e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8018072:	4947      	ldr	r1, [pc, #284]	@ (8018190 <lwip_recvfrom_udp_raw+0x1a4>)
 8018074:	4845      	ldr	r0, [pc, #276]	@ (801818c <lwip_recvfrom_udp_raw+0x1a0>)
 8018076:	f00d f9fd 	bl	8025474 <iprintf>
    sock->lastdata.netbuf = buf;
 801807a:	693a      	ldr	r2, [r7, #16]
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	891b      	ldrh	r3, [r3, #8]
 8018086:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8018088:	2300      	movs	r3, #0
 801808a:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 801808c:	2300      	movs	r3, #0
 801808e:	61fb      	str	r3, [r7, #28]
 8018090:	e029      	b.n	80180e6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8018092:	8b3a      	ldrh	r2, [r7, #24]
 8018094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018096:	1ad3      	subs	r3, r2, r3
 8018098:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	689a      	ldr	r2, [r3, #8]
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	4413      	add	r3, r2
 80180a4:	685a      	ldr	r2, [r3, #4]
 80180a6:	8afb      	ldrh	r3, [r7, #22]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d902      	bls.n	80180b2 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 80180ac:	8afb      	ldrh	r3, [r7, #22]
 80180ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80180b0:	e006      	b.n	80180c0 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	689a      	ldr	r2, [r3, #8]
 80180b6:	69fb      	ldr	r3, [r7, #28]
 80180b8:	00db      	lsls	r3, r3, #3
 80180ba:	4413      	add	r3, r2
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 80180c0:	693b      	ldr	r3, [r7, #16]
 80180c2:	6818      	ldr	r0, [r3, #0]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	689a      	ldr	r2, [r3, #8]
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	4413      	add	r3, r2
 80180ce:	6819      	ldr	r1, [r3, #0]
 80180d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80180d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80180d4:	f002 fc86 	bl	801a9e4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 80180d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80180da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80180dc:	4413      	add	r3, r2
 80180de:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80180e0:	69fb      	ldr	r3, [r7, #28]
 80180e2:	3301      	adds	r3, #1
 80180e4:	61fb      	str	r3, [r7, #28]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	68db      	ldr	r3, [r3, #12]
 80180ea:	69fa      	ldr	r2, [r7, #28]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	da03      	bge.n	80180f8 <lwip_recvfrom_udp_raw+0x10c>
 80180f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80180f2:	8b3b      	ldrh	r3, [r7, #24]
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d3cc      	bcc.n	8018092 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d01a      	beq.n	8018136 <lwip_recvfrom_udp_raw+0x14a>
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d016      	beq.n	8018136 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d012      	beq.n	8018136 <lwip_recvfrom_udp_raw+0x14a>
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d00e      	beq.n	8018136 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	6818      	ldr	r0, [r3, #0]
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	f103 0108 	add.w	r1, r3, #8
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	3304      	adds	r3, #4
 801812e:	9300      	str	r3, [sp, #0]
 8018130:	4623      	mov	r3, r4
 8018132:	f7ff febb 	bl	8017eac <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2200      	movs	r2, #0
 801813a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	691b      	ldr	r3, [r3, #16]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d007      	beq.n	8018154 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8018144:	2300      	movs	r3, #0
 8018146:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8018148:	7d7b      	ldrb	r3, [r7, #21]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d102      	bne.n	8018154 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2200      	movs	r2, #0
 8018152:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	f003 0301 	and.w	r3, r3, #1
 801815a:	2b00      	cmp	r3, #0
 801815c:	d106      	bne.n	801816c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	2200      	movs	r2, #0
 8018162:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	4618      	mov	r0, r3
 8018168:	f7ff fb18 	bl	801779c <netbuf_delete>
  }
  if (datagram_len) {
 801816c:	683b      	ldr	r3, [r7, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d002      	beq.n	8018178 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	8b3a      	ldrh	r2, [r7, #24]
 8018176:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8018178:	2300      	movs	r3, #0
}
 801817a:	4618      	mov	r0, r3
 801817c:	372c      	adds	r7, #44	@ 0x2c
 801817e:	46bd      	mov	sp, r7
 8018180:	bd90      	pop	{r4, r7, pc}
 8018182:	bf00      	nop
 8018184:	0802a06c 	.word	0x0802a06c
 8018188:	0802a210 	.word	0x0802a210
 801818c:	0802a0c0 	.word	0x0802a0c0
 8018190:	0802a23c 	.word	0x0802a23c

08018194 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b096      	sub	sp, #88	@ 0x58
 8018198:	af02      	add	r7, sp, #8
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	60b9      	str	r1, [r7, #8]
 801819e:	607a      	str	r2, [r7, #4]
 80181a0:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 80181a2:	68f8      	ldr	r0, [r7, #12]
 80181a4:	f7ff fbca 	bl	801793c <get_socket>
 80181a8:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 80181aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d102      	bne.n	80181b6 <lwip_recvfrom+0x22>
    return -1;
 80181b0:	f04f 33ff 	mov.w	r3, #4294967295
 80181b4:	e078      	b.n	80182a8 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80181b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80181c0:	2b10      	cmp	r3, #16
 80181c2:	d112      	bne.n	80181ea <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	687a      	ldr	r2, [r7, #4]
 80181c8:	68b9      	ldr	r1, [r7, #8]
 80181ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80181cc:	f7ff fd5e 	bl	8017c8c <lwip_recv_tcp>
 80181d0:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 80181d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181d4:	9301      	str	r3, [sp, #4]
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	9300      	str	r3, [sp, #0]
 80181da:	4b35      	ldr	r3, [pc, #212]	@ (80182b0 <lwip_recvfrom+0x11c>)
 80181dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80181de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80181e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80181e2:	f7ff fed1 	bl	8017f88 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 80181e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181e8:	e05e      	b.n	80182a8 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 80181f6:	2300      	movs	r3, #0
 80181f8:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 80181fa:	2300      	movs	r3, #0
 80181fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 80181fe:	2300      	movs	r3, #0
 8018200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 8018202:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018206:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8018208:	2301      	movs	r3, #1
 801820a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 801820c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801820e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8018210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018212:	2b00      	cmp	r3, #0
 8018214:	d002      	beq.n	801821c <lwip_recvfrom+0x88>
 8018216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	e000      	b.n	801821e <lwip_recvfrom+0x8a>
 801821c:	2300      	movs	r3, #0
 801821e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8018220:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8018224:	f107 0214 	add.w	r2, r7, #20
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	9300      	str	r3, [sp, #0]
 801822c:	460b      	mov	r3, r1
 801822e:	6839      	ldr	r1, [r7, #0]
 8018230:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018232:	f7ff fedb 	bl	8017fec <lwip_recvfrom_udp_raw>
 8018236:	4603      	mov	r3, r0
 8018238:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 801823c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8018240:	2b00      	cmp	r3, #0
 8018242:	d00e      	beq.n	8018262 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8018244:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 8018248:	4618      	mov	r0, r3
 801824a:	f7ff fa89 	bl	8017760 <err_to_errno>
 801824e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018252:	2b00      	cmp	r3, #0
 8018254:	d002      	beq.n	801825c <lwip_recvfrom+0xc8>
 8018256:	4a17      	ldr	r2, [pc, #92]	@ (80182b4 <lwip_recvfrom+0x120>)
 8018258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801825a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 801825c:	f04f 33ff 	mov.w	r3, #4294967295
 8018260:	e022      	b.n	80182a8 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8018262:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018264:	461a      	mov	r2, r3
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	4293      	cmp	r3, r2
 801826a:	bf28      	it	cs
 801826c:	4613      	movcs	r3, r2
 801826e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018272:	4293      	cmp	r3, r2
 8018274:	d206      	bcs.n	8018284 <lwip_recvfrom+0xf0>
 8018276:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018278:	461a      	mov	r2, r3
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	4293      	cmp	r3, r2
 801827e:	bf28      	it	cs
 8018280:	4613      	movcs	r3, r2
 8018282:	e001      	b.n	8018288 <lwip_recvfrom+0xf4>
 8018284:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018288:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 801828a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801828c:	2b00      	cmp	r3, #0
 801828e:	d002      	beq.n	8018296 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8018290:	69ba      	ldr	r2, [r7, #24]
 8018292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018294:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8018296:	2300      	movs	r3, #0
 8018298:	643b      	str	r3, [r7, #64]	@ 0x40
 801829a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801829c:	2b00      	cmp	r3, #0
 801829e:	d002      	beq.n	80182a6 <lwip_recvfrom+0x112>
 80182a0:	4a04      	ldr	r2, [pc, #16]	@ (80182b4 <lwip_recvfrom+0x120>)
 80182a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80182a4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 80182a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3750      	adds	r7, #80	@ 0x50
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}
 80182b0:	0802a248 	.word	0x0802a248
 80182b4:	2400bfc0 	.word	0x2400bfc0

080182b8 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b08a      	sub	sp, #40	@ 0x28
 80182bc:	af02      	add	r7, sp, #8
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	60b9      	str	r1, [r7, #8]
 80182c2:	607a      	str	r2, [r7, #4]
 80182c4:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f7ff fb38 	bl	801793c <get_socket>
 80182cc:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d102      	bne.n	80182da <lwip_send+0x22>
    return -1;
 80182d4:	f04f 33ff 	mov.w	r3, #4294967295
 80182d8:	e046      	b.n	8018368 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80182da:	69fb      	ldr	r3, [r7, #28]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	781b      	ldrb	r3, [r3, #0]
 80182e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182e4:	2b10      	cmp	r3, #16
 80182e6:	d00b      	beq.n	8018300 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80182e8:	2300      	movs	r3, #0
 80182ea:	9301      	str	r3, [sp, #4]
 80182ec:	2300      	movs	r3, #0
 80182ee:	9300      	str	r3, [sp, #0]
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	68b9      	ldr	r1, [r7, #8]
 80182f6:	68f8      	ldr	r0, [r7, #12]
 80182f8:	f000 f83c 	bl	8018374 <lwip_sendto>
 80182fc:	4603      	mov	r3, r0
 80182fe:	e033      	b.n	8018368 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8018306:	2b00      	cmp	r3, #0
 8018308:	d001      	beq.n	801830e <lwip_send+0x56>
 801830a:	2203      	movs	r2, #3
 801830c:	e000      	b.n	8018310 <lwip_send+0x58>
 801830e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	105b      	asrs	r3, r3, #1
 8018314:	b25b      	sxtb	r3, r3
 8018316:	f003 0304 	and.w	r3, r3, #4
 801831a:	b25b      	sxtb	r3, r3
 801831c:	4313      	orrs	r3, r2
 801831e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8018320:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8018322:	2300      	movs	r3, #0
 8018324:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	6818      	ldr	r0, [r3, #0]
 801832a:	7efa      	ldrb	r2, [r7, #27]
 801832c:	f107 0310 	add.w	r3, r7, #16
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	4613      	mov	r3, r2
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	68b9      	ldr	r1, [r7, #8]
 8018338:	f7fd fda0 	bl	8015e7c <netconn_write_partly>
 801833c:	4603      	mov	r3, r0
 801833e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8018340:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018344:	4618      	mov	r0, r3
 8018346:	f7ff fa0b 	bl	8017760 <err_to_errno>
 801834a:	6178      	str	r0, [r7, #20]
 801834c:	697b      	ldr	r3, [r7, #20]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d002      	beq.n	8018358 <lwip_send+0xa0>
 8018352:	4a07      	ldr	r2, [pc, #28]	@ (8018370 <lwip_send+0xb8>)
 8018354:	697b      	ldr	r3, [r7, #20]
 8018356:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8018358:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d101      	bne.n	8018364 <lwip_send+0xac>
 8018360:	693b      	ldr	r3, [r7, #16]
 8018362:	e001      	b.n	8018368 <lwip_send+0xb0>
 8018364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018368:	4618      	mov	r0, r3
 801836a:	3720      	adds	r7, #32
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	2400bfc0 	.word	0x2400bfc0

08018374 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b08e      	sub	sp, #56	@ 0x38
 8018378:	af00      	add	r7, sp, #0
 801837a:	60f8      	str	r0, [r7, #12]
 801837c:	60b9      	str	r1, [r7, #8]
 801837e:	607a      	str	r2, [r7, #4]
 8018380:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f7ff fada 	bl	801793c <get_socket>
 8018388:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 801838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801838c:	2b00      	cmp	r3, #0
 801838e:	d102      	bne.n	8018396 <lwip_sendto+0x22>
    return -1;
 8018390:	f04f 33ff 	mov.w	r3, #4294967295
 8018394:	e093      	b.n	80184be <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8018396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80183a0:	2b10      	cmp	r3, #16
 80183a2:	d107      	bne.n	80183b4 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	687a      	ldr	r2, [r7, #4]
 80183a8:	68b9      	ldr	r1, [r7, #8]
 80183aa:	68f8      	ldr	r0, [r7, #12]
 80183ac:	f7ff ff84 	bl	80182b8 <lwip_send>
 80183b0:	4603      	mov	r3, r0
 80183b2:	e084      	b.n	80184be <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80183ba:	d30a      	bcc.n	80183d2 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80183bc:	235a      	movs	r3, #90	@ 0x5a
 80183be:	623b      	str	r3, [r7, #32]
 80183c0:	6a3b      	ldr	r3, [r7, #32]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d002      	beq.n	80183cc <lwip_sendto+0x58>
 80183c6:	4a40      	ldr	r2, [pc, #256]	@ (80184c8 <lwip_sendto+0x154>)
 80183c8:	6a3b      	ldr	r3, [r7, #32]
 80183ca:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80183cc:	f04f 33ff 	mov.w	r3, #4294967295
 80183d0:	e075      	b.n	80184be <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80183d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d102      	bne.n	80183e2 <lwip_sendto+0x6e>
 80183dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d023      	beq.n	801842a <lwip_sendto+0xb6>
 80183e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183e4:	2b10      	cmp	r3, #16
 80183e6:	d10b      	bne.n	8018400 <lwip_sendto+0x8c>
 80183e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d008      	beq.n	8018400 <lwip_sendto+0x8c>
 80183ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183f0:	785b      	ldrb	r3, [r3, #1]
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d104      	bne.n	8018400 <lwip_sendto+0x8c>
 80183f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80183f8:	f003 0303 	and.w	r3, r3, #3
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d014      	beq.n	801842a <lwip_sendto+0xb6>
 8018400:	4b32      	ldr	r3, [pc, #200]	@ (80184cc <lwip_sendto+0x158>)
 8018402:	f240 6252 	movw	r2, #1618	@ 0x652
 8018406:	4932      	ldr	r1, [pc, #200]	@ (80184d0 <lwip_sendto+0x15c>)
 8018408:	4832      	ldr	r0, [pc, #200]	@ (80184d4 <lwip_sendto+0x160>)
 801840a:	f00d f833 	bl	8025474 <iprintf>
 801840e:	f06f 000f 	mvn.w	r0, #15
 8018412:	f7ff f9a5 	bl	8017760 <err_to_errno>
 8018416:	62b8      	str	r0, [r7, #40]	@ 0x28
 8018418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801841a:	2b00      	cmp	r3, #0
 801841c:	d002      	beq.n	8018424 <lwip_sendto+0xb0>
 801841e:	4a2a      	ldr	r2, [pc, #168]	@ (80184c8 <lwip_sendto+0x154>)
 8018420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018422:	6013      	str	r3, [r2, #0]
 8018424:	f04f 33ff 	mov.w	r3, #4294967295
 8018428:	e049      	b.n	80184be <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 801842a:	2300      	movs	r3, #0
 801842c:	617b      	str	r3, [r7, #20]
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8018432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018434:	2b00      	cmp	r3, #0
 8018436:	d00a      	beq.n	801844e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8018438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	61bb      	str	r3, [r7, #24]
 801843e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018440:	885b      	ldrh	r3, [r3, #2]
 8018442:	4618      	mov	r0, r3
 8018444:	f000 fbec 	bl	8018c20 <lwip_htons>
 8018448:	4603      	mov	r3, r0
 801844a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801844c:	e003      	b.n	8018456 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 801844e:	2300      	movs	r3, #0
 8018450:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8018452:	2300      	movs	r3, #0
 8018454:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8018456:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018458:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 801845a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801845c:	f107 0310 	add.w	r3, r7, #16
 8018460:	68b9      	ldr	r1, [r7, #8]
 8018462:	4618      	mov	r0, r3
 8018464:	f7ff f9e2 	bl	801782c <netbuf_ref>
 8018468:	4603      	mov	r3, r0
 801846a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801846e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8018472:	2b00      	cmp	r3, #0
 8018474:	d10a      	bne.n	801848c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8018476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f107 0210 	add.w	r2, r7, #16
 801847e:	4611      	mov	r1, r2
 8018480:	4618      	mov	r0, r3
 8018482:	f7fd fccd 	bl	8015e20 <netconn_send>
 8018486:	4603      	mov	r3, r0
 8018488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 801848c:	f107 0310 	add.w	r3, r7, #16
 8018490:	4618      	mov	r0, r3
 8018492:	f7ff f9a3 	bl	80177dc <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8018496:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801849a:	4618      	mov	r0, r3
 801849c:	f7ff f960 	bl	8017760 <err_to_errno>
 80184a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80184a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d002      	beq.n	80184ae <lwip_sendto+0x13a>
 80184a8:	4a07      	ldr	r2, [pc, #28]	@ (80184c8 <lwip_sendto+0x154>)
 80184aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ac:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80184ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d101      	bne.n	80184ba <lwip_sendto+0x146>
 80184b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80184b8:	e001      	b.n	80184be <lwip_sendto+0x14a>
 80184ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80184be:	4618      	mov	r0, r3
 80184c0:	3738      	adds	r7, #56	@ 0x38
 80184c2:	46bd      	mov	sp, r7
 80184c4:	bd80      	pop	{r7, pc}
 80184c6:	bf00      	nop
 80184c8:	2400bfc0 	.word	0x2400bfc0
 80184cc:	0802a06c 	.word	0x0802a06c
 80184d0:	0802a34c 	.word	0x0802a34c
 80184d4:	0802a0c0 	.word	0x0802a0c0

080184d8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b086      	sub	sp, #24
 80184dc:	af00      	add	r7, sp, #0
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	2b03      	cmp	r3, #3
 80184e8:	d009      	beq.n	80184fe <lwip_socket+0x26>
 80184ea:	68bb      	ldr	r3, [r7, #8]
 80184ec:	2b03      	cmp	r3, #3
 80184ee:	dc23      	bgt.n	8018538 <lwip_socket+0x60>
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d019      	beq.n	801852a <lwip_socket+0x52>
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	2b02      	cmp	r3, #2
 80184fa:	d009      	beq.n	8018510 <lwip_socket+0x38>
 80184fc:	e01c      	b.n	8018538 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	b2db      	uxtb	r3, r3
 8018502:	4a22      	ldr	r2, [pc, #136]	@ (801858c <lwip_socket+0xb4>)
 8018504:	4619      	mov	r1, r3
 8018506:	2040      	movs	r0, #64	@ 0x40
 8018508:	f7fd f944 	bl	8015794 <netconn_new_with_proto_and_callback>
 801850c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801850e:	e019      	b.n	8018544 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2b88      	cmp	r3, #136	@ 0x88
 8018514:	d101      	bne.n	801851a <lwip_socket+0x42>
 8018516:	2321      	movs	r3, #33	@ 0x21
 8018518:	e000      	b.n	801851c <lwip_socket+0x44>
 801851a:	2320      	movs	r3, #32
 801851c:	4a1b      	ldr	r2, [pc, #108]	@ (801858c <lwip_socket+0xb4>)
 801851e:	2100      	movs	r1, #0
 8018520:	4618      	mov	r0, r3
 8018522:	f7fd f937 	bl	8015794 <netconn_new_with_proto_and_callback>
 8018526:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8018528:	e00c      	b.n	8018544 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801852a:	4a18      	ldr	r2, [pc, #96]	@ (801858c <lwip_socket+0xb4>)
 801852c:	2100      	movs	r1, #0
 801852e:	2010      	movs	r0, #16
 8018530:	f7fd f930 	bl	8015794 <netconn_new_with_proto_and_callback>
 8018534:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8018536:	e005      	b.n	8018544 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8018538:	4b15      	ldr	r3, [pc, #84]	@ (8018590 <lwip_socket+0xb8>)
 801853a:	2216      	movs	r2, #22
 801853c:	601a      	str	r2, [r3, #0]
      return -1;
 801853e:	f04f 33ff 	mov.w	r3, #4294967295
 8018542:	e01e      	b.n	8018582 <lwip_socket+0xaa>
  }

  if (!conn) {
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d105      	bne.n	8018556 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801854a:	4b11      	ldr	r3, [pc, #68]	@ (8018590 <lwip_socket+0xb8>)
 801854c:	2269      	movs	r2, #105	@ 0x69
 801854e:	601a      	str	r2, [r3, #0]
    return -1;
 8018550:	f04f 33ff 	mov.w	r3, #4294967295
 8018554:	e015      	b.n	8018582 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 8018556:	2100      	movs	r1, #0
 8018558:	6978      	ldr	r0, [r7, #20]
 801855a:	f7ff fa07 	bl	801796c <alloc_socket>
 801855e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018566:	d108      	bne.n	801857a <lwip_socket+0xa2>
    netconn_delete(conn);
 8018568:	6978      	ldr	r0, [r7, #20]
 801856a:	f7fd f9b1 	bl	80158d0 <netconn_delete>
    set_errno(ENFILE);
 801856e:	4b08      	ldr	r3, [pc, #32]	@ (8018590 <lwip_socket+0xb8>)
 8018570:	2217      	movs	r2, #23
 8018572:	601a      	str	r2, [r3, #0]
    return -1;
 8018574:	f04f 33ff 	mov.w	r3, #4294967295
 8018578:	e003      	b.n	8018582 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	693a      	ldr	r2, [r7, #16]
 801857e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8018580:	693b      	ldr	r3, [r7, #16]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3718      	adds	r7, #24
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
 801858a:	bf00      	nop
 801858c:	0801861d 	.word	0x0801861d
 8018590:	2400bfc0 	.word	0x2400bfc0

08018594 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018594:	b480      	push	{r7}
 8018596:	b087      	sub	sp, #28
 8018598:	af00      	add	r7, sp, #0
 801859a:	60f8      	str	r0, [r7, #12]
 801859c:	60b9      	str	r1, [r7, #8]
 801859e:	607a      	str	r2, [r7, #4]
 80185a0:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80185a2:	2300      	movs	r3, #0
 80185a4:	617b      	str	r3, [r7, #20]
 80185a6:	e02c      	b.n	8018602 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	695a      	ldr	r2, [r3, #20]
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	4413      	add	r3, r2
 80185b2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80185b4:	693b      	ldr	r3, [r7, #16]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	68ba      	ldr	r2, [r7, #8]
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d11e      	bne.n	80185fc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d009      	beq.n	80185d8 <lwip_poll_should_wake+0x44>
 80185c4:	693b      	ldr	r3, [r7, #16]
 80185c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80185ca:	b29b      	uxth	r3, r3
 80185cc:	f003 0301 	and.w	r3, r3, #1
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d001      	beq.n	80185d8 <lwip_poll_should_wake+0x44>
        return 1;
 80185d4:	2301      	movs	r3, #1
 80185d6:	e01a      	b.n	801860e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d009      	beq.n	80185f2 <lwip_poll_should_wake+0x5e>
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	f003 0302 	and.w	r3, r3, #2
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d001      	beq.n	80185f2 <lwip_poll_should_wake+0x5e>
        return 1;
 80185ee:	2301      	movs	r3, #1
 80185f0:	e00d      	b.n	801860e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80185f2:	6a3b      	ldr	r3, [r7, #32]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d001      	beq.n	80185fc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80185f8:	2301      	movs	r3, #1
 80185fa:	e008      	b.n	801860e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	3301      	adds	r3, #1
 8018600:	617b      	str	r3, [r7, #20]
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	699b      	ldr	r3, [r3, #24]
 8018606:	697a      	ldr	r2, [r7, #20]
 8018608:	429a      	cmp	r2, r3
 801860a:	d3cd      	bcc.n	80185a8 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 801860c:	2300      	movs	r3, #0
}
 801860e:	4618      	mov	r0, r3
 8018610:	371c      	adds	r7, #28
 8018612:	46bd      	mov	sp, r7
 8018614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018618:	4770      	bx	lr
	...

0801861c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b08a      	sub	sp, #40	@ 0x28
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	460b      	mov	r3, r1
 8018626:	70fb      	strb	r3, [r7, #3]
 8018628:	4613      	mov	r3, r2
 801862a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2b00      	cmp	r3, #0
 8018630:	f000 80a4 	beq.w	801877c <event_callback+0x160>
    s = conn->socket;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	699b      	ldr	r3, [r3, #24]
 8018638:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 801863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801863c:	2b00      	cmp	r3, #0
 801863e:	da18      	bge.n	8018672 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8018640:	f00b fe7e 	bl	8024340 <sys_arch_protect>
 8018644:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	699b      	ldr	r3, [r3, #24]
 801864a:	2b00      	cmp	r3, #0
 801864c:	da0b      	bge.n	8018666 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 801864e:	78fb      	ldrb	r3, [r7, #3]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d104      	bne.n	801865e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	699b      	ldr	r3, [r3, #24]
 8018658:	1e5a      	subs	r2, r3, #1
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 801865e:	69f8      	ldr	r0, [r7, #28]
 8018660:	f00b fe7c 	bl	802435c <sys_arch_unprotect>
        return;
 8018664:	e08d      	b.n	8018782 <event_callback+0x166>
      }
      s = conn->socket;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	699b      	ldr	r3, [r3, #24]
 801866a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 801866c:	69f8      	ldr	r0, [r7, #28]
 801866e:	f00b fe75 	bl	802435c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8018672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018674:	f7ff f962 	bl	801793c <get_socket>
 8018678:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801867a:	69bb      	ldr	r3, [r7, #24]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d07f      	beq.n	8018780 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8018680:	2301      	movs	r3, #1
 8018682:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8018684:	f00b fe5c 	bl	8024340 <sys_arch_protect>
 8018688:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 801868a:	78fb      	ldrb	r3, [r7, #3]
 801868c:	2b04      	cmp	r3, #4
 801868e:	d83e      	bhi.n	801870e <event_callback+0xf2>
 8018690:	a201      	add	r2, pc, #4	@ (adr r2, 8018698 <event_callback+0x7c>)
 8018692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018696:	bf00      	nop
 8018698:	080186ad 	.word	0x080186ad
 801869c:	080186cf 	.word	0x080186cf
 80186a0:	080186e7 	.word	0x080186e7
 80186a4:	080186fb 	.word	0x080186fb
 80186a8:	08018707 	.word	0x08018707
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80186ac:	69bb      	ldr	r3, [r7, #24]
 80186ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	3301      	adds	r3, #1
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	b21a      	sxth	r2, r3
 80186ba:	69bb      	ldr	r3, [r7, #24]
 80186bc:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80186be:	69bb      	ldr	r3, [r7, #24]
 80186c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	dd2a      	ble.n	801871e <event_callback+0x102>
        check_waiters = 0;
 80186c8:	2300      	movs	r3, #0
 80186ca:	623b      	str	r3, [r7, #32]
      }
      break;
 80186cc:	e027      	b.n	801871e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80186ce:	69bb      	ldr	r3, [r7, #24]
 80186d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	3b01      	subs	r3, #1
 80186d8:	b29b      	uxth	r3, r3
 80186da:	b21a      	sxth	r2, r3
 80186dc:	69bb      	ldr	r3, [r7, #24]
 80186de:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80186e0:	2300      	movs	r3, #0
 80186e2:	623b      	str	r3, [r7, #32]
      break;
 80186e4:	e01c      	b.n	8018720 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80186e6:	69bb      	ldr	r3, [r7, #24]
 80186e8:	895b      	ldrh	r3, [r3, #10]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d001      	beq.n	80186f2 <event_callback+0xd6>
        check_waiters = 0;
 80186ee:	2300      	movs	r3, #0
 80186f0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80186f2:	69bb      	ldr	r3, [r7, #24]
 80186f4:	2201      	movs	r2, #1
 80186f6:	815a      	strh	r2, [r3, #10]
      break;
 80186f8:	e012      	b.n	8018720 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	2200      	movs	r2, #0
 80186fe:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8018700:	2300      	movs	r3, #0
 8018702:	623b      	str	r3, [r7, #32]
      break;
 8018704:	e00c      	b.n	8018720 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	2201      	movs	r2, #1
 801870a:	819a      	strh	r2, [r3, #12]
      break;
 801870c:	e008      	b.n	8018720 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 801870e:	4b1e      	ldr	r3, [pc, #120]	@ (8018788 <event_callback+0x16c>)
 8018710:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8018714:	491d      	ldr	r1, [pc, #116]	@ (801878c <event_callback+0x170>)
 8018716:	481e      	ldr	r0, [pc, #120]	@ (8018790 <event_callback+0x174>)
 8018718:	f00c feac 	bl	8025474 <iprintf>
      break;
 801871c:	e000      	b.n	8018720 <event_callback+0x104>
      break;
 801871e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8018720:	69bb      	ldr	r3, [r7, #24]
 8018722:	7b9b      	ldrb	r3, [r3, #14]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d025      	beq.n	8018774 <event_callback+0x158>
 8018728:	6a3b      	ldr	r3, [r7, #32]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d022      	beq.n	8018774 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801872e:	69bb      	ldr	r3, [r7, #24]
 8018730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018734:	2b00      	cmp	r3, #0
 8018736:	bfcc      	ite	gt
 8018738:	2301      	movgt	r3, #1
 801873a:	2300      	movle	r3, #0
 801873c:	b2db      	uxtb	r3, r3
 801873e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	895b      	ldrh	r3, [r3, #10]
 8018744:	2b00      	cmp	r3, #0
 8018746:	bf14      	ite	ne
 8018748:	2301      	movne	r3, #1
 801874a:	2300      	moveq	r3, #0
 801874c:	b2db      	uxtb	r3, r3
 801874e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8018750:	69bb      	ldr	r3, [r7, #24]
 8018752:	899b      	ldrh	r3, [r3, #12]
 8018754:	2b00      	cmp	r3, #0
 8018756:	bf14      	ite	ne
 8018758:	2301      	movne	r3, #1
 801875a:	2300      	moveq	r3, #0
 801875c:	b2db      	uxtb	r3, r3
 801875e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8018760:	69f8      	ldr	r0, [r7, #28]
 8018762:	f00b fdfb 	bl	802435c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	693a      	ldr	r2, [r7, #16]
 801876a:	6979      	ldr	r1, [r7, #20]
 801876c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801876e:	f000 f811 	bl	8018794 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8018772:	e006      	b.n	8018782 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8018774:	69f8      	ldr	r0, [r7, #28]
 8018776:	f00b fdf1 	bl	802435c <sys_arch_unprotect>
 801877a:	e002      	b.n	8018782 <event_callback+0x166>
    return;
 801877c:	bf00      	nop
 801877e:	e000      	b.n	8018782 <event_callback+0x166>
      return;
 8018780:	bf00      	nop
  }
  done_socket(sock);
}
 8018782:	3728      	adds	r7, #40	@ 0x28
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	0802a06c 	.word	0x0802a06c
 801878c:	0802a3e8 	.word	0x0802a3e8
 8018790:	0802a0c0 	.word	0x0802a0c0

08018794 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b088      	sub	sp, #32
 8018798:	af02      	add	r7, sp, #8
 801879a:	60f8      	str	r0, [r7, #12]
 801879c:	60b9      	str	r1, [r7, #8]
 801879e:	607a      	str	r2, [r7, #4]
 80187a0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80187a2:	4b42      	ldr	r3, [pc, #264]	@ (80188ac <select_check_waiters+0x118>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	617b      	str	r3, [r7, #20]
 80187a8:	e078      	b.n	801889c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	69db      	ldr	r3, [r3, #28]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d171      	bne.n	8018896 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80187b2:	2300      	movs	r3, #0
 80187b4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	695b      	ldr	r3, [r3, #20]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d009      	beq.n	80187d2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80187be:	683b      	ldr	r3, [r7, #0]
 80187c0:	9300      	str	r3, [sp, #0]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	68ba      	ldr	r2, [r7, #8]
 80187c6:	68f9      	ldr	r1, [r7, #12]
 80187c8:	6978      	ldr	r0, [r7, #20]
 80187ca:	f7ff fee3 	bl	8018594 <lwip_poll_should_wake>
 80187ce:	6138      	str	r0, [r7, #16]
 80187d0:	e056      	b.n	8018880 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d017      	beq.n	8018808 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80187d8:	697b      	ldr	r3, [r7, #20]
 80187da:	689b      	ldr	r3, [r3, #8]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d013      	beq.n	8018808 <select_check_waiters+0x74>
 80187e0:	697b      	ldr	r3, [r7, #20]
 80187e2:	689a      	ldr	r2, [r3, #8]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	da00      	bge.n	80187ec <select_check_waiters+0x58>
 80187ea:	331f      	adds	r3, #31
 80187ec:	115b      	asrs	r3, r3, #5
 80187ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	f003 031f 	and.w	r3, r3, #31
 80187f8:	fa22 f303 	lsr.w	r3, r2, r3
 80187fc:	f003 0301 	and.w	r3, r3, #1
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <select_check_waiters+0x74>
            do_signal = 1;
 8018804:	2301      	movs	r3, #1
 8018806:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d01a      	beq.n	8018844 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d117      	bne.n	8018844 <select_check_waiters+0xb0>
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	68db      	ldr	r3, [r3, #12]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d013      	beq.n	8018844 <select_check_waiters+0xb0>
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	68da      	ldr	r2, [r3, #12]
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	2b00      	cmp	r3, #0
 8018824:	da00      	bge.n	8018828 <select_check_waiters+0x94>
 8018826:	331f      	adds	r3, #31
 8018828:	115b      	asrs	r3, r3, #5
 801882a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	f003 031f 	and.w	r3, r3, #31
 8018834:	fa22 f303 	lsr.w	r3, r2, r3
 8018838:	f003 0301 	and.w	r3, r3, #1
 801883c:	2b00      	cmp	r3, #0
 801883e:	d001      	beq.n	8018844 <select_check_waiters+0xb0>
            do_signal = 1;
 8018840:	2301      	movs	r3, #1
 8018842:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d01a      	beq.n	8018880 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801884a:	693b      	ldr	r3, [r7, #16]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d117      	bne.n	8018880 <select_check_waiters+0xec>
 8018850:	697b      	ldr	r3, [r7, #20]
 8018852:	691b      	ldr	r3, [r3, #16]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d013      	beq.n	8018880 <select_check_waiters+0xec>
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	691a      	ldr	r2, [r3, #16]
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	2b00      	cmp	r3, #0
 8018860:	da00      	bge.n	8018864 <select_check_waiters+0xd0>
 8018862:	331f      	adds	r3, #31
 8018864:	115b      	asrs	r3, r3, #5
 8018866:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	f003 031f 	and.w	r3, r3, #31
 8018870:	fa22 f303 	lsr.w	r3, r2, r3
 8018874:	f003 0301 	and.w	r3, r3, #1
 8018878:	2b00      	cmp	r3, #0
 801887a:	d001      	beq.n	8018880 <select_check_waiters+0xec>
            do_signal = 1;
 801887c:	2301      	movs	r3, #1
 801887e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d007      	beq.n	8018896 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8018886:	697b      	ldr	r3, [r7, #20]
 8018888:	2201      	movs	r2, #1
 801888a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	3320      	adds	r3, #32
 8018890:	4618      	mov	r0, r3
 8018892:	f00b fcb1 	bl	80241f8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8018896:	697b      	ldr	r3, [r7, #20]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	617b      	str	r3, [r7, #20]
 801889c:	697b      	ldr	r3, [r7, #20]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d183      	bne.n	80187aa <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 80188a2:	bf00      	nop
 80188a4:	bf00      	nop
 80188a6:	3718      	adds	r7, #24
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	24008d50 	.word	0x24008d50

080188b0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80188ba:	f008 fa31 	bl	8020d20 <sys_timeouts_sleeptime>
 80188be:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188c6:	d10b      	bne.n	80188e0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80188c8:	4813      	ldr	r0, [pc, #76]	@ (8018918 <tcpip_timeouts_mbox_fetch+0x68>)
 80188ca:	f00b fd06 	bl	80242da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80188ce:	2200      	movs	r2, #0
 80188d0:	6839      	ldr	r1, [r7, #0]
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f00b fbbe 	bl	8024054 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80188d8:	480f      	ldr	r0, [pc, #60]	@ (8018918 <tcpip_timeouts_mbox_fetch+0x68>)
 80188da:	f00b fcef 	bl	80242bc <sys_mutex_lock>
    return;
 80188de:	e018      	b.n	8018912 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d102      	bne.n	80188ec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80188e6:	f008 f9e1 	bl	8020cac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80188ea:	e7e6      	b.n	80188ba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80188ec:	480a      	ldr	r0, [pc, #40]	@ (8018918 <tcpip_timeouts_mbox_fetch+0x68>)
 80188ee:	f00b fcf4 	bl	80242da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80188f2:	68fa      	ldr	r2, [r7, #12]
 80188f4:	6839      	ldr	r1, [r7, #0]
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f00b fbac 	bl	8024054 <sys_arch_mbox_fetch>
 80188fc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80188fe:	4806      	ldr	r0, [pc, #24]	@ (8018918 <tcpip_timeouts_mbox_fetch+0x68>)
 8018900:	f00b fcdc 	bl	80242bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801890a:	d102      	bne.n	8018912 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801890c:	f008 f9ce 	bl	8020cac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8018910:	e7d3      	b.n	80188ba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8018912:	3710      	adds	r7, #16
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	24008d60 	.word	0x24008d60

0801891c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8018924:	4810      	ldr	r0, [pc, #64]	@ (8018968 <tcpip_thread+0x4c>)
 8018926:	f00b fcc9 	bl	80242bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801892a:	4b10      	ldr	r3, [pc, #64]	@ (801896c <tcpip_thread+0x50>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d005      	beq.n	801893e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8018932:	4b0e      	ldr	r3, [pc, #56]	@ (801896c <tcpip_thread+0x50>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	4a0e      	ldr	r2, [pc, #56]	@ (8018970 <tcpip_thread+0x54>)
 8018938:	6812      	ldr	r2, [r2, #0]
 801893a:	4610      	mov	r0, r2
 801893c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801893e:	f107 030c 	add.w	r3, r7, #12
 8018942:	4619      	mov	r1, r3
 8018944:	480b      	ldr	r0, [pc, #44]	@ (8018974 <tcpip_thread+0x58>)
 8018946:	f7ff ffb3 	bl	80188b0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d106      	bne.n	801895e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018950:	4b09      	ldr	r3, [pc, #36]	@ (8018978 <tcpip_thread+0x5c>)
 8018952:	2291      	movs	r2, #145	@ 0x91
 8018954:	4909      	ldr	r1, [pc, #36]	@ (801897c <tcpip_thread+0x60>)
 8018956:	480a      	ldr	r0, [pc, #40]	@ (8018980 <tcpip_thread+0x64>)
 8018958:	f00c fd8c 	bl	8025474 <iprintf>
      continue;
 801895c:	e003      	b.n	8018966 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	4618      	mov	r0, r3
 8018962:	f000 f80f 	bl	8018984 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8018966:	e7ea      	b.n	801893e <tcpip_thread+0x22>
 8018968:	24008d60 	.word	0x24008d60
 801896c:	24008d54 	.word	0x24008d54
 8018970:	24008d58 	.word	0x24008d58
 8018974:	24008d5c 	.word	0x24008d5c
 8018978:	0802a43c 	.word	0x0802a43c
 801897c:	0802a46c 	.word	0x0802a46c
 8018980:	0802a48c 	.word	0x0802a48c

08018984 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	781b      	ldrb	r3, [r3, #0]
 8018990:	2b02      	cmp	r3, #2
 8018992:	d026      	beq.n	80189e2 <tcpip_thread_handle_msg+0x5e>
 8018994:	2b02      	cmp	r3, #2
 8018996:	dc2b      	bgt.n	80189f0 <tcpip_thread_handle_msg+0x6c>
 8018998:	2b00      	cmp	r3, #0
 801899a:	d002      	beq.n	80189a2 <tcpip_thread_handle_msg+0x1e>
 801899c:	2b01      	cmp	r3, #1
 801899e:	d015      	beq.n	80189cc <tcpip_thread_handle_msg+0x48>
 80189a0:	e026      	b.n	80189f0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	68db      	ldr	r3, [r3, #12]
 80189a6:	687a      	ldr	r2, [r7, #4]
 80189a8:	6850      	ldr	r0, [r2, #4]
 80189aa:	687a      	ldr	r2, [r7, #4]
 80189ac:	6892      	ldr	r2, [r2, #8]
 80189ae:	4611      	mov	r1, r2
 80189b0:	4798      	blx	r3
 80189b2:	4603      	mov	r3, r0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d004      	beq.n	80189c2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	4618      	mov	r0, r3
 80189be:	f001 fe0b 	bl	801a5d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80189c2:	6879      	ldr	r1, [r7, #4]
 80189c4:	2009      	movs	r0, #9
 80189c6:	f000 ff31 	bl	801982c <memp_free>
      break;
 80189ca:	e018      	b.n	80189fe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	6892      	ldr	r2, [r2, #8]
 80189d4:	4610      	mov	r0, r2
 80189d6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80189d8:	6879      	ldr	r1, [r7, #4]
 80189da:	2008      	movs	r0, #8
 80189dc:	f000 ff26 	bl	801982c <memp_free>
      break;
 80189e0:	e00d      	b.n	80189fe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	687a      	ldr	r2, [r7, #4]
 80189e8:	6892      	ldr	r2, [r2, #8]
 80189ea:	4610      	mov	r0, r2
 80189ec:	4798      	blx	r3
      break;
 80189ee:	e006      	b.n	80189fe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80189f0:	4b05      	ldr	r3, [pc, #20]	@ (8018a08 <tcpip_thread_handle_msg+0x84>)
 80189f2:	22cf      	movs	r2, #207	@ 0xcf
 80189f4:	4905      	ldr	r1, [pc, #20]	@ (8018a0c <tcpip_thread_handle_msg+0x88>)
 80189f6:	4806      	ldr	r0, [pc, #24]	@ (8018a10 <tcpip_thread_handle_msg+0x8c>)
 80189f8:	f00c fd3c 	bl	8025474 <iprintf>
      break;
 80189fc:	bf00      	nop
  }
}
 80189fe:	bf00      	nop
 8018a00:	3708      	adds	r7, #8
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	0802a43c 	.word	0x0802a43c
 8018a0c:	0802a46c 	.word	0x0802a46c
 8018a10:	0802a48c 	.word	0x0802a48c

08018a14 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b086      	sub	sp, #24
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	60f8      	str	r0, [r7, #12]
 8018a1c:	60b9      	str	r1, [r7, #8]
 8018a1e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018a20:	481a      	ldr	r0, [pc, #104]	@ (8018a8c <tcpip_inpkt+0x78>)
 8018a22:	f00b fb72 	bl	802410a <sys_mbox_valid>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d105      	bne.n	8018a38 <tcpip_inpkt+0x24>
 8018a2c:	4b18      	ldr	r3, [pc, #96]	@ (8018a90 <tcpip_inpkt+0x7c>)
 8018a2e:	22fc      	movs	r2, #252	@ 0xfc
 8018a30:	4918      	ldr	r1, [pc, #96]	@ (8018a94 <tcpip_inpkt+0x80>)
 8018a32:	4819      	ldr	r0, [pc, #100]	@ (8018a98 <tcpip_inpkt+0x84>)
 8018a34:	f00c fd1e 	bl	8025474 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018a38:	2009      	movs	r0, #9
 8018a3a:	f000 fe81 	bl	8019740 <memp_malloc>
 8018a3e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d102      	bne.n	8018a4c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018a46:	f04f 33ff 	mov.w	r3, #4294967295
 8018a4a:	e01a      	b.n	8018a82 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	2200      	movs	r2, #0
 8018a50:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	68fa      	ldr	r2, [r7, #12]
 8018a56:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	68ba      	ldr	r2, [r7, #8]
 8018a5c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018a64:	6979      	ldr	r1, [r7, #20]
 8018a66:	4809      	ldr	r0, [pc, #36]	@ (8018a8c <tcpip_inpkt+0x78>)
 8018a68:	f00b fada 	bl	8024020 <sys_mbox_trypost>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d006      	beq.n	8018a80 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018a72:	6979      	ldr	r1, [r7, #20]
 8018a74:	2009      	movs	r0, #9
 8018a76:	f000 fed9 	bl	801982c <memp_free>
    return ERR_MEM;
 8018a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a7e:	e000      	b.n	8018a82 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018a80:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018a82:	4618      	mov	r0, r3
 8018a84:	3718      	adds	r7, #24
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}
 8018a8a:	bf00      	nop
 8018a8c:	24008d5c 	.word	0x24008d5c
 8018a90:	0802a43c 	.word	0x0802a43c
 8018a94:	0802a4b4 	.word	0x0802a4b4
 8018a98:	0802a48c 	.word	0x0802a48c

08018a9c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b082      	sub	sp, #8
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
 8018aa4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018aac:	f003 0318 	and.w	r3, r3, #24
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d006      	beq.n	8018ac2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8018ab4:	4a08      	ldr	r2, [pc, #32]	@ (8018ad8 <tcpip_input+0x3c>)
 8018ab6:	6839      	ldr	r1, [r7, #0]
 8018ab8:	6878      	ldr	r0, [r7, #4]
 8018aba:	f7ff ffab 	bl	8018a14 <tcpip_inpkt>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	e005      	b.n	8018ace <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8018ac2:	4a06      	ldr	r2, [pc, #24]	@ (8018adc <tcpip_input+0x40>)
 8018ac4:	6839      	ldr	r1, [r7, #0]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f7ff ffa4 	bl	8018a14 <tcpip_inpkt>
 8018acc:	4603      	mov	r3, r0
}
 8018ace:	4618      	mov	r0, r3
 8018ad0:	3708      	adds	r7, #8
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd80      	pop	{r7, pc}
 8018ad6:	bf00      	nop
 8018ad8:	08023e0d 	.word	0x08023e0d
 8018adc:	08022a99 	.word	0x08022a99

08018ae0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b084      	sub	sp, #16
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8018aea:	4819      	ldr	r0, [pc, #100]	@ (8018b50 <tcpip_try_callback+0x70>)
 8018aec:	f00b fb0d 	bl	802410a <sys_mbox_valid>
 8018af0:	4603      	mov	r3, r0
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d106      	bne.n	8018b04 <tcpip_try_callback+0x24>
 8018af6:	4b17      	ldr	r3, [pc, #92]	@ (8018b54 <tcpip_try_callback+0x74>)
 8018af8:	f240 125d 	movw	r2, #349	@ 0x15d
 8018afc:	4916      	ldr	r1, [pc, #88]	@ (8018b58 <tcpip_try_callback+0x78>)
 8018afe:	4817      	ldr	r0, [pc, #92]	@ (8018b5c <tcpip_try_callback+0x7c>)
 8018b00:	f00c fcb8 	bl	8025474 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8018b04:	2008      	movs	r0, #8
 8018b06:	f000 fe1b 	bl	8019740 <memp_malloc>
 8018b0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d102      	bne.n	8018b18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8018b12:	f04f 33ff 	mov.w	r3, #4294967295
 8018b16:	e017      	b.n	8018b48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	2201      	movs	r2, #1
 8018b1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	687a      	ldr	r2, [r7, #4]
 8018b22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	683a      	ldr	r2, [r7, #0]
 8018b28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8018b2a:	68f9      	ldr	r1, [r7, #12]
 8018b2c:	4808      	ldr	r0, [pc, #32]	@ (8018b50 <tcpip_try_callback+0x70>)
 8018b2e:	f00b fa77 	bl	8024020 <sys_mbox_trypost>
 8018b32:	4603      	mov	r3, r0
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d006      	beq.n	8018b46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8018b38:	68f9      	ldr	r1, [r7, #12]
 8018b3a:	2008      	movs	r0, #8
 8018b3c:	f000 fe76 	bl	801982c <memp_free>
    return ERR_MEM;
 8018b40:	f04f 33ff 	mov.w	r3, #4294967295
 8018b44:	e000      	b.n	8018b48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8018b46:	2300      	movs	r3, #0
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3710      	adds	r7, #16
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}
 8018b50:	24008d5c 	.word	0x24008d5c
 8018b54:	0802a43c 	.word	0x0802a43c
 8018b58:	0802a4b4 	.word	0x0802a4b4
 8018b5c:	0802a48c 	.word	0x0802a48c

08018b60 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	60f8      	str	r0, [r7, #12]
 8018b68:	60b9      	str	r1, [r7, #8]
 8018b6a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8018b6c:	4806      	ldr	r0, [pc, #24]	@ (8018b88 <tcpip_send_msg_wait_sem+0x28>)
 8018b6e:	f00b fba5 	bl	80242bc <sys_mutex_lock>
  fn(apimsg);
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	68b8      	ldr	r0, [r7, #8]
 8018b76:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8018b78:	4803      	ldr	r0, [pc, #12]	@ (8018b88 <tcpip_send_msg_wait_sem+0x28>)
 8018b7a:	f00b fbae 	bl	80242da <sys_mutex_unlock>
  return ERR_OK;
 8018b7e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	3710      	adds	r7, #16
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	24008d60 	.word	0x24008d60

08018b8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b084      	sub	sp, #16
 8018b90:	af02      	add	r7, sp, #8
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
  lwip_init();
 8018b96:	f000 f92d 	bl	8018df4 <lwip_init>

  tcpip_init_done = initfunc;
 8018b9a:	4a17      	ldr	r2, [pc, #92]	@ (8018bf8 <tcpip_init+0x6c>)
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8018ba0:	4a16      	ldr	r2, [pc, #88]	@ (8018bfc <tcpip_init+0x70>)
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8018ba6:	2106      	movs	r1, #6
 8018ba8:	4815      	ldr	r0, [pc, #84]	@ (8018c00 <tcpip_init+0x74>)
 8018baa:	f00b fa05 	bl	8023fb8 <sys_mbox_new>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d006      	beq.n	8018bc2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8018bb4:	4b13      	ldr	r3, [pc, #76]	@ (8018c04 <tcpip_init+0x78>)
 8018bb6:	f240 2261 	movw	r2, #609	@ 0x261
 8018bba:	4913      	ldr	r1, [pc, #76]	@ (8018c08 <tcpip_init+0x7c>)
 8018bbc:	4813      	ldr	r0, [pc, #76]	@ (8018c0c <tcpip_init+0x80>)
 8018bbe:	f00c fc59 	bl	8025474 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8018bc2:	4813      	ldr	r0, [pc, #76]	@ (8018c10 <tcpip_init+0x84>)
 8018bc4:	f00b fb5e 	bl	8024284 <sys_mutex_new>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d006      	beq.n	8018bdc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8018bce:	4b0d      	ldr	r3, [pc, #52]	@ (8018c04 <tcpip_init+0x78>)
 8018bd0:	f240 2265 	movw	r2, #613	@ 0x265
 8018bd4:	490f      	ldr	r1, [pc, #60]	@ (8018c14 <tcpip_init+0x88>)
 8018bd6:	480d      	ldr	r0, [pc, #52]	@ (8018c0c <tcpip_init+0x80>)
 8018bd8:	f00c fc4c 	bl	8025474 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8018bdc:	2300      	movs	r3, #0
 8018bde:	9300      	str	r3, [sp, #0]
 8018be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018be4:	2200      	movs	r2, #0
 8018be6:	490c      	ldr	r1, [pc, #48]	@ (8018c18 <tcpip_init+0x8c>)
 8018be8:	480c      	ldr	r0, [pc, #48]	@ (8018c1c <tcpip_init+0x90>)
 8018bea:	f00b fb83 	bl	80242f4 <sys_thread_new>
}
 8018bee:	bf00      	nop
 8018bf0:	3708      	adds	r7, #8
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	24008d54 	.word	0x24008d54
 8018bfc:	24008d58 	.word	0x24008d58
 8018c00:	24008d5c 	.word	0x24008d5c
 8018c04:	0802a43c 	.word	0x0802a43c
 8018c08:	0802a4c4 	.word	0x0802a4c4
 8018c0c:	0802a48c 	.word	0x0802a48c
 8018c10:	24008d60 	.word	0x24008d60
 8018c14:	0802a4e8 	.word	0x0802a4e8
 8018c18:	0801891d 	.word	0x0801891d
 8018c1c:	0802a50c 	.word	0x0802a50c

08018c20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8018c2a:	88fb      	ldrh	r3, [r7, #6]
 8018c2c:	021b      	lsls	r3, r3, #8
 8018c2e:	b21a      	sxth	r2, r3
 8018c30:	88fb      	ldrh	r3, [r7, #6]
 8018c32:	0a1b      	lsrs	r3, r3, #8
 8018c34:	b29b      	uxth	r3, r3
 8018c36:	b21b      	sxth	r3, r3
 8018c38:	4313      	orrs	r3, r2
 8018c3a:	b21b      	sxth	r3, r3
 8018c3c:	b29b      	uxth	r3, r3
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	370c      	adds	r7, #12
 8018c42:	46bd      	mov	sp, r7
 8018c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c48:	4770      	bx	lr

08018c4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8018c4a:	b480      	push	{r7}
 8018c4c:	b083      	sub	sp, #12
 8018c4e:	af00      	add	r7, sp, #0
 8018c50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	061a      	lsls	r2, r3, #24
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	021b      	lsls	r3, r3, #8
 8018c5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8018c5e:	431a      	orrs	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	0a1b      	lsrs	r3, r3, #8
 8018c64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018c68:	431a      	orrs	r2, r3
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	0e1b      	lsrs	r3, r3, #24
 8018c6e:	4313      	orrs	r3, r2
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	370c      	adds	r7, #12
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b089      	sub	sp, #36	@ 0x24
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
 8018c84:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8018c8e:	2300      	movs	r3, #0
 8018c90:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8018c92:	69fb      	ldr	r3, [r7, #28]
 8018c94:	f003 0301 	and.w	r3, r3, #1
 8018c98:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018c9a:	693b      	ldr	r3, [r7, #16]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d00d      	beq.n	8018cbc <lwip_standard_chksum+0x40>
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	dd0a      	ble.n	8018cbc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8018ca6:	69fa      	ldr	r2, [r7, #28]
 8018ca8:	1c53      	adds	r3, r2, #1
 8018caa:	61fb      	str	r3, [r7, #28]
 8018cac:	f107 030e 	add.w	r3, r7, #14
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	7812      	ldrb	r2, [r2, #0]
 8018cb4:	701a      	strb	r2, [r3, #0]
    len--;
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	3b01      	subs	r3, #1
 8018cba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8018cc0:	e00a      	b.n	8018cd8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8018cc2:	69bb      	ldr	r3, [r7, #24]
 8018cc4:	1c9a      	adds	r2, r3, #2
 8018cc6:	61ba      	str	r2, [r7, #24]
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	461a      	mov	r2, r3
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	4413      	add	r3, r2
 8018cd0:	617b      	str	r3, [r7, #20]
    len -= 2;
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	3b02      	subs	r3, #2
 8018cd6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	2b01      	cmp	r3, #1
 8018cdc:	dcf1      	bgt.n	8018cc2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	dd04      	ble.n	8018cee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018ce4:	f107 030e 	add.w	r3, r7, #14
 8018ce8:	69ba      	ldr	r2, [r7, #24]
 8018cea:	7812      	ldrb	r2, [r2, #0]
 8018cec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8018cee:	89fb      	ldrh	r3, [r7, #14]
 8018cf0:	461a      	mov	r2, r3
 8018cf2:	697b      	ldr	r3, [r7, #20]
 8018cf4:	4413      	add	r3, r2
 8018cf6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	0c1a      	lsrs	r2, r3, #16
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	b29b      	uxth	r3, r3
 8018d00:	4413      	add	r3, r2
 8018d02:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	0c1a      	lsrs	r2, r3, #16
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	b29b      	uxth	r3, r3
 8018d0c:	4413      	add	r3, r2
 8018d0e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8018d10:	693b      	ldr	r3, [r7, #16]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d007      	beq.n	8018d26 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	021b      	lsls	r3, r3, #8
 8018d1a:	b29a      	uxth	r2, r3
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	0a1b      	lsrs	r3, r3, #8
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	4313      	orrs	r3, r2
 8018d24:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	b29b      	uxth	r3, r3
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3724      	adds	r7, #36	@ 0x24
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018d36:	b580      	push	{r7, lr}
 8018d38:	b082      	sub	sp, #8
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]
 8018d3e:	460b      	mov	r3, r1
 8018d40:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018d42:	887b      	ldrh	r3, [r7, #2]
 8018d44:	4619      	mov	r1, r3
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f7ff ff98 	bl	8018c7c <lwip_standard_chksum>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	43db      	mvns	r3, r3
 8018d50:	b29b      	uxth	r3, r3
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8018d5a:	b580      	push	{r7, lr}
 8018d5c:	b086      	sub	sp, #24
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8018d62:	2300      	movs	r3, #0
 8018d64:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8018d66:	2300      	movs	r3, #0
 8018d68:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	613b      	str	r3, [r7, #16]
 8018d6e:	e02b      	b.n	8018dc8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	685a      	ldr	r2, [r3, #4]
 8018d74:	693b      	ldr	r3, [r7, #16]
 8018d76:	895b      	ldrh	r3, [r3, #10]
 8018d78:	4619      	mov	r1, r3
 8018d7a:	4610      	mov	r0, r2
 8018d7c:	f7ff ff7e 	bl	8018c7c <lwip_standard_chksum>
 8018d80:	4603      	mov	r3, r0
 8018d82:	461a      	mov	r2, r3
 8018d84:	697b      	ldr	r3, [r7, #20]
 8018d86:	4413      	add	r3, r2
 8018d88:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8018d8a:	697b      	ldr	r3, [r7, #20]
 8018d8c:	0c1a      	lsrs	r2, r3, #16
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	4413      	add	r3, r2
 8018d94:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	895b      	ldrh	r3, [r3, #10]
 8018d9a:	f003 0301 	and.w	r3, r3, #1
 8018d9e:	b29b      	uxth	r3, r3
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d00e      	beq.n	8018dc2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	bf0c      	ite	eq
 8018daa:	2301      	moveq	r3, #1
 8018dac:	2300      	movne	r3, #0
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	021b      	lsls	r3, r3, #8
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	697b      	ldr	r3, [r7, #20]
 8018dba:	0a1b      	lsrs	r3, r3, #8
 8018dbc:	b2db      	uxtb	r3, r3
 8018dbe:	4313      	orrs	r3, r2
 8018dc0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	613b      	str	r3, [r7, #16]
 8018dc8:	693b      	ldr	r3, [r7, #16]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d1d0      	bne.n	8018d70 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d007      	beq.n	8018de4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	021b      	lsls	r3, r3, #8
 8018dd8:	b29a      	uxth	r2, r3
 8018dda:	697b      	ldr	r3, [r7, #20]
 8018ddc:	0a1b      	lsrs	r3, r3, #8
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	4313      	orrs	r3, r2
 8018de2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	b29b      	uxth	r3, r3
 8018de8:	43db      	mvns	r3, r3
 8018dea:	b29b      	uxth	r3, r3
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3718      	adds	r7, #24
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b082      	sub	sp, #8
 8018df8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8018dfe:	f00b fa33 	bl	8024268 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018e02:	f000 f8d5 	bl	8018fb0 <mem_init>
  memp_init();
 8018e06:	f000 fc2d 	bl	8019664 <memp_init>
  pbuf_init();
  netif_init();
 8018e0a:	f000 fd39 	bl	8019880 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018e0e:	f007 ffbf 	bl	8020d90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018e12:	f001 fe8b 	bl	801ab2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8018e16:	f007 ff01 	bl	8020c1c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8018e1a:	bf00      	nop
 8018e1c:	3708      	adds	r7, #8
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
	...

08018e24 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8018e2e:	4b05      	ldr	r3, [pc, #20]	@ (8018e44 <ptr_to_mem+0x20>)
 8018e30:	681a      	ldr	r2, [r3, #0]
 8018e32:	88fb      	ldrh	r3, [r7, #6]
 8018e34:	4413      	add	r3, r2
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	370c      	adds	r7, #12
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e40:	4770      	bx	lr
 8018e42:	bf00      	nop
 8018e44:	24008d7c 	.word	0x24008d7c

08018e48 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8018e48:	b480      	push	{r7}
 8018e4a:	b083      	sub	sp, #12
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018e50:	4b05      	ldr	r3, [pc, #20]	@ (8018e68 <mem_to_ptr+0x20>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	687a      	ldr	r2, [r7, #4]
 8018e56:	1ad3      	subs	r3, r2, r3
 8018e58:	b29b      	uxth	r3, r3
}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	370c      	adds	r7, #12
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e64:	4770      	bx	lr
 8018e66:	bf00      	nop
 8018e68:	24008d7c 	.word	0x24008d7c

08018e6c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8018e6c:	b590      	push	{r4, r7, lr}
 8018e6e:	b085      	sub	sp, #20
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018e74:	4b45      	ldr	r3, [pc, #276]	@ (8018f8c <plug_holes+0x120>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	d206      	bcs.n	8018e8c <plug_holes+0x20>
 8018e7e:	4b44      	ldr	r3, [pc, #272]	@ (8018f90 <plug_holes+0x124>)
 8018e80:	f240 12df 	movw	r2, #479	@ 0x1df
 8018e84:	4943      	ldr	r1, [pc, #268]	@ (8018f94 <plug_holes+0x128>)
 8018e86:	4844      	ldr	r0, [pc, #272]	@ (8018f98 <plug_holes+0x12c>)
 8018e88:	f00c faf4 	bl	8025474 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8018e8c:	4b43      	ldr	r3, [pc, #268]	@ (8018f9c <plug_holes+0x130>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	687a      	ldr	r2, [r7, #4]
 8018e92:	429a      	cmp	r2, r3
 8018e94:	d306      	bcc.n	8018ea4 <plug_holes+0x38>
 8018e96:	4b3e      	ldr	r3, [pc, #248]	@ (8018f90 <plug_holes+0x124>)
 8018e98:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018e9c:	4940      	ldr	r1, [pc, #256]	@ (8018fa0 <plug_holes+0x134>)
 8018e9e:	483e      	ldr	r0, [pc, #248]	@ (8018f98 <plug_holes+0x12c>)
 8018ea0:	f00c fae8 	bl	8025474 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	791b      	ldrb	r3, [r3, #4]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d006      	beq.n	8018eba <plug_holes+0x4e>
 8018eac:	4b38      	ldr	r3, [pc, #224]	@ (8018f90 <plug_holes+0x124>)
 8018eae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8018eb2:	493c      	ldr	r1, [pc, #240]	@ (8018fa4 <plug_holes+0x138>)
 8018eb4:	4838      	ldr	r0, [pc, #224]	@ (8018f98 <plug_holes+0x12c>)
 8018eb6:	f00c fadd 	bl	8025474 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	881b      	ldrh	r3, [r3, #0]
 8018ebe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018ec2:	d906      	bls.n	8018ed2 <plug_holes+0x66>
 8018ec4:	4b32      	ldr	r3, [pc, #200]	@ (8018f90 <plug_holes+0x124>)
 8018ec6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8018eca:	4937      	ldr	r1, [pc, #220]	@ (8018fa8 <plug_holes+0x13c>)
 8018ecc:	4832      	ldr	r0, [pc, #200]	@ (8018f98 <plug_holes+0x12c>)
 8018ece:	f00c fad1 	bl	8025474 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	881b      	ldrh	r3, [r3, #0]
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f7ff ffa4 	bl	8018e24 <ptr_to_mem>
 8018edc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d024      	beq.n	8018f30 <plug_holes+0xc4>
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	791b      	ldrb	r3, [r3, #4]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d120      	bne.n	8018f30 <plug_holes+0xc4>
 8018eee:	4b2b      	ldr	r3, [pc, #172]	@ (8018f9c <plug_holes+0x130>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	68fa      	ldr	r2, [r7, #12]
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d01b      	beq.n	8018f30 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8018fac <plug_holes+0x140>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	68fa      	ldr	r2, [r7, #12]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	d102      	bne.n	8018f08 <plug_holes+0x9c>
      lfree = mem;
 8018f02:	4a2a      	ldr	r2, [pc, #168]	@ (8018fac <plug_holes+0x140>)
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	881a      	ldrh	r2, [r3, #0]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	881b      	ldrh	r3, [r3, #0]
 8018f14:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018f18:	d00a      	beq.n	8018f30 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	881b      	ldrh	r3, [r3, #0]
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7ff ff80 	bl	8018e24 <ptr_to_mem>
 8018f24:	4604      	mov	r4, r0
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	f7ff ff8e 	bl	8018e48 <mem_to_ptr>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	885b      	ldrh	r3, [r3, #2]
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7ff ff75 	bl	8018e24 <ptr_to_mem>
 8018f3a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018f3c:	68ba      	ldr	r2, [r7, #8]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d01f      	beq.n	8018f84 <plug_holes+0x118>
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	791b      	ldrb	r3, [r3, #4]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d11b      	bne.n	8018f84 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018f4c:	4b17      	ldr	r3, [pc, #92]	@ (8018fac <plug_holes+0x140>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	429a      	cmp	r2, r3
 8018f54:	d102      	bne.n	8018f5c <plug_holes+0xf0>
      lfree = pmem;
 8018f56:	4a15      	ldr	r2, [pc, #84]	@ (8018fac <plug_holes+0x140>)
 8018f58:	68bb      	ldr	r3, [r7, #8]
 8018f5a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	881a      	ldrh	r2, [r3, #0]
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	881b      	ldrh	r3, [r3, #0]
 8018f68:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8018f6c:	d00a      	beq.n	8018f84 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	881b      	ldrh	r3, [r3, #0]
 8018f72:	4618      	mov	r0, r3
 8018f74:	f7ff ff56 	bl	8018e24 <ptr_to_mem>
 8018f78:	4604      	mov	r4, r0
 8018f7a:	68b8      	ldr	r0, [r7, #8]
 8018f7c:	f7ff ff64 	bl	8018e48 <mem_to_ptr>
 8018f80:	4603      	mov	r3, r0
 8018f82:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018f84:	bf00      	nop
 8018f86:	3714      	adds	r7, #20
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd90      	pop	{r4, r7, pc}
 8018f8c:	24008d7c 	.word	0x24008d7c
 8018f90:	0802a51c 	.word	0x0802a51c
 8018f94:	0802a54c 	.word	0x0802a54c
 8018f98:	0802a564 	.word	0x0802a564
 8018f9c:	24008d80 	.word	0x24008d80
 8018fa0:	0802a58c 	.word	0x0802a58c
 8018fa4:	0802a5a8 	.word	0x0802a5a8
 8018fa8:	0802a5c4 	.word	0x0802a5c4
 8018fac:	24008d88 	.word	0x24008d88

08018fb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018fb6:	4b1d      	ldr	r3, [pc, #116]	@ (801902c <mem_init+0x7c>)
 8018fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8019030 <mem_init+0x80>)
 8018fba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8018fbc:	4b1b      	ldr	r3, [pc, #108]	@ (801902c <mem_init+0x7c>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018fc8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018fd6:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8018fda:	f7ff ff23 	bl	8018e24 <ptr_to_mem>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	4a14      	ldr	r2, [pc, #80]	@ (8019034 <mem_init+0x84>)
 8018fe2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8018fe4:	4b13      	ldr	r3, [pc, #76]	@ (8019034 <mem_init+0x84>)
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2201      	movs	r2, #1
 8018fea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018fec:	4b11      	ldr	r3, [pc, #68]	@ (8019034 <mem_init+0x84>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018ff4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8018ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8019034 <mem_init+0x84>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8018ffe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019000:	4b0a      	ldr	r3, [pc, #40]	@ (801902c <mem_init+0x7c>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	4a0c      	ldr	r2, [pc, #48]	@ (8019038 <mem_init+0x88>)
 8019006:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019008:	480c      	ldr	r0, [pc, #48]	@ (801903c <mem_init+0x8c>)
 801900a:	f00b f93b 	bl	8024284 <sys_mutex_new>
 801900e:	4603      	mov	r3, r0
 8019010:	2b00      	cmp	r3, #0
 8019012:	d006      	beq.n	8019022 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019014:	4b0a      	ldr	r3, [pc, #40]	@ (8019040 <mem_init+0x90>)
 8019016:	f240 221f 	movw	r2, #543	@ 0x21f
 801901a:	490a      	ldr	r1, [pc, #40]	@ (8019044 <mem_init+0x94>)
 801901c:	480a      	ldr	r0, [pc, #40]	@ (8019048 <mem_init+0x98>)
 801901e:	f00c fa29 	bl	8025474 <iprintf>
  }
}
 8019022:	bf00      	nop
 8019024:	3708      	adds	r7, #8
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}
 801902a:	bf00      	nop
 801902c:	24008d7c 	.word	0x24008d7c
 8019030:	30002000 	.word	0x30002000
 8019034:	24008d80 	.word	0x24008d80
 8019038:	24008d88 	.word	0x24008d88
 801903c:	24008d84 	.word	0x24008d84
 8019040:	0802a51c 	.word	0x0802a51c
 8019044:	0802a5f0 	.word	0x0802a5f0
 8019048:	0802a564 	.word	0x0802a564

0801904c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b086      	sub	sp, #24
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f7ff fef7 	bl	8018e48 <mem_to_ptr>
 801905a:	4603      	mov	r3, r0
 801905c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	881b      	ldrh	r3, [r3, #0]
 8019062:	4618      	mov	r0, r3
 8019064:	f7ff fede 	bl	8018e24 <ptr_to_mem>
 8019068:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	885b      	ldrh	r3, [r3, #2]
 801906e:	4618      	mov	r0, r3
 8019070:	f7ff fed8 	bl	8018e24 <ptr_to_mem>
 8019074:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	881b      	ldrh	r3, [r3, #0]
 801907a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801907e:	d818      	bhi.n	80190b2 <mem_link_valid+0x66>
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	885b      	ldrh	r3, [r3, #2]
 8019084:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019088:	d813      	bhi.n	80190b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801908e:	8afa      	ldrh	r2, [r7, #22]
 8019090:	429a      	cmp	r2, r3
 8019092:	d004      	beq.n	801909e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	881b      	ldrh	r3, [r3, #0]
 8019098:	8afa      	ldrh	r2, [r7, #22]
 801909a:	429a      	cmp	r2, r3
 801909c:	d109      	bne.n	80190b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801909e:	4b08      	ldr	r3, [pc, #32]	@ (80190c0 <mem_link_valid+0x74>)
 80190a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80190a2:	693a      	ldr	r2, [r7, #16]
 80190a4:	429a      	cmp	r2, r3
 80190a6:	d006      	beq.n	80190b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	885b      	ldrh	r3, [r3, #2]
 80190ac:	8afa      	ldrh	r2, [r7, #22]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d001      	beq.n	80190b6 <mem_link_valid+0x6a>
    return 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	e000      	b.n	80190b8 <mem_link_valid+0x6c>
  }
  return 1;
 80190b6:	2301      	movs	r3, #1
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3718      	adds	r7, #24
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	24008d80 	.word	0x24008d80

080190c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	b088      	sub	sp, #32
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d070      	beq.n	80191b4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	f003 0303 	and.w	r3, r3, #3
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d00d      	beq.n	80190f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80190dc:	4b37      	ldr	r3, [pc, #220]	@ (80191bc <mem_free+0xf8>)
 80190de:	f240 2273 	movw	r2, #627	@ 0x273
 80190e2:	4937      	ldr	r1, [pc, #220]	@ (80191c0 <mem_free+0xfc>)
 80190e4:	4837      	ldr	r0, [pc, #220]	@ (80191c4 <mem_free+0x100>)
 80190e6:	f00c f9c5 	bl	8025474 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80190ea:	f00b f929 	bl	8024340 <sys_arch_protect>
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	68f8      	ldr	r0, [r7, #12]
 80190f2:	f00b f933 	bl	802435c <sys_arch_unprotect>
    return;
 80190f6:	e05e      	b.n	80191b6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	3b08      	subs	r3, #8
 80190fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80190fe:	4b32      	ldr	r3, [pc, #200]	@ (80191c8 <mem_free+0x104>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	69fa      	ldr	r2, [r7, #28]
 8019104:	429a      	cmp	r2, r3
 8019106:	d306      	bcc.n	8019116 <mem_free+0x52>
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f103 020c 	add.w	r2, r3, #12
 801910e:	4b2f      	ldr	r3, [pc, #188]	@ (80191cc <mem_free+0x108>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	429a      	cmp	r2, r3
 8019114:	d90d      	bls.n	8019132 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019116:	4b29      	ldr	r3, [pc, #164]	@ (80191bc <mem_free+0xf8>)
 8019118:	f240 227f 	movw	r2, #639	@ 0x27f
 801911c:	492c      	ldr	r1, [pc, #176]	@ (80191d0 <mem_free+0x10c>)
 801911e:	4829      	ldr	r0, [pc, #164]	@ (80191c4 <mem_free+0x100>)
 8019120:	f00c f9a8 	bl	8025474 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019124:	f00b f90c 	bl	8024340 <sys_arch_protect>
 8019128:	6138      	str	r0, [r7, #16]
 801912a:	6938      	ldr	r0, [r7, #16]
 801912c:	f00b f916 	bl	802435c <sys_arch_unprotect>
    return;
 8019130:	e041      	b.n	80191b6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8019132:	4828      	ldr	r0, [pc, #160]	@ (80191d4 <mem_free+0x110>)
 8019134:	f00b f8c2 	bl	80242bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8019138:	69fb      	ldr	r3, [r7, #28]
 801913a:	791b      	ldrb	r3, [r3, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d110      	bne.n	8019162 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019140:	4b1e      	ldr	r3, [pc, #120]	@ (80191bc <mem_free+0xf8>)
 8019142:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8019146:	4924      	ldr	r1, [pc, #144]	@ (80191d8 <mem_free+0x114>)
 8019148:	481e      	ldr	r0, [pc, #120]	@ (80191c4 <mem_free+0x100>)
 801914a:	f00c f993 	bl	8025474 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801914e:	4821      	ldr	r0, [pc, #132]	@ (80191d4 <mem_free+0x110>)
 8019150:	f00b f8c3 	bl	80242da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019154:	f00b f8f4 	bl	8024340 <sys_arch_protect>
 8019158:	6178      	str	r0, [r7, #20]
 801915a:	6978      	ldr	r0, [r7, #20]
 801915c:	f00b f8fe 	bl	802435c <sys_arch_unprotect>
    return;
 8019160:	e029      	b.n	80191b6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8019162:	69f8      	ldr	r0, [r7, #28]
 8019164:	f7ff ff72 	bl	801904c <mem_link_valid>
 8019168:	4603      	mov	r3, r0
 801916a:	2b00      	cmp	r3, #0
 801916c:	d110      	bne.n	8019190 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801916e:	4b13      	ldr	r3, [pc, #76]	@ (80191bc <mem_free+0xf8>)
 8019170:	f240 2295 	movw	r2, #661	@ 0x295
 8019174:	4919      	ldr	r1, [pc, #100]	@ (80191dc <mem_free+0x118>)
 8019176:	4813      	ldr	r0, [pc, #76]	@ (80191c4 <mem_free+0x100>)
 8019178:	f00c f97c 	bl	8025474 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801917c:	4815      	ldr	r0, [pc, #84]	@ (80191d4 <mem_free+0x110>)
 801917e:	f00b f8ac 	bl	80242da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019182:	f00b f8dd 	bl	8024340 <sys_arch_protect>
 8019186:	61b8      	str	r0, [r7, #24]
 8019188:	69b8      	ldr	r0, [r7, #24]
 801918a:	f00b f8e7 	bl	802435c <sys_arch_unprotect>
    return;
 801918e:	e012      	b.n	80191b6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8019190:	69fb      	ldr	r3, [r7, #28]
 8019192:	2200      	movs	r2, #0
 8019194:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8019196:	4b12      	ldr	r3, [pc, #72]	@ (80191e0 <mem_free+0x11c>)
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	69fa      	ldr	r2, [r7, #28]
 801919c:	429a      	cmp	r2, r3
 801919e:	d202      	bcs.n	80191a6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80191a0:	4a0f      	ldr	r2, [pc, #60]	@ (80191e0 <mem_free+0x11c>)
 80191a2:	69fb      	ldr	r3, [r7, #28]
 80191a4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80191a6:	69f8      	ldr	r0, [r7, #28]
 80191a8:	f7ff fe60 	bl	8018e6c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80191ac:	4809      	ldr	r0, [pc, #36]	@ (80191d4 <mem_free+0x110>)
 80191ae:	f00b f894 	bl	80242da <sys_mutex_unlock>
 80191b2:	e000      	b.n	80191b6 <mem_free+0xf2>
    return;
 80191b4:	bf00      	nop
}
 80191b6:	3720      	adds	r7, #32
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	0802a51c 	.word	0x0802a51c
 80191c0:	0802a60c 	.word	0x0802a60c
 80191c4:	0802a564 	.word	0x0802a564
 80191c8:	24008d7c 	.word	0x24008d7c
 80191cc:	24008d80 	.word	0x24008d80
 80191d0:	0802a630 	.word	0x0802a630
 80191d4:	24008d84 	.word	0x24008d84
 80191d8:	0802a64c 	.word	0x0802a64c
 80191dc:	0802a674 	.word	0x0802a674
 80191e0:	24008d88 	.word	0x24008d88

080191e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b088      	sub	sp, #32
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
 80191ec:	460b      	mov	r3, r1
 80191ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80191f0:	887b      	ldrh	r3, [r7, #2]
 80191f2:	3303      	adds	r3, #3
 80191f4:	b29b      	uxth	r3, r3
 80191f6:	f023 0303 	bic.w	r3, r3, #3
 80191fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80191fc:	8bfb      	ldrh	r3, [r7, #30]
 80191fe:	2b0b      	cmp	r3, #11
 8019200:	d801      	bhi.n	8019206 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8019202:	230c      	movs	r3, #12
 8019204:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019206:	8bfb      	ldrh	r3, [r7, #30]
 8019208:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801920c:	d803      	bhi.n	8019216 <mem_trim+0x32>
 801920e:	8bfa      	ldrh	r2, [r7, #30]
 8019210:	887b      	ldrh	r3, [r7, #2]
 8019212:	429a      	cmp	r2, r3
 8019214:	d201      	bcs.n	801921a <mem_trim+0x36>
    return NULL;
 8019216:	2300      	movs	r3, #0
 8019218:	e0d8      	b.n	80193cc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801921a:	4b6e      	ldr	r3, [pc, #440]	@ (80193d4 <mem_trim+0x1f0>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	687a      	ldr	r2, [r7, #4]
 8019220:	429a      	cmp	r2, r3
 8019222:	d304      	bcc.n	801922e <mem_trim+0x4a>
 8019224:	4b6c      	ldr	r3, [pc, #432]	@ (80193d8 <mem_trim+0x1f4>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	687a      	ldr	r2, [r7, #4]
 801922a:	429a      	cmp	r2, r3
 801922c:	d306      	bcc.n	801923c <mem_trim+0x58>
 801922e:	4b6b      	ldr	r3, [pc, #428]	@ (80193dc <mem_trim+0x1f8>)
 8019230:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019234:	496a      	ldr	r1, [pc, #424]	@ (80193e0 <mem_trim+0x1fc>)
 8019236:	486b      	ldr	r0, [pc, #428]	@ (80193e4 <mem_trim+0x200>)
 8019238:	f00c f91c 	bl	8025474 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801923c:	4b65      	ldr	r3, [pc, #404]	@ (80193d4 <mem_trim+0x1f0>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	687a      	ldr	r2, [r7, #4]
 8019242:	429a      	cmp	r2, r3
 8019244:	d304      	bcc.n	8019250 <mem_trim+0x6c>
 8019246:	4b64      	ldr	r3, [pc, #400]	@ (80193d8 <mem_trim+0x1f4>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	429a      	cmp	r2, r3
 801924e:	d307      	bcc.n	8019260 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019250:	f00b f876 	bl	8024340 <sys_arch_protect>
 8019254:	60b8      	str	r0, [r7, #8]
 8019256:	68b8      	ldr	r0, [r7, #8]
 8019258:	f00b f880 	bl	802435c <sys_arch_unprotect>
    return rmem;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	e0b5      	b.n	80193cc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	3b08      	subs	r3, #8
 8019264:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8019266:	69b8      	ldr	r0, [r7, #24]
 8019268:	f7ff fdee 	bl	8018e48 <mem_to_ptr>
 801926c:	4603      	mov	r3, r0
 801926e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019270:	69bb      	ldr	r3, [r7, #24]
 8019272:	881a      	ldrh	r2, [r3, #0]
 8019274:	8afb      	ldrh	r3, [r7, #22]
 8019276:	1ad3      	subs	r3, r2, r3
 8019278:	b29b      	uxth	r3, r3
 801927a:	3b08      	subs	r3, #8
 801927c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801927e:	8bfa      	ldrh	r2, [r7, #30]
 8019280:	8abb      	ldrh	r3, [r7, #20]
 8019282:	429a      	cmp	r2, r3
 8019284:	d906      	bls.n	8019294 <mem_trim+0xb0>
 8019286:	4b55      	ldr	r3, [pc, #340]	@ (80193dc <mem_trim+0x1f8>)
 8019288:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801928c:	4956      	ldr	r1, [pc, #344]	@ (80193e8 <mem_trim+0x204>)
 801928e:	4855      	ldr	r0, [pc, #340]	@ (80193e4 <mem_trim+0x200>)
 8019290:	f00c f8f0 	bl	8025474 <iprintf>
  if (newsize > size) {
 8019294:	8bfa      	ldrh	r2, [r7, #30]
 8019296:	8abb      	ldrh	r3, [r7, #20]
 8019298:	429a      	cmp	r2, r3
 801929a:	d901      	bls.n	80192a0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801929c:	2300      	movs	r3, #0
 801929e:	e095      	b.n	80193cc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80192a0:	8bfa      	ldrh	r2, [r7, #30]
 80192a2:	8abb      	ldrh	r3, [r7, #20]
 80192a4:	429a      	cmp	r2, r3
 80192a6:	d101      	bne.n	80192ac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	e08f      	b.n	80193cc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80192ac:	484f      	ldr	r0, [pc, #316]	@ (80193ec <mem_trim+0x208>)
 80192ae:	f00b f805 	bl	80242bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80192b2:	69bb      	ldr	r3, [r7, #24]
 80192b4:	881b      	ldrh	r3, [r3, #0]
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7ff fdb4 	bl	8018e24 <ptr_to_mem>
 80192bc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80192be:	693b      	ldr	r3, [r7, #16]
 80192c0:	791b      	ldrb	r3, [r3, #4]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d13f      	bne.n	8019346 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80192c6:	69bb      	ldr	r3, [r7, #24]
 80192c8:	881b      	ldrh	r3, [r3, #0]
 80192ca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80192ce:	d106      	bne.n	80192de <mem_trim+0xfa>
 80192d0:	4b42      	ldr	r3, [pc, #264]	@ (80193dc <mem_trim+0x1f8>)
 80192d2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80192d6:	4946      	ldr	r1, [pc, #280]	@ (80193f0 <mem_trim+0x20c>)
 80192d8:	4842      	ldr	r0, [pc, #264]	@ (80193e4 <mem_trim+0x200>)
 80192da:	f00c f8cb 	bl	8025474 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	881b      	ldrh	r3, [r3, #0]
 80192e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80192e4:	8afa      	ldrh	r2, [r7, #22]
 80192e6:	8bfb      	ldrh	r3, [r7, #30]
 80192e8:	4413      	add	r3, r2
 80192ea:	b29b      	uxth	r3, r3
 80192ec:	3308      	adds	r3, #8
 80192ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80192f0:	4b40      	ldr	r3, [pc, #256]	@ (80193f4 <mem_trim+0x210>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	693a      	ldr	r2, [r7, #16]
 80192f6:	429a      	cmp	r2, r3
 80192f8:	d106      	bne.n	8019308 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80192fa:	89fb      	ldrh	r3, [r7, #14]
 80192fc:	4618      	mov	r0, r3
 80192fe:	f7ff fd91 	bl	8018e24 <ptr_to_mem>
 8019302:	4603      	mov	r3, r0
 8019304:	4a3b      	ldr	r2, [pc, #236]	@ (80193f4 <mem_trim+0x210>)
 8019306:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8019308:	89fb      	ldrh	r3, [r7, #14]
 801930a:	4618      	mov	r0, r3
 801930c:	f7ff fd8a 	bl	8018e24 <ptr_to_mem>
 8019310:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8019312:	693b      	ldr	r3, [r7, #16]
 8019314:	2200      	movs	r2, #0
 8019316:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8019318:	693b      	ldr	r3, [r7, #16]
 801931a:	89ba      	ldrh	r2, [r7, #12]
 801931c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801931e:	693b      	ldr	r3, [r7, #16]
 8019320:	8afa      	ldrh	r2, [r7, #22]
 8019322:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	89fa      	ldrh	r2, [r7, #14]
 8019328:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	881b      	ldrh	r3, [r3, #0]
 801932e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019332:	d047      	beq.n	80193c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019334:	693b      	ldr	r3, [r7, #16]
 8019336:	881b      	ldrh	r3, [r3, #0]
 8019338:	4618      	mov	r0, r3
 801933a:	f7ff fd73 	bl	8018e24 <ptr_to_mem>
 801933e:	4602      	mov	r2, r0
 8019340:	89fb      	ldrh	r3, [r7, #14]
 8019342:	8053      	strh	r3, [r2, #2]
 8019344:	e03e      	b.n	80193c4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8019346:	8bfb      	ldrh	r3, [r7, #30]
 8019348:	f103 0214 	add.w	r2, r3, #20
 801934c:	8abb      	ldrh	r3, [r7, #20]
 801934e:	429a      	cmp	r2, r3
 8019350:	d838      	bhi.n	80193c4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019352:	8afa      	ldrh	r2, [r7, #22]
 8019354:	8bfb      	ldrh	r3, [r7, #30]
 8019356:	4413      	add	r3, r2
 8019358:	b29b      	uxth	r3, r3
 801935a:	3308      	adds	r3, #8
 801935c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801935e:	69bb      	ldr	r3, [r7, #24]
 8019360:	881b      	ldrh	r3, [r3, #0]
 8019362:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019366:	d106      	bne.n	8019376 <mem_trim+0x192>
 8019368:	4b1c      	ldr	r3, [pc, #112]	@ (80193dc <mem_trim+0x1f8>)
 801936a:	f240 3216 	movw	r2, #790	@ 0x316
 801936e:	4920      	ldr	r1, [pc, #128]	@ (80193f0 <mem_trim+0x20c>)
 8019370:	481c      	ldr	r0, [pc, #112]	@ (80193e4 <mem_trim+0x200>)
 8019372:	f00c f87f 	bl	8025474 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8019376:	89fb      	ldrh	r3, [r7, #14]
 8019378:	4618      	mov	r0, r3
 801937a:	f7ff fd53 	bl	8018e24 <ptr_to_mem>
 801937e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8019380:	4b1c      	ldr	r3, [pc, #112]	@ (80193f4 <mem_trim+0x210>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	693a      	ldr	r2, [r7, #16]
 8019386:	429a      	cmp	r2, r3
 8019388:	d202      	bcs.n	8019390 <mem_trim+0x1ac>
      lfree = mem2;
 801938a:	4a1a      	ldr	r2, [pc, #104]	@ (80193f4 <mem_trim+0x210>)
 801938c:	693b      	ldr	r3, [r7, #16]
 801938e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	2200      	movs	r2, #0
 8019394:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8019396:	69bb      	ldr	r3, [r7, #24]
 8019398:	881a      	ldrh	r2, [r3, #0]
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801939e:	693b      	ldr	r3, [r7, #16]
 80193a0:	8afa      	ldrh	r2, [r7, #22]
 80193a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80193a4:	69bb      	ldr	r3, [r7, #24]
 80193a6:	89fa      	ldrh	r2, [r7, #14]
 80193a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80193b2:	d007      	beq.n	80193c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80193b4:	693b      	ldr	r3, [r7, #16]
 80193b6:	881b      	ldrh	r3, [r3, #0]
 80193b8:	4618      	mov	r0, r3
 80193ba:	f7ff fd33 	bl	8018e24 <ptr_to_mem>
 80193be:	4602      	mov	r2, r0
 80193c0:	89fb      	ldrh	r3, [r7, #14]
 80193c2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80193c4:	4809      	ldr	r0, [pc, #36]	@ (80193ec <mem_trim+0x208>)
 80193c6:	f00a ff88 	bl	80242da <sys_mutex_unlock>
  return rmem;
 80193ca:	687b      	ldr	r3, [r7, #4]
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	3720      	adds	r7, #32
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	24008d7c 	.word	0x24008d7c
 80193d8:	24008d80 	.word	0x24008d80
 80193dc:	0802a51c 	.word	0x0802a51c
 80193e0:	0802a6a8 	.word	0x0802a6a8
 80193e4:	0802a564 	.word	0x0802a564
 80193e8:	0802a6c0 	.word	0x0802a6c0
 80193ec:	24008d84 	.word	0x24008d84
 80193f0:	0802a6e0 	.word	0x0802a6e0
 80193f4:	24008d88 	.word	0x24008d88

080193f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b088      	sub	sp, #32
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	4603      	mov	r3, r0
 8019400:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019402:	88fb      	ldrh	r3, [r7, #6]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d101      	bne.n	801940c <mem_malloc+0x14>
    return NULL;
 8019408:	2300      	movs	r3, #0
 801940a:	e0e2      	b.n	80195d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801940c:	88fb      	ldrh	r3, [r7, #6]
 801940e:	3303      	adds	r3, #3
 8019410:	b29b      	uxth	r3, r3
 8019412:	f023 0303 	bic.w	r3, r3, #3
 8019416:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8019418:	8bbb      	ldrh	r3, [r7, #28]
 801941a:	2b0b      	cmp	r3, #11
 801941c:	d801      	bhi.n	8019422 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801941e:	230c      	movs	r3, #12
 8019420:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019422:	8bbb      	ldrh	r3, [r7, #28]
 8019424:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8019428:	d803      	bhi.n	8019432 <mem_malloc+0x3a>
 801942a:	8bba      	ldrh	r2, [r7, #28]
 801942c:	88fb      	ldrh	r3, [r7, #6]
 801942e:	429a      	cmp	r2, r3
 8019430:	d201      	bcs.n	8019436 <mem_malloc+0x3e>
    return NULL;
 8019432:	2300      	movs	r3, #0
 8019434:	e0cd      	b.n	80195d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8019436:	4869      	ldr	r0, [pc, #420]	@ (80195dc <mem_malloc+0x1e4>)
 8019438:	f00a ff40 	bl	80242bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801943c:	4b68      	ldr	r3, [pc, #416]	@ (80195e0 <mem_malloc+0x1e8>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4618      	mov	r0, r3
 8019442:	f7ff fd01 	bl	8018e48 <mem_to_ptr>
 8019446:	4603      	mov	r3, r0
 8019448:	83fb      	strh	r3, [r7, #30]
 801944a:	e0b7      	b.n	80195bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801944c:	8bfb      	ldrh	r3, [r7, #30]
 801944e:	4618      	mov	r0, r3
 8019450:	f7ff fce8 	bl	8018e24 <ptr_to_mem>
 8019454:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	791b      	ldrb	r3, [r3, #4]
 801945a:	2b00      	cmp	r3, #0
 801945c:	f040 80a7 	bne.w	80195ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	461a      	mov	r2, r3
 8019466:	8bfb      	ldrh	r3, [r7, #30]
 8019468:	1ad3      	subs	r3, r2, r3
 801946a:	f1a3 0208 	sub.w	r2, r3, #8
 801946e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8019470:	429a      	cmp	r2, r3
 8019472:	f0c0 809c 	bcc.w	80195ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	881b      	ldrh	r3, [r3, #0]
 801947a:	461a      	mov	r2, r3
 801947c:	8bfb      	ldrh	r3, [r7, #30]
 801947e:	1ad3      	subs	r3, r2, r3
 8019480:	f1a3 0208 	sub.w	r2, r3, #8
 8019484:	8bbb      	ldrh	r3, [r7, #28]
 8019486:	3314      	adds	r3, #20
 8019488:	429a      	cmp	r2, r3
 801948a:	d333      	bcc.n	80194f4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801948c:	8bfa      	ldrh	r2, [r7, #30]
 801948e:	8bbb      	ldrh	r3, [r7, #28]
 8019490:	4413      	add	r3, r2
 8019492:	b29b      	uxth	r3, r3
 8019494:	3308      	adds	r3, #8
 8019496:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019498:	8a7b      	ldrh	r3, [r7, #18]
 801949a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801949e:	d106      	bne.n	80194ae <mem_malloc+0xb6>
 80194a0:	4b50      	ldr	r3, [pc, #320]	@ (80195e4 <mem_malloc+0x1ec>)
 80194a2:	f240 3287 	movw	r2, #903	@ 0x387
 80194a6:	4950      	ldr	r1, [pc, #320]	@ (80195e8 <mem_malloc+0x1f0>)
 80194a8:	4850      	ldr	r0, [pc, #320]	@ (80195ec <mem_malloc+0x1f4>)
 80194aa:	f00b ffe3 	bl	8025474 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80194ae:	8a7b      	ldrh	r3, [r7, #18]
 80194b0:	4618      	mov	r0, r3
 80194b2:	f7ff fcb7 	bl	8018e24 <ptr_to_mem>
 80194b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	2200      	movs	r2, #0
 80194bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	881a      	ldrh	r2, [r3, #0]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	8bfa      	ldrh	r2, [r7, #30]
 80194ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80194cc:	697b      	ldr	r3, [r7, #20]
 80194ce:	8a7a      	ldrh	r2, [r7, #18]
 80194d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	2201      	movs	r2, #1
 80194d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	881b      	ldrh	r3, [r3, #0]
 80194dc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80194e0:	d00b      	beq.n	80194fa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	881b      	ldrh	r3, [r3, #0]
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7ff fc9c 	bl	8018e24 <ptr_to_mem>
 80194ec:	4602      	mov	r2, r0
 80194ee:	8a7b      	ldrh	r3, [r7, #18]
 80194f0:	8053      	strh	r3, [r2, #2]
 80194f2:	e002      	b.n	80194fa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	2201      	movs	r2, #1
 80194f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80194fa:	4b39      	ldr	r3, [pc, #228]	@ (80195e0 <mem_malloc+0x1e8>)
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	697a      	ldr	r2, [r7, #20]
 8019500:	429a      	cmp	r2, r3
 8019502:	d127      	bne.n	8019554 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8019504:	4b36      	ldr	r3, [pc, #216]	@ (80195e0 <mem_malloc+0x1e8>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801950a:	e005      	b.n	8019518 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801950c:	69bb      	ldr	r3, [r7, #24]
 801950e:	881b      	ldrh	r3, [r3, #0]
 8019510:	4618      	mov	r0, r3
 8019512:	f7ff fc87 	bl	8018e24 <ptr_to_mem>
 8019516:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8019518:	69bb      	ldr	r3, [r7, #24]
 801951a:	791b      	ldrb	r3, [r3, #4]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d004      	beq.n	801952a <mem_malloc+0x132>
 8019520:	4b33      	ldr	r3, [pc, #204]	@ (80195f0 <mem_malloc+0x1f8>)
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	69ba      	ldr	r2, [r7, #24]
 8019526:	429a      	cmp	r2, r3
 8019528:	d1f0      	bne.n	801950c <mem_malloc+0x114>
          }
          lfree = cur;
 801952a:	4a2d      	ldr	r2, [pc, #180]	@ (80195e0 <mem_malloc+0x1e8>)
 801952c:	69bb      	ldr	r3, [r7, #24]
 801952e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019530:	4b2b      	ldr	r3, [pc, #172]	@ (80195e0 <mem_malloc+0x1e8>)
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	4b2e      	ldr	r3, [pc, #184]	@ (80195f0 <mem_malloc+0x1f8>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	429a      	cmp	r2, r3
 801953a:	d00b      	beq.n	8019554 <mem_malloc+0x15c>
 801953c:	4b28      	ldr	r3, [pc, #160]	@ (80195e0 <mem_malloc+0x1e8>)
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	791b      	ldrb	r3, [r3, #4]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d006      	beq.n	8019554 <mem_malloc+0x15c>
 8019546:	4b27      	ldr	r3, [pc, #156]	@ (80195e4 <mem_malloc+0x1ec>)
 8019548:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801954c:	4929      	ldr	r1, [pc, #164]	@ (80195f4 <mem_malloc+0x1fc>)
 801954e:	4827      	ldr	r0, [pc, #156]	@ (80195ec <mem_malloc+0x1f4>)
 8019550:	f00b ff90 	bl	8025474 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8019554:	4821      	ldr	r0, [pc, #132]	@ (80195dc <mem_malloc+0x1e4>)
 8019556:	f00a fec0 	bl	80242da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801955a:	8bba      	ldrh	r2, [r7, #28]
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	4413      	add	r3, r2
 8019560:	3308      	adds	r3, #8
 8019562:	4a23      	ldr	r2, [pc, #140]	@ (80195f0 <mem_malloc+0x1f8>)
 8019564:	6812      	ldr	r2, [r2, #0]
 8019566:	4293      	cmp	r3, r2
 8019568:	d906      	bls.n	8019578 <mem_malloc+0x180>
 801956a:	4b1e      	ldr	r3, [pc, #120]	@ (80195e4 <mem_malloc+0x1ec>)
 801956c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8019570:	4921      	ldr	r1, [pc, #132]	@ (80195f8 <mem_malloc+0x200>)
 8019572:	481e      	ldr	r0, [pc, #120]	@ (80195ec <mem_malloc+0x1f4>)
 8019574:	f00b ff7e 	bl	8025474 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	f003 0303 	and.w	r3, r3, #3
 801957e:	2b00      	cmp	r3, #0
 8019580:	d006      	beq.n	8019590 <mem_malloc+0x198>
 8019582:	4b18      	ldr	r3, [pc, #96]	@ (80195e4 <mem_malloc+0x1ec>)
 8019584:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8019588:	491c      	ldr	r1, [pc, #112]	@ (80195fc <mem_malloc+0x204>)
 801958a:	4818      	ldr	r0, [pc, #96]	@ (80195ec <mem_malloc+0x1f4>)
 801958c:	f00b ff72 	bl	8025474 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	f003 0303 	and.w	r3, r3, #3
 8019596:	2b00      	cmp	r3, #0
 8019598:	d006      	beq.n	80195a8 <mem_malloc+0x1b0>
 801959a:	4b12      	ldr	r3, [pc, #72]	@ (80195e4 <mem_malloc+0x1ec>)
 801959c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80195a0:	4917      	ldr	r1, [pc, #92]	@ (8019600 <mem_malloc+0x208>)
 80195a2:	4812      	ldr	r0, [pc, #72]	@ (80195ec <mem_malloc+0x1f4>)
 80195a4:	f00b ff66 	bl	8025474 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	3308      	adds	r3, #8
 80195ac:	e011      	b.n	80195d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80195ae:	8bfb      	ldrh	r3, [r7, #30]
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7ff fc37 	bl	8018e24 <ptr_to_mem>
 80195b6:	4603      	mov	r3, r0
 80195b8:	881b      	ldrh	r3, [r3, #0]
 80195ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80195bc:	8bfa      	ldrh	r2, [r7, #30]
 80195be:	8bbb      	ldrh	r3, [r7, #28]
 80195c0:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 80195c4:	429a      	cmp	r2, r3
 80195c6:	f4ff af41 	bcc.w	801944c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80195ca:	4804      	ldr	r0, [pc, #16]	@ (80195dc <mem_malloc+0x1e4>)
 80195cc:	f00a fe85 	bl	80242da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80195d0:	2300      	movs	r3, #0
}
 80195d2:	4618      	mov	r0, r3
 80195d4:	3720      	adds	r7, #32
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd80      	pop	{r7, pc}
 80195da:	bf00      	nop
 80195dc:	24008d84 	.word	0x24008d84
 80195e0:	24008d88 	.word	0x24008d88
 80195e4:	0802a51c 	.word	0x0802a51c
 80195e8:	0802a6e0 	.word	0x0802a6e0
 80195ec:	0802a564 	.word	0x0802a564
 80195f0:	24008d80 	.word	0x24008d80
 80195f4:	0802a6f4 	.word	0x0802a6f4
 80195f8:	0802a710 	.word	0x0802a710
 80195fc:	0802a740 	.word	0x0802a740
 8019600:	0802a770 	.word	0x0802a770

08019604 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8019604:	b480      	push	{r7}
 8019606:	b085      	sub	sp, #20
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	689b      	ldr	r3, [r3, #8]
 8019610:	2200      	movs	r2, #0
 8019612:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	3303      	adds	r3, #3
 801961a:	f023 0303 	bic.w	r3, r3, #3
 801961e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8019620:	2300      	movs	r3, #0
 8019622:	60fb      	str	r3, [r7, #12]
 8019624:	e011      	b.n	801964a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	689b      	ldr	r3, [r3, #8]
 801962a:	681a      	ldr	r2, [r3, #0]
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	689b      	ldr	r3, [r3, #8]
 8019634:	68ba      	ldr	r2, [r7, #8]
 8019636:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	881b      	ldrh	r3, [r3, #0]
 801963c:	461a      	mov	r2, r3
 801963e:	68bb      	ldr	r3, [r7, #8]
 8019640:	4413      	add	r3, r2
 8019642:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	3301      	adds	r3, #1
 8019648:	60fb      	str	r3, [r7, #12]
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	885b      	ldrh	r3, [r3, #2]
 801964e:	461a      	mov	r2, r3
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	4293      	cmp	r3, r2
 8019654:	dbe7      	blt.n	8019626 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8019656:	bf00      	nop
 8019658:	bf00      	nop
 801965a:	3714      	adds	r7, #20
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801966a:	2300      	movs	r3, #0
 801966c:	80fb      	strh	r3, [r7, #6]
 801966e:	e009      	b.n	8019684 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8019670:	88fb      	ldrh	r3, [r7, #6]
 8019672:	4a08      	ldr	r2, [pc, #32]	@ (8019694 <memp_init+0x30>)
 8019674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019678:	4618      	mov	r0, r3
 801967a:	f7ff ffc3 	bl	8019604 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801967e:	88fb      	ldrh	r3, [r7, #6]
 8019680:	3301      	adds	r3, #1
 8019682:	80fb      	strh	r3, [r7, #6]
 8019684:	88fb      	ldrh	r3, [r7, #6]
 8019686:	2b0c      	cmp	r3, #12
 8019688:	d9f2      	bls.n	8019670 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801968a:	bf00      	nop
 801968c:	bf00      	nop
 801968e:	3708      	adds	r7, #8
 8019690:	46bd      	mov	sp, r7
 8019692:	bd80      	pop	{r7, pc}
 8019694:	0802d070 	.word	0x0802d070

08019698 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b084      	sub	sp, #16
 801969c:	af00      	add	r7, sp, #0
 801969e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80196a0:	f00a fe4e 	bl	8024340 <sys_arch_protect>
 80196a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	689b      	ldr	r3, [r3, #8]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d015      	beq.n	80196e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	689b      	ldr	r3, [r3, #8]
 80196b8:	68ba      	ldr	r2, [r7, #8]
 80196ba:	6812      	ldr	r2, [r2, #0]
 80196bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80196be:	68bb      	ldr	r3, [r7, #8]
 80196c0:	f003 0303 	and.w	r3, r3, #3
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d006      	beq.n	80196d6 <do_memp_malloc_pool+0x3e>
 80196c8:	4b09      	ldr	r3, [pc, #36]	@ (80196f0 <do_memp_malloc_pool+0x58>)
 80196ca:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80196ce:	4909      	ldr	r1, [pc, #36]	@ (80196f4 <do_memp_malloc_pool+0x5c>)
 80196d0:	4809      	ldr	r0, [pc, #36]	@ (80196f8 <do_memp_malloc_pool+0x60>)
 80196d2:	f00b fecf 	bl	8025474 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80196d6:	68f8      	ldr	r0, [r7, #12]
 80196d8:	f00a fe40 	bl	802435c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	e003      	b.n	80196e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80196e0:	68f8      	ldr	r0, [r7, #12]
 80196e2:	f00a fe3b 	bl	802435c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80196e6:	2300      	movs	r3, #0
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3710      	adds	r7, #16
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	0802a794 	.word	0x0802a794
 80196f4:	0802a7c4 	.word	0x0802a7c4
 80196f8:	0802a7e8 	.word	0x0802a7e8

080196fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d106      	bne.n	8019718 <memp_malloc_pool+0x1c>
 801970a:	4b0a      	ldr	r3, [pc, #40]	@ (8019734 <memp_malloc_pool+0x38>)
 801970c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8019710:	4909      	ldr	r1, [pc, #36]	@ (8019738 <memp_malloc_pool+0x3c>)
 8019712:	480a      	ldr	r0, [pc, #40]	@ (801973c <memp_malloc_pool+0x40>)
 8019714:	f00b feae 	bl	8025474 <iprintf>
  if (desc == NULL) {
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d101      	bne.n	8019722 <memp_malloc_pool+0x26>
    return NULL;
 801971e:	2300      	movs	r3, #0
 8019720:	e003      	b.n	801972a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7ff ffb8 	bl	8019698 <do_memp_malloc_pool>
 8019728:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801972a:	4618      	mov	r0, r3
 801972c:	3708      	adds	r7, #8
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
 8019732:	bf00      	nop
 8019734:	0802a794 	.word	0x0802a794
 8019738:	0802a810 	.word	0x0802a810
 801973c:	0802a7e8 	.word	0x0802a7e8

08019740 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b084      	sub	sp, #16
 8019744:	af00      	add	r7, sp, #0
 8019746:	4603      	mov	r3, r0
 8019748:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801974a:	79fb      	ldrb	r3, [r7, #7]
 801974c:	2b0c      	cmp	r3, #12
 801974e:	d908      	bls.n	8019762 <memp_malloc+0x22>
 8019750:	4b0a      	ldr	r3, [pc, #40]	@ (801977c <memp_malloc+0x3c>)
 8019752:	f240 1257 	movw	r2, #343	@ 0x157
 8019756:	490a      	ldr	r1, [pc, #40]	@ (8019780 <memp_malloc+0x40>)
 8019758:	480a      	ldr	r0, [pc, #40]	@ (8019784 <memp_malloc+0x44>)
 801975a:	f00b fe8b 	bl	8025474 <iprintf>
 801975e:	2300      	movs	r3, #0
 8019760:	e008      	b.n	8019774 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019762:	79fb      	ldrb	r3, [r7, #7]
 8019764:	4a08      	ldr	r2, [pc, #32]	@ (8019788 <memp_malloc+0x48>)
 8019766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801976a:	4618      	mov	r0, r3
 801976c:	f7ff ff94 	bl	8019698 <do_memp_malloc_pool>
 8019770:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019772:	68fb      	ldr	r3, [r7, #12]
}
 8019774:	4618      	mov	r0, r3
 8019776:	3710      	adds	r7, #16
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}
 801977c:	0802a794 	.word	0x0802a794
 8019780:	0802a824 	.word	0x0802a824
 8019784:	0802a7e8 	.word	0x0802a7e8
 8019788:	0802d070 	.word	0x0802d070

0801978c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	b084      	sub	sp, #16
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
 8019794:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	f003 0303 	and.w	r3, r3, #3
 801979c:	2b00      	cmp	r3, #0
 801979e:	d006      	beq.n	80197ae <do_memp_free_pool+0x22>
 80197a0:	4b0d      	ldr	r3, [pc, #52]	@ (80197d8 <do_memp_free_pool+0x4c>)
 80197a2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80197a6:	490d      	ldr	r1, [pc, #52]	@ (80197dc <do_memp_free_pool+0x50>)
 80197a8:	480d      	ldr	r0, [pc, #52]	@ (80197e0 <do_memp_free_pool+0x54>)
 80197aa:	f00b fe63 	bl	8025474 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80197b2:	f00a fdc5 	bl	8024340 <sys_arch_protect>
 80197b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	689b      	ldr	r3, [r3, #8]
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	689b      	ldr	r3, [r3, #8]
 80197c6:	68fa      	ldr	r2, [r7, #12]
 80197c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80197ca:	68b8      	ldr	r0, [r7, #8]
 80197cc:	f00a fdc6 	bl	802435c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	0802a794 	.word	0x0802a794
 80197dc:	0802a844 	.word	0x0802a844
 80197e0:	0802a7e8 	.word	0x0802a7e8

080197e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d106      	bne.n	8019802 <memp_free_pool+0x1e>
 80197f4:	4b0a      	ldr	r3, [pc, #40]	@ (8019820 <memp_free_pool+0x3c>)
 80197f6:	f240 1295 	movw	r2, #405	@ 0x195
 80197fa:	490a      	ldr	r1, [pc, #40]	@ (8019824 <memp_free_pool+0x40>)
 80197fc:	480a      	ldr	r0, [pc, #40]	@ (8019828 <memp_free_pool+0x44>)
 80197fe:	f00b fe39 	bl	8025474 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d007      	beq.n	8019818 <memp_free_pool+0x34>
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d004      	beq.n	8019818 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801980e:	6839      	ldr	r1, [r7, #0]
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f7ff ffbb 	bl	801978c <do_memp_free_pool>
 8019816:	e000      	b.n	801981a <memp_free_pool+0x36>
    return;
 8019818:	bf00      	nop
}
 801981a:	3708      	adds	r7, #8
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	0802a794 	.word	0x0802a794
 8019824:	0802a810 	.word	0x0802a810
 8019828:	0802a7e8 	.word	0x0802a7e8

0801982c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b082      	sub	sp, #8
 8019830:	af00      	add	r7, sp, #0
 8019832:	4603      	mov	r3, r0
 8019834:	6039      	str	r1, [r7, #0]
 8019836:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019838:	79fb      	ldrb	r3, [r7, #7]
 801983a:	2b0c      	cmp	r3, #12
 801983c:	d907      	bls.n	801984e <memp_free+0x22>
 801983e:	4b0c      	ldr	r3, [pc, #48]	@ (8019870 <memp_free+0x44>)
 8019840:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8019844:	490b      	ldr	r1, [pc, #44]	@ (8019874 <memp_free+0x48>)
 8019846:	480c      	ldr	r0, [pc, #48]	@ (8019878 <memp_free+0x4c>)
 8019848:	f00b fe14 	bl	8025474 <iprintf>
 801984c:	e00c      	b.n	8019868 <memp_free+0x3c>

  if (mem == NULL) {
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d008      	beq.n	8019866 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019854:	79fb      	ldrb	r3, [r7, #7]
 8019856:	4a09      	ldr	r2, [pc, #36]	@ (801987c <memp_free+0x50>)
 8019858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801985c:	6839      	ldr	r1, [r7, #0]
 801985e:	4618      	mov	r0, r3
 8019860:	f7ff ff94 	bl	801978c <do_memp_free_pool>
 8019864:	e000      	b.n	8019868 <memp_free+0x3c>
    return;
 8019866:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019868:	3708      	adds	r7, #8
 801986a:	46bd      	mov	sp, r7
 801986c:	bd80      	pop	{r7, pc}
 801986e:	bf00      	nop
 8019870:	0802a794 	.word	0x0802a794
 8019874:	0802a864 	.word	0x0802a864
 8019878:	0802a7e8 	.word	0x0802a7e8
 801987c:	0802d070 	.word	0x0802d070

08019880 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8019880:	b480      	push	{r7}
 8019882:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8019884:	bf00      	nop
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr
	...

08019890 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b086      	sub	sp, #24
 8019894:	af00      	add	r7, sp, #0
 8019896:	60f8      	str	r0, [r7, #12]
 8019898:	60b9      	str	r1, [r7, #8]
 801989a:	607a      	str	r2, [r7, #4]
 801989c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d108      	bne.n	80198b6 <netif_add+0x26>
 80198a4:	4b57      	ldr	r3, [pc, #348]	@ (8019a04 <netif_add+0x174>)
 80198a6:	f240 1227 	movw	r2, #295	@ 0x127
 80198aa:	4957      	ldr	r1, [pc, #348]	@ (8019a08 <netif_add+0x178>)
 80198ac:	4857      	ldr	r0, [pc, #348]	@ (8019a0c <netif_add+0x17c>)
 80198ae:	f00b fde1 	bl	8025474 <iprintf>
 80198b2:	2300      	movs	r3, #0
 80198b4:	e0a2      	b.n	80199fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80198b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d108      	bne.n	80198ce <netif_add+0x3e>
 80198bc:	4b51      	ldr	r3, [pc, #324]	@ (8019a04 <netif_add+0x174>)
 80198be:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80198c2:	4953      	ldr	r1, [pc, #332]	@ (8019a10 <netif_add+0x180>)
 80198c4:	4851      	ldr	r0, [pc, #324]	@ (8019a0c <netif_add+0x17c>)
 80198c6:	f00b fdd5 	bl	8025474 <iprintf>
 80198ca:	2300      	movs	r3, #0
 80198cc:	e096      	b.n	80199fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d101      	bne.n	80198d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80198d4:	4b4f      	ldr	r3, [pc, #316]	@ (8019a14 <netif_add+0x184>)
 80198d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d101      	bne.n	80198e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80198de:	4b4d      	ldr	r3, [pc, #308]	@ (8019a14 <netif_add+0x184>)
 80198e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d101      	bne.n	80198ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80198e8:	4b4a      	ldr	r3, [pc, #296]	@ (8019a14 <netif_add+0x184>)
 80198ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	2200      	movs	r2, #0
 80198f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	2200      	movs	r2, #0
 80198f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	2200      	movs	r2, #0
 80198fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	4a45      	ldr	r2, [pc, #276]	@ (8019a18 <netif_add+0x188>)
 8019902:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	2200      	movs	r2, #0
 8019908:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	2200      	movs	r2, #0
 801990e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	2200      	movs	r2, #0
 8019916:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	6a3a      	ldr	r2, [r7, #32]
 801991c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801991e:	4b3f      	ldr	r3, [pc, #252]	@ (8019a1c <netif_add+0x18c>)
 8019920:	781a      	ldrb	r2, [r3, #0]
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801992c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	687a      	ldr	r2, [r7, #4]
 8019932:	68b9      	ldr	r1, [r7, #8]
 8019934:	68f8      	ldr	r0, [r7, #12]
 8019936:	f000 f913 	bl	8019b60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801993c:	68f8      	ldr	r0, [r7, #12]
 801993e:	4798      	blx	r3
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d001      	beq.n	801994a <netif_add+0xba>
    return NULL;
 8019946:	2300      	movs	r3, #0
 8019948:	e058      	b.n	80199fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019950:	2bff      	cmp	r3, #255	@ 0xff
 8019952:	d103      	bne.n	801995c <netif_add+0xcc>
        netif->num = 0;
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	2200      	movs	r2, #0
 8019958:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 801995c:	2300      	movs	r3, #0
 801995e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019960:	4b2f      	ldr	r3, [pc, #188]	@ (8019a20 <netif_add+0x190>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	617b      	str	r3, [r7, #20]
 8019966:	e02b      	b.n	80199c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019968:	697a      	ldr	r2, [r7, #20]
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	429a      	cmp	r2, r3
 801996e:	d106      	bne.n	801997e <netif_add+0xee>
 8019970:	4b24      	ldr	r3, [pc, #144]	@ (8019a04 <netif_add+0x174>)
 8019972:	f240 128b 	movw	r2, #395	@ 0x18b
 8019976:	492b      	ldr	r1, [pc, #172]	@ (8019a24 <netif_add+0x194>)
 8019978:	4824      	ldr	r0, [pc, #144]	@ (8019a0c <netif_add+0x17c>)
 801997a:	f00b fd7b 	bl	8025474 <iprintf>
        num_netifs++;
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	3301      	adds	r3, #1
 8019982:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8019984:	693b      	ldr	r3, [r7, #16]
 8019986:	2bff      	cmp	r3, #255	@ 0xff
 8019988:	dd06      	ble.n	8019998 <netif_add+0x108>
 801998a:	4b1e      	ldr	r3, [pc, #120]	@ (8019a04 <netif_add+0x174>)
 801998c:	f240 128d 	movw	r2, #397	@ 0x18d
 8019990:	4925      	ldr	r1, [pc, #148]	@ (8019a28 <netif_add+0x198>)
 8019992:	481e      	ldr	r0, [pc, #120]	@ (8019a0c <netif_add+0x17c>)
 8019994:	f00b fd6e 	bl	8025474 <iprintf>
        if (netif2->num == netif->num) {
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d108      	bne.n	80199ba <netif_add+0x12a>
          netif->num++;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80199ae:	3301      	adds	r3, #1
 80199b0:	b2da      	uxtb	r2, r3
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80199b8:	e005      	b.n	80199c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80199ba:	697b      	ldr	r3, [r7, #20]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	617b      	str	r3, [r7, #20]
 80199c0:	697b      	ldr	r3, [r7, #20]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d1d0      	bne.n	8019968 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d1be      	bne.n	801994a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80199d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80199d4:	d103      	bne.n	80199de <netif_add+0x14e>
    netif_num = 0;
 80199d6:	4b11      	ldr	r3, [pc, #68]	@ (8019a1c <netif_add+0x18c>)
 80199d8:	2200      	movs	r2, #0
 80199da:	701a      	strb	r2, [r3, #0]
 80199dc:	e006      	b.n	80199ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80199e4:	3301      	adds	r3, #1
 80199e6:	b2da      	uxtb	r2, r3
 80199e8:	4b0c      	ldr	r3, [pc, #48]	@ (8019a1c <netif_add+0x18c>)
 80199ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80199ec:	4b0c      	ldr	r3, [pc, #48]	@ (8019a20 <netif_add+0x190>)
 80199ee:	681a      	ldr	r2, [r3, #0]
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80199f4:	4a0a      	ldr	r2, [pc, #40]	@ (8019a20 <netif_add+0x190>)
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80199fa:	68fb      	ldr	r3, [r7, #12]
}
 80199fc:	4618      	mov	r0, r3
 80199fe:	3718      	adds	r7, #24
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bd80      	pop	{r7, pc}
 8019a04:	0802a880 	.word	0x0802a880
 8019a08:	0802a914 	.word	0x0802a914
 8019a0c:	0802a8d0 	.word	0x0802a8d0
 8019a10:	0802a930 	.word	0x0802a930
 8019a14:	0802d0e4 	.word	0x0802d0e4
 8019a18:	08019e3b 	.word	0x08019e3b
 8019a1c:	2400be60 	.word	0x2400be60
 8019a20:	2400be58 	.word	0x2400be58
 8019a24:	0802a954 	.word	0x0802a954
 8019a28:	0802a968 	.word	0x0802a968

08019a2c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b082      	sub	sp, #8
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
 8019a34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8019a36:	6839      	ldr	r1, [r7, #0]
 8019a38:	6878      	ldr	r0, [r7, #4]
 8019a3a:	f002 fdc9 	bl	801c5d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019a3e:	6839      	ldr	r1, [r7, #0]
 8019a40:	6878      	ldr	r0, [r7, #4]
 8019a42:	f007 fe5f 	bl	8021704 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8019a46:	bf00      	nop
 8019a48:	3708      	adds	r7, #8
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
	...

08019a50 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b086      	sub	sp, #24
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	60f8      	str	r0, [r7, #12]
 8019a58:	60b9      	str	r1, [r7, #8]
 8019a5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8019a5c:	68bb      	ldr	r3, [r7, #8]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d106      	bne.n	8019a70 <netif_do_set_ipaddr+0x20>
 8019a62:	4b1d      	ldr	r3, [pc, #116]	@ (8019ad8 <netif_do_set_ipaddr+0x88>)
 8019a64:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8019a68:	491c      	ldr	r1, [pc, #112]	@ (8019adc <netif_do_set_ipaddr+0x8c>)
 8019a6a:	481d      	ldr	r0, [pc, #116]	@ (8019ae0 <netif_do_set_ipaddr+0x90>)
 8019a6c:	f00b fd02 	bl	8025474 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d106      	bne.n	8019a84 <netif_do_set_ipaddr+0x34>
 8019a76:	4b18      	ldr	r3, [pc, #96]	@ (8019ad8 <netif_do_set_ipaddr+0x88>)
 8019a78:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8019a7c:	4917      	ldr	r1, [pc, #92]	@ (8019adc <netif_do_set_ipaddr+0x8c>)
 8019a7e:	4818      	ldr	r0, [pc, #96]	@ (8019ae0 <netif_do_set_ipaddr+0x90>)
 8019a80:	f00b fcf8 	bl	8025474 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	3304      	adds	r3, #4
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	d01c      	beq.n	8019acc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	3304      	adds	r3, #4
 8019a9c:	681a      	ldr	r2, [r3, #0]
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8019aa2:	f107 0314 	add.w	r3, r7, #20
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f7ff ffbf 	bl	8019a2c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d002      	beq.n	8019aba <netif_do_set_ipaddr+0x6a>
 8019ab4:	68bb      	ldr	r3, [r7, #8]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	e000      	b.n	8019abc <netif_do_set_ipaddr+0x6c>
 8019aba:	2300      	movs	r3, #0
 8019abc:	68fa      	ldr	r2, [r7, #12]
 8019abe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019ac0:	2101      	movs	r1, #1
 8019ac2:	68f8      	ldr	r0, [r7, #12]
 8019ac4:	f000 f8d2 	bl	8019c6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8019ac8:	2301      	movs	r3, #1
 8019aca:	e000      	b.n	8019ace <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8019acc:	2300      	movs	r3, #0
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3718      	adds	r7, #24
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	bd80      	pop	{r7, pc}
 8019ad6:	bf00      	nop
 8019ad8:	0802a880 	.word	0x0802a880
 8019adc:	0802a998 	.word	0x0802a998
 8019ae0:	0802a8d0 	.word	0x0802a8d0

08019ae4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8019ae4:	b480      	push	{r7}
 8019ae6:	b085      	sub	sp, #20
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	60f8      	str	r0, [r7, #12]
 8019aec:	60b9      	str	r1, [r7, #8]
 8019aee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8019af0:	68bb      	ldr	r3, [r7, #8]
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	3308      	adds	r3, #8
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d00a      	beq.n	8019b14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d002      	beq.n	8019b0a <netif_do_set_netmask+0x26>
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	e000      	b.n	8019b0c <netif_do_set_netmask+0x28>
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	68fa      	ldr	r2, [r7, #12]
 8019b0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8019b10:	2301      	movs	r3, #1
 8019b12:	e000      	b.n	8019b16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8019b14:	2300      	movs	r3, #0
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3714      	adds	r7, #20
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b20:	4770      	bx	lr

08019b22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8019b22:	b480      	push	{r7}
 8019b24:	b085      	sub	sp, #20
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	60f8      	str	r0, [r7, #12]
 8019b2a:	60b9      	str	r1, [r7, #8]
 8019b2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019b2e:	68bb      	ldr	r3, [r7, #8]
 8019b30:	681a      	ldr	r2, [r3, #0]
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	330c      	adds	r3, #12
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	429a      	cmp	r2, r3
 8019b3a:	d00a      	beq.n	8019b52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d002      	beq.n	8019b48 <netif_do_set_gw+0x26>
 8019b42:	68bb      	ldr	r3, [r7, #8]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	e000      	b.n	8019b4a <netif_do_set_gw+0x28>
 8019b48:	2300      	movs	r3, #0
 8019b4a:	68fa      	ldr	r2, [r7, #12]
 8019b4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8019b4e:	2301      	movs	r3, #1
 8019b50:	e000      	b.n	8019b54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8019b52:	2300      	movs	r3, #0
}
 8019b54:	4618      	mov	r0, r3
 8019b56:	3714      	adds	r7, #20
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5e:	4770      	bx	lr

08019b60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b088      	sub	sp, #32
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
 8019b6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8019b72:	2300      	movs	r3, #0
 8019b74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d101      	bne.n	8019b80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8019b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8019bf0 <netif_set_addr+0x90>)
 8019b7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d101      	bne.n	8019b8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8019b86:	4b1a      	ldr	r3, [pc, #104]	@ (8019bf0 <netif_set_addr+0x90>)
 8019b88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d101      	bne.n	8019b94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8019b90:	4b17      	ldr	r3, [pc, #92]	@ (8019bf0 <netif_set_addr+0x90>)
 8019b92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d003      	beq.n	8019ba2 <netif_set_addr+0x42>
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d101      	bne.n	8019ba6 <netif_set_addr+0x46>
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	e000      	b.n	8019ba8 <netif_set_addr+0x48>
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8019baa:	697b      	ldr	r3, [r7, #20]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d006      	beq.n	8019bbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019bb0:	f107 0310 	add.w	r3, r7, #16
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	68b9      	ldr	r1, [r7, #8]
 8019bb8:	68f8      	ldr	r0, [r7, #12]
 8019bba:	f7ff ff49 	bl	8019a50 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8019bbe:	69fa      	ldr	r2, [r7, #28]
 8019bc0:	6879      	ldr	r1, [r7, #4]
 8019bc2:	68f8      	ldr	r0, [r7, #12]
 8019bc4:	f7ff ff8e 	bl	8019ae4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8019bc8:	69ba      	ldr	r2, [r7, #24]
 8019bca:	6839      	ldr	r1, [r7, #0]
 8019bcc:	68f8      	ldr	r0, [r7, #12]
 8019bce:	f7ff ffa8 	bl	8019b22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d106      	bne.n	8019be6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019bd8:	f107 0310 	add.w	r3, r7, #16
 8019bdc:	461a      	mov	r2, r3
 8019bde:	68b9      	ldr	r1, [r7, #8]
 8019be0:	68f8      	ldr	r0, [r7, #12]
 8019be2:	f7ff ff35 	bl	8019a50 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8019be6:	bf00      	nop
 8019be8:	3720      	adds	r7, #32
 8019bea:	46bd      	mov	sp, r7
 8019bec:	bd80      	pop	{r7, pc}
 8019bee:	bf00      	nop
 8019bf0:	0802d0e4 	.word	0x0802d0e4

08019bf4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8019bf4:	b480      	push	{r7}
 8019bf6:	b083      	sub	sp, #12
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019bfc:	4a04      	ldr	r2, [pc, #16]	@ (8019c10 <netif_set_default+0x1c>)
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8019c02:	bf00      	nop
 8019c04:	370c      	adds	r7, #12
 8019c06:	46bd      	mov	sp, r7
 8019c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0c:	4770      	bx	lr
 8019c0e:	bf00      	nop
 8019c10:	2400be5c 	.word	0x2400be5c

08019c14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d107      	bne.n	8019c32 <netif_set_up+0x1e>
 8019c22:	4b0f      	ldr	r3, [pc, #60]	@ (8019c60 <netif_set_up+0x4c>)
 8019c24:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8019c28:	490e      	ldr	r1, [pc, #56]	@ (8019c64 <netif_set_up+0x50>)
 8019c2a:	480f      	ldr	r0, [pc, #60]	@ (8019c68 <netif_set_up+0x54>)
 8019c2c:	f00b fc22 	bl	8025474 <iprintf>
 8019c30:	e013      	b.n	8019c5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019c38:	f003 0301 	and.w	r3, r3, #1
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d10c      	bne.n	8019c5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019c46:	f043 0301 	orr.w	r3, r3, #1
 8019c4a:	b2da      	uxtb	r2, r3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019c52:	2103      	movs	r1, #3
 8019c54:	6878      	ldr	r0, [r7, #4]
 8019c56:	f000 f809 	bl	8019c6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8019c5a:	3708      	adds	r7, #8
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}
 8019c60:	0802a880 	.word	0x0802a880
 8019c64:	0802aa08 	.word	0x0802aa08
 8019c68:	0802a8d0 	.word	0x0802a8d0

08019c6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	460b      	mov	r3, r1
 8019c76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d106      	bne.n	8019c8c <netif_issue_reports+0x20>
 8019c7e:	4b18      	ldr	r3, [pc, #96]	@ (8019ce0 <netif_issue_reports+0x74>)
 8019c80:	f240 326d 	movw	r2, #877	@ 0x36d
 8019c84:	4917      	ldr	r1, [pc, #92]	@ (8019ce4 <netif_issue_reports+0x78>)
 8019c86:	4818      	ldr	r0, [pc, #96]	@ (8019ce8 <netif_issue_reports+0x7c>)
 8019c88:	f00b fbf4 	bl	8025474 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019c92:	f003 0304 	and.w	r3, r3, #4
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d01e      	beq.n	8019cd8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ca0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d017      	beq.n	8019cd8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019ca8:	78fb      	ldrb	r3, [r7, #3]
 8019caa:	f003 0301 	and.w	r3, r3, #1
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d013      	beq.n	8019cda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	3304      	adds	r3, #4
 8019cb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d00e      	beq.n	8019cda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019cc2:	f003 0308 	and.w	r3, r3, #8
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d007      	beq.n	8019cda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	3304      	adds	r3, #4
 8019cce:	4619      	mov	r1, r3
 8019cd0:	6878      	ldr	r0, [r7, #4]
 8019cd2:	f008 fc81 	bl	80225d8 <etharp_request>
 8019cd6:	e000      	b.n	8019cda <netif_issue_reports+0x6e>
    return;
 8019cd8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019cda:	3708      	adds	r7, #8
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}
 8019ce0:	0802a880 	.word	0x0802a880
 8019ce4:	0802aa24 	.word	0x0802aa24
 8019ce8:	0802a8d0 	.word	0x0802a8d0

08019cec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b082      	sub	sp, #8
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d107      	bne.n	8019d0a <netif_set_down+0x1e>
 8019cfa:	4b12      	ldr	r3, [pc, #72]	@ (8019d44 <netif_set_down+0x58>)
 8019cfc:	f240 329b 	movw	r2, #923	@ 0x39b
 8019d00:	4911      	ldr	r1, [pc, #68]	@ (8019d48 <netif_set_down+0x5c>)
 8019d02:	4812      	ldr	r0, [pc, #72]	@ (8019d4c <netif_set_down+0x60>)
 8019d04:	f00b fbb6 	bl	8025474 <iprintf>
 8019d08:	e019      	b.n	8019d3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d10:	f003 0301 	and.w	r3, r3, #1
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d012      	beq.n	8019d3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d1e:	f023 0301 	bic.w	r3, r3, #1
 8019d22:	b2da      	uxtb	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d30:	f003 0308 	and.w	r3, r3, #8
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d002      	beq.n	8019d3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019d38:	6878      	ldr	r0, [r7, #4]
 8019d3a:	f008 f80b 	bl	8021d54 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}
 8019d44:	0802a880 	.word	0x0802a880
 8019d48:	0802aa48 	.word	0x0802aa48
 8019d4c:	0802a8d0 	.word	0x0802a8d0

08019d50 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b082      	sub	sp, #8
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d107      	bne.n	8019d6e <netif_set_link_up+0x1e>
 8019d5e:	4b13      	ldr	r3, [pc, #76]	@ (8019dac <netif_set_link_up+0x5c>)
 8019d60:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8019d64:	4912      	ldr	r1, [pc, #72]	@ (8019db0 <netif_set_link_up+0x60>)
 8019d66:	4813      	ldr	r0, [pc, #76]	@ (8019db4 <netif_set_link_up+0x64>)
 8019d68:	f00b fb84 	bl	8025474 <iprintf>
 8019d6c:	e01b      	b.n	8019da6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d74:	f003 0304 	and.w	r3, r3, #4
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d114      	bne.n	8019da6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019d82:	f043 0304 	orr.w	r3, r3, #4
 8019d86:	b2da      	uxtb	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019d8e:	2103      	movs	r1, #3
 8019d90:	6878      	ldr	r0, [r7, #4]
 8019d92:	f7ff ff6b 	bl	8019c6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	69db      	ldr	r3, [r3, #28]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d003      	beq.n	8019da6 <netif_set_link_up+0x56>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	69db      	ldr	r3, [r3, #28]
 8019da2:	6878      	ldr	r0, [r7, #4]
 8019da4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019da6:	3708      	adds	r7, #8
 8019da8:	46bd      	mov	sp, r7
 8019daa:	bd80      	pop	{r7, pc}
 8019dac:	0802a880 	.word	0x0802a880
 8019db0:	0802aa68 	.word	0x0802aa68
 8019db4:	0802a8d0 	.word	0x0802a8d0

08019db8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d107      	bne.n	8019dd6 <netif_set_link_down+0x1e>
 8019dc6:	4b11      	ldr	r3, [pc, #68]	@ (8019e0c <netif_set_link_down+0x54>)
 8019dc8:	f240 4206 	movw	r2, #1030	@ 0x406
 8019dcc:	4910      	ldr	r1, [pc, #64]	@ (8019e10 <netif_set_link_down+0x58>)
 8019dce:	4811      	ldr	r0, [pc, #68]	@ (8019e14 <netif_set_link_down+0x5c>)
 8019dd0:	f00b fb50 	bl	8025474 <iprintf>
 8019dd4:	e017      	b.n	8019e06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019ddc:	f003 0304 	and.w	r3, r3, #4
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d010      	beq.n	8019e06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019dea:	f023 0304 	bic.w	r3, r3, #4
 8019dee:	b2da      	uxtb	r2, r3
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	69db      	ldr	r3, [r3, #28]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d003      	beq.n	8019e06 <netif_set_link_down+0x4e>
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	69db      	ldr	r3, [r3, #28]
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8019e06:	3708      	adds	r7, #8
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd80      	pop	{r7, pc}
 8019e0c:	0802a880 	.word	0x0802a880
 8019e10:	0802aa8c 	.word	0x0802aa8c
 8019e14:	0802a8d0 	.word	0x0802a8d0

08019e18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8019e18:	b480      	push	{r7}
 8019e1a:	b083      	sub	sp, #12
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
 8019e20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d002      	beq.n	8019e2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	683a      	ldr	r2, [r7, #0]
 8019e2c:	61da      	str	r2, [r3, #28]
  }
}
 8019e2e:	bf00      	nop
 8019e30:	370c      	adds	r7, #12
 8019e32:	46bd      	mov	sp, r7
 8019e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e38:	4770      	bx	lr

08019e3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8019e3a:	b480      	push	{r7}
 8019e3c:	b085      	sub	sp, #20
 8019e3e:	af00      	add	r7, sp, #0
 8019e40:	60f8      	str	r0, [r7, #12]
 8019e42:	60b9      	str	r1, [r7, #8]
 8019e44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8019e46:	f06f 030b 	mvn.w	r3, #11
}
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	3714      	adds	r7, #20
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e54:	4770      	bx	lr
	...

08019e58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b085      	sub	sp, #20
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	4603      	mov	r3, r0
 8019e60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8019e62:	79fb      	ldrb	r3, [r7, #7]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d013      	beq.n	8019e90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8019e68:	4b0d      	ldr	r3, [pc, #52]	@ (8019ea0 <netif_get_by_index+0x48>)
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	60fb      	str	r3, [r7, #12]
 8019e6e:	e00c      	b.n	8019e8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019e76:	3301      	adds	r3, #1
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	79fa      	ldrb	r2, [r7, #7]
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	d101      	bne.n	8019e84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	e006      	b.n	8019e92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	60fb      	str	r3, [r7, #12]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d1ef      	bne.n	8019e70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8019e90:	2300      	movs	r3, #0
}
 8019e92:	4618      	mov	r0, r3
 8019e94:	3714      	adds	r7, #20
 8019e96:	46bd      	mov	sp, r7
 8019e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9c:	4770      	bx	lr
 8019e9e:	bf00      	nop
 8019ea0:	2400be58 	.word	0x2400be58

08019ea4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b082      	sub	sp, #8
 8019ea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019eaa:	f00a fa49 	bl	8024340 <sys_arch_protect>
 8019eae:	6038      	str	r0, [r7, #0]
 8019eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee8 <pbuf_free_ooseq+0x44>)
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	701a      	strb	r2, [r3, #0]
 8019eb6:	6838      	ldr	r0, [r7, #0]
 8019eb8:	f00a fa50 	bl	802435c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8019eec <pbuf_free_ooseq+0x48>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	607b      	str	r3, [r7, #4]
 8019ec2:	e00a      	b.n	8019eda <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d003      	beq.n	8019ed4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019ecc:	6878      	ldr	r0, [r7, #4]
 8019ece:	f002 fbbd 	bl	801c64c <tcp_free_ooseq>
      return;
 8019ed2:	e005      	b.n	8019ee0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	68db      	ldr	r3, [r3, #12]
 8019ed8:	607b      	str	r3, [r7, #4]
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d1f1      	bne.n	8019ec4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019ee0:	3708      	adds	r7, #8
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	2400be61 	.word	0x2400be61
 8019eec:	2400be70 	.word	0x2400be70

08019ef0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b082      	sub	sp, #8
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019ef8:	f7ff ffd4 	bl	8019ea4 <pbuf_free_ooseq>
}
 8019efc:	bf00      	nop
 8019efe:	3708      	adds	r7, #8
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}

08019f04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b082      	sub	sp, #8
 8019f08:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8019f0a:	f00a fa19 	bl	8024340 <sys_arch_protect>
 8019f0e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019f10:	4b0f      	ldr	r3, [pc, #60]	@ (8019f50 <pbuf_pool_is_empty+0x4c>)
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019f16:	4b0e      	ldr	r3, [pc, #56]	@ (8019f50 <pbuf_pool_is_empty+0x4c>)
 8019f18:	2201      	movs	r2, #1
 8019f1a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019f1c:	6878      	ldr	r0, [r7, #4]
 8019f1e:	f00a fa1d 	bl	802435c <sys_arch_unprotect>

  if (!queued) {
 8019f22:	78fb      	ldrb	r3, [r7, #3]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d10f      	bne.n	8019f48 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019f28:	2100      	movs	r1, #0
 8019f2a:	480a      	ldr	r0, [pc, #40]	@ (8019f54 <pbuf_pool_is_empty+0x50>)
 8019f2c:	f7fe fdd8 	bl	8018ae0 <tcpip_try_callback>
 8019f30:	4603      	mov	r3, r0
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d008      	beq.n	8019f48 <pbuf_pool_is_empty+0x44>
 8019f36:	f00a fa03 	bl	8024340 <sys_arch_protect>
 8019f3a:	6078      	str	r0, [r7, #4]
 8019f3c:	4b04      	ldr	r3, [pc, #16]	@ (8019f50 <pbuf_pool_is_empty+0x4c>)
 8019f3e:	2200      	movs	r2, #0
 8019f40:	701a      	strb	r2, [r3, #0]
 8019f42:	6878      	ldr	r0, [r7, #4]
 8019f44:	f00a fa0a 	bl	802435c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8019f48:	bf00      	nop
 8019f4a:	3708      	adds	r7, #8
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}
 8019f50:	2400be61 	.word	0x2400be61
 8019f54:	08019ef1 	.word	0x08019ef1

08019f58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8019f58:	b480      	push	{r7}
 8019f5a:	b085      	sub	sp, #20
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	60f8      	str	r0, [r7, #12]
 8019f60:	60b9      	str	r1, [r7, #8]
 8019f62:	4611      	mov	r1, r2
 8019f64:	461a      	mov	r2, r3
 8019f66:	460b      	mov	r3, r1
 8019f68:	80fb      	strh	r3, [r7, #6]
 8019f6a:	4613      	mov	r3, r2
 8019f6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	2200      	movs	r2, #0
 8019f72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	68ba      	ldr	r2, [r7, #8]
 8019f78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	88fa      	ldrh	r2, [r7, #6]
 8019f7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	88ba      	ldrh	r2, [r7, #4]
 8019f84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8019f86:	8b3b      	ldrh	r3, [r7, #24]
 8019f88:	b2da      	uxtb	r2, r3
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	7f3a      	ldrb	r2, [r7, #28]
 8019f92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	2201      	movs	r2, #1
 8019f98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	73da      	strb	r2, [r3, #15]
}
 8019fa0:	bf00      	nop
 8019fa2:	3714      	adds	r7, #20
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019faa:	4770      	bx	lr

08019fac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b08c      	sub	sp, #48	@ 0x30
 8019fb0:	af02      	add	r7, sp, #8
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	71fb      	strb	r3, [r7, #7]
 8019fb6:	460b      	mov	r3, r1
 8019fb8:	80bb      	strh	r3, [r7, #4]
 8019fba:	4613      	mov	r3, r2
 8019fbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8019fbe:	79fb      	ldrb	r3, [r7, #7]
 8019fc0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019fc2:	887b      	ldrh	r3, [r7, #2]
 8019fc4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8019fc8:	d07f      	beq.n	801a0ca <pbuf_alloc+0x11e>
 8019fca:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8019fce:	f300 80c8 	bgt.w	801a162 <pbuf_alloc+0x1b6>
 8019fd2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8019fd6:	d010      	beq.n	8019ffa <pbuf_alloc+0x4e>
 8019fd8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8019fdc:	f300 80c1 	bgt.w	801a162 <pbuf_alloc+0x1b6>
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d002      	beq.n	8019fea <pbuf_alloc+0x3e>
 8019fe4:	2b41      	cmp	r3, #65	@ 0x41
 8019fe6:	f040 80bc 	bne.w	801a162 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8019fea:	887a      	ldrh	r2, [r7, #2]
 8019fec:	88bb      	ldrh	r3, [r7, #4]
 8019fee:	4619      	mov	r1, r3
 8019ff0:	2000      	movs	r0, #0
 8019ff2:	f000 f8d1 	bl	801a198 <pbuf_alloc_reference>
 8019ff6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8019ff8:	e0bd      	b.n	801a176 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8019ffe:	2300      	movs	r3, #0
 801a000:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801a002:	88bb      	ldrh	r3, [r7, #4]
 801a004:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a006:	200c      	movs	r0, #12
 801a008:	f7ff fb9a 	bl	8019740 <memp_malloc>
 801a00c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801a00e:	693b      	ldr	r3, [r7, #16]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d109      	bne.n	801a028 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801a014:	f7ff ff76 	bl	8019f04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d002      	beq.n	801a024 <pbuf_alloc+0x78>
            pbuf_free(p);
 801a01e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a020:	f000 fada 	bl	801a5d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801a024:	2300      	movs	r3, #0
 801a026:	e0a7      	b.n	801a178 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a028:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a02a:	3303      	adds	r3, #3
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	f023 0303 	bic.w	r3, r3, #3
 801a032:	b29b      	uxth	r3, r3
 801a034:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801a038:	b29b      	uxth	r3, r3
 801a03a:	8b7a      	ldrh	r2, [r7, #26]
 801a03c:	4293      	cmp	r3, r2
 801a03e:	bf28      	it	cs
 801a040:	4613      	movcs	r3, r2
 801a042:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a044:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a046:	3310      	adds	r3, #16
 801a048:	693a      	ldr	r2, [r7, #16]
 801a04a:	4413      	add	r3, r2
 801a04c:	3303      	adds	r3, #3
 801a04e:	f023 0303 	bic.w	r3, r3, #3
 801a052:	4618      	mov	r0, r3
 801a054:	89f9      	ldrh	r1, [r7, #14]
 801a056:	8b7a      	ldrh	r2, [r7, #26]
 801a058:	2300      	movs	r3, #0
 801a05a:	9301      	str	r3, [sp, #4]
 801a05c:	887b      	ldrh	r3, [r7, #2]
 801a05e:	9300      	str	r3, [sp, #0]
 801a060:	460b      	mov	r3, r1
 801a062:	4601      	mov	r1, r0
 801a064:	6938      	ldr	r0, [r7, #16]
 801a066:	f7ff ff77 	bl	8019f58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801a06a:	693b      	ldr	r3, [r7, #16]
 801a06c:	685b      	ldr	r3, [r3, #4]
 801a06e:	f003 0303 	and.w	r3, r3, #3
 801a072:	2b00      	cmp	r3, #0
 801a074:	d006      	beq.n	801a084 <pbuf_alloc+0xd8>
 801a076:	4b42      	ldr	r3, [pc, #264]	@ (801a180 <pbuf_alloc+0x1d4>)
 801a078:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a07c:	4941      	ldr	r1, [pc, #260]	@ (801a184 <pbuf_alloc+0x1d8>)
 801a07e:	4842      	ldr	r0, [pc, #264]	@ (801a188 <pbuf_alloc+0x1dc>)
 801a080:	f00b f9f8 	bl	8025474 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801a084:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a086:	3303      	adds	r3, #3
 801a088:	f023 0303 	bic.w	r3, r3, #3
 801a08c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801a090:	d106      	bne.n	801a0a0 <pbuf_alloc+0xf4>
 801a092:	4b3b      	ldr	r3, [pc, #236]	@ (801a180 <pbuf_alloc+0x1d4>)
 801a094:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801a098:	493c      	ldr	r1, [pc, #240]	@ (801a18c <pbuf_alloc+0x1e0>)
 801a09a:	483b      	ldr	r0, [pc, #236]	@ (801a188 <pbuf_alloc+0x1dc>)
 801a09c:	f00b f9ea 	bl	8025474 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d102      	bne.n	801a0ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a0aa:	e002      	b.n	801a0b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801a0ac:	69fb      	ldr	r3, [r7, #28]
 801a0ae:	693a      	ldr	r2, [r7, #16]
 801a0b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801a0b6:	8b7a      	ldrh	r2, [r7, #26]
 801a0b8:	89fb      	ldrh	r3, [r7, #14]
 801a0ba:	1ad3      	subs	r3, r2, r3
 801a0bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801a0c2:	8b7b      	ldrh	r3, [r7, #26]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d19e      	bne.n	801a006 <pbuf_alloc+0x5a>
      break;
 801a0c8:	e055      	b.n	801a176 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a0ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a0cc:	3303      	adds	r3, #3
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	f023 0303 	bic.w	r3, r3, #3
 801a0d4:	b29a      	uxth	r2, r3
 801a0d6:	88bb      	ldrh	r3, [r7, #4]
 801a0d8:	3303      	adds	r3, #3
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	f023 0303 	bic.w	r3, r3, #3
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	4413      	add	r3, r2
 801a0e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a0e6:	8b3b      	ldrh	r3, [r7, #24]
 801a0e8:	3310      	adds	r3, #16
 801a0ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a0ec:	8b3a      	ldrh	r2, [r7, #24]
 801a0ee:	88bb      	ldrh	r3, [r7, #4]
 801a0f0:	3303      	adds	r3, #3
 801a0f2:	f023 0303 	bic.w	r3, r3, #3
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	d306      	bcc.n	801a108 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801a0fa:	8afa      	ldrh	r2, [r7, #22]
 801a0fc:	88bb      	ldrh	r3, [r7, #4]
 801a0fe:	3303      	adds	r3, #3
 801a100:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a104:	429a      	cmp	r2, r3
 801a106:	d201      	bcs.n	801a10c <pbuf_alloc+0x160>
        return NULL;
 801a108:	2300      	movs	r3, #0
 801a10a:	e035      	b.n	801a178 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a10c:	8afb      	ldrh	r3, [r7, #22]
 801a10e:	4618      	mov	r0, r3
 801a110:	f7ff f972 	bl	80193f8 <mem_malloc>
 801a114:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d101      	bne.n	801a120 <pbuf_alloc+0x174>
        return NULL;
 801a11c:	2300      	movs	r3, #0
 801a11e:	e02b      	b.n	801a178 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a120:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a122:	3310      	adds	r3, #16
 801a124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a126:	4413      	add	r3, r2
 801a128:	3303      	adds	r3, #3
 801a12a:	f023 0303 	bic.w	r3, r3, #3
 801a12e:	4618      	mov	r0, r3
 801a130:	88b9      	ldrh	r1, [r7, #4]
 801a132:	88ba      	ldrh	r2, [r7, #4]
 801a134:	2300      	movs	r3, #0
 801a136:	9301      	str	r3, [sp, #4]
 801a138:	887b      	ldrh	r3, [r7, #2]
 801a13a:	9300      	str	r3, [sp, #0]
 801a13c:	460b      	mov	r3, r1
 801a13e:	4601      	mov	r1, r0
 801a140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a142:	f7ff ff09 	bl	8019f58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a148:	685b      	ldr	r3, [r3, #4]
 801a14a:	f003 0303 	and.w	r3, r3, #3
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d010      	beq.n	801a174 <pbuf_alloc+0x1c8>
 801a152:	4b0b      	ldr	r3, [pc, #44]	@ (801a180 <pbuf_alloc+0x1d4>)
 801a154:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801a158:	490d      	ldr	r1, [pc, #52]	@ (801a190 <pbuf_alloc+0x1e4>)
 801a15a:	480b      	ldr	r0, [pc, #44]	@ (801a188 <pbuf_alloc+0x1dc>)
 801a15c:	f00b f98a 	bl	8025474 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801a160:	e008      	b.n	801a174 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a162:	4b07      	ldr	r3, [pc, #28]	@ (801a180 <pbuf_alloc+0x1d4>)
 801a164:	f240 1227 	movw	r2, #295	@ 0x127
 801a168:	490a      	ldr	r1, [pc, #40]	@ (801a194 <pbuf_alloc+0x1e8>)
 801a16a:	4807      	ldr	r0, [pc, #28]	@ (801a188 <pbuf_alloc+0x1dc>)
 801a16c:	f00b f982 	bl	8025474 <iprintf>
      return NULL;
 801a170:	2300      	movs	r3, #0
 801a172:	e001      	b.n	801a178 <pbuf_alloc+0x1cc>
      break;
 801a174:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3728      	adds	r7, #40	@ 0x28
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd80      	pop	{r7, pc}
 801a180:	0802aab0 	.word	0x0802aab0
 801a184:	0802aae0 	.word	0x0802aae0
 801a188:	0802ab10 	.word	0x0802ab10
 801a18c:	0802ab38 	.word	0x0802ab38
 801a190:	0802ab6c 	.word	0x0802ab6c
 801a194:	0802ab98 	.word	0x0802ab98

0801a198 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b086      	sub	sp, #24
 801a19c:	af02      	add	r7, sp, #8
 801a19e:	6078      	str	r0, [r7, #4]
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	807b      	strh	r3, [r7, #2]
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a1a8:	883b      	ldrh	r3, [r7, #0]
 801a1aa:	2b41      	cmp	r3, #65	@ 0x41
 801a1ac:	d009      	beq.n	801a1c2 <pbuf_alloc_reference+0x2a>
 801a1ae:	883b      	ldrh	r3, [r7, #0]
 801a1b0:	2b01      	cmp	r3, #1
 801a1b2:	d006      	beq.n	801a1c2 <pbuf_alloc_reference+0x2a>
 801a1b4:	4b0f      	ldr	r3, [pc, #60]	@ (801a1f4 <pbuf_alloc_reference+0x5c>)
 801a1b6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801a1ba:	490f      	ldr	r1, [pc, #60]	@ (801a1f8 <pbuf_alloc_reference+0x60>)
 801a1bc:	480f      	ldr	r0, [pc, #60]	@ (801a1fc <pbuf_alloc_reference+0x64>)
 801a1be:	f00b f959 	bl	8025474 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a1c2:	200b      	movs	r0, #11
 801a1c4:	f7ff fabc 	bl	8019740 <memp_malloc>
 801a1c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d101      	bne.n	801a1d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	e00b      	b.n	801a1ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801a1d4:	8879      	ldrh	r1, [r7, #2]
 801a1d6:	887a      	ldrh	r2, [r7, #2]
 801a1d8:	2300      	movs	r3, #0
 801a1da:	9301      	str	r3, [sp, #4]
 801a1dc:	883b      	ldrh	r3, [r7, #0]
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	460b      	mov	r3, r1
 801a1e2:	6879      	ldr	r1, [r7, #4]
 801a1e4:	68f8      	ldr	r0, [r7, #12]
 801a1e6:	f7ff feb7 	bl	8019f58 <pbuf_init_alloced_pbuf>
  return p;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3710      	adds	r7, #16
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}
 801a1f4:	0802aab0 	.word	0x0802aab0
 801a1f8:	0802abb4 	.word	0x0802abb4
 801a1fc:	0802ab10 	.word	0x0802ab10

0801a200 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b088      	sub	sp, #32
 801a204:	af02      	add	r7, sp, #8
 801a206:	607b      	str	r3, [r7, #4]
 801a208:	4603      	mov	r3, r0
 801a20a:	73fb      	strb	r3, [r7, #15]
 801a20c:	460b      	mov	r3, r1
 801a20e:	81bb      	strh	r3, [r7, #12]
 801a210:	4613      	mov	r3, r2
 801a212:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801a214:	7bfb      	ldrb	r3, [r7, #15]
 801a216:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801a218:	8a7b      	ldrh	r3, [r7, #18]
 801a21a:	3303      	adds	r3, #3
 801a21c:	f023 0203 	bic.w	r2, r3, #3
 801a220:	89bb      	ldrh	r3, [r7, #12]
 801a222:	441a      	add	r2, r3
 801a224:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a226:	429a      	cmp	r2, r3
 801a228:	d901      	bls.n	801a22e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801a22a:	2300      	movs	r3, #0
 801a22c:	e018      	b.n	801a260 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801a22e:	6a3b      	ldr	r3, [r7, #32]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d007      	beq.n	801a244 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801a234:	8a7b      	ldrh	r3, [r7, #18]
 801a236:	3303      	adds	r3, #3
 801a238:	f023 0303 	bic.w	r3, r3, #3
 801a23c:	6a3a      	ldr	r2, [r7, #32]
 801a23e:	4413      	add	r3, r2
 801a240:	617b      	str	r3, [r7, #20]
 801a242:	e001      	b.n	801a248 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801a244:	2300      	movs	r3, #0
 801a246:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801a248:	6878      	ldr	r0, [r7, #4]
 801a24a:	89b9      	ldrh	r1, [r7, #12]
 801a24c:	89ba      	ldrh	r2, [r7, #12]
 801a24e:	2302      	movs	r3, #2
 801a250:	9301      	str	r3, [sp, #4]
 801a252:	897b      	ldrh	r3, [r7, #10]
 801a254:	9300      	str	r3, [sp, #0]
 801a256:	460b      	mov	r3, r1
 801a258:	6979      	ldr	r1, [r7, #20]
 801a25a:	f7ff fe7d 	bl	8019f58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801a25e:	687b      	ldr	r3, [r7, #4]
}
 801a260:	4618      	mov	r0, r3
 801a262:	3718      	adds	r7, #24
 801a264:	46bd      	mov	sp, r7
 801a266:	bd80      	pop	{r7, pc}

0801a268 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b084      	sub	sp, #16
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
 801a270:	460b      	mov	r3, r1
 801a272:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d106      	bne.n	801a288 <pbuf_realloc+0x20>
 801a27a:	4b3a      	ldr	r3, [pc, #232]	@ (801a364 <pbuf_realloc+0xfc>)
 801a27c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801a280:	4939      	ldr	r1, [pc, #228]	@ (801a368 <pbuf_realloc+0x100>)
 801a282:	483a      	ldr	r0, [pc, #232]	@ (801a36c <pbuf_realloc+0x104>)
 801a284:	f00b f8f6 	bl	8025474 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	891b      	ldrh	r3, [r3, #8]
 801a28c:	887a      	ldrh	r2, [r7, #2]
 801a28e:	429a      	cmp	r2, r3
 801a290:	d263      	bcs.n	801a35a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	891a      	ldrh	r2, [r3, #8]
 801a296:	887b      	ldrh	r3, [r7, #2]
 801a298:	1ad3      	subs	r3, r2, r3
 801a29a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801a29c:	887b      	ldrh	r3, [r7, #2]
 801a29e:	817b      	strh	r3, [r7, #10]
  q = p;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801a2a4:	e018      	b.n	801a2d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	895b      	ldrh	r3, [r3, #10]
 801a2aa:	897a      	ldrh	r2, [r7, #10]
 801a2ac:	1ad3      	subs	r3, r2, r3
 801a2ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	891a      	ldrh	r2, [r3, #8]
 801a2b4:	893b      	ldrh	r3, [r7, #8]
 801a2b6:	1ad3      	subs	r3, r2, r3
 801a2b8:	b29a      	uxth	r2, r3
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d106      	bne.n	801a2d8 <pbuf_realloc+0x70>
 801a2ca:	4b26      	ldr	r3, [pc, #152]	@ (801a364 <pbuf_realloc+0xfc>)
 801a2cc:	f240 12af 	movw	r2, #431	@ 0x1af
 801a2d0:	4927      	ldr	r1, [pc, #156]	@ (801a370 <pbuf_realloc+0x108>)
 801a2d2:	4826      	ldr	r0, [pc, #152]	@ (801a36c <pbuf_realloc+0x104>)
 801a2d4:	f00b f8ce 	bl	8025474 <iprintf>
  while (rem_len > q->len) {
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	895b      	ldrh	r3, [r3, #10]
 801a2dc:	897a      	ldrh	r2, [r7, #10]
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d8e1      	bhi.n	801a2a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	7b1b      	ldrb	r3, [r3, #12]
 801a2e6:	f003 030f 	and.w	r3, r3, #15
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d121      	bne.n	801a332 <pbuf_realloc+0xca>
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	895b      	ldrh	r3, [r3, #10]
 801a2f2:	897a      	ldrh	r2, [r7, #10]
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	d01c      	beq.n	801a332 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	7b5b      	ldrb	r3, [r3, #13]
 801a2fc:	f003 0302 	and.w	r3, r3, #2
 801a300:	2b00      	cmp	r3, #0
 801a302:	d116      	bne.n	801a332 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	685a      	ldr	r2, [r3, #4]
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	1ad3      	subs	r3, r2, r3
 801a30c:	b29a      	uxth	r2, r3
 801a30e:	897b      	ldrh	r3, [r7, #10]
 801a310:	4413      	add	r3, r2
 801a312:	b29b      	uxth	r3, r3
 801a314:	4619      	mov	r1, r3
 801a316:	68f8      	ldr	r0, [r7, #12]
 801a318:	f7fe ff64 	bl	80191e4 <mem_trim>
 801a31c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d106      	bne.n	801a332 <pbuf_realloc+0xca>
 801a324:	4b0f      	ldr	r3, [pc, #60]	@ (801a364 <pbuf_realloc+0xfc>)
 801a326:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801a32a:	4912      	ldr	r1, [pc, #72]	@ (801a374 <pbuf_realloc+0x10c>)
 801a32c:	480f      	ldr	r0, [pc, #60]	@ (801a36c <pbuf_realloc+0x104>)
 801a32e:	f00b f8a1 	bl	8025474 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	897a      	ldrh	r2, [r7, #10]
 801a336:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	895a      	ldrh	r2, [r3, #10]
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d004      	beq.n	801a352 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	4618      	mov	r0, r3
 801a34e:	f000 f943 	bl	801a5d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	2200      	movs	r2, #0
 801a356:	601a      	str	r2, [r3, #0]
 801a358:	e000      	b.n	801a35c <pbuf_realloc+0xf4>
    return;
 801a35a:	bf00      	nop

}
 801a35c:	3710      	adds	r7, #16
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd80      	pop	{r7, pc}
 801a362:	bf00      	nop
 801a364:	0802aab0 	.word	0x0802aab0
 801a368:	0802abc8 	.word	0x0802abc8
 801a36c:	0802ab10 	.word	0x0802ab10
 801a370:	0802abe0 	.word	0x0802abe0
 801a374:	0802abf8 	.word	0x0802abf8

0801a378 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b086      	sub	sp, #24
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	60f8      	str	r0, [r7, #12]
 801a380:	60b9      	str	r1, [r7, #8]
 801a382:	4613      	mov	r3, r2
 801a384:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d106      	bne.n	801a39a <pbuf_add_header_impl+0x22>
 801a38c:	4b2b      	ldr	r3, [pc, #172]	@ (801a43c <pbuf_add_header_impl+0xc4>)
 801a38e:	f240 12df 	movw	r2, #479	@ 0x1df
 801a392:	492b      	ldr	r1, [pc, #172]	@ (801a440 <pbuf_add_header_impl+0xc8>)
 801a394:	482b      	ldr	r0, [pc, #172]	@ (801a444 <pbuf_add_header_impl+0xcc>)
 801a396:	f00b f86d 	bl	8025474 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d003      	beq.n	801a3a8 <pbuf_add_header_impl+0x30>
 801a3a0:	68bb      	ldr	r3, [r7, #8]
 801a3a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a3a6:	d301      	bcc.n	801a3ac <pbuf_add_header_impl+0x34>
    return 1;
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	e043      	b.n	801a434 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d101      	bne.n	801a3b6 <pbuf_add_header_impl+0x3e>
    return 0;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	e03e      	b.n	801a434 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	891a      	ldrh	r2, [r3, #8]
 801a3be:	8a7b      	ldrh	r3, [r7, #18]
 801a3c0:	4413      	add	r3, r2
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	8a7a      	ldrh	r2, [r7, #18]
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d901      	bls.n	801a3ce <pbuf_add_header_impl+0x56>
    return 1;
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	e032      	b.n	801a434 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	7b1b      	ldrb	r3, [r3, #12]
 801a3d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a3d4:	8a3b      	ldrh	r3, [r7, #16]
 801a3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d00c      	beq.n	801a3f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	685a      	ldr	r2, [r3, #4]
 801a3e2:	68bb      	ldr	r3, [r7, #8]
 801a3e4:	425b      	negs	r3, r3
 801a3e6:	4413      	add	r3, r2
 801a3e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	3310      	adds	r3, #16
 801a3ee:	697a      	ldr	r2, [r7, #20]
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	d20d      	bcs.n	801a410 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	e01d      	b.n	801a434 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801a3f8:	79fb      	ldrb	r3, [r7, #7]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d006      	beq.n	801a40c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	685a      	ldr	r2, [r3, #4]
 801a402:	68bb      	ldr	r3, [r7, #8]
 801a404:	425b      	negs	r3, r3
 801a406:	4413      	add	r3, r2
 801a408:	617b      	str	r3, [r7, #20]
 801a40a:	e001      	b.n	801a410 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801a40c:	2301      	movs	r3, #1
 801a40e:	e011      	b.n	801a434 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	697a      	ldr	r2, [r7, #20]
 801a414:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	895a      	ldrh	r2, [r3, #10]
 801a41a:	8a7b      	ldrh	r3, [r7, #18]
 801a41c:	4413      	add	r3, r2
 801a41e:	b29a      	uxth	r2, r3
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	891a      	ldrh	r2, [r3, #8]
 801a428:	8a7b      	ldrh	r3, [r7, #18]
 801a42a:	4413      	add	r3, r2
 801a42c:	b29a      	uxth	r2, r3
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	811a      	strh	r2, [r3, #8]


  return 0;
 801a432:	2300      	movs	r3, #0
}
 801a434:	4618      	mov	r0, r3
 801a436:	3718      	adds	r7, #24
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}
 801a43c:	0802aab0 	.word	0x0802aab0
 801a440:	0802ac14 	.word	0x0802ac14
 801a444:	0802ab10 	.word	0x0802ab10

0801a448 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801a452:	2200      	movs	r2, #0
 801a454:	6839      	ldr	r1, [r7, #0]
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7ff ff8e 	bl	801a378 <pbuf_add_header_impl>
 801a45c:	4603      	mov	r3, r0
}
 801a45e:	4618      	mov	r0, r3
 801a460:	3708      	adds	r7, #8
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
	...

0801a468 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
 801a470:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d106      	bne.n	801a486 <pbuf_remove_header+0x1e>
 801a478:	4b20      	ldr	r3, [pc, #128]	@ (801a4fc <pbuf_remove_header+0x94>)
 801a47a:	f240 224b 	movw	r2, #587	@ 0x24b
 801a47e:	4920      	ldr	r1, [pc, #128]	@ (801a500 <pbuf_remove_header+0x98>)
 801a480:	4820      	ldr	r0, [pc, #128]	@ (801a504 <pbuf_remove_header+0x9c>)
 801a482:	f00a fff7 	bl	8025474 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d003      	beq.n	801a494 <pbuf_remove_header+0x2c>
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a492:	d301      	bcc.n	801a498 <pbuf_remove_header+0x30>
    return 1;
 801a494:	2301      	movs	r3, #1
 801a496:	e02c      	b.n	801a4f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801a498:	683b      	ldr	r3, [r7, #0]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d101      	bne.n	801a4a2 <pbuf_remove_header+0x3a>
    return 0;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	e027      	b.n	801a4f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801a4a2:	683b      	ldr	r3, [r7, #0]
 801a4a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	895b      	ldrh	r3, [r3, #10]
 801a4aa:	89fa      	ldrh	r2, [r7, #14]
 801a4ac:	429a      	cmp	r2, r3
 801a4ae:	d908      	bls.n	801a4c2 <pbuf_remove_header+0x5a>
 801a4b0:	4b12      	ldr	r3, [pc, #72]	@ (801a4fc <pbuf_remove_header+0x94>)
 801a4b2:	f240 2255 	movw	r2, #597	@ 0x255
 801a4b6:	4914      	ldr	r1, [pc, #80]	@ (801a508 <pbuf_remove_header+0xa0>)
 801a4b8:	4812      	ldr	r0, [pc, #72]	@ (801a504 <pbuf_remove_header+0x9c>)
 801a4ba:	f00a ffdb 	bl	8025474 <iprintf>
 801a4be:	2301      	movs	r3, #1
 801a4c0:	e017      	b.n	801a4f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	685b      	ldr	r3, [r3, #4]
 801a4c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	685a      	ldr	r2, [r3, #4]
 801a4cc:	683b      	ldr	r3, [r7, #0]
 801a4ce:	441a      	add	r2, r3
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	895a      	ldrh	r2, [r3, #10]
 801a4d8:	89fb      	ldrh	r3, [r7, #14]
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	891a      	ldrh	r2, [r3, #8]
 801a4e6:	89fb      	ldrh	r3, [r7, #14]
 801a4e8:	1ad3      	subs	r3, r2, r3
 801a4ea:	b29a      	uxth	r2, r3
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801a4f0:	2300      	movs	r3, #0
}
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	3710      	adds	r7, #16
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	bd80      	pop	{r7, pc}
 801a4fa:	bf00      	nop
 801a4fc:	0802aab0 	.word	0x0802aab0
 801a500:	0802ac14 	.word	0x0802ac14
 801a504:	0802ab10 	.word	0x0802ab10
 801a508:	0802ac20 	.word	0x0802ac20

0801a50c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	460b      	mov	r3, r1
 801a516:	807b      	strh	r3, [r7, #2]
 801a518:	4613      	mov	r3, r2
 801a51a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801a51c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a520:	2b00      	cmp	r3, #0
 801a522:	da08      	bge.n	801a536 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a528:	425b      	negs	r3, r3
 801a52a:	4619      	mov	r1, r3
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f7ff ff9b 	bl	801a468 <pbuf_remove_header>
 801a532:	4603      	mov	r3, r0
 801a534:	e007      	b.n	801a546 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801a536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a53a:	787a      	ldrb	r2, [r7, #1]
 801a53c:	4619      	mov	r1, r3
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f7ff ff1a 	bl	801a378 <pbuf_add_header_impl>
 801a544:	4603      	mov	r3, r0
  }
}
 801a546:	4618      	mov	r0, r3
 801a548:	3708      	adds	r7, #8
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}

0801a54e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801a54e:	b580      	push	{r7, lr}
 801a550:	b082      	sub	sp, #8
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
 801a556:	460b      	mov	r3, r1
 801a558:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801a55a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a55e:	2201      	movs	r2, #1
 801a560:	4619      	mov	r1, r3
 801a562:	6878      	ldr	r0, [r7, #4]
 801a564:	f7ff ffd2 	bl	801a50c <pbuf_header_impl>
 801a568:	4603      	mov	r3, r0
}
 801a56a:	4618      	mov	r0, r3
 801a56c:	3708      	adds	r7, #8
 801a56e:	46bd      	mov	sp, r7
 801a570:	bd80      	pop	{r7, pc}

0801a572 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801a572:	b580      	push	{r7, lr}
 801a574:	b086      	sub	sp, #24
 801a576:	af00      	add	r7, sp, #0
 801a578:	6078      	str	r0, [r7, #4]
 801a57a:	460b      	mov	r3, r1
 801a57c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801a582:	887b      	ldrh	r3, [r7, #2]
 801a584:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a586:	e01c      	b.n	801a5c2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801a588:	697b      	ldr	r3, [r7, #20]
 801a58a:	895b      	ldrh	r3, [r3, #10]
 801a58c:	8a7a      	ldrh	r2, [r7, #18]
 801a58e:	429a      	cmp	r2, r3
 801a590:	d310      	bcc.n	801a5b4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801a592:	697b      	ldr	r3, [r7, #20]
 801a594:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801a596:	697b      	ldr	r3, [r7, #20]
 801a598:	895b      	ldrh	r3, [r3, #10]
 801a59a:	8a7a      	ldrh	r2, [r7, #18]
 801a59c:	1ad3      	subs	r3, r2, r3
 801a59e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801a5a0:	697b      	ldr	r3, [r7, #20]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801a5ac:	68f8      	ldr	r0, [r7, #12]
 801a5ae:	f000 f813 	bl	801a5d8 <pbuf_free>
 801a5b2:	e006      	b.n	801a5c2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801a5b4:	8a7b      	ldrh	r3, [r7, #18]
 801a5b6:	4619      	mov	r1, r3
 801a5b8:	6978      	ldr	r0, [r7, #20]
 801a5ba:	f7ff ff55 	bl	801a468 <pbuf_remove_header>
      free_left = 0;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801a5c2:	8a7b      	ldrh	r3, [r7, #18]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d002      	beq.n	801a5ce <pbuf_free_header+0x5c>
 801a5c8:	697b      	ldr	r3, [r7, #20]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d1dc      	bne.n	801a588 <pbuf_free_header+0x16>
    }
  }
  return p;
 801a5ce:	697b      	ldr	r3, [r7, #20]
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3718      	adds	r7, #24
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b088      	sub	sp, #32
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d10b      	bne.n	801a5fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d106      	bne.n	801a5fa <pbuf_free+0x22>
 801a5ec:	4b3b      	ldr	r3, [pc, #236]	@ (801a6dc <pbuf_free+0x104>)
 801a5ee:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801a5f2:	493b      	ldr	r1, [pc, #236]	@ (801a6e0 <pbuf_free+0x108>)
 801a5f4:	483b      	ldr	r0, [pc, #236]	@ (801a6e4 <pbuf_free+0x10c>)
 801a5f6:	f00a ff3d 	bl	8025474 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	e069      	b.n	801a6d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801a5fe:	2300      	movs	r3, #0
 801a600:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a602:	e062      	b.n	801a6ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801a604:	f009 fe9c 	bl	8024340 <sys_arch_protect>
 801a608:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	7b9b      	ldrb	r3, [r3, #14]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d106      	bne.n	801a620 <pbuf_free+0x48>
 801a612:	4b32      	ldr	r3, [pc, #200]	@ (801a6dc <pbuf_free+0x104>)
 801a614:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801a618:	4933      	ldr	r1, [pc, #204]	@ (801a6e8 <pbuf_free+0x110>)
 801a61a:	4832      	ldr	r0, [pc, #200]	@ (801a6e4 <pbuf_free+0x10c>)
 801a61c:	f00a ff2a 	bl	8025474 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	7b9b      	ldrb	r3, [r3, #14]
 801a624:	3b01      	subs	r3, #1
 801a626:	b2da      	uxtb	r2, r3
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	739a      	strb	r2, [r3, #14]
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	7b9b      	ldrb	r3, [r3, #14]
 801a630:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801a632:	69b8      	ldr	r0, [r7, #24]
 801a634:	f009 fe92 	bl	802435c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801a638:	7dfb      	ldrb	r3, [r7, #23]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d143      	bne.n	801a6c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	7b1b      	ldrb	r3, [r3, #12]
 801a648:	f003 030f 	and.w	r3, r3, #15
 801a64c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	7b5b      	ldrb	r3, [r3, #13]
 801a652:	f003 0302 	and.w	r3, r3, #2
 801a656:	2b00      	cmp	r3, #0
 801a658:	d011      	beq.n	801a67e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a65e:	68bb      	ldr	r3, [r7, #8]
 801a660:	691b      	ldr	r3, [r3, #16]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d106      	bne.n	801a674 <pbuf_free+0x9c>
 801a666:	4b1d      	ldr	r3, [pc, #116]	@ (801a6dc <pbuf_free+0x104>)
 801a668:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801a66c:	491f      	ldr	r1, [pc, #124]	@ (801a6ec <pbuf_free+0x114>)
 801a66e:	481d      	ldr	r0, [pc, #116]	@ (801a6e4 <pbuf_free+0x10c>)
 801a670:	f00a ff00 	bl	8025474 <iprintf>
        pc->custom_free_function(p);
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	691b      	ldr	r3, [r3, #16]
 801a678:	6878      	ldr	r0, [r7, #4]
 801a67a:	4798      	blx	r3
 801a67c:	e01d      	b.n	801a6ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a67e:	7bfb      	ldrb	r3, [r7, #15]
 801a680:	2b02      	cmp	r3, #2
 801a682:	d104      	bne.n	801a68e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801a684:	6879      	ldr	r1, [r7, #4]
 801a686:	200c      	movs	r0, #12
 801a688:	f7ff f8d0 	bl	801982c <memp_free>
 801a68c:	e015      	b.n	801a6ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a68e:	7bfb      	ldrb	r3, [r7, #15]
 801a690:	2b01      	cmp	r3, #1
 801a692:	d104      	bne.n	801a69e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801a694:	6879      	ldr	r1, [r7, #4]
 801a696:	200b      	movs	r0, #11
 801a698:	f7ff f8c8 	bl	801982c <memp_free>
 801a69c:	e00d      	b.n	801a6ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a69e:	7bfb      	ldrb	r3, [r7, #15]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d103      	bne.n	801a6ac <pbuf_free+0xd4>
          mem_free(p);
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f7fe fd0d 	bl	80190c4 <mem_free>
 801a6aa:	e006      	b.n	801a6ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801a6ac:	4b0b      	ldr	r3, [pc, #44]	@ (801a6dc <pbuf_free+0x104>)
 801a6ae:	f240 320f 	movw	r2, #783	@ 0x30f
 801a6b2:	490f      	ldr	r1, [pc, #60]	@ (801a6f0 <pbuf_free+0x118>)
 801a6b4:	480b      	ldr	r0, [pc, #44]	@ (801a6e4 <pbuf_free+0x10c>)
 801a6b6:	f00a fedd 	bl	8025474 <iprintf>
        }
      }
      count++;
 801a6ba:	7ffb      	ldrb	r3, [r7, #31]
 801a6bc:	3301      	adds	r3, #1
 801a6be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	607b      	str	r3, [r7, #4]
 801a6c4:	e001      	b.n	801a6ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d199      	bne.n	801a604 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801a6d0:	7ffb      	ldrb	r3, [r7, #31]
}
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3720      	adds	r7, #32
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}
 801a6da:	bf00      	nop
 801a6dc:	0802aab0 	.word	0x0802aab0
 801a6e0:	0802ac14 	.word	0x0802ac14
 801a6e4:	0802ab10 	.word	0x0802ab10
 801a6e8:	0802ac40 	.word	0x0802ac40
 801a6ec:	0802ac58 	.word	0x0802ac58
 801a6f0:	0802ac7c 	.word	0x0802ac7c

0801a6f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801a6f4:	b480      	push	{r7}
 801a6f6:	b085      	sub	sp, #20
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801a700:	e005      	b.n	801a70e <pbuf_clen+0x1a>
    ++len;
 801a702:	89fb      	ldrh	r3, [r7, #14]
 801a704:	3301      	adds	r3, #1
 801a706:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d1f6      	bne.n	801a702 <pbuf_clen+0xe>
  }
  return len;
 801a714:	89fb      	ldrh	r3, [r7, #14]
}
 801a716:	4618      	mov	r0, r3
 801a718:	3714      	adds	r7, #20
 801a71a:	46bd      	mov	sp, r7
 801a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a720:	4770      	bx	lr
	...

0801a724 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801a724:	b580      	push	{r7, lr}
 801a726:	b084      	sub	sp, #16
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d016      	beq.n	801a760 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a732:	f009 fe05 	bl	8024340 <sys_arch_protect>
 801a736:	60f8      	str	r0, [r7, #12]
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	7b9b      	ldrb	r3, [r3, #14]
 801a73c:	3301      	adds	r3, #1
 801a73e:	b2da      	uxtb	r2, r3
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	739a      	strb	r2, [r3, #14]
 801a744:	68f8      	ldr	r0, [r7, #12]
 801a746:	f009 fe09 	bl	802435c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	7b9b      	ldrb	r3, [r3, #14]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d106      	bne.n	801a760 <pbuf_ref+0x3c>
 801a752:	4b05      	ldr	r3, [pc, #20]	@ (801a768 <pbuf_ref+0x44>)
 801a754:	f240 3242 	movw	r2, #834	@ 0x342
 801a758:	4904      	ldr	r1, [pc, #16]	@ (801a76c <pbuf_ref+0x48>)
 801a75a:	4805      	ldr	r0, [pc, #20]	@ (801a770 <pbuf_ref+0x4c>)
 801a75c:	f00a fe8a 	bl	8025474 <iprintf>
  }
}
 801a760:	bf00      	nop
 801a762:	3710      	adds	r7, #16
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}
 801a768:	0802aab0 	.word	0x0802aab0
 801a76c:	0802ac90 	.word	0x0802ac90
 801a770:	0802ab10 	.word	0x0802ab10

0801a774 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b084      	sub	sp, #16
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d002      	beq.n	801a78a <pbuf_cat+0x16>
 801a784:	683b      	ldr	r3, [r7, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d107      	bne.n	801a79a <pbuf_cat+0x26>
 801a78a:	4b20      	ldr	r3, [pc, #128]	@ (801a80c <pbuf_cat+0x98>)
 801a78c:	f240 3259 	movw	r2, #857	@ 0x359
 801a790:	491f      	ldr	r1, [pc, #124]	@ (801a810 <pbuf_cat+0x9c>)
 801a792:	4820      	ldr	r0, [pc, #128]	@ (801a814 <pbuf_cat+0xa0>)
 801a794:	f00a fe6e 	bl	8025474 <iprintf>
 801a798:	e034      	b.n	801a804 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	60fb      	str	r3, [r7, #12]
 801a79e:	e00a      	b.n	801a7b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	891a      	ldrh	r2, [r3, #8]
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	891b      	ldrh	r3, [r3, #8]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	b29a      	uxth	r2, r3
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	60fb      	str	r3, [r7, #12]
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d1f0      	bne.n	801a7a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	891a      	ldrh	r2, [r3, #8]
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	895b      	ldrh	r3, [r3, #10]
 801a7c6:	429a      	cmp	r2, r3
 801a7c8:	d006      	beq.n	801a7d8 <pbuf_cat+0x64>
 801a7ca:	4b10      	ldr	r3, [pc, #64]	@ (801a80c <pbuf_cat+0x98>)
 801a7cc:	f240 3262 	movw	r2, #866	@ 0x362
 801a7d0:	4911      	ldr	r1, [pc, #68]	@ (801a818 <pbuf_cat+0xa4>)
 801a7d2:	4810      	ldr	r0, [pc, #64]	@ (801a814 <pbuf_cat+0xa0>)
 801a7d4:	f00a fe4e 	bl	8025474 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d006      	beq.n	801a7ee <pbuf_cat+0x7a>
 801a7e0:	4b0a      	ldr	r3, [pc, #40]	@ (801a80c <pbuf_cat+0x98>)
 801a7e2:	f240 3263 	movw	r2, #867	@ 0x363
 801a7e6:	490d      	ldr	r1, [pc, #52]	@ (801a81c <pbuf_cat+0xa8>)
 801a7e8:	480a      	ldr	r0, [pc, #40]	@ (801a814 <pbuf_cat+0xa0>)
 801a7ea:	f00a fe43 	bl	8025474 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	891a      	ldrh	r2, [r3, #8]
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	891b      	ldrh	r3, [r3, #8]
 801a7f6:	4413      	add	r3, r2
 801a7f8:	b29a      	uxth	r2, r3
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	683a      	ldr	r2, [r7, #0]
 801a802:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801a804:	3710      	adds	r7, #16
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	0802aab0 	.word	0x0802aab0
 801a810:	0802aca4 	.word	0x0802aca4
 801a814:	0802ab10 	.word	0x0802ab10
 801a818:	0802acdc 	.word	0x0802acdc
 801a81c:	0802ad0c 	.word	0x0802ad0c

0801a820 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b082      	sub	sp, #8
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
 801a828:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a82a:	6839      	ldr	r1, [r7, #0]
 801a82c:	6878      	ldr	r0, [r7, #4]
 801a82e:	f7ff ffa1 	bl	801a774 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a832:	6838      	ldr	r0, [r7, #0]
 801a834:	f7ff ff76 	bl	801a724 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a838:	bf00      	nop
 801a83a:	3708      	adds	r7, #8
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bd80      	pop	{r7, pc}

0801a840 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b086      	sub	sp, #24
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
 801a848:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a84a:	2300      	movs	r3, #0
 801a84c:	617b      	str	r3, [r7, #20]
 801a84e:	2300      	movs	r3, #0
 801a850:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d008      	beq.n	801a86a <pbuf_copy+0x2a>
 801a858:	683b      	ldr	r3, [r7, #0]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d005      	beq.n	801a86a <pbuf_copy+0x2a>
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	891a      	ldrh	r2, [r3, #8]
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	891b      	ldrh	r3, [r3, #8]
 801a866:	429a      	cmp	r2, r3
 801a868:	d209      	bcs.n	801a87e <pbuf_copy+0x3e>
 801a86a:	4b57      	ldr	r3, [pc, #348]	@ (801a9c8 <pbuf_copy+0x188>)
 801a86c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801a870:	4956      	ldr	r1, [pc, #344]	@ (801a9cc <pbuf_copy+0x18c>)
 801a872:	4857      	ldr	r0, [pc, #348]	@ (801a9d0 <pbuf_copy+0x190>)
 801a874:	f00a fdfe 	bl	8025474 <iprintf>
 801a878:	f06f 030f 	mvn.w	r3, #15
 801a87c:	e09f      	b.n	801a9be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	895b      	ldrh	r3, [r3, #10]
 801a882:	461a      	mov	r2, r3
 801a884:	697b      	ldr	r3, [r7, #20]
 801a886:	1ad2      	subs	r2, r2, r3
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	895b      	ldrh	r3, [r3, #10]
 801a88c:	4619      	mov	r1, r3
 801a88e:	693b      	ldr	r3, [r7, #16]
 801a890:	1acb      	subs	r3, r1, r3
 801a892:	429a      	cmp	r2, r3
 801a894:	d306      	bcc.n	801a8a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a896:	683b      	ldr	r3, [r7, #0]
 801a898:	895b      	ldrh	r3, [r3, #10]
 801a89a:	461a      	mov	r2, r3
 801a89c:	693b      	ldr	r3, [r7, #16]
 801a89e:	1ad3      	subs	r3, r2, r3
 801a8a0:	60fb      	str	r3, [r7, #12]
 801a8a2:	e005      	b.n	801a8b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	895b      	ldrh	r3, [r3, #10]
 801a8a8:	461a      	mov	r2, r3
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	1ad3      	subs	r3, r2, r3
 801a8ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	685a      	ldr	r2, [r3, #4]
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	18d0      	adds	r0, r2, r3
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	685a      	ldr	r2, [r3, #4]
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	4413      	add	r3, r2
 801a8c0:	68fa      	ldr	r2, [r7, #12]
 801a8c2:	4619      	mov	r1, r3
 801a8c4:	f00a ff63 	bl	802578e <memcpy>
    offset_to += len;
 801a8c8:	697a      	ldr	r2, [r7, #20]
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	4413      	add	r3, r2
 801a8ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a8d0:	693a      	ldr	r2, [r7, #16]
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	4413      	add	r3, r2
 801a8d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	895b      	ldrh	r3, [r3, #10]
 801a8dc:	461a      	mov	r2, r3
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	4293      	cmp	r3, r2
 801a8e2:	d906      	bls.n	801a8f2 <pbuf_copy+0xb2>
 801a8e4:	4b38      	ldr	r3, [pc, #224]	@ (801a9c8 <pbuf_copy+0x188>)
 801a8e6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801a8ea:	493a      	ldr	r1, [pc, #232]	@ (801a9d4 <pbuf_copy+0x194>)
 801a8ec:	4838      	ldr	r0, [pc, #224]	@ (801a9d0 <pbuf_copy+0x190>)
 801a8ee:	f00a fdc1 	bl	8025474 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	895b      	ldrh	r3, [r3, #10]
 801a8f6:	461a      	mov	r2, r3
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	4293      	cmp	r3, r2
 801a8fc:	d906      	bls.n	801a90c <pbuf_copy+0xcc>
 801a8fe:	4b32      	ldr	r3, [pc, #200]	@ (801a9c8 <pbuf_copy+0x188>)
 801a900:	f240 32da 	movw	r2, #986	@ 0x3da
 801a904:	4934      	ldr	r1, [pc, #208]	@ (801a9d8 <pbuf_copy+0x198>)
 801a906:	4832      	ldr	r0, [pc, #200]	@ (801a9d0 <pbuf_copy+0x190>)
 801a908:	f00a fdb4 	bl	8025474 <iprintf>
    if (offset_from >= p_from->len) {
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	895b      	ldrh	r3, [r3, #10]
 801a910:	461a      	mov	r2, r3
 801a912:	693b      	ldr	r3, [r7, #16]
 801a914:	4293      	cmp	r3, r2
 801a916:	d304      	bcc.n	801a922 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a918:	2300      	movs	r3, #0
 801a91a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	895b      	ldrh	r3, [r3, #10]
 801a926:	461a      	mov	r2, r3
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	4293      	cmp	r3, r2
 801a92c:	d114      	bne.n	801a958 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a92e:	2300      	movs	r3, #0
 801a930:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d10c      	bne.n	801a958 <pbuf_copy+0x118>
 801a93e:	683b      	ldr	r3, [r7, #0]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d009      	beq.n	801a958 <pbuf_copy+0x118>
 801a944:	4b20      	ldr	r3, [pc, #128]	@ (801a9c8 <pbuf_copy+0x188>)
 801a946:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801a94a:	4924      	ldr	r1, [pc, #144]	@ (801a9dc <pbuf_copy+0x19c>)
 801a94c:	4820      	ldr	r0, [pc, #128]	@ (801a9d0 <pbuf_copy+0x190>)
 801a94e:	f00a fd91 	bl	8025474 <iprintf>
 801a952:	f06f 030f 	mvn.w	r3, #15
 801a956:	e032      	b.n	801a9be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d013      	beq.n	801a986 <pbuf_copy+0x146>
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	895a      	ldrh	r2, [r3, #10]
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	891b      	ldrh	r3, [r3, #8]
 801a966:	429a      	cmp	r2, r3
 801a968:	d10d      	bne.n	801a986 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d009      	beq.n	801a986 <pbuf_copy+0x146>
 801a972:	4b15      	ldr	r3, [pc, #84]	@ (801a9c8 <pbuf_copy+0x188>)
 801a974:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801a978:	4919      	ldr	r1, [pc, #100]	@ (801a9e0 <pbuf_copy+0x1a0>)
 801a97a:	4815      	ldr	r0, [pc, #84]	@ (801a9d0 <pbuf_copy+0x190>)
 801a97c:	f00a fd7a 	bl	8025474 <iprintf>
 801a980:	f06f 0305 	mvn.w	r3, #5
 801a984:	e01b      	b.n	801a9be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d013      	beq.n	801a9b4 <pbuf_copy+0x174>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	895a      	ldrh	r2, [r3, #10]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	891b      	ldrh	r3, [r3, #8]
 801a994:	429a      	cmp	r2, r3
 801a996:	d10d      	bne.n	801a9b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d009      	beq.n	801a9b4 <pbuf_copy+0x174>
 801a9a0:	4b09      	ldr	r3, [pc, #36]	@ (801a9c8 <pbuf_copy+0x188>)
 801a9a2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801a9a6:	490e      	ldr	r1, [pc, #56]	@ (801a9e0 <pbuf_copy+0x1a0>)
 801a9a8:	4809      	ldr	r0, [pc, #36]	@ (801a9d0 <pbuf_copy+0x190>)
 801a9aa:	f00a fd63 	bl	8025474 <iprintf>
 801a9ae:	f06f 0305 	mvn.w	r3, #5
 801a9b2:	e004      	b.n	801a9be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801a9b4:	683b      	ldr	r3, [r7, #0]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	f47f af61 	bne.w	801a87e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801a9bc:	2300      	movs	r3, #0
}
 801a9be:	4618      	mov	r0, r3
 801a9c0:	3718      	adds	r7, #24
 801a9c2:	46bd      	mov	sp, r7
 801a9c4:	bd80      	pop	{r7, pc}
 801a9c6:	bf00      	nop
 801a9c8:	0802aab0 	.word	0x0802aab0
 801a9cc:	0802ad58 	.word	0x0802ad58
 801a9d0:	0802ab10 	.word	0x0802ab10
 801a9d4:	0802ad88 	.word	0x0802ad88
 801a9d8:	0802ada0 	.word	0x0802ada0
 801a9dc:	0802adbc 	.word	0x0802adbc
 801a9e0:	0802adcc 	.word	0x0802adcc

0801a9e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b088      	sub	sp, #32
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	60f8      	str	r0, [r7, #12]
 801a9ec:	60b9      	str	r1, [r7, #8]
 801a9ee:	4611      	mov	r1, r2
 801a9f0:	461a      	mov	r2, r3
 801a9f2:	460b      	mov	r3, r1
 801a9f4:	80fb      	strh	r3, [r7, #6]
 801a9f6:	4613      	mov	r3, r2
 801a9f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801a9fe:	2300      	movs	r3, #0
 801aa00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d108      	bne.n	801aa1a <pbuf_copy_partial+0x36>
 801aa08:	4b2b      	ldr	r3, [pc, #172]	@ (801aab8 <pbuf_copy_partial+0xd4>)
 801aa0a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801aa0e:	492b      	ldr	r1, [pc, #172]	@ (801aabc <pbuf_copy_partial+0xd8>)
 801aa10:	482b      	ldr	r0, [pc, #172]	@ (801aac0 <pbuf_copy_partial+0xdc>)
 801aa12:	f00a fd2f 	bl	8025474 <iprintf>
 801aa16:	2300      	movs	r3, #0
 801aa18:	e04a      	b.n	801aab0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801aa1a:	68bb      	ldr	r3, [r7, #8]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d108      	bne.n	801aa32 <pbuf_copy_partial+0x4e>
 801aa20:	4b25      	ldr	r3, [pc, #148]	@ (801aab8 <pbuf_copy_partial+0xd4>)
 801aa22:	f240 420b 	movw	r2, #1035	@ 0x40b
 801aa26:	4927      	ldr	r1, [pc, #156]	@ (801aac4 <pbuf_copy_partial+0xe0>)
 801aa28:	4825      	ldr	r0, [pc, #148]	@ (801aac0 <pbuf_copy_partial+0xdc>)
 801aa2a:	f00a fd23 	bl	8025474 <iprintf>
 801aa2e:	2300      	movs	r3, #0
 801aa30:	e03e      	b.n	801aab0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	61fb      	str	r3, [r7, #28]
 801aa36:	e034      	b.n	801aaa2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801aa38:	88bb      	ldrh	r3, [r7, #4]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d00a      	beq.n	801aa54 <pbuf_copy_partial+0x70>
 801aa3e:	69fb      	ldr	r3, [r7, #28]
 801aa40:	895b      	ldrh	r3, [r3, #10]
 801aa42:	88ba      	ldrh	r2, [r7, #4]
 801aa44:	429a      	cmp	r2, r3
 801aa46:	d305      	bcc.n	801aa54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	895b      	ldrh	r3, [r3, #10]
 801aa4c:	88ba      	ldrh	r2, [r7, #4]
 801aa4e:	1ad3      	subs	r3, r2, r3
 801aa50:	80bb      	strh	r3, [r7, #4]
 801aa52:	e023      	b.n	801aa9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801aa54:	69fb      	ldr	r3, [r7, #28]
 801aa56:	895a      	ldrh	r2, [r3, #10]
 801aa58:	88bb      	ldrh	r3, [r7, #4]
 801aa5a:	1ad3      	subs	r3, r2, r3
 801aa5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801aa5e:	8b3a      	ldrh	r2, [r7, #24]
 801aa60:	88fb      	ldrh	r3, [r7, #6]
 801aa62:	429a      	cmp	r2, r3
 801aa64:	d901      	bls.n	801aa6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801aa66:	88fb      	ldrh	r3, [r7, #6]
 801aa68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801aa6a:	8b7b      	ldrh	r3, [r7, #26]
 801aa6c:	68ba      	ldr	r2, [r7, #8]
 801aa6e:	18d0      	adds	r0, r2, r3
 801aa70:	69fb      	ldr	r3, [r7, #28]
 801aa72:	685a      	ldr	r2, [r3, #4]
 801aa74:	88bb      	ldrh	r3, [r7, #4]
 801aa76:	4413      	add	r3, r2
 801aa78:	8b3a      	ldrh	r2, [r7, #24]
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	f00a fe87 	bl	802578e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801aa80:	8afa      	ldrh	r2, [r7, #22]
 801aa82:	8b3b      	ldrh	r3, [r7, #24]
 801aa84:	4413      	add	r3, r2
 801aa86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801aa88:	8b7a      	ldrh	r2, [r7, #26]
 801aa8a:	8b3b      	ldrh	r3, [r7, #24]
 801aa8c:	4413      	add	r3, r2
 801aa8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801aa90:	88fa      	ldrh	r2, [r7, #6]
 801aa92:	8b3b      	ldrh	r3, [r7, #24]
 801aa94:	1ad3      	subs	r3, r2, r3
 801aa96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801aa9c:	69fb      	ldr	r3, [r7, #28]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	61fb      	str	r3, [r7, #28]
 801aaa2:	88fb      	ldrh	r3, [r7, #6]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d002      	beq.n	801aaae <pbuf_copy_partial+0xca>
 801aaa8:	69fb      	ldr	r3, [r7, #28]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d1c4      	bne.n	801aa38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801aaae:	8afb      	ldrh	r3, [r7, #22]
}
 801aab0:	4618      	mov	r0, r3
 801aab2:	3720      	adds	r7, #32
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}
 801aab8:	0802aab0 	.word	0x0802aab0
 801aabc:	0802adf8 	.word	0x0802adf8
 801aac0:	0802ab10 	.word	0x0802ab10
 801aac4:	0802ae18 	.word	0x0802ae18

0801aac8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b084      	sub	sp, #16
 801aacc:	af00      	add	r7, sp, #0
 801aace:	4603      	mov	r3, r0
 801aad0:	603a      	str	r2, [r7, #0]
 801aad2:	71fb      	strb	r3, [r7, #7]
 801aad4:	460b      	mov	r3, r1
 801aad6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	8919      	ldrh	r1, [r3, #8]
 801aadc:	88ba      	ldrh	r2, [r7, #4]
 801aade:	79fb      	ldrb	r3, [r7, #7]
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7ff fa63 	bl	8019fac <pbuf_alloc>
 801aae6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d101      	bne.n	801aaf2 <pbuf_clone+0x2a>
    return NULL;
 801aaee:	2300      	movs	r3, #0
 801aaf0:	e011      	b.n	801ab16 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801aaf2:	6839      	ldr	r1, [r7, #0]
 801aaf4:	68f8      	ldr	r0, [r7, #12]
 801aaf6:	f7ff fea3 	bl	801a840 <pbuf_copy>
 801aafa:	4603      	mov	r3, r0
 801aafc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801aafe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d006      	beq.n	801ab14 <pbuf_clone+0x4c>
 801ab06:	4b06      	ldr	r3, [pc, #24]	@ (801ab20 <pbuf_clone+0x58>)
 801ab08:	f240 5224 	movw	r2, #1316	@ 0x524
 801ab0c:	4905      	ldr	r1, [pc, #20]	@ (801ab24 <pbuf_clone+0x5c>)
 801ab0e:	4806      	ldr	r0, [pc, #24]	@ (801ab28 <pbuf_clone+0x60>)
 801ab10:	f00a fcb0 	bl	8025474 <iprintf>
  return q;
 801ab14:	68fb      	ldr	r3, [r7, #12]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	3710      	adds	r7, #16
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}
 801ab1e:	bf00      	nop
 801ab20:	0802aab0 	.word	0x0802aab0
 801ab24:	0802af24 	.word	0x0802af24
 801ab28:	0802ab10 	.word	0x0802ab10

0801ab2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ab30:	f009 fce2 	bl	80244f8 <rand>
 801ab34:	4603      	mov	r3, r0
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab3c:	b29b      	uxth	r3, r3
 801ab3e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801ab42:	b29a      	uxth	r2, r3
 801ab44:	4b01      	ldr	r3, [pc, #4]	@ (801ab4c <tcp_init+0x20>)
 801ab46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ab48:	bf00      	nop
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	2400020c 	.word	0x2400020c

0801ab50 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b082      	sub	sp, #8
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	7d1b      	ldrb	r3, [r3, #20]
 801ab5c:	2b01      	cmp	r3, #1
 801ab5e:	d105      	bne.n	801ab6c <tcp_free+0x1c>
 801ab60:	4b06      	ldr	r3, [pc, #24]	@ (801ab7c <tcp_free+0x2c>)
 801ab62:	22d4      	movs	r2, #212	@ 0xd4
 801ab64:	4906      	ldr	r1, [pc, #24]	@ (801ab80 <tcp_free+0x30>)
 801ab66:	4807      	ldr	r0, [pc, #28]	@ (801ab84 <tcp_free+0x34>)
 801ab68:	f00a fc84 	bl	8025474 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801ab6c:	6879      	ldr	r1, [r7, #4]
 801ab6e:	2001      	movs	r0, #1
 801ab70:	f7fe fe5c 	bl	801982c <memp_free>
}
 801ab74:	bf00      	nop
 801ab76:	3708      	adds	r7, #8
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bd80      	pop	{r7, pc}
 801ab7c:	0802afb0 	.word	0x0802afb0
 801ab80:	0802afe0 	.word	0x0802afe0
 801ab84:	0802aff4 	.word	0x0802aff4

0801ab88 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b082      	sub	sp, #8
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	7d1b      	ldrb	r3, [r3, #20]
 801ab94:	2b01      	cmp	r3, #1
 801ab96:	d105      	bne.n	801aba4 <tcp_free_listen+0x1c>
 801ab98:	4b06      	ldr	r3, [pc, #24]	@ (801abb4 <tcp_free_listen+0x2c>)
 801ab9a:	22df      	movs	r2, #223	@ 0xdf
 801ab9c:	4906      	ldr	r1, [pc, #24]	@ (801abb8 <tcp_free_listen+0x30>)
 801ab9e:	4807      	ldr	r0, [pc, #28]	@ (801abbc <tcp_free_listen+0x34>)
 801aba0:	f00a fc68 	bl	8025474 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801aba4:	6879      	ldr	r1, [r7, #4]
 801aba6:	2002      	movs	r0, #2
 801aba8:	f7fe fe40 	bl	801982c <memp_free>
}
 801abac:	bf00      	nop
 801abae:	3708      	adds	r7, #8
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}
 801abb4:	0802afb0 	.word	0x0802afb0
 801abb8:	0802b01c 	.word	0x0802b01c
 801abbc:	0802aff4 	.word	0x0802aff4

0801abc0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801abc4:	f000 ffde 	bl	801bb84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801abc8:	4b07      	ldr	r3, [pc, #28]	@ (801abe8 <tcp_tmr+0x28>)
 801abca:	781b      	ldrb	r3, [r3, #0]
 801abcc:	3301      	adds	r3, #1
 801abce:	b2da      	uxtb	r2, r3
 801abd0:	4b05      	ldr	r3, [pc, #20]	@ (801abe8 <tcp_tmr+0x28>)
 801abd2:	701a      	strb	r2, [r3, #0]
 801abd4:	4b04      	ldr	r3, [pc, #16]	@ (801abe8 <tcp_tmr+0x28>)
 801abd6:	781b      	ldrb	r3, [r3, #0]
 801abd8:	f003 0301 	and.w	r3, r3, #1
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d001      	beq.n	801abe4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801abe0:	f000 fc8e 	bl	801b500 <tcp_slowtmr>
  }
}
 801abe4:	bf00      	nop
 801abe6:	bd80      	pop	{r7, pc}
 801abe8:	2400be79 	.word	0x2400be79

0801abec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b084      	sub	sp, #16
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
 801abf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801abf6:	683b      	ldr	r3, [r7, #0]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d105      	bne.n	801ac08 <tcp_remove_listener+0x1c>
 801abfc:	4b0d      	ldr	r3, [pc, #52]	@ (801ac34 <tcp_remove_listener+0x48>)
 801abfe:	22ff      	movs	r2, #255	@ 0xff
 801ac00:	490d      	ldr	r1, [pc, #52]	@ (801ac38 <tcp_remove_listener+0x4c>)
 801ac02:	480e      	ldr	r0, [pc, #56]	@ (801ac3c <tcp_remove_listener+0x50>)
 801ac04:	f00a fc36 	bl	8025474 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	60fb      	str	r3, [r7, #12]
 801ac0c:	e00a      	b.n	801ac24 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac12:	683a      	ldr	r2, [r7, #0]
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d102      	bne.n	801ac1e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	68db      	ldr	r3, [r3, #12]
 801ac22:	60fb      	str	r3, [r7, #12]
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d1f1      	bne.n	801ac0e <tcp_remove_listener+0x22>
    }
  }
}
 801ac2a:	bf00      	nop
 801ac2c:	bf00      	nop
 801ac2e:	3710      	adds	r7, #16
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	0802afb0 	.word	0x0802afb0
 801ac38:	0802b038 	.word	0x0802b038
 801ac3c:	0802aff4 	.word	0x0802aff4

0801ac40 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b084      	sub	sp, #16
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d106      	bne.n	801ac5c <tcp_listen_closed+0x1c>
 801ac4e:	4b14      	ldr	r3, [pc, #80]	@ (801aca0 <tcp_listen_closed+0x60>)
 801ac50:	f240 1211 	movw	r2, #273	@ 0x111
 801ac54:	4913      	ldr	r1, [pc, #76]	@ (801aca4 <tcp_listen_closed+0x64>)
 801ac56:	4814      	ldr	r0, [pc, #80]	@ (801aca8 <tcp_listen_closed+0x68>)
 801ac58:	f00a fc0c 	bl	8025474 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	7d1b      	ldrb	r3, [r3, #20]
 801ac60:	2b01      	cmp	r3, #1
 801ac62:	d006      	beq.n	801ac72 <tcp_listen_closed+0x32>
 801ac64:	4b0e      	ldr	r3, [pc, #56]	@ (801aca0 <tcp_listen_closed+0x60>)
 801ac66:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801ac6a:	4910      	ldr	r1, [pc, #64]	@ (801acac <tcp_listen_closed+0x6c>)
 801ac6c:	480e      	ldr	r0, [pc, #56]	@ (801aca8 <tcp_listen_closed+0x68>)
 801ac6e:	f00a fc01 	bl	8025474 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ac72:	2301      	movs	r3, #1
 801ac74:	60fb      	str	r3, [r7, #12]
 801ac76:	e00b      	b.n	801ac90 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ac78:	4a0d      	ldr	r2, [pc, #52]	@ (801acb0 <tcp_listen_closed+0x70>)
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	6879      	ldr	r1, [r7, #4]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7ff ffb1 	bl	801abec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	3301      	adds	r3, #1
 801ac8e:	60fb      	str	r3, [r7, #12]
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	2b03      	cmp	r3, #3
 801ac94:	d9f0      	bls.n	801ac78 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801ac96:	bf00      	nop
 801ac98:	bf00      	nop
 801ac9a:	3710      	adds	r7, #16
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}
 801aca0:	0802afb0 	.word	0x0802afb0
 801aca4:	0802b060 	.word	0x0802b060
 801aca8:	0802aff4 	.word	0x0802aff4
 801acac:	0802b06c 	.word	0x0802b06c
 801acb0:	0802d0bc 	.word	0x0802d0bc

0801acb4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801acb4:	b5b0      	push	{r4, r5, r7, lr}
 801acb6:	b088      	sub	sp, #32
 801acb8:	af04      	add	r7, sp, #16
 801acba:	6078      	str	r0, [r7, #4]
 801acbc:	460b      	mov	r3, r1
 801acbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d106      	bne.n	801acd4 <tcp_close_shutdown+0x20>
 801acc6:	4b63      	ldr	r3, [pc, #396]	@ (801ae54 <tcp_close_shutdown+0x1a0>)
 801acc8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801accc:	4962      	ldr	r1, [pc, #392]	@ (801ae58 <tcp_close_shutdown+0x1a4>)
 801acce:	4863      	ldr	r0, [pc, #396]	@ (801ae5c <tcp_close_shutdown+0x1a8>)
 801acd0:	f00a fbd0 	bl	8025474 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801acd4:	78fb      	ldrb	r3, [r7, #3]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d066      	beq.n	801ada8 <tcp_close_shutdown+0xf4>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	7d1b      	ldrb	r3, [r3, #20]
 801acde:	2b04      	cmp	r3, #4
 801ace0:	d003      	beq.n	801acea <tcp_close_shutdown+0x36>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	7d1b      	ldrb	r3, [r3, #20]
 801ace6:	2b07      	cmp	r3, #7
 801ace8:	d15e      	bne.n	801ada8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d104      	bne.n	801acfc <tcp_close_shutdown+0x48>
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801acf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801acfa:	d055      	beq.n	801ada8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	8b5b      	ldrh	r3, [r3, #26]
 801ad00:	f003 0310 	and.w	r3, r3, #16
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d106      	bne.n	801ad16 <tcp_close_shutdown+0x62>
 801ad08:	4b52      	ldr	r3, [pc, #328]	@ (801ae54 <tcp_close_shutdown+0x1a0>)
 801ad0a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801ad0e:	4954      	ldr	r1, [pc, #336]	@ (801ae60 <tcp_close_shutdown+0x1ac>)
 801ad10:	4852      	ldr	r0, [pc, #328]	@ (801ae5c <tcp_close_shutdown+0x1a8>)
 801ad12:	f00a fbaf 	bl	8025474 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ad1e:	687d      	ldr	r5, [r7, #4]
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	3304      	adds	r3, #4
 801ad24:	687a      	ldr	r2, [r7, #4]
 801ad26:	8ad2      	ldrh	r2, [r2, #22]
 801ad28:	6879      	ldr	r1, [r7, #4]
 801ad2a:	8b09      	ldrh	r1, [r1, #24]
 801ad2c:	9102      	str	r1, [sp, #8]
 801ad2e:	9201      	str	r2, [sp, #4]
 801ad30:	9300      	str	r3, [sp, #0]
 801ad32:	462b      	mov	r3, r5
 801ad34:	4622      	mov	r2, r4
 801ad36:	4601      	mov	r1, r0
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f005 fced 	bl	8020718 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801ad3e:	6878      	ldr	r0, [r7, #4]
 801ad40:	f001 fad0 	bl	801c2e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ad44:	4b47      	ldr	r3, [pc, #284]	@ (801ae64 <tcp_close_shutdown+0x1b0>)
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d105      	bne.n	801ad5a <tcp_close_shutdown+0xa6>
 801ad4e:	4b45      	ldr	r3, [pc, #276]	@ (801ae64 <tcp_close_shutdown+0x1b0>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	68db      	ldr	r3, [r3, #12]
 801ad54:	4a43      	ldr	r2, [pc, #268]	@ (801ae64 <tcp_close_shutdown+0x1b0>)
 801ad56:	6013      	str	r3, [r2, #0]
 801ad58:	e013      	b.n	801ad82 <tcp_close_shutdown+0xce>
 801ad5a:	4b42      	ldr	r3, [pc, #264]	@ (801ae64 <tcp_close_shutdown+0x1b0>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	60fb      	str	r3, [r7, #12]
 801ad60:	e00c      	b.n	801ad7c <tcp_close_shutdown+0xc8>
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	68db      	ldr	r3, [r3, #12]
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d104      	bne.n	801ad76 <tcp_close_shutdown+0xc2>
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	68da      	ldr	r2, [r3, #12]
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	60da      	str	r2, [r3, #12]
 801ad74:	e005      	b.n	801ad82 <tcp_close_shutdown+0xce>
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	68db      	ldr	r3, [r3, #12]
 801ad7a:	60fb      	str	r3, [r7, #12]
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d1ef      	bne.n	801ad62 <tcp_close_shutdown+0xae>
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	2200      	movs	r2, #0
 801ad86:	60da      	str	r2, [r3, #12]
 801ad88:	4b37      	ldr	r3, [pc, #220]	@ (801ae68 <tcp_close_shutdown+0x1b4>)
 801ad8a:	2201      	movs	r2, #1
 801ad8c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801ad8e:	4b37      	ldr	r3, [pc, #220]	@ (801ae6c <tcp_close_shutdown+0x1b8>)
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	687a      	ldr	r2, [r7, #4]
 801ad94:	429a      	cmp	r2, r3
 801ad96:	d102      	bne.n	801ad9e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801ad98:	f003 ff64 	bl	801ec64 <tcp_trigger_input_pcb_close>
 801ad9c:	e002      	b.n	801ada4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801ad9e:	6878      	ldr	r0, [r7, #4]
 801ada0:	f7ff fed6 	bl	801ab50 <tcp_free>
      }
      return ERR_OK;
 801ada4:	2300      	movs	r3, #0
 801ada6:	e050      	b.n	801ae4a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	7d1b      	ldrb	r3, [r3, #20]
 801adac:	2b02      	cmp	r3, #2
 801adae:	d03b      	beq.n	801ae28 <tcp_close_shutdown+0x174>
 801adb0:	2b02      	cmp	r3, #2
 801adb2:	dc44      	bgt.n	801ae3e <tcp_close_shutdown+0x18a>
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d002      	beq.n	801adbe <tcp_close_shutdown+0x10a>
 801adb8:	2b01      	cmp	r3, #1
 801adba:	d02a      	beq.n	801ae12 <tcp_close_shutdown+0x15e>
 801adbc:	e03f      	b.n	801ae3e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	8adb      	ldrh	r3, [r3, #22]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d021      	beq.n	801ae0a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801adc6:	4b2a      	ldr	r3, [pc, #168]	@ (801ae70 <tcp_close_shutdown+0x1bc>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	687a      	ldr	r2, [r7, #4]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d105      	bne.n	801addc <tcp_close_shutdown+0x128>
 801add0:	4b27      	ldr	r3, [pc, #156]	@ (801ae70 <tcp_close_shutdown+0x1bc>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	68db      	ldr	r3, [r3, #12]
 801add6:	4a26      	ldr	r2, [pc, #152]	@ (801ae70 <tcp_close_shutdown+0x1bc>)
 801add8:	6013      	str	r3, [r2, #0]
 801adda:	e013      	b.n	801ae04 <tcp_close_shutdown+0x150>
 801addc:	4b24      	ldr	r3, [pc, #144]	@ (801ae70 <tcp_close_shutdown+0x1bc>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	60bb      	str	r3, [r7, #8]
 801ade2:	e00c      	b.n	801adfe <tcp_close_shutdown+0x14a>
 801ade4:	68bb      	ldr	r3, [r7, #8]
 801ade6:	68db      	ldr	r3, [r3, #12]
 801ade8:	687a      	ldr	r2, [r7, #4]
 801adea:	429a      	cmp	r2, r3
 801adec:	d104      	bne.n	801adf8 <tcp_close_shutdown+0x144>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	68da      	ldr	r2, [r3, #12]
 801adf2:	68bb      	ldr	r3, [r7, #8]
 801adf4:	60da      	str	r2, [r3, #12]
 801adf6:	e005      	b.n	801ae04 <tcp_close_shutdown+0x150>
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	68db      	ldr	r3, [r3, #12]
 801adfc:	60bb      	str	r3, [r7, #8]
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d1ef      	bne.n	801ade4 <tcp_close_shutdown+0x130>
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	2200      	movs	r2, #0
 801ae08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801ae0a:	6878      	ldr	r0, [r7, #4]
 801ae0c:	f7ff fea0 	bl	801ab50 <tcp_free>
      break;
 801ae10:	e01a      	b.n	801ae48 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f7ff ff14 	bl	801ac40 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ae18:	6879      	ldr	r1, [r7, #4]
 801ae1a:	4816      	ldr	r0, [pc, #88]	@ (801ae74 <tcp_close_shutdown+0x1c0>)
 801ae1c:	f001 fab2 	bl	801c384 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f7ff feb1 	bl	801ab88 <tcp_free_listen>
      break;
 801ae26:	e00f      	b.n	801ae48 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ae28:	6879      	ldr	r1, [r7, #4]
 801ae2a:	480e      	ldr	r0, [pc, #56]	@ (801ae64 <tcp_close_shutdown+0x1b0>)
 801ae2c:	f001 faaa 	bl	801c384 <tcp_pcb_remove>
 801ae30:	4b0d      	ldr	r3, [pc, #52]	@ (801ae68 <tcp_close_shutdown+0x1b4>)
 801ae32:	2201      	movs	r2, #1
 801ae34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801ae36:	6878      	ldr	r0, [r7, #4]
 801ae38:	f7ff fe8a 	bl	801ab50 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801ae3c:	e004      	b.n	801ae48 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	f000 f81a 	bl	801ae78 <tcp_close_shutdown_fin>
 801ae44:	4603      	mov	r3, r0
 801ae46:	e000      	b.n	801ae4a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801ae48:	2300      	movs	r3, #0
}
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	3710      	adds	r7, #16
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bdb0      	pop	{r4, r5, r7, pc}
 801ae52:	bf00      	nop
 801ae54:	0802afb0 	.word	0x0802afb0
 801ae58:	0802b084 	.word	0x0802b084
 801ae5c:	0802aff4 	.word	0x0802aff4
 801ae60:	0802b0a4 	.word	0x0802b0a4
 801ae64:	2400be70 	.word	0x2400be70
 801ae68:	2400be78 	.word	0x2400be78
 801ae6c:	2400beb0 	.word	0x2400beb0
 801ae70:	2400be68 	.word	0x2400be68
 801ae74:	2400be6c 	.word	0x2400be6c

0801ae78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d106      	bne.n	801ae94 <tcp_close_shutdown_fin+0x1c>
 801ae86:	4b2e      	ldr	r3, [pc, #184]	@ (801af40 <tcp_close_shutdown_fin+0xc8>)
 801ae88:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801ae8c:	492d      	ldr	r1, [pc, #180]	@ (801af44 <tcp_close_shutdown_fin+0xcc>)
 801ae8e:	482e      	ldr	r0, [pc, #184]	@ (801af48 <tcp_close_shutdown_fin+0xd0>)
 801ae90:	f00a faf0 	bl	8025474 <iprintf>

  switch (pcb->state) {
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	7d1b      	ldrb	r3, [r3, #20]
 801ae98:	2b07      	cmp	r3, #7
 801ae9a:	d020      	beq.n	801aede <tcp_close_shutdown_fin+0x66>
 801ae9c:	2b07      	cmp	r3, #7
 801ae9e:	dc2b      	bgt.n	801aef8 <tcp_close_shutdown_fin+0x80>
 801aea0:	2b03      	cmp	r3, #3
 801aea2:	d002      	beq.n	801aeaa <tcp_close_shutdown_fin+0x32>
 801aea4:	2b04      	cmp	r3, #4
 801aea6:	d00d      	beq.n	801aec4 <tcp_close_shutdown_fin+0x4c>
 801aea8:	e026      	b.n	801aef8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801aeaa:	6878      	ldr	r0, [r7, #4]
 801aeac:	f004 fd42 	bl	801f934 <tcp_send_fin>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801aeb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d11f      	bne.n	801aefc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2205      	movs	r2, #5
 801aec0:	751a      	strb	r2, [r3, #20]
      }
      break;
 801aec2:	e01b      	b.n	801aefc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801aec4:	6878      	ldr	r0, [r7, #4]
 801aec6:	f004 fd35 	bl	801f934 <tcp_send_fin>
 801aeca:	4603      	mov	r3, r0
 801aecc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801aece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d114      	bne.n	801af00 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	2205      	movs	r2, #5
 801aeda:	751a      	strb	r2, [r3, #20]
      }
      break;
 801aedc:	e010      	b.n	801af00 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801aede:	6878      	ldr	r0, [r7, #4]
 801aee0:	f004 fd28 	bl	801f934 <tcp_send_fin>
 801aee4:	4603      	mov	r3, r0
 801aee6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801aee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d109      	bne.n	801af04 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2209      	movs	r2, #9
 801aef4:	751a      	strb	r2, [r3, #20]
      }
      break;
 801aef6:	e005      	b.n	801af04 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801aef8:	2300      	movs	r3, #0
 801aefa:	e01c      	b.n	801af36 <tcp_close_shutdown_fin+0xbe>
      break;
 801aefc:	bf00      	nop
 801aefe:	e002      	b.n	801af06 <tcp_close_shutdown_fin+0x8e>
      break;
 801af00:	bf00      	nop
 801af02:	e000      	b.n	801af06 <tcp_close_shutdown_fin+0x8e>
      break;
 801af04:	bf00      	nop
  }

  if (err == ERR_OK) {
 801af06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d103      	bne.n	801af16 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801af0e:	6878      	ldr	r0, [r7, #4]
 801af10:	f004 fe4e 	bl	801fbb0 <tcp_output>
 801af14:	e00d      	b.n	801af32 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801af16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af1e:	d108      	bne.n	801af32 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	8b5b      	ldrh	r3, [r3, #26]
 801af24:	f043 0308 	orr.w	r3, r3, #8
 801af28:	b29a      	uxth	r2, r3
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801af2e:	2300      	movs	r3, #0
 801af30:	e001      	b.n	801af36 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801af32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801af36:	4618      	mov	r0, r3
 801af38:	3710      	adds	r7, #16
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}
 801af3e:	bf00      	nop
 801af40:	0802afb0 	.word	0x0802afb0
 801af44:	0802b060 	.word	0x0802b060
 801af48:	0802aff4 	.word	0x0802aff4

0801af4c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b082      	sub	sp, #8
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d109      	bne.n	801af6e <tcp_close+0x22>
 801af5a:	4b0f      	ldr	r3, [pc, #60]	@ (801af98 <tcp_close+0x4c>)
 801af5c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801af60:	490e      	ldr	r1, [pc, #56]	@ (801af9c <tcp_close+0x50>)
 801af62:	480f      	ldr	r0, [pc, #60]	@ (801afa0 <tcp_close+0x54>)
 801af64:	f00a fa86 	bl	8025474 <iprintf>
 801af68:	f06f 030f 	mvn.w	r3, #15
 801af6c:	e00f      	b.n	801af8e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	7d1b      	ldrb	r3, [r3, #20]
 801af72:	2b01      	cmp	r3, #1
 801af74:	d006      	beq.n	801af84 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	8b5b      	ldrh	r3, [r3, #26]
 801af7a:	f043 0310 	orr.w	r3, r3, #16
 801af7e:	b29a      	uxth	r2, r3
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801af84:	2101      	movs	r1, #1
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	f7ff fe94 	bl	801acb4 <tcp_close_shutdown>
 801af8c:	4603      	mov	r3, r0
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3708      	adds	r7, #8
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	0802afb0 	.word	0x0802afb0
 801af9c:	0802b0c0 	.word	0x0802b0c0
 801afa0:	0802aff4 	.word	0x0802aff4

0801afa4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	60f8      	str	r0, [r7, #12]
 801afac:	60b9      	str	r1, [r7, #8]
 801afae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d109      	bne.n	801afca <tcp_shutdown+0x26>
 801afb6:	4b26      	ldr	r3, [pc, #152]	@ (801b050 <tcp_shutdown+0xac>)
 801afb8:	f240 2207 	movw	r2, #519	@ 0x207
 801afbc:	4925      	ldr	r1, [pc, #148]	@ (801b054 <tcp_shutdown+0xb0>)
 801afbe:	4826      	ldr	r0, [pc, #152]	@ (801b058 <tcp_shutdown+0xb4>)
 801afc0:	f00a fa58 	bl	8025474 <iprintf>
 801afc4:	f06f 030f 	mvn.w	r3, #15
 801afc8:	e03d      	b.n	801b046 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	7d1b      	ldrb	r3, [r3, #20]
 801afce:	2b01      	cmp	r3, #1
 801afd0:	d102      	bne.n	801afd8 <tcp_shutdown+0x34>
    return ERR_CONN;
 801afd2:	f06f 030a 	mvn.w	r3, #10
 801afd6:	e036      	b.n	801b046 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d01b      	beq.n	801b016 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	8b5b      	ldrh	r3, [r3, #26]
 801afe2:	f043 0310 	orr.w	r3, r3, #16
 801afe6:	b29a      	uxth	r2, r3
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d005      	beq.n	801affe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801aff2:	2101      	movs	r1, #1
 801aff4:	68f8      	ldr	r0, [r7, #12]
 801aff6:	f7ff fe5d 	bl	801acb4 <tcp_close_shutdown>
 801affa:	4603      	mov	r3, r0
 801affc:	e023      	b.n	801b046 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b002:	2b00      	cmp	r3, #0
 801b004:	d007      	beq.n	801b016 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7ff fae4 	bl	801a5d8 <pbuf_free>
      pcb->refused_data = NULL;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	2200      	movs	r2, #0
 801b014:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d013      	beq.n	801b044 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	7d1b      	ldrb	r3, [r3, #20]
 801b020:	2b04      	cmp	r3, #4
 801b022:	dc02      	bgt.n	801b02a <tcp_shutdown+0x86>
 801b024:	2b03      	cmp	r3, #3
 801b026:	da02      	bge.n	801b02e <tcp_shutdown+0x8a>
 801b028:	e009      	b.n	801b03e <tcp_shutdown+0x9a>
 801b02a:	2b07      	cmp	r3, #7
 801b02c:	d107      	bne.n	801b03e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801b02e:	68bb      	ldr	r3, [r7, #8]
 801b030:	b2db      	uxtb	r3, r3
 801b032:	4619      	mov	r1, r3
 801b034:	68f8      	ldr	r0, [r7, #12]
 801b036:	f7ff fe3d 	bl	801acb4 <tcp_close_shutdown>
 801b03a:	4603      	mov	r3, r0
 801b03c:	e003      	b.n	801b046 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801b03e:	f06f 030a 	mvn.w	r3, #10
 801b042:	e000      	b.n	801b046 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801b044:	2300      	movs	r3, #0
}
 801b046:	4618      	mov	r0, r3
 801b048:	3710      	adds	r7, #16
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}
 801b04e:	bf00      	nop
 801b050:	0802afb0 	.word	0x0802afb0
 801b054:	0802b0d8 	.word	0x0802b0d8
 801b058:	0802aff4 	.word	0x0802aff4

0801b05c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b08e      	sub	sp, #56	@ 0x38
 801b060:	af04      	add	r7, sp, #16
 801b062:	6078      	str	r0, [r7, #4]
 801b064:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d107      	bne.n	801b07c <tcp_abandon+0x20>
 801b06c:	4b52      	ldr	r3, [pc, #328]	@ (801b1b8 <tcp_abandon+0x15c>)
 801b06e:	f240 223d 	movw	r2, #573	@ 0x23d
 801b072:	4952      	ldr	r1, [pc, #328]	@ (801b1bc <tcp_abandon+0x160>)
 801b074:	4852      	ldr	r0, [pc, #328]	@ (801b1c0 <tcp_abandon+0x164>)
 801b076:	f00a f9fd 	bl	8025474 <iprintf>
 801b07a:	e099      	b.n	801b1b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	7d1b      	ldrb	r3, [r3, #20]
 801b080:	2b01      	cmp	r3, #1
 801b082:	d106      	bne.n	801b092 <tcp_abandon+0x36>
 801b084:	4b4c      	ldr	r3, [pc, #304]	@ (801b1b8 <tcp_abandon+0x15c>)
 801b086:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801b08a:	494e      	ldr	r1, [pc, #312]	@ (801b1c4 <tcp_abandon+0x168>)
 801b08c:	484c      	ldr	r0, [pc, #304]	@ (801b1c0 <tcp_abandon+0x164>)
 801b08e:	f00a f9f1 	bl	8025474 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	7d1b      	ldrb	r3, [r3, #20]
 801b096:	2b0a      	cmp	r3, #10
 801b098:	d107      	bne.n	801b0aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b09a:	6879      	ldr	r1, [r7, #4]
 801b09c:	484a      	ldr	r0, [pc, #296]	@ (801b1c8 <tcp_abandon+0x16c>)
 801b09e:	f001 f971 	bl	801c384 <tcp_pcb_remove>
    tcp_free(pcb);
 801b0a2:	6878      	ldr	r0, [r7, #4]
 801b0a4:	f7ff fd54 	bl	801ab50 <tcp_free>
 801b0a8:	e082      	b.n	801b1b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801b0aa:	2300      	movs	r3, #0
 801b0ac:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b0b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b0bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b0c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	691b      	ldr	r3, [r3, #16]
 801b0ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	7d1b      	ldrb	r3, [r3, #20]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d126      	bne.n	801b122 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	8adb      	ldrh	r3, [r3, #22]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d02e      	beq.n	801b13a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b0dc:	4b3b      	ldr	r3, [pc, #236]	@ (801b1cc <tcp_abandon+0x170>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d105      	bne.n	801b0f2 <tcp_abandon+0x96>
 801b0e6:	4b39      	ldr	r3, [pc, #228]	@ (801b1cc <tcp_abandon+0x170>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	4a37      	ldr	r2, [pc, #220]	@ (801b1cc <tcp_abandon+0x170>)
 801b0ee:	6013      	str	r3, [r2, #0]
 801b0f0:	e013      	b.n	801b11a <tcp_abandon+0xbe>
 801b0f2:	4b36      	ldr	r3, [pc, #216]	@ (801b1cc <tcp_abandon+0x170>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	61fb      	str	r3, [r7, #28]
 801b0f8:	e00c      	b.n	801b114 <tcp_abandon+0xb8>
 801b0fa:	69fb      	ldr	r3, [r7, #28]
 801b0fc:	68db      	ldr	r3, [r3, #12]
 801b0fe:	687a      	ldr	r2, [r7, #4]
 801b100:	429a      	cmp	r2, r3
 801b102:	d104      	bne.n	801b10e <tcp_abandon+0xb2>
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	68da      	ldr	r2, [r3, #12]
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	60da      	str	r2, [r3, #12]
 801b10c:	e005      	b.n	801b11a <tcp_abandon+0xbe>
 801b10e:	69fb      	ldr	r3, [r7, #28]
 801b110:	68db      	ldr	r3, [r3, #12]
 801b112:	61fb      	str	r3, [r7, #28]
 801b114:	69fb      	ldr	r3, [r7, #28]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d1ef      	bne.n	801b0fa <tcp_abandon+0x9e>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2200      	movs	r2, #0
 801b11e:	60da      	str	r2, [r3, #12]
 801b120:	e00b      	b.n	801b13a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801b122:	683b      	ldr	r3, [r7, #0]
 801b124:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	8adb      	ldrh	r3, [r3, #22]
 801b12a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b12c:	6879      	ldr	r1, [r7, #4]
 801b12e:	4828      	ldr	r0, [pc, #160]	@ (801b1d0 <tcp_abandon+0x174>)
 801b130:	f001 f928 	bl	801c384 <tcp_pcb_remove>
 801b134:	4b27      	ldr	r3, [pc, #156]	@ (801b1d4 <tcp_abandon+0x178>)
 801b136:	2201      	movs	r2, #1
 801b138:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d004      	beq.n	801b14c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b146:	4618      	mov	r0, r3
 801b148:	f000 fdfc 	bl	801bd44 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b150:	2b00      	cmp	r3, #0
 801b152:	d004      	beq.n	801b15e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b158:	4618      	mov	r0, r3
 801b15a:	f000 fdf3 	bl	801bd44 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b162:	2b00      	cmp	r3, #0
 801b164:	d004      	beq.n	801b170 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b16a:	4618      	mov	r0, r3
 801b16c:	f000 fdea 	bl	801bd44 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b172:	2b00      	cmp	r3, #0
 801b174:	d00e      	beq.n	801b194 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b176:	6879      	ldr	r1, [r7, #4]
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	3304      	adds	r3, #4
 801b17c:	687a      	ldr	r2, [r7, #4]
 801b17e:	8b12      	ldrh	r2, [r2, #24]
 801b180:	9202      	str	r2, [sp, #8]
 801b182:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b184:	9201      	str	r2, [sp, #4]
 801b186:	9300      	str	r3, [sp, #0]
 801b188:	460b      	mov	r3, r1
 801b18a:	697a      	ldr	r2, [r7, #20]
 801b18c:	69b9      	ldr	r1, [r7, #24]
 801b18e:	6878      	ldr	r0, [r7, #4]
 801b190:	f005 fac2 	bl	8020718 <tcp_rst>
    }
    last_state = pcb->state;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	7d1b      	ldrb	r3, [r3, #20]
 801b198:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f7ff fcd8 	bl	801ab50 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b1a0:	693b      	ldr	r3, [r7, #16]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d004      	beq.n	801b1b0 <tcp_abandon+0x154>
 801b1a6:	693b      	ldr	r3, [r7, #16]
 801b1a8:	f06f 010c 	mvn.w	r1, #12
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	4798      	blx	r3
  }
}
 801b1b0:	3728      	adds	r7, #40	@ 0x28
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	bd80      	pop	{r7, pc}
 801b1b6:	bf00      	nop
 801b1b8:	0802afb0 	.word	0x0802afb0
 801b1bc:	0802b0f4 	.word	0x0802b0f4
 801b1c0:	0802aff4 	.word	0x0802aff4
 801b1c4:	0802b110 	.word	0x0802b110
 801b1c8:	2400be74 	.word	0x2400be74
 801b1cc:	2400be68 	.word	0x2400be68
 801b1d0:	2400be70 	.word	0x2400be70
 801b1d4:	2400be78 	.word	0x2400be78

0801b1d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b082      	sub	sp, #8
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b1e0:	2101      	movs	r1, #1
 801b1e2:	6878      	ldr	r0, [r7, #4]
 801b1e4:	f7ff ff3a 	bl	801b05c <tcp_abandon>
}
 801b1e8:	bf00      	nop
 801b1ea:	3708      	adds	r7, #8
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd80      	pop	{r7, pc}

0801b1f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b088      	sub	sp, #32
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	60b9      	str	r1, [r7, #8]
 801b1fa:	4613      	mov	r3, r2
 801b1fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801b1fe:	2304      	movs	r3, #4
 801b200:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d101      	bne.n	801b20c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801b208:	4b3e      	ldr	r3, [pc, #248]	@ (801b304 <tcp_bind+0x114>)
 801b20a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d109      	bne.n	801b226 <tcp_bind+0x36>
 801b212:	4b3d      	ldr	r3, [pc, #244]	@ (801b308 <tcp_bind+0x118>)
 801b214:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801b218:	493c      	ldr	r1, [pc, #240]	@ (801b30c <tcp_bind+0x11c>)
 801b21a:	483d      	ldr	r0, [pc, #244]	@ (801b310 <tcp_bind+0x120>)
 801b21c:	f00a f92a 	bl	8025474 <iprintf>
 801b220:	f06f 030f 	mvn.w	r3, #15
 801b224:	e06a      	b.n	801b2fc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	7d1b      	ldrb	r3, [r3, #20]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d009      	beq.n	801b242 <tcp_bind+0x52>
 801b22e:	4b36      	ldr	r3, [pc, #216]	@ (801b308 <tcp_bind+0x118>)
 801b230:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b234:	4937      	ldr	r1, [pc, #220]	@ (801b314 <tcp_bind+0x124>)
 801b236:	4836      	ldr	r0, [pc, #216]	@ (801b310 <tcp_bind+0x120>)
 801b238:	f00a f91c 	bl	8025474 <iprintf>
 801b23c:	f06f 0305 	mvn.w	r3, #5
 801b240:	e05c      	b.n	801b2fc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b242:	88fb      	ldrh	r3, [r7, #6]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d109      	bne.n	801b25c <tcp_bind+0x6c>
    port = tcp_new_port();
 801b248:	f000 f914 	bl	801b474 <tcp_new_port>
 801b24c:	4603      	mov	r3, r0
 801b24e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b250:	88fb      	ldrh	r3, [r7, #6]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d135      	bne.n	801b2c2 <tcp_bind+0xd2>
      return ERR_BUF;
 801b256:	f06f 0301 	mvn.w	r3, #1
 801b25a:	e04f      	b.n	801b2fc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b25c:	2300      	movs	r3, #0
 801b25e:	61fb      	str	r3, [r7, #28]
 801b260:	e02b      	b.n	801b2ba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b262:	4a2d      	ldr	r2, [pc, #180]	@ (801b318 <tcp_bind+0x128>)
 801b264:	69fb      	ldr	r3, [r7, #28]
 801b266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	61bb      	str	r3, [r7, #24]
 801b26e:	e01e      	b.n	801b2ae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b270:	69bb      	ldr	r3, [r7, #24]
 801b272:	8adb      	ldrh	r3, [r3, #22]
 801b274:	88fa      	ldrh	r2, [r7, #6]
 801b276:	429a      	cmp	r2, r3
 801b278:	d116      	bne.n	801b2a8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b27a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d010      	beq.n	801b2a2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b280:	69bb      	ldr	r3, [r7, #24]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d00c      	beq.n	801b2a2 <tcp_bind+0xb2>
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d009      	beq.n	801b2a2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d005      	beq.n	801b2a2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b296:	69bb      	ldr	r3, [r7, #24]
 801b298:	681a      	ldr	r2, [r3, #0]
 801b29a:	68bb      	ldr	r3, [r7, #8]
 801b29c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	d102      	bne.n	801b2a8 <tcp_bind+0xb8>
              return ERR_USE;
 801b2a2:	f06f 0307 	mvn.w	r3, #7
 801b2a6:	e029      	b.n	801b2fc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b2a8:	69bb      	ldr	r3, [r7, #24]
 801b2aa:	68db      	ldr	r3, [r3, #12]
 801b2ac:	61bb      	str	r3, [r7, #24]
 801b2ae:	69bb      	ldr	r3, [r7, #24]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d1dd      	bne.n	801b270 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b2b4:	69fb      	ldr	r3, [r7, #28]
 801b2b6:	3301      	adds	r3, #1
 801b2b8:	61fb      	str	r3, [r7, #28]
 801b2ba:	69fa      	ldr	r2, [r7, #28]
 801b2bc:	697b      	ldr	r3, [r7, #20]
 801b2be:	429a      	cmp	r2, r3
 801b2c0:	dbcf      	blt.n	801b262 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d00c      	beq.n	801b2e2 <tcp_bind+0xf2>
 801b2c8:	68bb      	ldr	r3, [r7, #8]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d008      	beq.n	801b2e2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d002      	beq.n	801b2dc <tcp_bind+0xec>
 801b2d6:	68bb      	ldr	r3, [r7, #8]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	e000      	b.n	801b2de <tcp_bind+0xee>
 801b2dc:	2300      	movs	r3, #0
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	88fa      	ldrh	r2, [r7, #6]
 801b2e6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b2e8:	4b0c      	ldr	r3, [pc, #48]	@ (801b31c <tcp_bind+0x12c>)
 801b2ea:	681a      	ldr	r2, [r3, #0]
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	60da      	str	r2, [r3, #12]
 801b2f0:	4a0a      	ldr	r2, [pc, #40]	@ (801b31c <tcp_bind+0x12c>)
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	6013      	str	r3, [r2, #0]
 801b2f6:	f005 fbd1 	bl	8020a9c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b2fa:	2300      	movs	r3, #0
}
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	3720      	adds	r7, #32
 801b300:	46bd      	mov	sp, r7
 801b302:	bd80      	pop	{r7, pc}
 801b304:	0802d0e4 	.word	0x0802d0e4
 801b308:	0802afb0 	.word	0x0802afb0
 801b30c:	0802b144 	.word	0x0802b144
 801b310:	0802aff4 	.word	0x0802aff4
 801b314:	0802b15c 	.word	0x0802b15c
 801b318:	0802d0bc 	.word	0x0802d0bc
 801b31c:	2400be68 	.word	0x2400be68

0801b320 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b084      	sub	sp, #16
 801b324:	af00      	add	r7, sp, #0
 801b326:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d106      	bne.n	801b33c <tcp_update_rcv_ann_wnd+0x1c>
 801b32e:	4b25      	ldr	r3, [pc, #148]	@ (801b3c4 <tcp_update_rcv_ann_wnd+0xa4>)
 801b330:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801b334:	4924      	ldr	r1, [pc, #144]	@ (801b3c8 <tcp_update_rcv_ann_wnd+0xa8>)
 801b336:	4825      	ldr	r0, [pc, #148]	@ (801b3cc <tcp_update_rcv_ann_wnd+0xac>)
 801b338:	f00a f89c 	bl	8025474 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b340:	687a      	ldr	r2, [r7, #4]
 801b342:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801b344:	4413      	add	r3, r2
 801b346:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b34c:	687a      	ldr	r2, [r7, #4]
 801b34e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801b350:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801b354:	bf28      	it	cs
 801b356:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801b35a:	b292      	uxth	r2, r2
 801b35c:	4413      	add	r3, r2
 801b35e:	68fa      	ldr	r2, [r7, #12]
 801b360:	1ad3      	subs	r3, r2, r3
 801b362:	2b00      	cmp	r3, #0
 801b364:	db08      	blt.n	801b378 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b372:	68fa      	ldr	r2, [r7, #12]
 801b374:	1ad3      	subs	r3, r2, r3
 801b376:	e020      	b.n	801b3ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b380:	1ad3      	subs	r3, r2, r3
 801b382:	2b00      	cmp	r3, #0
 801b384:	dd03      	ble.n	801b38e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	2200      	movs	r2, #0
 801b38a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801b38c:	e014      	b.n	801b3b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b396:	1ad3      	subs	r3, r2, r3
 801b398:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b3a0:	d306      	bcc.n	801b3b0 <tcp_update_rcv_ann_wnd+0x90>
 801b3a2:	4b08      	ldr	r3, [pc, #32]	@ (801b3c4 <tcp_update_rcv_ann_wnd+0xa4>)
 801b3a4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801b3a8:	4909      	ldr	r1, [pc, #36]	@ (801b3d0 <tcp_update_rcv_ann_wnd+0xb0>)
 801b3aa:	4808      	ldr	r0, [pc, #32]	@ (801b3cc <tcp_update_rcv_ann_wnd+0xac>)
 801b3ac:	f00a f862 	bl	8025474 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b3b0:	68bb      	ldr	r3, [r7, #8]
 801b3b2:	b29a      	uxth	r2, r3
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801b3b8:	2300      	movs	r3, #0
  }
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3710      	adds	r7, #16
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}
 801b3c2:	bf00      	nop
 801b3c4:	0802afb0 	.word	0x0802afb0
 801b3c8:	0802b20c 	.word	0x0802b20c
 801b3cc:	0802aff4 	.word	0x0802aff4
 801b3d0:	0802b230 	.word	0x0802b230

0801b3d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b084      	sub	sp, #16
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	460b      	mov	r3, r1
 801b3de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d107      	bne.n	801b3f6 <tcp_recved+0x22>
 801b3e6:	4b1f      	ldr	r3, [pc, #124]	@ (801b464 <tcp_recved+0x90>)
 801b3e8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801b3ec:	491e      	ldr	r1, [pc, #120]	@ (801b468 <tcp_recved+0x94>)
 801b3ee:	481f      	ldr	r0, [pc, #124]	@ (801b46c <tcp_recved+0x98>)
 801b3f0:	f00a f840 	bl	8025474 <iprintf>
 801b3f4:	e032      	b.n	801b45c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	7d1b      	ldrb	r3, [r3, #20]
 801b3fa:	2b01      	cmp	r3, #1
 801b3fc:	d106      	bne.n	801b40c <tcp_recved+0x38>
 801b3fe:	4b19      	ldr	r3, [pc, #100]	@ (801b464 <tcp_recved+0x90>)
 801b400:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801b404:	491a      	ldr	r1, [pc, #104]	@ (801b470 <tcp_recved+0x9c>)
 801b406:	4819      	ldr	r0, [pc, #100]	@ (801b46c <tcp_recved+0x98>)
 801b408:	f00a f834 	bl	8025474 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801b410:	887b      	ldrh	r3, [r7, #2]
 801b412:	4413      	add	r3, r2
 801b414:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b416:	89fb      	ldrh	r3, [r7, #14]
 801b418:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801b41c:	d804      	bhi.n	801b428 <tcp_recved+0x54>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b422:	89fa      	ldrh	r2, [r7, #14]
 801b424:	429a      	cmp	r2, r3
 801b426:	d204      	bcs.n	801b432 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801b42e:	851a      	strh	r2, [r3, #40]	@ 0x28
 801b430:	e002      	b.n	801b438 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	89fa      	ldrh	r2, [r7, #14]
 801b436:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b438:	6878      	ldr	r0, [r7, #4]
 801b43a:	f7ff ff71 	bl	801b320 <tcp_update_rcv_ann_wnd>
 801b43e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801b446:	d309      	bcc.n	801b45c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	8b5b      	ldrh	r3, [r3, #26]
 801b44c:	f043 0302 	orr.w	r3, r3, #2
 801b450:	b29a      	uxth	r2, r3
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b456:	6878      	ldr	r0, [r7, #4]
 801b458:	f004 fbaa 	bl	801fbb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b45c:	3710      	adds	r7, #16
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	0802afb0 	.word	0x0802afb0
 801b468:	0802b24c 	.word	0x0802b24c
 801b46c:	0802aff4 	.word	0x0802aff4
 801b470:	0802b264 	.word	0x0802b264

0801b474 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b474:	b480      	push	{r7}
 801b476:	b083      	sub	sp, #12
 801b478:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801b47a:	2300      	movs	r3, #0
 801b47c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801b47e:	4b1e      	ldr	r3, [pc, #120]	@ (801b4f8 <tcp_new_port+0x84>)
 801b480:	881b      	ldrh	r3, [r3, #0]
 801b482:	3301      	adds	r3, #1
 801b484:	b29a      	uxth	r2, r3
 801b486:	4b1c      	ldr	r3, [pc, #112]	@ (801b4f8 <tcp_new_port+0x84>)
 801b488:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b48a:	4b1b      	ldr	r3, [pc, #108]	@ (801b4f8 <tcp_new_port+0x84>)
 801b48c:	881b      	ldrh	r3, [r3, #0]
 801b48e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b492:	4293      	cmp	r3, r2
 801b494:	d103      	bne.n	801b49e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b496:	4b18      	ldr	r3, [pc, #96]	@ (801b4f8 <tcp_new_port+0x84>)
 801b498:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b49c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b49e:	2300      	movs	r3, #0
 801b4a0:	71fb      	strb	r3, [r7, #7]
 801b4a2:	e01e      	b.n	801b4e2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b4a4:	79fb      	ldrb	r3, [r7, #7]
 801b4a6:	4a15      	ldr	r2, [pc, #84]	@ (801b4fc <tcp_new_port+0x88>)
 801b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	603b      	str	r3, [r7, #0]
 801b4b0:	e011      	b.n	801b4d6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	8ada      	ldrh	r2, [r3, #22]
 801b4b6:	4b10      	ldr	r3, [pc, #64]	@ (801b4f8 <tcp_new_port+0x84>)
 801b4b8:	881b      	ldrh	r3, [r3, #0]
 801b4ba:	429a      	cmp	r2, r3
 801b4bc:	d108      	bne.n	801b4d0 <tcp_new_port+0x5c>
        n++;
 801b4be:	88bb      	ldrh	r3, [r7, #4]
 801b4c0:	3301      	adds	r3, #1
 801b4c2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b4c4:	88bb      	ldrh	r3, [r7, #4]
 801b4c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b4ca:	d3d8      	bcc.n	801b47e <tcp_new_port+0xa>
          return 0;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	e00d      	b.n	801b4ec <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	68db      	ldr	r3, [r3, #12]
 801b4d4:	603b      	str	r3, [r7, #0]
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d1ea      	bne.n	801b4b2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b4dc:	79fb      	ldrb	r3, [r7, #7]
 801b4de:	3301      	adds	r3, #1
 801b4e0:	71fb      	strb	r3, [r7, #7]
 801b4e2:	79fb      	ldrb	r3, [r7, #7]
 801b4e4:	2b03      	cmp	r3, #3
 801b4e6:	d9dd      	bls.n	801b4a4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801b4e8:	4b03      	ldr	r3, [pc, #12]	@ (801b4f8 <tcp_new_port+0x84>)
 801b4ea:	881b      	ldrh	r3, [r3, #0]
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	370c      	adds	r7, #12
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f6:	4770      	bx	lr
 801b4f8:	2400020c 	.word	0x2400020c
 801b4fc:	0802d0bc 	.word	0x0802d0bc

0801b500 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b500:	b5b0      	push	{r4, r5, r7, lr}
 801b502:	b090      	sub	sp, #64	@ 0x40
 801b504:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b506:	2300      	movs	r3, #0
 801b508:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801b50c:	4b95      	ldr	r3, [pc, #596]	@ (801b764 <tcp_slowtmr+0x264>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	3301      	adds	r3, #1
 801b512:	4a94      	ldr	r2, [pc, #592]	@ (801b764 <tcp_slowtmr+0x264>)
 801b514:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b516:	4b94      	ldr	r3, [pc, #592]	@ (801b768 <tcp_slowtmr+0x268>)
 801b518:	781b      	ldrb	r3, [r3, #0]
 801b51a:	3301      	adds	r3, #1
 801b51c:	b2da      	uxtb	r2, r3
 801b51e:	4b92      	ldr	r3, [pc, #584]	@ (801b768 <tcp_slowtmr+0x268>)
 801b520:	701a      	strb	r2, [r3, #0]
 801b522:	e000      	b.n	801b526 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801b524:	bf00      	nop
  prev = NULL;
 801b526:	2300      	movs	r3, #0
 801b528:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801b52a:	4b90      	ldr	r3, [pc, #576]	@ (801b76c <tcp_slowtmr+0x26c>)
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801b530:	e29d      	b.n	801ba6e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b534:	7d1b      	ldrb	r3, [r3, #20]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d106      	bne.n	801b548 <tcp_slowtmr+0x48>
 801b53a:	4b8d      	ldr	r3, [pc, #564]	@ (801b770 <tcp_slowtmr+0x270>)
 801b53c:	f240 42be 	movw	r2, #1214	@ 0x4be
 801b540:	498c      	ldr	r1, [pc, #560]	@ (801b774 <tcp_slowtmr+0x274>)
 801b542:	488d      	ldr	r0, [pc, #564]	@ (801b778 <tcp_slowtmr+0x278>)
 801b544:	f009 ff96 	bl	8025474 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b54a:	7d1b      	ldrb	r3, [r3, #20]
 801b54c:	2b01      	cmp	r3, #1
 801b54e:	d106      	bne.n	801b55e <tcp_slowtmr+0x5e>
 801b550:	4b87      	ldr	r3, [pc, #540]	@ (801b770 <tcp_slowtmr+0x270>)
 801b552:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801b556:	4989      	ldr	r1, [pc, #548]	@ (801b77c <tcp_slowtmr+0x27c>)
 801b558:	4887      	ldr	r0, [pc, #540]	@ (801b778 <tcp_slowtmr+0x278>)
 801b55a:	f009 ff8b 	bl	8025474 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b560:	7d1b      	ldrb	r3, [r3, #20]
 801b562:	2b0a      	cmp	r3, #10
 801b564:	d106      	bne.n	801b574 <tcp_slowtmr+0x74>
 801b566:	4b82      	ldr	r3, [pc, #520]	@ (801b770 <tcp_slowtmr+0x270>)
 801b568:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801b56c:	4984      	ldr	r1, [pc, #528]	@ (801b780 <tcp_slowtmr+0x280>)
 801b56e:	4882      	ldr	r0, [pc, #520]	@ (801b778 <tcp_slowtmr+0x278>)
 801b570:	f009 ff80 	bl	8025474 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b576:	7f9a      	ldrb	r2, [r3, #30]
 801b578:	4b7b      	ldr	r3, [pc, #492]	@ (801b768 <tcp_slowtmr+0x268>)
 801b57a:	781b      	ldrb	r3, [r3, #0]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d105      	bne.n	801b58c <tcp_slowtmr+0x8c>
      prev = pcb;
 801b580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b582:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801b584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b586:	68db      	ldr	r3, [r3, #12]
 801b588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801b58a:	e270      	b.n	801ba6e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801b58c:	4b76      	ldr	r3, [pc, #472]	@ (801b768 <tcp_slowtmr+0x268>)
 801b58e:	781a      	ldrb	r2, [r3, #0]
 801b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b592:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801b594:	2300      	movs	r3, #0
 801b596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801b59a:	2300      	movs	r3, #0
 801b59c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5a2:	7d1b      	ldrb	r3, [r3, #20]
 801b5a4:	2b02      	cmp	r3, #2
 801b5a6:	d10a      	bne.n	801b5be <tcp_slowtmr+0xbe>
 801b5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b5ae:	2b05      	cmp	r3, #5
 801b5b0:	d905      	bls.n	801b5be <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801b5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b5b6:	3301      	adds	r3, #1
 801b5b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b5bc:	e11e      	b.n	801b7fc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b5c4:	2b0b      	cmp	r3, #11
 801b5c6:	d905      	bls.n	801b5d4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801b5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b5cc:	3301      	adds	r3, #1
 801b5ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b5d2:	e113      	b.n	801b7fc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801b5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d075      	beq.n	801b6ca <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d006      	beq.n	801b5f4 <tcp_slowtmr+0xf4>
 801b5e6:	4b62      	ldr	r3, [pc, #392]	@ (801b770 <tcp_slowtmr+0x270>)
 801b5e8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801b5ec:	4965      	ldr	r1, [pc, #404]	@ (801b784 <tcp_slowtmr+0x284>)
 801b5ee:	4862      	ldr	r0, [pc, #392]	@ (801b778 <tcp_slowtmr+0x278>)
 801b5f0:	f009 ff40 	bl	8025474 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d106      	bne.n	801b60a <tcp_slowtmr+0x10a>
 801b5fc:	4b5c      	ldr	r3, [pc, #368]	@ (801b770 <tcp_slowtmr+0x270>)
 801b5fe:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801b602:	4961      	ldr	r1, [pc, #388]	@ (801b788 <tcp_slowtmr+0x288>)
 801b604:	485c      	ldr	r0, [pc, #368]	@ (801b778 <tcp_slowtmr+0x278>)
 801b606:	f009 ff35 	bl	8025474 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b60c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b610:	2b0b      	cmp	r3, #11
 801b612:	d905      	bls.n	801b620 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801b614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b618:	3301      	adds	r3, #1
 801b61a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b61e:	e0ed      	b.n	801b7fc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b622:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b626:	3b01      	subs	r3, #1
 801b628:	4a58      	ldr	r2, [pc, #352]	@ (801b78c <tcp_slowtmr+0x28c>)
 801b62a:	5cd3      	ldrb	r3, [r2, r3]
 801b62c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b630:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b634:	7c7a      	ldrb	r2, [r7, #17]
 801b636:	429a      	cmp	r2, r3
 801b638:	d907      	bls.n	801b64a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801b63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b63c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b640:	3301      	adds	r3, #1
 801b642:	b2da      	uxtb	r2, r3
 801b644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b646:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801b64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b64c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801b650:	7c7a      	ldrb	r2, [r7, #17]
 801b652:	429a      	cmp	r2, r3
 801b654:	f200 80d2 	bhi.w	801b7fc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801b658:	2301      	movs	r3, #1
 801b65a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801b65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b662:	2b00      	cmp	r3, #0
 801b664:	d108      	bne.n	801b678 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b668:	f005 f94a 	bl	8020900 <tcp_zero_window_probe>
 801b66c:	4603      	mov	r3, r0
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d014      	beq.n	801b69c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801b672:	2300      	movs	r3, #0
 801b674:	623b      	str	r3, [r7, #32]
 801b676:	e011      	b.n	801b69c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b67e:	4619      	mov	r1, r3
 801b680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b682:	f004 f80f 	bl	801f6a4 <tcp_split_unsent_seg>
 801b686:	4603      	mov	r3, r0
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d107      	bne.n	801b69c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801b68c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b68e:	f004 fa8f 	bl	801fbb0 <tcp_output>
 801b692:	4603      	mov	r3, r0
 801b694:	2b00      	cmp	r3, #0
 801b696:	d101      	bne.n	801b69c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801b698:	2300      	movs	r3, #0
 801b69a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801b69c:	6a3b      	ldr	r3, [r7, #32]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	f000 80ac 	beq.w	801b7fc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801b6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b6b2:	2b06      	cmp	r3, #6
 801b6b4:	f200 80a2 	bhi.w	801b7fc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801b6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b6be:	3301      	adds	r3, #1
 801b6c0:	b2da      	uxtb	r2, r3
 801b6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6c4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801b6c8:	e098      	b.n	801b7fc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	db0f      	blt.n	801b6f4 <tcp_slowtmr+0x1f4>
 801b6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b6da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b6de:	4293      	cmp	r3, r2
 801b6e0:	d008      	beq.n	801b6f4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801b6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b6e8:	b29b      	uxth	r3, r3
 801b6ea:	3301      	adds	r3, #1
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	b21a      	sxth	r2, r3
 801b6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6f2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801b6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801b6fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b700:	429a      	cmp	r2, r3
 801b702:	db7b      	blt.n	801b7fc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b704:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b706:	f004 fd47 	bl	8020198 <tcp_rexmit_rto_prepare>
 801b70a:	4603      	mov	r3, r0
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d007      	beq.n	801b720 <tcp_slowtmr+0x220>
 801b710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b714:	2b00      	cmp	r3, #0
 801b716:	d171      	bne.n	801b7fc <tcp_slowtmr+0x2fc>
 801b718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d06d      	beq.n	801b7fc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801b720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b722:	7d1b      	ldrb	r3, [r3, #20]
 801b724:	2b02      	cmp	r3, #2
 801b726:	d03a      	beq.n	801b79e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b72a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b72e:	2b0c      	cmp	r3, #12
 801b730:	bf28      	it	cs
 801b732:	230c      	movcs	r3, #12
 801b734:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b738:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801b73c:	10db      	asrs	r3, r3, #3
 801b73e:	b21b      	sxth	r3, r3
 801b740:	461a      	mov	r2, r3
 801b742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b744:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801b748:	4413      	add	r3, r2
 801b74a:	7efa      	ldrb	r2, [r7, #27]
 801b74c:	4910      	ldr	r1, [pc, #64]	@ (801b790 <tcp_slowtmr+0x290>)
 801b74e:	5c8a      	ldrb	r2, [r1, r2]
 801b750:	4093      	lsls	r3, r2
 801b752:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b754:	697b      	ldr	r3, [r7, #20]
 801b756:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801b75a:	4293      	cmp	r3, r2
 801b75c:	dc1a      	bgt.n	801b794 <tcp_slowtmr+0x294>
 801b75e:	697b      	ldr	r3, [r7, #20]
 801b760:	b21a      	sxth	r2, r3
 801b762:	e019      	b.n	801b798 <tcp_slowtmr+0x298>
 801b764:	2400be64 	.word	0x2400be64
 801b768:	2400be7a 	.word	0x2400be7a
 801b76c:	2400be70 	.word	0x2400be70
 801b770:	0802afb0 	.word	0x0802afb0
 801b774:	0802b2f4 	.word	0x0802b2f4
 801b778:	0802aff4 	.word	0x0802aff4
 801b77c:	0802b320 	.word	0x0802b320
 801b780:	0802b34c 	.word	0x0802b34c
 801b784:	0802b37c 	.word	0x0802b37c
 801b788:	0802b3b0 	.word	0x0802b3b0
 801b78c:	0802d0b4 	.word	0x0802d0b4
 801b790:	0802d0a4 	.word	0x0802d0a4
 801b794:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b79a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801b79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b7b0:	4293      	cmp	r3, r2
 801b7b2:	bf28      	it	cs
 801b7b4:	4613      	movcs	r3, r2
 801b7b6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b7b8:	8a7b      	ldrh	r3, [r7, #18]
 801b7ba:	085b      	lsrs	r3, r3, #1
 801b7bc:	b29a      	uxth	r2, r3
 801b7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b7ce:	005b      	lsls	r3, r3, #1
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d206      	bcs.n	801b7e4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b7da:	005b      	lsls	r3, r3, #1
 801b7dc:	b29a      	uxth	r2, r3
 801b7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801b7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7e6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801b7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801b7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801b7f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b7f8:	f004 fd3e 	bl	8020278 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801b7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7fe:	7d1b      	ldrb	r3, [r3, #20]
 801b800:	2b06      	cmp	r3, #6
 801b802:	d111      	bne.n	801b828 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801b804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b806:	8b5b      	ldrh	r3, [r3, #26]
 801b808:	f003 0310 	and.w	r3, r3, #16
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d00b      	beq.n	801b828 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b810:	4b9c      	ldr	r3, [pc, #624]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b812:	681a      	ldr	r2, [r3, #0]
 801b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b816:	6a1b      	ldr	r3, [r3, #32]
 801b818:	1ad3      	subs	r3, r2, r3
 801b81a:	2b28      	cmp	r3, #40	@ 0x28
 801b81c:	d904      	bls.n	801b828 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801b81e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b822:	3301      	adds	r3, #1
 801b824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b82a:	7a5b      	ldrb	r3, [r3, #9]
 801b82c:	f003 0308 	and.w	r3, r3, #8
 801b830:	2b00      	cmp	r3, #0
 801b832:	d04a      	beq.n	801b8ca <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801b834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b836:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b838:	2b04      	cmp	r3, #4
 801b83a:	d003      	beq.n	801b844 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b83e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b840:	2b07      	cmp	r3, #7
 801b842:	d142      	bne.n	801b8ca <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b844:	4b8f      	ldr	r3, [pc, #572]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b846:	681a      	ldr	r2, [r3, #0]
 801b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b84a:	6a1b      	ldr	r3, [r3, #32]
 801b84c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b850:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b854:	4b8c      	ldr	r3, [pc, #560]	@ (801ba88 <tcp_slowtmr+0x588>)
 801b856:	440b      	add	r3, r1
 801b858:	498c      	ldr	r1, [pc, #560]	@ (801ba8c <tcp_slowtmr+0x58c>)
 801b85a:	fba1 1303 	umull	r1, r3, r1, r3
 801b85e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b860:	429a      	cmp	r2, r3
 801b862:	d90a      	bls.n	801b87a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801b864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b868:	3301      	adds	r3, #1
 801b86a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801b86e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b872:	3301      	adds	r3, #1
 801b874:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b878:	e027      	b.n	801b8ca <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b87a:	4b82      	ldr	r3, [pc, #520]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b87c:	681a      	ldr	r2, [r3, #0]
 801b87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b880:	6a1b      	ldr	r3, [r3, #32]
 801b882:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b886:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b88c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b890:	4618      	mov	r0, r3
 801b892:	4b7f      	ldr	r3, [pc, #508]	@ (801ba90 <tcp_slowtmr+0x590>)
 801b894:	fb00 f303 	mul.w	r3, r0, r3
 801b898:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b89a:	497c      	ldr	r1, [pc, #496]	@ (801ba8c <tcp_slowtmr+0x58c>)
 801b89c:	fba1 1303 	umull	r1, r3, r1, r3
 801b8a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8a2:	429a      	cmp	r2, r3
 801b8a4:	d911      	bls.n	801b8ca <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801b8a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b8a8:	f004 ffea 	bl	8020880 <tcp_keepalive>
 801b8ac:	4603      	mov	r3, r0
 801b8ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801b8b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d107      	bne.n	801b8ca <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801b8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8bc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801b8c0:	3301      	adds	r3, #1
 801b8c2:	b2da      	uxtb	r2, r3
 801b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8c6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d011      	beq.n	801b8f6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b8d2:	4b6c      	ldr	r3, [pc, #432]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b8d4:	681a      	ldr	r2, [r3, #0]
 801b8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8d8:	6a1b      	ldr	r3, [r3, #32]
 801b8da:	1ad2      	subs	r2, r2, r3
 801b8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801b8e2:	4619      	mov	r1, r3
 801b8e4:	460b      	mov	r3, r1
 801b8e6:	005b      	lsls	r3, r3, #1
 801b8e8:	440b      	add	r3, r1
 801b8ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b8ec:	429a      	cmp	r2, r3
 801b8ee:	d302      	bcc.n	801b8f6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801b8f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b8f2:	f000 feab 	bl	801c64c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801b8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8f8:	7d1b      	ldrb	r3, [r3, #20]
 801b8fa:	2b03      	cmp	r3, #3
 801b8fc:	d10b      	bne.n	801b916 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8fe:	4b61      	ldr	r3, [pc, #388]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b900:	681a      	ldr	r2, [r3, #0]
 801b902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b904:	6a1b      	ldr	r3, [r3, #32]
 801b906:	1ad3      	subs	r3, r2, r3
 801b908:	2b28      	cmp	r3, #40	@ 0x28
 801b90a:	d904      	bls.n	801b916 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801b90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b910:	3301      	adds	r3, #1
 801b912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b918:	7d1b      	ldrb	r3, [r3, #20]
 801b91a:	2b09      	cmp	r3, #9
 801b91c:	d10b      	bne.n	801b936 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b91e:	4b59      	ldr	r3, [pc, #356]	@ (801ba84 <tcp_slowtmr+0x584>)
 801b920:	681a      	ldr	r2, [r3, #0]
 801b922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b924:	6a1b      	ldr	r3, [r3, #32]
 801b926:	1ad3      	subs	r3, r2, r3
 801b928:	2bf0      	cmp	r3, #240	@ 0xf0
 801b92a:	d904      	bls.n	801b936 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801b92c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b930:	3301      	adds	r3, #1
 801b932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801b936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d060      	beq.n	801ba00 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801b93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b944:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801b946:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b948:	f000 fccc 	bl	801c2e4 <tcp_pcb_purge>
      if (prev != NULL) {
 801b94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d010      	beq.n	801b974 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b952:	4b50      	ldr	r3, [pc, #320]	@ (801ba94 <tcp_slowtmr+0x594>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b958:	429a      	cmp	r2, r3
 801b95a:	d106      	bne.n	801b96a <tcp_slowtmr+0x46a>
 801b95c:	4b4e      	ldr	r3, [pc, #312]	@ (801ba98 <tcp_slowtmr+0x598>)
 801b95e:	f240 526d 	movw	r2, #1389	@ 0x56d
 801b962:	494e      	ldr	r1, [pc, #312]	@ (801ba9c <tcp_slowtmr+0x59c>)
 801b964:	484e      	ldr	r0, [pc, #312]	@ (801baa0 <tcp_slowtmr+0x5a0>)
 801b966:	f009 fd85 	bl	8025474 <iprintf>
        prev->next = pcb->next;
 801b96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b96c:	68da      	ldr	r2, [r3, #12]
 801b96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b970:	60da      	str	r2, [r3, #12]
 801b972:	e00f      	b.n	801b994 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b974:	4b47      	ldr	r3, [pc, #284]	@ (801ba94 <tcp_slowtmr+0x594>)
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d006      	beq.n	801b98c <tcp_slowtmr+0x48c>
 801b97e:	4b46      	ldr	r3, [pc, #280]	@ (801ba98 <tcp_slowtmr+0x598>)
 801b980:	f240 5271 	movw	r2, #1393	@ 0x571
 801b984:	4947      	ldr	r1, [pc, #284]	@ (801baa4 <tcp_slowtmr+0x5a4>)
 801b986:	4846      	ldr	r0, [pc, #280]	@ (801baa0 <tcp_slowtmr+0x5a0>)
 801b988:	f009 fd74 	bl	8025474 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b98e:	68db      	ldr	r3, [r3, #12]
 801b990:	4a40      	ldr	r2, [pc, #256]	@ (801ba94 <tcp_slowtmr+0x594>)
 801b992:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801b994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d013      	beq.n	801b9c4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b99e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801b9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801b9a4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801b9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9a8:	3304      	adds	r3, #4
 801b9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b9ac:	8ad2      	ldrh	r2, [r2, #22]
 801b9ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b9b0:	8b09      	ldrh	r1, [r1, #24]
 801b9b2:	9102      	str	r1, [sp, #8]
 801b9b4:	9201      	str	r2, [sp, #4]
 801b9b6:	9300      	str	r3, [sp, #0]
 801b9b8:	462b      	mov	r3, r5
 801b9ba:	4622      	mov	r2, r4
 801b9bc:	4601      	mov	r1, r0
 801b9be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b9c0:	f004 feaa 	bl	8020718 <tcp_rst>
      err_arg = pcb->callback_arg;
 801b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9c6:	691b      	ldr	r3, [r3, #16]
 801b9c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9cc:	7d1b      	ldrb	r3, [r3, #20]
 801b9ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9d6:	68db      	ldr	r3, [r3, #12]
 801b9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801b9da:	6838      	ldr	r0, [r7, #0]
 801b9dc:	f7ff f8b8 	bl	801ab50 <tcp_free>
      tcp_active_pcbs_changed = 0;
 801b9e0:	4b31      	ldr	r3, [pc, #196]	@ (801baa8 <tcp_slowtmr+0x5a8>)
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d004      	beq.n	801b9f6 <tcp_slowtmr+0x4f6>
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	f06f 010c 	mvn.w	r1, #12
 801b9f2:	68b8      	ldr	r0, [r7, #8]
 801b9f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b9f6:	4b2c      	ldr	r3, [pc, #176]	@ (801baa8 <tcp_slowtmr+0x5a8>)
 801b9f8:	781b      	ldrb	r3, [r3, #0]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d037      	beq.n	801ba6e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801b9fe:	e592      	b.n	801b526 <tcp_slowtmr+0x26>
      prev = pcb;
 801ba00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801ba04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba06:	68db      	ldr	r3, [r3, #12]
 801ba08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba0c:	7f1b      	ldrb	r3, [r3, #28]
 801ba0e:	3301      	adds	r3, #1
 801ba10:	b2da      	uxtb	r2, r3
 801ba12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba14:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba18:	7f1a      	ldrb	r2, [r3, #28]
 801ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba1c:	7f5b      	ldrb	r3, [r3, #29]
 801ba1e:	429a      	cmp	r2, r3
 801ba20:	d325      	bcc.n	801ba6e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba24:	2200      	movs	r2, #0
 801ba26:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801ba28:	4b1f      	ldr	r3, [pc, #124]	@ (801baa8 <tcp_slowtmr+0x5a8>)
 801ba2a:	2200      	movs	r2, #0
 801ba2c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801ba2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d00b      	beq.n	801ba50 <tcp_slowtmr+0x550>
 801ba38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ba3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba40:	6912      	ldr	r2, [r2, #16]
 801ba42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ba44:	4610      	mov	r0, r2
 801ba46:	4798      	blx	r3
 801ba48:	4603      	mov	r3, r0
 801ba4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801ba4e:	e002      	b.n	801ba56 <tcp_slowtmr+0x556>
 801ba50:	2300      	movs	r3, #0
 801ba52:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801ba56:	4b14      	ldr	r3, [pc, #80]	@ (801baa8 <tcp_slowtmr+0x5a8>)
 801ba58:	781b      	ldrb	r3, [r3, #0]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	f47f ad62 	bne.w	801b524 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801ba60:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d102      	bne.n	801ba6e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801ba68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ba6a:	f004 f8a1 	bl	801fbb0 <tcp_output>
  while (pcb != NULL) {
 801ba6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	f47f ad5e 	bne.w	801b532 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801ba76:	2300      	movs	r3, #0
 801ba78:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801ba7a:	4b0c      	ldr	r3, [pc, #48]	@ (801baac <tcp_slowtmr+0x5ac>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801ba80:	e069      	b.n	801bb56 <tcp_slowtmr+0x656>
 801ba82:	bf00      	nop
 801ba84:	2400be64 	.word	0x2400be64
 801ba88:	000a4cb8 	.word	0x000a4cb8
 801ba8c:	10624dd3 	.word	0x10624dd3
 801ba90:	000124f8 	.word	0x000124f8
 801ba94:	2400be70 	.word	0x2400be70
 801ba98:	0802afb0 	.word	0x0802afb0
 801ba9c:	0802b3e8 	.word	0x0802b3e8
 801baa0:	0802aff4 	.word	0x0802aff4
 801baa4:	0802b414 	.word	0x0802b414
 801baa8:	2400be78 	.word	0x2400be78
 801baac:	2400be74 	.word	0x2400be74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bab2:	7d1b      	ldrb	r3, [r3, #20]
 801bab4:	2b0a      	cmp	r3, #10
 801bab6:	d006      	beq.n	801bac6 <tcp_slowtmr+0x5c6>
 801bab8:	4b2b      	ldr	r3, [pc, #172]	@ (801bb68 <tcp_slowtmr+0x668>)
 801baba:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801babe:	492b      	ldr	r1, [pc, #172]	@ (801bb6c <tcp_slowtmr+0x66c>)
 801bac0:	482b      	ldr	r0, [pc, #172]	@ (801bb70 <tcp_slowtmr+0x670>)
 801bac2:	f009 fcd7 	bl	8025474 <iprintf>
    pcb_remove = 0;
 801bac6:	2300      	movs	r3, #0
 801bac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bacc:	4b29      	ldr	r3, [pc, #164]	@ (801bb74 <tcp_slowtmr+0x674>)
 801bace:	681a      	ldr	r2, [r3, #0]
 801bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bad2:	6a1b      	ldr	r3, [r3, #32]
 801bad4:	1ad3      	subs	r3, r2, r3
 801bad6:	2bf0      	cmp	r3, #240	@ 0xf0
 801bad8:	d904      	bls.n	801bae4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801bada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bade:	3301      	adds	r3, #1
 801bae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801bae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d02f      	beq.n	801bb4c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801baec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801baee:	f000 fbf9 	bl	801c2e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d010      	beq.n	801bb1a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801baf8:	4b1f      	ldr	r3, [pc, #124]	@ (801bb78 <tcp_slowtmr+0x678>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bafe:	429a      	cmp	r2, r3
 801bb00:	d106      	bne.n	801bb10 <tcp_slowtmr+0x610>
 801bb02:	4b19      	ldr	r3, [pc, #100]	@ (801bb68 <tcp_slowtmr+0x668>)
 801bb04:	f240 52af 	movw	r2, #1455	@ 0x5af
 801bb08:	491c      	ldr	r1, [pc, #112]	@ (801bb7c <tcp_slowtmr+0x67c>)
 801bb0a:	4819      	ldr	r0, [pc, #100]	@ (801bb70 <tcp_slowtmr+0x670>)
 801bb0c:	f009 fcb2 	bl	8025474 <iprintf>
        prev->next = pcb->next;
 801bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb12:	68da      	ldr	r2, [r3, #12]
 801bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb16:	60da      	str	r2, [r3, #12]
 801bb18:	e00f      	b.n	801bb3a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801bb1a:	4b17      	ldr	r3, [pc, #92]	@ (801bb78 <tcp_slowtmr+0x678>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d006      	beq.n	801bb32 <tcp_slowtmr+0x632>
 801bb24:	4b10      	ldr	r3, [pc, #64]	@ (801bb68 <tcp_slowtmr+0x668>)
 801bb26:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801bb2a:	4915      	ldr	r1, [pc, #84]	@ (801bb80 <tcp_slowtmr+0x680>)
 801bb2c:	4810      	ldr	r0, [pc, #64]	@ (801bb70 <tcp_slowtmr+0x670>)
 801bb2e:	f009 fca1 	bl	8025474 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801bb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb34:	68db      	ldr	r3, [r3, #12]
 801bb36:	4a10      	ldr	r2, [pc, #64]	@ (801bb78 <tcp_slowtmr+0x678>)
 801bb38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801bb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801bb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb40:	68db      	ldr	r3, [r3, #12]
 801bb42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801bb44:	69f8      	ldr	r0, [r7, #28]
 801bb46:	f7ff f803 	bl	801ab50 <tcp_free>
 801bb4a:	e004      	b.n	801bb56 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801bb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb52:	68db      	ldr	r3, [r3, #12]
 801bb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801bb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d1a9      	bne.n	801bab0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801bb5c:	bf00      	nop
 801bb5e:	bf00      	nop
 801bb60:	3730      	adds	r7, #48	@ 0x30
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bdb0      	pop	{r4, r5, r7, pc}
 801bb66:	bf00      	nop
 801bb68:	0802afb0 	.word	0x0802afb0
 801bb6c:	0802b440 	.word	0x0802b440
 801bb70:	0802aff4 	.word	0x0802aff4
 801bb74:	2400be64 	.word	0x2400be64
 801bb78:	2400be74 	.word	0x2400be74
 801bb7c:	0802b470 	.word	0x0802b470
 801bb80:	0802b498 	.word	0x0802b498

0801bb84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b082      	sub	sp, #8
 801bb88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801bb8a:	4b2d      	ldr	r3, [pc, #180]	@ (801bc40 <tcp_fasttmr+0xbc>)
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	3301      	adds	r3, #1
 801bb90:	b2da      	uxtb	r2, r3
 801bb92:	4b2b      	ldr	r3, [pc, #172]	@ (801bc40 <tcp_fasttmr+0xbc>)
 801bb94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801bb96:	4b2b      	ldr	r3, [pc, #172]	@ (801bc44 <tcp_fasttmr+0xc0>)
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bb9c:	e048      	b.n	801bc30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	7f9a      	ldrb	r2, [r3, #30]
 801bba2:	4b27      	ldr	r3, [pc, #156]	@ (801bc40 <tcp_fasttmr+0xbc>)
 801bba4:	781b      	ldrb	r3, [r3, #0]
 801bba6:	429a      	cmp	r2, r3
 801bba8:	d03f      	beq.n	801bc2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801bbaa:	4b25      	ldr	r3, [pc, #148]	@ (801bc40 <tcp_fasttmr+0xbc>)
 801bbac:	781a      	ldrb	r2, [r3, #0]
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	8b5b      	ldrh	r3, [r3, #26]
 801bbb6:	f003 0301 	and.w	r3, r3, #1
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d010      	beq.n	801bbe0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	8b5b      	ldrh	r3, [r3, #26]
 801bbc2:	f043 0302 	orr.w	r3, r3, #2
 801bbc6:	b29a      	uxth	r2, r3
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	f003 ffef 	bl	801fbb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	8b5b      	ldrh	r3, [r3, #26]
 801bbd6:	f023 0303 	bic.w	r3, r3, #3
 801bbda:	b29a      	uxth	r2, r3
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	8b5b      	ldrh	r3, [r3, #26]
 801bbe4:	f003 0308 	and.w	r3, r3, #8
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d009      	beq.n	801bc00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	8b5b      	ldrh	r3, [r3, #26]
 801bbf0:	f023 0308 	bic.w	r3, r3, #8
 801bbf4:	b29a      	uxth	r2, r3
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801bbfa:	6878      	ldr	r0, [r7, #4]
 801bbfc:	f7ff f93c 	bl	801ae78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	68db      	ldr	r3, [r3, #12]
 801bc04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d00a      	beq.n	801bc24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801bc0e:	4b0e      	ldr	r3, [pc, #56]	@ (801bc48 <tcp_fasttmr+0xc4>)
 801bc10:	2200      	movs	r2, #0
 801bc12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	f000 f819 	bl	801bc4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801bc1a:	4b0b      	ldr	r3, [pc, #44]	@ (801bc48 <tcp_fasttmr+0xc4>)
 801bc1c:	781b      	ldrb	r3, [r3, #0]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d000      	beq.n	801bc24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801bc22:	e7b8      	b.n	801bb96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801bc24:	683b      	ldr	r3, [r7, #0]
 801bc26:	607b      	str	r3, [r7, #4]
 801bc28:	e002      	b.n	801bc30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	68db      	ldr	r3, [r3, #12]
 801bc2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d1b3      	bne.n	801bb9e <tcp_fasttmr+0x1a>
    }
  }
}
 801bc36:	bf00      	nop
 801bc38:	bf00      	nop
 801bc3a:	3708      	adds	r7, #8
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}
 801bc40:	2400be7a 	.word	0x2400be7a
 801bc44:	2400be70 	.word	0x2400be70
 801bc48:	2400be78 	.word	0x2400be78

0801bc4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801bc4c:	b590      	push	{r4, r7, lr}
 801bc4e:	b085      	sub	sp, #20
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d109      	bne.n	801bc6e <tcp_process_refused_data+0x22>
 801bc5a:	4b37      	ldr	r3, [pc, #220]	@ (801bd38 <tcp_process_refused_data+0xec>)
 801bc5c:	f240 6209 	movw	r2, #1545	@ 0x609
 801bc60:	4936      	ldr	r1, [pc, #216]	@ (801bd3c <tcp_process_refused_data+0xf0>)
 801bc62:	4837      	ldr	r0, [pc, #220]	@ (801bd40 <tcp_process_refused_data+0xf4>)
 801bc64:	f009 fc06 	bl	8025474 <iprintf>
 801bc68:	f06f 030f 	mvn.w	r3, #15
 801bc6c:	e060      	b.n	801bd30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bc72:	7b5b      	ldrb	r3, [r3, #13]
 801bc74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bc7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2200      	movs	r2, #0
 801bc80:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d00b      	beq.n	801bca4 <tcp_process_refused_data+0x58>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	6918      	ldr	r0, [r3, #16]
 801bc96:	2300      	movs	r3, #0
 801bc98:	68ba      	ldr	r2, [r7, #8]
 801bc9a:	6879      	ldr	r1, [r7, #4]
 801bc9c:	47a0      	blx	r4
 801bc9e:	4603      	mov	r3, r0
 801bca0:	73fb      	strb	r3, [r7, #15]
 801bca2:	e007      	b.n	801bcb4 <tcp_process_refused_data+0x68>
 801bca4:	2300      	movs	r3, #0
 801bca6:	68ba      	ldr	r2, [r7, #8]
 801bca8:	6879      	ldr	r1, [r7, #4]
 801bcaa:	2000      	movs	r0, #0
 801bcac:	f000 f8a4 	bl	801bdf8 <tcp_recv_null>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801bcb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d12a      	bne.n	801bd12 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801bcbc:	7bbb      	ldrb	r3, [r7, #14]
 801bcbe:	f003 0320 	and.w	r3, r3, #32
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d033      	beq.n	801bd2e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801bcce:	d005      	beq.n	801bcdc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcd4:	3301      	adds	r3, #1
 801bcd6:	b29a      	uxth	r2, r3
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d00b      	beq.n	801bcfe <tcp_process_refused_data+0xb2>
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	6918      	ldr	r0, [r3, #16]
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	6879      	ldr	r1, [r7, #4]
 801bcf6:	47a0      	blx	r4
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	73fb      	strb	r3, [r7, #15]
 801bcfc:	e001      	b.n	801bd02 <tcp_process_refused_data+0xb6>
 801bcfe:	2300      	movs	r3, #0
 801bd00:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801bd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bd06:	f113 0f0d 	cmn.w	r3, #13
 801bd0a:	d110      	bne.n	801bd2e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801bd0c:	f06f 030c 	mvn.w	r3, #12
 801bd10:	e00e      	b.n	801bd30 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801bd12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bd16:	f113 0f0d 	cmn.w	r3, #13
 801bd1a:	d102      	bne.n	801bd22 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801bd1c:	f06f 030c 	mvn.w	r3, #12
 801bd20:	e006      	b.n	801bd30 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	68ba      	ldr	r2, [r7, #8]
 801bd26:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801bd28:	f06f 0304 	mvn.w	r3, #4
 801bd2c:	e000      	b.n	801bd30 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801bd2e:	2300      	movs	r3, #0
}
 801bd30:	4618      	mov	r0, r3
 801bd32:	3714      	adds	r7, #20
 801bd34:	46bd      	mov	sp, r7
 801bd36:	bd90      	pop	{r4, r7, pc}
 801bd38:	0802afb0 	.word	0x0802afb0
 801bd3c:	0802b4c0 	.word	0x0802b4c0
 801bd40:	0802aff4 	.word	0x0802aff4

0801bd44 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b084      	sub	sp, #16
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801bd4c:	e007      	b.n	801bd5e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801bd54:	6878      	ldr	r0, [r7, #4]
 801bd56:	f000 f80a 	bl	801bd6e <tcp_seg_free>
    seg = next;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d1f4      	bne.n	801bd4e <tcp_segs_free+0xa>
  }
}
 801bd64:	bf00      	nop
 801bd66:	bf00      	nop
 801bd68:	3710      	adds	r7, #16
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}

0801bd6e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801bd6e:	b580      	push	{r7, lr}
 801bd70:	b082      	sub	sp, #8
 801bd72:	af00      	add	r7, sp, #0
 801bd74:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d00c      	beq.n	801bd96 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	685b      	ldr	r3, [r3, #4]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d004      	beq.n	801bd8e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	685b      	ldr	r3, [r3, #4]
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7fe fc25 	bl	801a5d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bd8e:	6879      	ldr	r1, [r7, #4]
 801bd90:	2003      	movs	r0, #3
 801bd92:	f7fd fd4b 	bl	801982c <memp_free>
  }
}
 801bd96:	bf00      	nop
 801bd98:	3708      	adds	r7, #8
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	bd80      	pop	{r7, pc}
	...

0801bda0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b084      	sub	sp, #16
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d106      	bne.n	801bdbc <tcp_seg_copy+0x1c>
 801bdae:	4b0f      	ldr	r3, [pc, #60]	@ (801bdec <tcp_seg_copy+0x4c>)
 801bdb0:	f240 6282 	movw	r2, #1666	@ 0x682
 801bdb4:	490e      	ldr	r1, [pc, #56]	@ (801bdf0 <tcp_seg_copy+0x50>)
 801bdb6:	480f      	ldr	r0, [pc, #60]	@ (801bdf4 <tcp_seg_copy+0x54>)
 801bdb8:	f009 fb5c 	bl	8025474 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bdbc:	2003      	movs	r0, #3
 801bdbe:	f7fd fcbf 	bl	8019740 <memp_malloc>
 801bdc2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d101      	bne.n	801bdce <tcp_seg_copy+0x2e>
    return NULL;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	e00a      	b.n	801bde4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bdce:	2210      	movs	r2, #16
 801bdd0:	6879      	ldr	r1, [r7, #4]
 801bdd2:	68f8      	ldr	r0, [r7, #12]
 801bdd4:	f009 fcdb 	bl	802578e <memcpy>
  pbuf_ref(cseg->p);
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	685b      	ldr	r3, [r3, #4]
 801bddc:	4618      	mov	r0, r3
 801bdde:	f7fe fca1 	bl	801a724 <pbuf_ref>
  return cseg;
 801bde2:	68fb      	ldr	r3, [r7, #12]
}
 801bde4:	4618      	mov	r0, r3
 801bde6:	3710      	adds	r7, #16
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	0802afb0 	.word	0x0802afb0
 801bdf0:	0802b504 	.word	0x0802b504
 801bdf4:	0802aff4 	.word	0x0802aff4

0801bdf8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801bdf8:	b580      	push	{r7, lr}
 801bdfa:	b084      	sub	sp, #16
 801bdfc:	af00      	add	r7, sp, #0
 801bdfe:	60f8      	str	r0, [r7, #12]
 801be00:	60b9      	str	r1, [r7, #8]
 801be02:	607a      	str	r2, [r7, #4]
 801be04:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801be06:	68bb      	ldr	r3, [r7, #8]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d109      	bne.n	801be20 <tcp_recv_null+0x28>
 801be0c:	4b12      	ldr	r3, [pc, #72]	@ (801be58 <tcp_recv_null+0x60>)
 801be0e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801be12:	4912      	ldr	r1, [pc, #72]	@ (801be5c <tcp_recv_null+0x64>)
 801be14:	4812      	ldr	r0, [pc, #72]	@ (801be60 <tcp_recv_null+0x68>)
 801be16:	f009 fb2d 	bl	8025474 <iprintf>
 801be1a:	f06f 030f 	mvn.w	r3, #15
 801be1e:	e016      	b.n	801be4e <tcp_recv_null+0x56>

  if (p != NULL) {
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d009      	beq.n	801be3a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	891b      	ldrh	r3, [r3, #8]
 801be2a:	4619      	mov	r1, r3
 801be2c:	68b8      	ldr	r0, [r7, #8]
 801be2e:	f7ff fad1 	bl	801b3d4 <tcp_recved>
    pbuf_free(p);
 801be32:	6878      	ldr	r0, [r7, #4]
 801be34:	f7fe fbd0 	bl	801a5d8 <pbuf_free>
 801be38:	e008      	b.n	801be4c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801be3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d104      	bne.n	801be4c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801be42:	68b8      	ldr	r0, [r7, #8]
 801be44:	f7ff f882 	bl	801af4c <tcp_close>
 801be48:	4603      	mov	r3, r0
 801be4a:	e000      	b.n	801be4e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801be4c:	2300      	movs	r3, #0
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3710      	adds	r7, #16
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}
 801be56:	bf00      	nop
 801be58:	0802afb0 	.word	0x0802afb0
 801be5c:	0802b520 	.word	0x0802b520
 801be60:	0802aff4 	.word	0x0802aff4

0801be64 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b086      	sub	sp, #24
 801be68:	af00      	add	r7, sp, #0
 801be6a:	4603      	mov	r3, r0
 801be6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801be6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be72:	2b00      	cmp	r3, #0
 801be74:	db01      	blt.n	801be7a <tcp_kill_prio+0x16>
 801be76:	79fb      	ldrb	r3, [r7, #7]
 801be78:	e000      	b.n	801be7c <tcp_kill_prio+0x18>
 801be7a:	237f      	movs	r3, #127	@ 0x7f
 801be7c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801be7e:	7afb      	ldrb	r3, [r7, #11]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d034      	beq.n	801beee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801be84:	7afb      	ldrb	r3, [r7, #11]
 801be86:	3b01      	subs	r3, #1
 801be88:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801be8a:	2300      	movs	r3, #0
 801be8c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801be8e:	2300      	movs	r3, #0
 801be90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801be92:	4b19      	ldr	r3, [pc, #100]	@ (801bef8 <tcp_kill_prio+0x94>)
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	617b      	str	r3, [r7, #20]
 801be98:	e01f      	b.n	801beda <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801be9a:	697b      	ldr	r3, [r7, #20]
 801be9c:	7d5b      	ldrb	r3, [r3, #21]
 801be9e:	7afa      	ldrb	r2, [r7, #11]
 801bea0:	429a      	cmp	r2, r3
 801bea2:	d80c      	bhi.n	801bebe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801bea8:	7afa      	ldrb	r2, [r7, #11]
 801beaa:	429a      	cmp	r2, r3
 801beac:	d112      	bne.n	801bed4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801beae:	4b13      	ldr	r3, [pc, #76]	@ (801befc <tcp_kill_prio+0x98>)
 801beb0:	681a      	ldr	r2, [r3, #0]
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	6a1b      	ldr	r3, [r3, #32]
 801beb6:	1ad3      	subs	r3, r2, r3
 801beb8:	68fa      	ldr	r2, [r7, #12]
 801beba:	429a      	cmp	r2, r3
 801bebc:	d80a      	bhi.n	801bed4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801bebe:	4b0f      	ldr	r3, [pc, #60]	@ (801befc <tcp_kill_prio+0x98>)
 801bec0:	681a      	ldr	r2, [r3, #0]
 801bec2:	697b      	ldr	r3, [r7, #20]
 801bec4:	6a1b      	ldr	r3, [r3, #32]
 801bec6:	1ad3      	subs	r3, r2, r3
 801bec8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801beca:	697b      	ldr	r3, [r7, #20]
 801becc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801bece:	697b      	ldr	r3, [r7, #20]
 801bed0:	7d5b      	ldrb	r3, [r3, #21]
 801bed2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	68db      	ldr	r3, [r3, #12]
 801bed8:	617b      	str	r3, [r7, #20]
 801beda:	697b      	ldr	r3, [r7, #20]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d1dc      	bne.n	801be9a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d004      	beq.n	801bef0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bee6:	6938      	ldr	r0, [r7, #16]
 801bee8:	f7ff f976 	bl	801b1d8 <tcp_abort>
 801beec:	e000      	b.n	801bef0 <tcp_kill_prio+0x8c>
    return;
 801beee:	bf00      	nop
  }
}
 801bef0:	3718      	adds	r7, #24
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}
 801bef6:	bf00      	nop
 801bef8:	2400be70 	.word	0x2400be70
 801befc:	2400be64 	.word	0x2400be64

0801bf00 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b086      	sub	sp, #24
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	4603      	mov	r3, r0
 801bf08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bf0a:	79fb      	ldrb	r3, [r7, #7]
 801bf0c:	2b08      	cmp	r3, #8
 801bf0e:	d009      	beq.n	801bf24 <tcp_kill_state+0x24>
 801bf10:	79fb      	ldrb	r3, [r7, #7]
 801bf12:	2b09      	cmp	r3, #9
 801bf14:	d006      	beq.n	801bf24 <tcp_kill_state+0x24>
 801bf16:	4b1a      	ldr	r3, [pc, #104]	@ (801bf80 <tcp_kill_state+0x80>)
 801bf18:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801bf1c:	4919      	ldr	r1, [pc, #100]	@ (801bf84 <tcp_kill_state+0x84>)
 801bf1e:	481a      	ldr	r0, [pc, #104]	@ (801bf88 <tcp_kill_state+0x88>)
 801bf20:	f009 faa8 	bl	8025474 <iprintf>

  inactivity = 0;
 801bf24:	2300      	movs	r3, #0
 801bf26:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf2c:	4b17      	ldr	r3, [pc, #92]	@ (801bf8c <tcp_kill_state+0x8c>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	617b      	str	r3, [r7, #20]
 801bf32:	e017      	b.n	801bf64 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bf34:	697b      	ldr	r3, [r7, #20]
 801bf36:	7d1b      	ldrb	r3, [r3, #20]
 801bf38:	79fa      	ldrb	r2, [r7, #7]
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	d10f      	bne.n	801bf5e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bf3e:	4b14      	ldr	r3, [pc, #80]	@ (801bf90 <tcp_kill_state+0x90>)
 801bf40:	681a      	ldr	r2, [r3, #0]
 801bf42:	697b      	ldr	r3, [r7, #20]
 801bf44:	6a1b      	ldr	r3, [r3, #32]
 801bf46:	1ad3      	subs	r3, r2, r3
 801bf48:	68fa      	ldr	r2, [r7, #12]
 801bf4a:	429a      	cmp	r2, r3
 801bf4c:	d807      	bhi.n	801bf5e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bf4e:	4b10      	ldr	r3, [pc, #64]	@ (801bf90 <tcp_kill_state+0x90>)
 801bf50:	681a      	ldr	r2, [r3, #0]
 801bf52:	697b      	ldr	r3, [r7, #20]
 801bf54:	6a1b      	ldr	r3, [r3, #32]
 801bf56:	1ad3      	subs	r3, r2, r3
 801bf58:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bf5a:	697b      	ldr	r3, [r7, #20]
 801bf5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf5e:	697b      	ldr	r3, [r7, #20]
 801bf60:	68db      	ldr	r3, [r3, #12]
 801bf62:	617b      	str	r3, [r7, #20]
 801bf64:	697b      	ldr	r3, [r7, #20]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d1e4      	bne.n	801bf34 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bf6a:	693b      	ldr	r3, [r7, #16]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d003      	beq.n	801bf78 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bf70:	2100      	movs	r1, #0
 801bf72:	6938      	ldr	r0, [r7, #16]
 801bf74:	f7ff f872 	bl	801b05c <tcp_abandon>
  }
}
 801bf78:	bf00      	nop
 801bf7a:	3718      	adds	r7, #24
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}
 801bf80:	0802afb0 	.word	0x0802afb0
 801bf84:	0802b53c 	.word	0x0802b53c
 801bf88:	0802aff4 	.word	0x0802aff4
 801bf8c:	2400be70 	.word	0x2400be70
 801bf90:	2400be64 	.word	0x2400be64

0801bf94 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b084      	sub	sp, #16
 801bf98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801bf9a:	2300      	movs	r3, #0
 801bf9c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfa2:	4b12      	ldr	r3, [pc, #72]	@ (801bfec <tcp_kill_timewait+0x58>)
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	60fb      	str	r3, [r7, #12]
 801bfa8:	e012      	b.n	801bfd0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bfaa:	4b11      	ldr	r3, [pc, #68]	@ (801bff0 <tcp_kill_timewait+0x5c>)
 801bfac:	681a      	ldr	r2, [r3, #0]
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	6a1b      	ldr	r3, [r3, #32]
 801bfb2:	1ad3      	subs	r3, r2, r3
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	429a      	cmp	r2, r3
 801bfb8:	d807      	bhi.n	801bfca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801bfba:	4b0d      	ldr	r3, [pc, #52]	@ (801bff0 <tcp_kill_timewait+0x5c>)
 801bfbc:	681a      	ldr	r2, [r3, #0]
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	6a1b      	ldr	r3, [r3, #32]
 801bfc2:	1ad3      	subs	r3, r2, r3
 801bfc4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	68db      	ldr	r3, [r3, #12]
 801bfce:	60fb      	str	r3, [r7, #12]
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d1e9      	bne.n	801bfaa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d002      	beq.n	801bfe2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bfdc:	68b8      	ldr	r0, [r7, #8]
 801bfde:	f7ff f8fb 	bl	801b1d8 <tcp_abort>
  }
}
 801bfe2:	bf00      	nop
 801bfe4:	3710      	adds	r7, #16
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	bd80      	pop	{r7, pc}
 801bfea:	bf00      	nop
 801bfec:	2400be74 	.word	0x2400be74
 801bff0:	2400be64 	.word	0x2400be64

0801bff4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b082      	sub	sp, #8
 801bff8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801bffa:	4b10      	ldr	r3, [pc, #64]	@ (801c03c <tcp_handle_closepend+0x48>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801c000:	e014      	b.n	801c02c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	68db      	ldr	r3, [r3, #12]
 801c006:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	8b5b      	ldrh	r3, [r3, #26]
 801c00c:	f003 0308 	and.w	r3, r3, #8
 801c010:	2b00      	cmp	r3, #0
 801c012:	d009      	beq.n	801c028 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	8b5b      	ldrh	r3, [r3, #26]
 801c018:	f023 0308 	bic.w	r3, r3, #8
 801c01c:	b29a      	uxth	r2, r3
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801c022:	6878      	ldr	r0, [r7, #4]
 801c024:	f7fe ff28 	bl	801ae78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801c028:	683b      	ldr	r3, [r7, #0]
 801c02a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d1e7      	bne.n	801c002 <tcp_handle_closepend+0xe>
  }
}
 801c032:	bf00      	nop
 801c034:	bf00      	nop
 801c036:	3708      	adds	r7, #8
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}
 801c03c:	2400be70 	.word	0x2400be70

0801c040 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	4603      	mov	r3, r0
 801c048:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c04a:	2001      	movs	r0, #1
 801c04c:	f7fd fb78 	bl	8019740 <memp_malloc>
 801c050:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d126      	bne.n	801c0a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801c058:	f7ff ffcc 	bl	801bff4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801c05c:	f7ff ff9a 	bl	801bf94 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c060:	2001      	movs	r0, #1
 801c062:	f7fd fb6d 	bl	8019740 <memp_malloc>
 801c066:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d11b      	bne.n	801c0a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801c06e:	2009      	movs	r0, #9
 801c070:	f7ff ff46 	bl	801bf00 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c074:	2001      	movs	r0, #1
 801c076:	f7fd fb63 	bl	8019740 <memp_malloc>
 801c07a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d111      	bne.n	801c0a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801c082:	2008      	movs	r0, #8
 801c084:	f7ff ff3c 	bl	801bf00 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c088:	2001      	movs	r0, #1
 801c08a:	f7fd fb59 	bl	8019740 <memp_malloc>
 801c08e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d107      	bne.n	801c0a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801c096:	79fb      	ldrb	r3, [r7, #7]
 801c098:	4618      	mov	r0, r3
 801c09a:	f7ff fee3 	bl	801be64 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c09e:	2001      	movs	r0, #1
 801c0a0:	f7fd fb4e 	bl	8019740 <memp_malloc>
 801c0a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d03f      	beq.n	801c12c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c0ac:	229c      	movs	r2, #156	@ 0x9c
 801c0ae:	2100      	movs	r1, #0
 801c0b0:	68f8      	ldr	r0, [r7, #12]
 801c0b2:	f009 facb 	bl	802564c <memset>
    pcb->prio = prio;
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	79fa      	ldrb	r2, [r7, #7]
 801c0ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801c0c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801c0cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	22ff      	movs	r2, #255	@ 0xff
 801c0da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c0e2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	2206      	movs	r2, #6
 801c0e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	2206      	movs	r2, #6
 801c0f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c0f8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	2201      	movs	r2, #1
 801c0fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801c102:	4b0d      	ldr	r3, [pc, #52]	@ (801c138 <tcp_alloc+0xf8>)
 801c104:	681a      	ldr	r2, [r3, #0]
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801c10a:	4b0c      	ldr	r3, [pc, #48]	@ (801c13c <tcp_alloc+0xfc>)
 801c10c:	781a      	ldrb	r2, [r3, #0]
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801c118:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	4a08      	ldr	r2, [pc, #32]	@ (801c140 <tcp_alloc+0x100>)
 801c120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	4a07      	ldr	r2, [pc, #28]	@ (801c144 <tcp_alloc+0x104>)
 801c128:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801c12c:	68fb      	ldr	r3, [r7, #12]
}
 801c12e:	4618      	mov	r0, r3
 801c130:	3710      	adds	r7, #16
 801c132:	46bd      	mov	sp, r7
 801c134:	bd80      	pop	{r7, pc}
 801c136:	bf00      	nop
 801c138:	2400be64 	.word	0x2400be64
 801c13c:	2400be7a 	.word	0x2400be7a
 801c140:	0801bdf9 	.word	0x0801bdf9
 801c144:	006ddd00 	.word	0x006ddd00

0801c148 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801c148:	b580      	push	{r7, lr}
 801c14a:	b084      	sub	sp, #16
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	4603      	mov	r3, r0
 801c150:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c152:	2040      	movs	r0, #64	@ 0x40
 801c154:	f7ff ff74 	bl	801c040 <tcp_alloc>
 801c158:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c15a:	68fb      	ldr	r3, [r7, #12]
}
 801c15c:	4618      	mov	r0, r3
 801c15e:	3710      	adds	r7, #16
 801c160:	46bd      	mov	sp, r7
 801c162:	bd80      	pop	{r7, pc}

0801c164 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801c164:	b480      	push	{r7}
 801c166:	b083      	sub	sp, #12
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d002      	beq.n	801c17a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	683a      	ldr	r2, [r7, #0]
 801c178:	611a      	str	r2, [r3, #16]
  }
}
 801c17a:	bf00      	nop
 801c17c:	370c      	adds	r7, #12
 801c17e:	46bd      	mov	sp, r7
 801c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c184:	4770      	bx	lr
	...

0801c188 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b082      	sub	sp, #8
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d00e      	beq.n	801c1b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	7d1b      	ldrb	r3, [r3, #20]
 801c19c:	2b01      	cmp	r3, #1
 801c19e:	d106      	bne.n	801c1ae <tcp_recv+0x26>
 801c1a0:	4b07      	ldr	r3, [pc, #28]	@ (801c1c0 <tcp_recv+0x38>)
 801c1a2:	f240 72df 	movw	r2, #2015	@ 0x7df
 801c1a6:	4907      	ldr	r1, [pc, #28]	@ (801c1c4 <tcp_recv+0x3c>)
 801c1a8:	4807      	ldr	r0, [pc, #28]	@ (801c1c8 <tcp_recv+0x40>)
 801c1aa:	f009 f963 	bl	8025474 <iprintf>
    pcb->recv = recv;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	683a      	ldr	r2, [r7, #0]
 801c1b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801c1b6:	bf00      	nop
 801c1b8:	3708      	adds	r7, #8
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd80      	pop	{r7, pc}
 801c1be:	bf00      	nop
 801c1c0:	0802afb0 	.word	0x0802afb0
 801c1c4:	0802b54c 	.word	0x0802b54c
 801c1c8:	0802aff4 	.word	0x0802aff4

0801c1cc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
 801c1d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d00e      	beq.n	801c1fa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	7d1b      	ldrb	r3, [r3, #20]
 801c1e0:	2b01      	cmp	r3, #1
 801c1e2:	d106      	bne.n	801c1f2 <tcp_sent+0x26>
 801c1e4:	4b07      	ldr	r3, [pc, #28]	@ (801c204 <tcp_sent+0x38>)
 801c1e6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801c1ea:	4907      	ldr	r1, [pc, #28]	@ (801c208 <tcp_sent+0x3c>)
 801c1ec:	4807      	ldr	r0, [pc, #28]	@ (801c20c <tcp_sent+0x40>)
 801c1ee:	f009 f941 	bl	8025474 <iprintf>
    pcb->sent = sent;
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	683a      	ldr	r2, [r7, #0]
 801c1f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801c1fa:	bf00      	nop
 801c1fc:	3708      	adds	r7, #8
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd80      	pop	{r7, pc}
 801c202:	bf00      	nop
 801c204:	0802afb0 	.word	0x0802afb0
 801c208:	0802b574 	.word	0x0802b574
 801c20c:	0802aff4 	.word	0x0802aff4

0801c210 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b082      	sub	sp, #8
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
 801c218:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d00e      	beq.n	801c23e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	7d1b      	ldrb	r3, [r3, #20]
 801c224:	2b01      	cmp	r3, #1
 801c226:	d106      	bne.n	801c236 <tcp_err+0x26>
 801c228:	4b07      	ldr	r3, [pc, #28]	@ (801c248 <tcp_err+0x38>)
 801c22a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801c22e:	4907      	ldr	r1, [pc, #28]	@ (801c24c <tcp_err+0x3c>)
 801c230:	4807      	ldr	r0, [pc, #28]	@ (801c250 <tcp_err+0x40>)
 801c232:	f009 f91f 	bl	8025474 <iprintf>
    pcb->errf = err;
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	683a      	ldr	r2, [r7, #0]
 801c23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801c23e:	bf00      	nop
 801c240:	3708      	adds	r7, #8
 801c242:	46bd      	mov	sp, r7
 801c244:	bd80      	pop	{r7, pc}
 801c246:	bf00      	nop
 801c248:	0802afb0 	.word	0x0802afb0
 801c24c:	0802b59c 	.word	0x0802b59c
 801c250:	0802aff4 	.word	0x0802aff4

0801c254 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801c254:	b480      	push	{r7}
 801c256:	b085      	sub	sp, #20
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
 801c25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d008      	beq.n	801c276 <tcp_accept+0x22>
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	7d1b      	ldrb	r3, [r3, #20]
 801c268:	2b01      	cmp	r3, #1
 801c26a:	d104      	bne.n	801c276 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	683a      	ldr	r2, [r7, #0]
 801c274:	619a      	str	r2, [r3, #24]
  }
}
 801c276:	bf00      	nop
 801c278:	3714      	adds	r7, #20
 801c27a:	46bd      	mov	sp, r7
 801c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c280:	4770      	bx	lr
	...

0801c284 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b084      	sub	sp, #16
 801c288:	af00      	add	r7, sp, #0
 801c28a:	60f8      	str	r0, [r7, #12]
 801c28c:	60b9      	str	r1, [r7, #8]
 801c28e:	4613      	mov	r3, r2
 801c290:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d107      	bne.n	801c2a8 <tcp_poll+0x24>
 801c298:	4b0e      	ldr	r3, [pc, #56]	@ (801c2d4 <tcp_poll+0x50>)
 801c29a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801c29e:	490e      	ldr	r1, [pc, #56]	@ (801c2d8 <tcp_poll+0x54>)
 801c2a0:	480e      	ldr	r0, [pc, #56]	@ (801c2dc <tcp_poll+0x58>)
 801c2a2:	f009 f8e7 	bl	8025474 <iprintf>
 801c2a6:	e011      	b.n	801c2cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	7d1b      	ldrb	r3, [r3, #20]
 801c2ac:	2b01      	cmp	r3, #1
 801c2ae:	d106      	bne.n	801c2be <tcp_poll+0x3a>
 801c2b0:	4b08      	ldr	r3, [pc, #32]	@ (801c2d4 <tcp_poll+0x50>)
 801c2b2:	f640 023e 	movw	r2, #2110	@ 0x83e
 801c2b6:	490a      	ldr	r1, [pc, #40]	@ (801c2e0 <tcp_poll+0x5c>)
 801c2b8:	4808      	ldr	r0, [pc, #32]	@ (801c2dc <tcp_poll+0x58>)
 801c2ba:	f009 f8db 	bl	8025474 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	68ba      	ldr	r2, [r7, #8]
 801c2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	79fa      	ldrb	r2, [r7, #7]
 801c2ca:	775a      	strb	r2, [r3, #29]
}
 801c2cc:	3710      	adds	r7, #16
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd80      	pop	{r7, pc}
 801c2d2:	bf00      	nop
 801c2d4:	0802afb0 	.word	0x0802afb0
 801c2d8:	0802b5c4 	.word	0x0802b5c4
 801c2dc:	0802aff4 	.word	0x0802aff4
 801c2e0:	0802b5dc 	.word	0x0802b5dc

0801c2e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b082      	sub	sp, #8
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d107      	bne.n	801c302 <tcp_pcb_purge+0x1e>
 801c2f2:	4b21      	ldr	r3, [pc, #132]	@ (801c378 <tcp_pcb_purge+0x94>)
 801c2f4:	f640 0251 	movw	r2, #2129	@ 0x851
 801c2f8:	4920      	ldr	r1, [pc, #128]	@ (801c37c <tcp_pcb_purge+0x98>)
 801c2fa:	4821      	ldr	r0, [pc, #132]	@ (801c380 <tcp_pcb_purge+0x9c>)
 801c2fc:	f009 f8ba 	bl	8025474 <iprintf>
 801c300:	e037      	b.n	801c372 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	7d1b      	ldrb	r3, [r3, #20]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d033      	beq.n	801c372 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801c30e:	2b0a      	cmp	r3, #10
 801c310:	d02f      	beq.n	801c372 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801c316:	2b01      	cmp	r3, #1
 801c318:	d02b      	beq.n	801c372 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d007      	beq.n	801c332 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c326:	4618      	mov	r0, r3
 801c328:	f7fe f956 	bl	801a5d8 <pbuf_free>
      pcb->refused_data = NULL;
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	2200      	movs	r2, #0
 801c330:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c336:	2b00      	cmp	r3, #0
 801c338:	d002      	beq.n	801c340 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801c33a:	6878      	ldr	r0, [r7, #4]
 801c33c:	f000 f986 	bl	801c64c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c346:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7ff fcf9 	bl	801bd44 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c356:	4618      	mov	r0, r3
 801c358:	f7ff fcf4 	bl	801bd44 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2200      	movs	r2, #0
 801c360:	66da      	str	r2, [r3, #108]	@ 0x6c
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	2200      	movs	r2, #0
 801c36e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801c372:	3708      	adds	r7, #8
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}
 801c378:	0802afb0 	.word	0x0802afb0
 801c37c:	0802b5fc 	.word	0x0802b5fc
 801c380:	0802aff4 	.word	0x0802aff4

0801c384 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	b084      	sub	sp, #16
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]
 801c38c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d106      	bne.n	801c3a2 <tcp_pcb_remove+0x1e>
 801c394:	4b3e      	ldr	r3, [pc, #248]	@ (801c490 <tcp_pcb_remove+0x10c>)
 801c396:	f640 0283 	movw	r2, #2179	@ 0x883
 801c39a:	493e      	ldr	r1, [pc, #248]	@ (801c494 <tcp_pcb_remove+0x110>)
 801c39c:	483e      	ldr	r0, [pc, #248]	@ (801c498 <tcp_pcb_remove+0x114>)
 801c39e:	f009 f869 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d106      	bne.n	801c3b6 <tcp_pcb_remove+0x32>
 801c3a8:	4b39      	ldr	r3, [pc, #228]	@ (801c490 <tcp_pcb_remove+0x10c>)
 801c3aa:	f640 0284 	movw	r2, #2180	@ 0x884
 801c3ae:	493b      	ldr	r1, [pc, #236]	@ (801c49c <tcp_pcb_remove+0x118>)
 801c3b0:	4839      	ldr	r0, [pc, #228]	@ (801c498 <tcp_pcb_remove+0x114>)
 801c3b2:	f009 f85f 	bl	8025474 <iprintf>

  TCP_RMV(pcblist, pcb);
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	683a      	ldr	r2, [r7, #0]
 801c3bc:	429a      	cmp	r2, r3
 801c3be:	d105      	bne.n	801c3cc <tcp_pcb_remove+0x48>
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	68da      	ldr	r2, [r3, #12]
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	601a      	str	r2, [r3, #0]
 801c3ca:	e013      	b.n	801c3f4 <tcp_pcb_remove+0x70>
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	60fb      	str	r3, [r7, #12]
 801c3d2:	e00c      	b.n	801c3ee <tcp_pcb_remove+0x6a>
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	68db      	ldr	r3, [r3, #12]
 801c3d8:	683a      	ldr	r2, [r7, #0]
 801c3da:	429a      	cmp	r2, r3
 801c3dc:	d104      	bne.n	801c3e8 <tcp_pcb_remove+0x64>
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	68da      	ldr	r2, [r3, #12]
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	60da      	str	r2, [r3, #12]
 801c3e6:	e005      	b.n	801c3f4 <tcp_pcb_remove+0x70>
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	68db      	ldr	r3, [r3, #12]
 801c3ec:	60fb      	str	r3, [r7, #12]
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d1ef      	bne.n	801c3d4 <tcp_pcb_remove+0x50>
 801c3f4:	683b      	ldr	r3, [r7, #0]
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801c3fa:	6838      	ldr	r0, [r7, #0]
 801c3fc:	f7ff ff72 	bl	801c2e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801c400:	683b      	ldr	r3, [r7, #0]
 801c402:	7d1b      	ldrb	r3, [r3, #20]
 801c404:	2b0a      	cmp	r3, #10
 801c406:	d013      	beq.n	801c430 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801c40c:	2b01      	cmp	r3, #1
 801c40e:	d00f      	beq.n	801c430 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801c410:	683b      	ldr	r3, [r7, #0]
 801c412:	8b5b      	ldrh	r3, [r3, #26]
 801c414:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d009      	beq.n	801c430 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801c41c:	683b      	ldr	r3, [r7, #0]
 801c41e:	8b5b      	ldrh	r3, [r3, #26]
 801c420:	f043 0302 	orr.w	r3, r3, #2
 801c424:	b29a      	uxth	r2, r3
 801c426:	683b      	ldr	r3, [r7, #0]
 801c428:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c42a:	6838      	ldr	r0, [r7, #0]
 801c42c:	f003 fbc0 	bl	801fbb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801c430:	683b      	ldr	r3, [r7, #0]
 801c432:	7d1b      	ldrb	r3, [r3, #20]
 801c434:	2b01      	cmp	r3, #1
 801c436:	d020      	beq.n	801c47a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c438:	683b      	ldr	r3, [r7, #0]
 801c43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d006      	beq.n	801c44e <tcp_pcb_remove+0xca>
 801c440:	4b13      	ldr	r3, [pc, #76]	@ (801c490 <tcp_pcb_remove+0x10c>)
 801c442:	f640 0293 	movw	r2, #2195	@ 0x893
 801c446:	4916      	ldr	r1, [pc, #88]	@ (801c4a0 <tcp_pcb_remove+0x11c>)
 801c448:	4813      	ldr	r0, [pc, #76]	@ (801c498 <tcp_pcb_remove+0x114>)
 801c44a:	f009 f813 	bl	8025474 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c452:	2b00      	cmp	r3, #0
 801c454:	d006      	beq.n	801c464 <tcp_pcb_remove+0xe0>
 801c456:	4b0e      	ldr	r3, [pc, #56]	@ (801c490 <tcp_pcb_remove+0x10c>)
 801c458:	f640 0294 	movw	r2, #2196	@ 0x894
 801c45c:	4911      	ldr	r1, [pc, #68]	@ (801c4a4 <tcp_pcb_remove+0x120>)
 801c45e:	480e      	ldr	r0, [pc, #56]	@ (801c498 <tcp_pcb_remove+0x114>)
 801c460:	f009 f808 	bl	8025474 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d006      	beq.n	801c47a <tcp_pcb_remove+0xf6>
 801c46c:	4b08      	ldr	r3, [pc, #32]	@ (801c490 <tcp_pcb_remove+0x10c>)
 801c46e:	f640 0296 	movw	r2, #2198	@ 0x896
 801c472:	490d      	ldr	r1, [pc, #52]	@ (801c4a8 <tcp_pcb_remove+0x124>)
 801c474:	4808      	ldr	r0, [pc, #32]	@ (801c498 <tcp_pcb_remove+0x114>)
 801c476:	f008 fffd 	bl	8025474 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	2200      	movs	r2, #0
 801c47e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c480:	683b      	ldr	r3, [r7, #0]
 801c482:	2200      	movs	r2, #0
 801c484:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c486:	bf00      	nop
 801c488:	3710      	adds	r7, #16
 801c48a:	46bd      	mov	sp, r7
 801c48c:	bd80      	pop	{r7, pc}
 801c48e:	bf00      	nop
 801c490:	0802afb0 	.word	0x0802afb0
 801c494:	0802b618 	.word	0x0802b618
 801c498:	0802aff4 	.word	0x0802aff4
 801c49c:	0802b634 	.word	0x0802b634
 801c4a0:	0802b654 	.word	0x0802b654
 801c4a4:	0802b66c 	.word	0x0802b66c
 801c4a8:	0802b688 	.word	0x0802b688

0801c4ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b082      	sub	sp, #8
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d106      	bne.n	801c4c8 <tcp_next_iss+0x1c>
 801c4ba:	4b0a      	ldr	r3, [pc, #40]	@ (801c4e4 <tcp_next_iss+0x38>)
 801c4bc:	f640 02af 	movw	r2, #2223	@ 0x8af
 801c4c0:	4909      	ldr	r1, [pc, #36]	@ (801c4e8 <tcp_next_iss+0x3c>)
 801c4c2:	480a      	ldr	r0, [pc, #40]	@ (801c4ec <tcp_next_iss+0x40>)
 801c4c4:	f008 ffd6 	bl	8025474 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c4c8:	4b09      	ldr	r3, [pc, #36]	@ (801c4f0 <tcp_next_iss+0x44>)
 801c4ca:	681a      	ldr	r2, [r3, #0]
 801c4cc:	4b09      	ldr	r3, [pc, #36]	@ (801c4f4 <tcp_next_iss+0x48>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	4413      	add	r3, r2
 801c4d2:	4a07      	ldr	r2, [pc, #28]	@ (801c4f0 <tcp_next_iss+0x44>)
 801c4d4:	6013      	str	r3, [r2, #0]
  return iss;
 801c4d6:	4b06      	ldr	r3, [pc, #24]	@ (801c4f0 <tcp_next_iss+0x44>)
 801c4d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c4da:	4618      	mov	r0, r3
 801c4dc:	3708      	adds	r7, #8
 801c4de:	46bd      	mov	sp, r7
 801c4e0:	bd80      	pop	{r7, pc}
 801c4e2:	bf00      	nop
 801c4e4:	0802afb0 	.word	0x0802afb0
 801c4e8:	0802b6a0 	.word	0x0802b6a0
 801c4ec:	0802aff4 	.word	0x0802aff4
 801c4f0:	24000210 	.word	0x24000210
 801c4f4:	2400be64 	.word	0x2400be64

0801c4f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b086      	sub	sp, #24
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	4603      	mov	r3, r0
 801c500:	60b9      	str	r1, [r7, #8]
 801c502:	607a      	str	r2, [r7, #4]
 801c504:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d106      	bne.n	801c51a <tcp_eff_send_mss_netif+0x22>
 801c50c:	4b14      	ldr	r3, [pc, #80]	@ (801c560 <tcp_eff_send_mss_netif+0x68>)
 801c50e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801c512:	4914      	ldr	r1, [pc, #80]	@ (801c564 <tcp_eff_send_mss_netif+0x6c>)
 801c514:	4814      	ldr	r0, [pc, #80]	@ (801c568 <tcp_eff_send_mss_netif+0x70>)
 801c516:	f008 ffad 	bl	8025474 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c51a:	68bb      	ldr	r3, [r7, #8]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d101      	bne.n	801c524 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c520:	89fb      	ldrh	r3, [r7, #14]
 801c522:	e019      	b.n	801c558 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c528:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c52a:	8afb      	ldrh	r3, [r7, #22]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d012      	beq.n	801c556 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c530:	2328      	movs	r3, #40	@ 0x28
 801c532:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c534:	8afa      	ldrh	r2, [r7, #22]
 801c536:	8abb      	ldrh	r3, [r7, #20]
 801c538:	429a      	cmp	r2, r3
 801c53a:	d904      	bls.n	801c546 <tcp_eff_send_mss_netif+0x4e>
 801c53c:	8afa      	ldrh	r2, [r7, #22]
 801c53e:	8abb      	ldrh	r3, [r7, #20]
 801c540:	1ad3      	subs	r3, r2, r3
 801c542:	b29b      	uxth	r3, r3
 801c544:	e000      	b.n	801c548 <tcp_eff_send_mss_netif+0x50>
 801c546:	2300      	movs	r3, #0
 801c548:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c54a:	8a7a      	ldrh	r2, [r7, #18]
 801c54c:	89fb      	ldrh	r3, [r7, #14]
 801c54e:	4293      	cmp	r3, r2
 801c550:	bf28      	it	cs
 801c552:	4613      	movcs	r3, r2
 801c554:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c556:	89fb      	ldrh	r3, [r7, #14]
}
 801c558:	4618      	mov	r0, r3
 801c55a:	3718      	adds	r7, #24
 801c55c:	46bd      	mov	sp, r7
 801c55e:	bd80      	pop	{r7, pc}
 801c560:	0802afb0 	.word	0x0802afb0
 801c564:	0802b6bc 	.word	0x0802b6bc
 801c568:	0802aff4 	.word	0x0802aff4

0801c56c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b084      	sub	sp, #16
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c576:	683b      	ldr	r3, [r7, #0]
 801c578:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d119      	bne.n	801c5b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c580:	4b10      	ldr	r3, [pc, #64]	@ (801c5c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c582:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801c586:	4910      	ldr	r1, [pc, #64]	@ (801c5c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c588:	4810      	ldr	r0, [pc, #64]	@ (801c5cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c58a:	f008 ff73 	bl	8025474 <iprintf>

  while (pcb != NULL) {
 801c58e:	e011      	b.n	801c5b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	681a      	ldr	r2, [r3, #0]
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	429a      	cmp	r2, r3
 801c59a:	d108      	bne.n	801c5ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	68db      	ldr	r3, [r3, #12]
 801c5a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c5a2:	68f8      	ldr	r0, [r7, #12]
 801c5a4:	f7fe fe18 	bl	801b1d8 <tcp_abort>
      pcb = next;
 801c5a8:	68bb      	ldr	r3, [r7, #8]
 801c5aa:	60fb      	str	r3, [r7, #12]
 801c5ac:	e002      	b.n	801c5b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	68db      	ldr	r3, [r3, #12]
 801c5b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d1ea      	bne.n	801c590 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c5ba:	bf00      	nop
 801c5bc:	bf00      	nop
 801c5be:	3710      	adds	r7, #16
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	0802afb0 	.word	0x0802afb0
 801c5c8:	0802b6e4 	.word	0x0802b6e4
 801c5cc:	0802aff4 	.word	0x0802aff4

0801c5d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c5d0:	b580      	push	{r7, lr}
 801c5d2:	b084      	sub	sp, #16
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
 801c5d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d02a      	beq.n	801c636 <tcp_netif_ip_addr_changed+0x66>
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d026      	beq.n	801c636 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c5e8:	4b15      	ldr	r3, [pc, #84]	@ (801c640 <tcp_netif_ip_addr_changed+0x70>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	4619      	mov	r1, r3
 801c5ee:	6878      	ldr	r0, [r7, #4]
 801c5f0:	f7ff ffbc 	bl	801c56c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c5f4:	4b13      	ldr	r3, [pc, #76]	@ (801c644 <tcp_netif_ip_addr_changed+0x74>)
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4619      	mov	r1, r3
 801c5fa:	6878      	ldr	r0, [r7, #4]
 801c5fc:	f7ff ffb6 	bl	801c56c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c600:	683b      	ldr	r3, [r7, #0]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d017      	beq.n	801c636 <tcp_netif_ip_addr_changed+0x66>
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d013      	beq.n	801c636 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c60e:	4b0e      	ldr	r3, [pc, #56]	@ (801c648 <tcp_netif_ip_addr_changed+0x78>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	60fb      	str	r3, [r7, #12]
 801c614:	e00c      	b.n	801c630 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	681a      	ldr	r2, [r3, #0]
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	429a      	cmp	r2, r3
 801c620:	d103      	bne.n	801c62a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c622:	683b      	ldr	r3, [r7, #0]
 801c624:	681a      	ldr	r2, [r3, #0]
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	68db      	ldr	r3, [r3, #12]
 801c62e:	60fb      	str	r3, [r7, #12]
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d1ef      	bne.n	801c616 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c636:	bf00      	nop
 801c638:	3710      	adds	r7, #16
 801c63a:	46bd      	mov	sp, r7
 801c63c:	bd80      	pop	{r7, pc}
 801c63e:	bf00      	nop
 801c640:	2400be70 	.word	0x2400be70
 801c644:	2400be68 	.word	0x2400be68
 801c648:	2400be6c 	.word	0x2400be6c

0801c64c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b082      	sub	sp, #8
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d007      	beq.n	801c66c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c660:	4618      	mov	r0, r3
 801c662:	f7ff fb6f 	bl	801bd44 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	2200      	movs	r2, #0
 801c66a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c66c:	bf00      	nop
 801c66e:	3708      	adds	r7, #8
 801c670:	46bd      	mov	sp, r7
 801c672:	bd80      	pop	{r7, pc}

0801c674 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c674:	b590      	push	{r4, r7, lr}
 801c676:	b08d      	sub	sp, #52	@ 0x34
 801c678:	af04      	add	r7, sp, #16
 801c67a:	6078      	str	r0, [r7, #4]
 801c67c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d105      	bne.n	801c690 <tcp_input+0x1c>
 801c684:	4b9b      	ldr	r3, [pc, #620]	@ (801c8f4 <tcp_input+0x280>)
 801c686:	2283      	movs	r2, #131	@ 0x83
 801c688:	499b      	ldr	r1, [pc, #620]	@ (801c8f8 <tcp_input+0x284>)
 801c68a:	489c      	ldr	r0, [pc, #624]	@ (801c8fc <tcp_input+0x288>)
 801c68c:	f008 fef2 	bl	8025474 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	685b      	ldr	r3, [r3, #4]
 801c694:	4a9a      	ldr	r2, [pc, #616]	@ (801c900 <tcp_input+0x28c>)
 801c696:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	895b      	ldrh	r3, [r3, #10]
 801c69c:	2b13      	cmp	r3, #19
 801c69e:	f240 83d1 	bls.w	801ce44 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c6a2:	4b98      	ldr	r3, [pc, #608]	@ (801c904 <tcp_input+0x290>)
 801c6a4:	695b      	ldr	r3, [r3, #20]
 801c6a6:	4a97      	ldr	r2, [pc, #604]	@ (801c904 <tcp_input+0x290>)
 801c6a8:	6812      	ldr	r2, [r2, #0]
 801c6aa:	4611      	mov	r1, r2
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f006 fbef 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	f040 83c7 	bne.w	801ce48 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c6ba:	4b92      	ldr	r3, [pc, #584]	@ (801c904 <tcp_input+0x290>)
 801c6bc:	695b      	ldr	r3, [r3, #20]
 801c6be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c6c2:	2be0      	cmp	r3, #224	@ 0xe0
 801c6c4:	f000 83c0 	beq.w	801ce48 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c6c8:	4b8d      	ldr	r3, [pc, #564]	@ (801c900 <tcp_input+0x28c>)
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	899b      	ldrh	r3, [r3, #12]
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7fc faa5 	bl	8018c20 <lwip_htons>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	0b1b      	lsrs	r3, r3, #12
 801c6da:	b29b      	uxth	r3, r3
 801c6dc:	b2db      	uxtb	r3, r3
 801c6de:	009b      	lsls	r3, r3, #2
 801c6e0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c6e2:	7cbb      	ldrb	r3, [r7, #18]
 801c6e4:	2b13      	cmp	r3, #19
 801c6e6:	f240 83b1 	bls.w	801ce4c <tcp_input+0x7d8>
 801c6ea:	7cbb      	ldrb	r3, [r7, #18]
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	891b      	ldrh	r3, [r3, #8]
 801c6f2:	429a      	cmp	r2, r3
 801c6f4:	f200 83aa 	bhi.w	801ce4c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c6f8:	7cbb      	ldrb	r3, [r7, #18]
 801c6fa:	b29b      	uxth	r3, r3
 801c6fc:	3b14      	subs	r3, #20
 801c6fe:	b29a      	uxth	r2, r3
 801c700:	4b81      	ldr	r3, [pc, #516]	@ (801c908 <tcp_input+0x294>)
 801c702:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c704:	4b81      	ldr	r3, [pc, #516]	@ (801c90c <tcp_input+0x298>)
 801c706:	2200      	movs	r2, #0
 801c708:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	895a      	ldrh	r2, [r3, #10]
 801c70e:	7cbb      	ldrb	r3, [r7, #18]
 801c710:	b29b      	uxth	r3, r3
 801c712:	429a      	cmp	r2, r3
 801c714:	d309      	bcc.n	801c72a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c716:	4b7c      	ldr	r3, [pc, #496]	@ (801c908 <tcp_input+0x294>)
 801c718:	881a      	ldrh	r2, [r3, #0]
 801c71a:	4b7d      	ldr	r3, [pc, #500]	@ (801c910 <tcp_input+0x29c>)
 801c71c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c71e:	7cbb      	ldrb	r3, [r7, #18]
 801c720:	4619      	mov	r1, r3
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	f7fd fea0 	bl	801a468 <pbuf_remove_header>
 801c728:	e04e      	b.n	801c7c8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d105      	bne.n	801c73e <tcp_input+0xca>
 801c732:	4b70      	ldr	r3, [pc, #448]	@ (801c8f4 <tcp_input+0x280>)
 801c734:	22c2      	movs	r2, #194	@ 0xc2
 801c736:	4977      	ldr	r1, [pc, #476]	@ (801c914 <tcp_input+0x2a0>)
 801c738:	4870      	ldr	r0, [pc, #448]	@ (801c8fc <tcp_input+0x288>)
 801c73a:	f008 fe9b 	bl	8025474 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c73e:	2114      	movs	r1, #20
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7fd fe91 	bl	801a468 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	895a      	ldrh	r2, [r3, #10]
 801c74a:	4b71      	ldr	r3, [pc, #452]	@ (801c910 <tcp_input+0x29c>)
 801c74c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c74e:	4b6e      	ldr	r3, [pc, #440]	@ (801c908 <tcp_input+0x294>)
 801c750:	881a      	ldrh	r2, [r3, #0]
 801c752:	4b6f      	ldr	r3, [pc, #444]	@ (801c910 <tcp_input+0x29c>)
 801c754:	881b      	ldrh	r3, [r3, #0]
 801c756:	1ad3      	subs	r3, r2, r3
 801c758:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c75a:	4b6d      	ldr	r3, [pc, #436]	@ (801c910 <tcp_input+0x29c>)
 801c75c:	881b      	ldrh	r3, [r3, #0]
 801c75e:	4619      	mov	r1, r3
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	f7fd fe81 	bl	801a468 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	895b      	ldrh	r3, [r3, #10]
 801c76c:	8a3a      	ldrh	r2, [r7, #16]
 801c76e:	429a      	cmp	r2, r3
 801c770:	f200 836e 	bhi.w	801ce50 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	685b      	ldr	r3, [r3, #4]
 801c77a:	4a64      	ldr	r2, [pc, #400]	@ (801c90c <tcp_input+0x298>)
 801c77c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	8a3a      	ldrh	r2, [r7, #16]
 801c784:	4611      	mov	r1, r2
 801c786:	4618      	mov	r0, r3
 801c788:	f7fd fe6e 	bl	801a468 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	891a      	ldrh	r2, [r3, #8]
 801c790:	8a3b      	ldrh	r3, [r7, #16]
 801c792:	1ad3      	subs	r3, r2, r3
 801c794:	b29a      	uxth	r2, r3
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	895b      	ldrh	r3, [r3, #10]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d005      	beq.n	801c7ae <tcp_input+0x13a>
 801c7a2:	4b54      	ldr	r3, [pc, #336]	@ (801c8f4 <tcp_input+0x280>)
 801c7a4:	22df      	movs	r2, #223	@ 0xdf
 801c7a6:	495c      	ldr	r1, [pc, #368]	@ (801c918 <tcp_input+0x2a4>)
 801c7a8:	4854      	ldr	r0, [pc, #336]	@ (801c8fc <tcp_input+0x288>)
 801c7aa:	f008 fe63 	bl	8025474 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	891a      	ldrh	r2, [r3, #8]
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	891b      	ldrh	r3, [r3, #8]
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	d005      	beq.n	801c7c8 <tcp_input+0x154>
 801c7bc:	4b4d      	ldr	r3, [pc, #308]	@ (801c8f4 <tcp_input+0x280>)
 801c7be:	22e0      	movs	r2, #224	@ 0xe0
 801c7c0:	4956      	ldr	r1, [pc, #344]	@ (801c91c <tcp_input+0x2a8>)
 801c7c2:	484e      	ldr	r0, [pc, #312]	@ (801c8fc <tcp_input+0x288>)
 801c7c4:	f008 fe56 	bl	8025474 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c7c8:	4b4d      	ldr	r3, [pc, #308]	@ (801c900 <tcp_input+0x28c>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	881b      	ldrh	r3, [r3, #0]
 801c7ce:	b29b      	uxth	r3, r3
 801c7d0:	4a4b      	ldr	r2, [pc, #300]	@ (801c900 <tcp_input+0x28c>)
 801c7d2:	6814      	ldr	r4, [r2, #0]
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f7fc fa23 	bl	8018c20 <lwip_htons>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c7de:	4b48      	ldr	r3, [pc, #288]	@ (801c900 <tcp_input+0x28c>)
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	885b      	ldrh	r3, [r3, #2]
 801c7e4:	b29b      	uxth	r3, r3
 801c7e6:	4a46      	ldr	r2, [pc, #280]	@ (801c900 <tcp_input+0x28c>)
 801c7e8:	6814      	ldr	r4, [r2, #0]
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	f7fc fa18 	bl	8018c20 <lwip_htons>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c7f4:	4b42      	ldr	r3, [pc, #264]	@ (801c900 <tcp_input+0x28c>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	4a41      	ldr	r2, [pc, #260]	@ (801c900 <tcp_input+0x28c>)
 801c7fc:	6814      	ldr	r4, [r2, #0]
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7fc fa23 	bl	8018c4a <lwip_htonl>
 801c804:	4603      	mov	r3, r0
 801c806:	6063      	str	r3, [r4, #4]
 801c808:	6863      	ldr	r3, [r4, #4]
 801c80a:	4a45      	ldr	r2, [pc, #276]	@ (801c920 <tcp_input+0x2ac>)
 801c80c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c80e:	4b3c      	ldr	r3, [pc, #240]	@ (801c900 <tcp_input+0x28c>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	689b      	ldr	r3, [r3, #8]
 801c814:	4a3a      	ldr	r2, [pc, #232]	@ (801c900 <tcp_input+0x28c>)
 801c816:	6814      	ldr	r4, [r2, #0]
 801c818:	4618      	mov	r0, r3
 801c81a:	f7fc fa16 	bl	8018c4a <lwip_htonl>
 801c81e:	4603      	mov	r3, r0
 801c820:	60a3      	str	r3, [r4, #8]
 801c822:	68a3      	ldr	r3, [r4, #8]
 801c824:	4a3f      	ldr	r2, [pc, #252]	@ (801c924 <tcp_input+0x2b0>)
 801c826:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c828:	4b35      	ldr	r3, [pc, #212]	@ (801c900 <tcp_input+0x28c>)
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	89db      	ldrh	r3, [r3, #14]
 801c82e:	b29b      	uxth	r3, r3
 801c830:	4a33      	ldr	r2, [pc, #204]	@ (801c900 <tcp_input+0x28c>)
 801c832:	6814      	ldr	r4, [r2, #0]
 801c834:	4618      	mov	r0, r3
 801c836:	f7fc f9f3 	bl	8018c20 <lwip_htons>
 801c83a:	4603      	mov	r3, r0
 801c83c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c83e:	4b30      	ldr	r3, [pc, #192]	@ (801c900 <tcp_input+0x28c>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	899b      	ldrh	r3, [r3, #12]
 801c844:	b29b      	uxth	r3, r3
 801c846:	4618      	mov	r0, r3
 801c848:	f7fc f9ea 	bl	8018c20 <lwip_htons>
 801c84c:	4603      	mov	r3, r0
 801c84e:	b2db      	uxtb	r3, r3
 801c850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c854:	b2da      	uxtb	r2, r3
 801c856:	4b34      	ldr	r3, [pc, #208]	@ (801c928 <tcp_input+0x2b4>)
 801c858:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	891a      	ldrh	r2, [r3, #8]
 801c85e:	4b33      	ldr	r3, [pc, #204]	@ (801c92c <tcp_input+0x2b8>)
 801c860:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c862:	4b31      	ldr	r3, [pc, #196]	@ (801c928 <tcp_input+0x2b4>)
 801c864:	781b      	ldrb	r3, [r3, #0]
 801c866:	f003 0303 	and.w	r3, r3, #3
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d00c      	beq.n	801c888 <tcp_input+0x214>
    tcplen++;
 801c86e:	4b2f      	ldr	r3, [pc, #188]	@ (801c92c <tcp_input+0x2b8>)
 801c870:	881b      	ldrh	r3, [r3, #0]
 801c872:	3301      	adds	r3, #1
 801c874:	b29a      	uxth	r2, r3
 801c876:	4b2d      	ldr	r3, [pc, #180]	@ (801c92c <tcp_input+0x2b8>)
 801c878:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	891a      	ldrh	r2, [r3, #8]
 801c87e:	4b2b      	ldr	r3, [pc, #172]	@ (801c92c <tcp_input+0x2b8>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	429a      	cmp	r2, r3
 801c884:	f200 82e6 	bhi.w	801ce54 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c888:	2300      	movs	r3, #0
 801c88a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c88c:	4b28      	ldr	r3, [pc, #160]	@ (801c930 <tcp_input+0x2bc>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	61fb      	str	r3, [r7, #28]
 801c892:	e09d      	b.n	801c9d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c894:	69fb      	ldr	r3, [r7, #28]
 801c896:	7d1b      	ldrb	r3, [r3, #20]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d105      	bne.n	801c8a8 <tcp_input+0x234>
 801c89c:	4b15      	ldr	r3, [pc, #84]	@ (801c8f4 <tcp_input+0x280>)
 801c89e:	22fb      	movs	r2, #251	@ 0xfb
 801c8a0:	4924      	ldr	r1, [pc, #144]	@ (801c934 <tcp_input+0x2c0>)
 801c8a2:	4816      	ldr	r0, [pc, #88]	@ (801c8fc <tcp_input+0x288>)
 801c8a4:	f008 fde6 	bl	8025474 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c8a8:	69fb      	ldr	r3, [r7, #28]
 801c8aa:	7d1b      	ldrb	r3, [r3, #20]
 801c8ac:	2b0a      	cmp	r3, #10
 801c8ae:	d105      	bne.n	801c8bc <tcp_input+0x248>
 801c8b0:	4b10      	ldr	r3, [pc, #64]	@ (801c8f4 <tcp_input+0x280>)
 801c8b2:	22fc      	movs	r2, #252	@ 0xfc
 801c8b4:	4920      	ldr	r1, [pc, #128]	@ (801c938 <tcp_input+0x2c4>)
 801c8b6:	4811      	ldr	r0, [pc, #68]	@ (801c8fc <tcp_input+0x288>)
 801c8b8:	f008 fddc 	bl	8025474 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c8bc:	69fb      	ldr	r3, [r7, #28]
 801c8be:	7d1b      	ldrb	r3, [r3, #20]
 801c8c0:	2b01      	cmp	r3, #1
 801c8c2:	d105      	bne.n	801c8d0 <tcp_input+0x25c>
 801c8c4:	4b0b      	ldr	r3, [pc, #44]	@ (801c8f4 <tcp_input+0x280>)
 801c8c6:	22fd      	movs	r2, #253	@ 0xfd
 801c8c8:	491c      	ldr	r1, [pc, #112]	@ (801c93c <tcp_input+0x2c8>)
 801c8ca:	480c      	ldr	r0, [pc, #48]	@ (801c8fc <tcp_input+0x288>)
 801c8cc:	f008 fdd2 	bl	8025474 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c8d0:	69fb      	ldr	r3, [r7, #28]
 801c8d2:	7a1b      	ldrb	r3, [r3, #8]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d033      	beq.n	801c940 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	7a1a      	ldrb	r2, [r3, #8]
 801c8dc:	4b09      	ldr	r3, [pc, #36]	@ (801c904 <tcp_input+0x290>)
 801c8de:	685b      	ldr	r3, [r3, #4]
 801c8e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c8e4:	3301      	adds	r3, #1
 801c8e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d029      	beq.n	801c940 <tcp_input+0x2cc>
      prev = pcb;
 801c8ec:	69fb      	ldr	r3, [r7, #28]
 801c8ee:	61bb      	str	r3, [r7, #24]
      continue;
 801c8f0:	e06b      	b.n	801c9ca <tcp_input+0x356>
 801c8f2:	bf00      	nop
 801c8f4:	0802b718 	.word	0x0802b718
 801c8f8:	0802b74c 	.word	0x0802b74c
 801c8fc:	0802b764 	.word	0x0802b764
 801c900:	2400be8c 	.word	0x2400be8c
 801c904:	24008d64 	.word	0x24008d64
 801c908:	2400be90 	.word	0x2400be90
 801c90c:	2400be94 	.word	0x2400be94
 801c910:	2400be92 	.word	0x2400be92
 801c914:	0802b78c 	.word	0x0802b78c
 801c918:	0802b79c 	.word	0x0802b79c
 801c91c:	0802b7a8 	.word	0x0802b7a8
 801c920:	2400be9c 	.word	0x2400be9c
 801c924:	2400bea0 	.word	0x2400bea0
 801c928:	2400bea8 	.word	0x2400bea8
 801c92c:	2400bea6 	.word	0x2400bea6
 801c930:	2400be70 	.word	0x2400be70
 801c934:	0802b7c8 	.word	0x0802b7c8
 801c938:	0802b7f0 	.word	0x0802b7f0
 801c93c:	0802b81c 	.word	0x0802b81c
    }

    if (pcb->remote_port == tcphdr->src &&
 801c940:	69fb      	ldr	r3, [r7, #28]
 801c942:	8b1a      	ldrh	r2, [r3, #24]
 801c944:	4b72      	ldr	r3, [pc, #456]	@ (801cb10 <tcp_input+0x49c>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	881b      	ldrh	r3, [r3, #0]
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	429a      	cmp	r2, r3
 801c94e:	d13a      	bne.n	801c9c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	8ada      	ldrh	r2, [r3, #22]
 801c954:	4b6e      	ldr	r3, [pc, #440]	@ (801cb10 <tcp_input+0x49c>)
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	885b      	ldrh	r3, [r3, #2]
 801c95a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c95c:	429a      	cmp	r2, r3
 801c95e:	d132      	bne.n	801c9c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c960:	69fb      	ldr	r3, [r7, #28]
 801c962:	685a      	ldr	r2, [r3, #4]
 801c964:	4b6b      	ldr	r3, [pc, #428]	@ (801cb14 <tcp_input+0x4a0>)
 801c966:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c968:	429a      	cmp	r2, r3
 801c96a:	d12c      	bne.n	801c9c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c96c:	69fb      	ldr	r3, [r7, #28]
 801c96e:	681a      	ldr	r2, [r3, #0]
 801c970:	4b68      	ldr	r3, [pc, #416]	@ (801cb14 <tcp_input+0x4a0>)
 801c972:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c974:	429a      	cmp	r2, r3
 801c976:	d126      	bne.n	801c9c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c978:	69fb      	ldr	r3, [r7, #28]
 801c97a:	68db      	ldr	r3, [r3, #12]
 801c97c:	69fa      	ldr	r2, [r7, #28]
 801c97e:	429a      	cmp	r2, r3
 801c980:	d106      	bne.n	801c990 <tcp_input+0x31c>
 801c982:	4b65      	ldr	r3, [pc, #404]	@ (801cb18 <tcp_input+0x4a4>)
 801c984:	f240 120d 	movw	r2, #269	@ 0x10d
 801c988:	4964      	ldr	r1, [pc, #400]	@ (801cb1c <tcp_input+0x4a8>)
 801c98a:	4865      	ldr	r0, [pc, #404]	@ (801cb20 <tcp_input+0x4ac>)
 801c98c:	f008 fd72 	bl	8025474 <iprintf>
      if (prev != NULL) {
 801c990:	69bb      	ldr	r3, [r7, #24]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d00a      	beq.n	801c9ac <tcp_input+0x338>
        prev->next = pcb->next;
 801c996:	69fb      	ldr	r3, [r7, #28]
 801c998:	68da      	ldr	r2, [r3, #12]
 801c99a:	69bb      	ldr	r3, [r7, #24]
 801c99c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c99e:	4b61      	ldr	r3, [pc, #388]	@ (801cb24 <tcp_input+0x4b0>)
 801c9a0:	681a      	ldr	r2, [r3, #0]
 801c9a2:	69fb      	ldr	r3, [r7, #28]
 801c9a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c9a6:	4a5f      	ldr	r2, [pc, #380]	@ (801cb24 <tcp_input+0x4b0>)
 801c9a8:	69fb      	ldr	r3, [r7, #28]
 801c9aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	69fa      	ldr	r2, [r7, #28]
 801c9b2:	429a      	cmp	r2, r3
 801c9b4:	d111      	bne.n	801c9da <tcp_input+0x366>
 801c9b6:	4b58      	ldr	r3, [pc, #352]	@ (801cb18 <tcp_input+0x4a4>)
 801c9b8:	f240 1215 	movw	r2, #277	@ 0x115
 801c9bc:	495a      	ldr	r1, [pc, #360]	@ (801cb28 <tcp_input+0x4b4>)
 801c9be:	4858      	ldr	r0, [pc, #352]	@ (801cb20 <tcp_input+0x4ac>)
 801c9c0:	f008 fd58 	bl	8025474 <iprintf>
      break;
 801c9c4:	e009      	b.n	801c9da <tcp_input+0x366>
    }
    prev = pcb;
 801c9c6:	69fb      	ldr	r3, [r7, #28]
 801c9c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9ca:	69fb      	ldr	r3, [r7, #28]
 801c9cc:	68db      	ldr	r3, [r3, #12]
 801c9ce:	61fb      	str	r3, [r7, #28]
 801c9d0:	69fb      	ldr	r3, [r7, #28]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	f47f af5e 	bne.w	801c894 <tcp_input+0x220>
 801c9d8:	e000      	b.n	801c9dc <tcp_input+0x368>
      break;
 801c9da:	bf00      	nop
  }

  if (pcb == NULL) {
 801c9dc:	69fb      	ldr	r3, [r7, #28]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	f040 80aa 	bne.w	801cb38 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9e4:	4b51      	ldr	r3, [pc, #324]	@ (801cb2c <tcp_input+0x4b8>)
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	61fb      	str	r3, [r7, #28]
 801c9ea:	e03f      	b.n	801ca6c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c9ec:	69fb      	ldr	r3, [r7, #28]
 801c9ee:	7d1b      	ldrb	r3, [r3, #20]
 801c9f0:	2b0a      	cmp	r3, #10
 801c9f2:	d006      	beq.n	801ca02 <tcp_input+0x38e>
 801c9f4:	4b48      	ldr	r3, [pc, #288]	@ (801cb18 <tcp_input+0x4a4>)
 801c9f6:	f240 121f 	movw	r2, #287	@ 0x11f
 801c9fa:	494d      	ldr	r1, [pc, #308]	@ (801cb30 <tcp_input+0x4bc>)
 801c9fc:	4848      	ldr	r0, [pc, #288]	@ (801cb20 <tcp_input+0x4ac>)
 801c9fe:	f008 fd39 	bl	8025474 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	7a1b      	ldrb	r3, [r3, #8]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d009      	beq.n	801ca1e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca0a:	69fb      	ldr	r3, [r7, #28]
 801ca0c:	7a1a      	ldrb	r2, [r3, #8]
 801ca0e:	4b41      	ldr	r3, [pc, #260]	@ (801cb14 <tcp_input+0x4a0>)
 801ca10:	685b      	ldr	r3, [r3, #4]
 801ca12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ca16:	3301      	adds	r3, #1
 801ca18:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ca1a:	429a      	cmp	r2, r3
 801ca1c:	d122      	bne.n	801ca64 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801ca1e:	69fb      	ldr	r3, [r7, #28]
 801ca20:	8b1a      	ldrh	r2, [r3, #24]
 801ca22:	4b3b      	ldr	r3, [pc, #236]	@ (801cb10 <tcp_input+0x49c>)
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	881b      	ldrh	r3, [r3, #0]
 801ca28:	b29b      	uxth	r3, r3
 801ca2a:	429a      	cmp	r2, r3
 801ca2c:	d11b      	bne.n	801ca66 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801ca2e:	69fb      	ldr	r3, [r7, #28]
 801ca30:	8ada      	ldrh	r2, [r3, #22]
 801ca32:	4b37      	ldr	r3, [pc, #220]	@ (801cb10 <tcp_input+0x49c>)
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	885b      	ldrh	r3, [r3, #2]
 801ca38:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801ca3a:	429a      	cmp	r2, r3
 801ca3c:	d113      	bne.n	801ca66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ca3e:	69fb      	ldr	r3, [r7, #28]
 801ca40:	685a      	ldr	r2, [r3, #4]
 801ca42:	4b34      	ldr	r3, [pc, #208]	@ (801cb14 <tcp_input+0x4a0>)
 801ca44:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ca46:	429a      	cmp	r2, r3
 801ca48:	d10d      	bne.n	801ca66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ca4a:	69fb      	ldr	r3, [r7, #28]
 801ca4c:	681a      	ldr	r2, [r3, #0]
 801ca4e:	4b31      	ldr	r3, [pc, #196]	@ (801cb14 <tcp_input+0x4a0>)
 801ca50:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ca52:	429a      	cmp	r2, r3
 801ca54:	d107      	bne.n	801ca66 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801ca56:	69f8      	ldr	r0, [r7, #28]
 801ca58:	f000 fb56 	bl	801d108 <tcp_timewait_input>
        }
        pbuf_free(p);
 801ca5c:	6878      	ldr	r0, [r7, #4]
 801ca5e:	f7fd fdbb 	bl	801a5d8 <pbuf_free>
        return;
 801ca62:	e1fd      	b.n	801ce60 <tcp_input+0x7ec>
        continue;
 801ca64:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca66:	69fb      	ldr	r3, [r7, #28]
 801ca68:	68db      	ldr	r3, [r3, #12]
 801ca6a:	61fb      	str	r3, [r7, #28]
 801ca6c:	69fb      	ldr	r3, [r7, #28]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d1bc      	bne.n	801c9ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ca72:	2300      	movs	r3, #0
 801ca74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ca76:	4b2f      	ldr	r3, [pc, #188]	@ (801cb34 <tcp_input+0x4c0>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	617b      	str	r3, [r7, #20]
 801ca7c:	e02a      	b.n	801cad4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ca7e:	697b      	ldr	r3, [r7, #20]
 801ca80:	7a1b      	ldrb	r3, [r3, #8]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d00c      	beq.n	801caa0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca86:	697b      	ldr	r3, [r7, #20]
 801ca88:	7a1a      	ldrb	r2, [r3, #8]
 801ca8a:	4b22      	ldr	r3, [pc, #136]	@ (801cb14 <tcp_input+0x4a0>)
 801ca8c:	685b      	ldr	r3, [r3, #4]
 801ca8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ca92:	3301      	adds	r3, #1
 801ca94:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ca96:	429a      	cmp	r2, r3
 801ca98:	d002      	beq.n	801caa0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801ca9a:	697b      	ldr	r3, [r7, #20]
 801ca9c:	61bb      	str	r3, [r7, #24]
        continue;
 801ca9e:	e016      	b.n	801cace <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801caa0:	697b      	ldr	r3, [r7, #20]
 801caa2:	8ada      	ldrh	r2, [r3, #22]
 801caa4:	4b1a      	ldr	r3, [pc, #104]	@ (801cb10 <tcp_input+0x49c>)
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	885b      	ldrh	r3, [r3, #2]
 801caaa:	b29b      	uxth	r3, r3
 801caac:	429a      	cmp	r2, r3
 801caae:	d10c      	bne.n	801caca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	681a      	ldr	r2, [r3, #0]
 801cab4:	4b17      	ldr	r3, [pc, #92]	@ (801cb14 <tcp_input+0x4a0>)
 801cab6:	695b      	ldr	r3, [r3, #20]
 801cab8:	429a      	cmp	r2, r3
 801caba:	d00f      	beq.n	801cadc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801cabc:	697b      	ldr	r3, [r7, #20]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d00d      	beq.n	801cade <tcp_input+0x46a>
 801cac2:	697b      	ldr	r3, [r7, #20]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d009      	beq.n	801cade <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801caca:	697b      	ldr	r3, [r7, #20]
 801cacc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	617b      	str	r3, [r7, #20]
 801cad4:	697b      	ldr	r3, [r7, #20]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d1d1      	bne.n	801ca7e <tcp_input+0x40a>
 801cada:	e000      	b.n	801cade <tcp_input+0x46a>
            break;
 801cadc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d029      	beq.n	801cb38 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801cae4:	69bb      	ldr	r3, [r7, #24]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d00a      	beq.n	801cb00 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801caea:	697b      	ldr	r3, [r7, #20]
 801caec:	68da      	ldr	r2, [r3, #12]
 801caee:	69bb      	ldr	r3, [r7, #24]
 801caf0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801caf2:	4b10      	ldr	r3, [pc, #64]	@ (801cb34 <tcp_input+0x4c0>)
 801caf4:	681a      	ldr	r2, [r3, #0]
 801caf6:	697b      	ldr	r3, [r7, #20]
 801caf8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801cafa:	4a0e      	ldr	r2, [pc, #56]	@ (801cb34 <tcp_input+0x4c0>)
 801cafc:	697b      	ldr	r3, [r7, #20]
 801cafe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801cb00:	6978      	ldr	r0, [r7, #20]
 801cb02:	f000 fa03 	bl	801cf0c <tcp_listen_input>
      }
      pbuf_free(p);
 801cb06:	6878      	ldr	r0, [r7, #4]
 801cb08:	f7fd fd66 	bl	801a5d8 <pbuf_free>
      return;
 801cb0c:	e1a8      	b.n	801ce60 <tcp_input+0x7ec>
 801cb0e:	bf00      	nop
 801cb10:	2400be8c 	.word	0x2400be8c
 801cb14:	24008d64 	.word	0x24008d64
 801cb18:	0802b718 	.word	0x0802b718
 801cb1c:	0802b844 	.word	0x0802b844
 801cb20:	0802b764 	.word	0x0802b764
 801cb24:	2400be70 	.word	0x2400be70
 801cb28:	0802b870 	.word	0x0802b870
 801cb2c:	2400be74 	.word	0x2400be74
 801cb30:	0802b89c 	.word	0x0802b89c
 801cb34:	2400be6c 	.word	0x2400be6c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801cb38:	69fb      	ldr	r3, [r7, #28]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f000 8158 	beq.w	801cdf0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801cb40:	4b95      	ldr	r3, [pc, #596]	@ (801cd98 <tcp_input+0x724>)
 801cb42:	2200      	movs	r2, #0
 801cb44:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	891a      	ldrh	r2, [r3, #8]
 801cb4a:	4b93      	ldr	r3, [pc, #588]	@ (801cd98 <tcp_input+0x724>)
 801cb4c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801cb4e:	4a92      	ldr	r2, [pc, #584]	@ (801cd98 <tcp_input+0x724>)
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801cb54:	4b91      	ldr	r3, [pc, #580]	@ (801cd9c <tcp_input+0x728>)
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	4a8f      	ldr	r2, [pc, #572]	@ (801cd98 <tcp_input+0x724>)
 801cb5a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801cb5c:	4b90      	ldr	r3, [pc, #576]	@ (801cda0 <tcp_input+0x72c>)
 801cb5e:	2200      	movs	r2, #0
 801cb60:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801cb62:	4b90      	ldr	r3, [pc, #576]	@ (801cda4 <tcp_input+0x730>)
 801cb64:	2200      	movs	r2, #0
 801cb66:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801cb68:	4b8f      	ldr	r3, [pc, #572]	@ (801cda8 <tcp_input+0x734>)
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801cb6e:	4b8f      	ldr	r3, [pc, #572]	@ (801cdac <tcp_input+0x738>)
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	f003 0308 	and.w	r3, r3, #8
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d006      	beq.n	801cb88 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	7b5b      	ldrb	r3, [r3, #13]
 801cb7e:	f043 0301 	orr.w	r3, r3, #1
 801cb82:	b2da      	uxtb	r2, r3
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801cb88:	69fb      	ldr	r3, [r7, #28]
 801cb8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d017      	beq.n	801cbc0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cb90:	69f8      	ldr	r0, [r7, #28]
 801cb92:	f7ff f85b 	bl	801bc4c <tcp_process_refused_data>
 801cb96:	4603      	mov	r3, r0
 801cb98:	f113 0f0d 	cmn.w	r3, #13
 801cb9c:	d007      	beq.n	801cbae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cb9e:	69fb      	ldr	r3, [r7, #28]
 801cba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d00c      	beq.n	801cbc0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cba6:	4b82      	ldr	r3, [pc, #520]	@ (801cdb0 <tcp_input+0x73c>)
 801cba8:	881b      	ldrh	r3, [r3, #0]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d008      	beq.n	801cbc0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801cbae:	69fb      	ldr	r3, [r7, #28]
 801cbb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	f040 80e3 	bne.w	801cd7e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801cbb8:	69f8      	ldr	r0, [r7, #28]
 801cbba:	f003 fdff 	bl	80207bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801cbbe:	e0de      	b.n	801cd7e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801cbc0:	4a7c      	ldr	r2, [pc, #496]	@ (801cdb4 <tcp_input+0x740>)
 801cbc2:	69fb      	ldr	r3, [r7, #28]
 801cbc4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801cbc6:	69f8      	ldr	r0, [r7, #28]
 801cbc8:	f000 fb18 	bl	801d1fc <tcp_process>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801cbd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cbd4:	f113 0f0d 	cmn.w	r3, #13
 801cbd8:	f000 80d3 	beq.w	801cd82 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801cbdc:	4b71      	ldr	r3, [pc, #452]	@ (801cda4 <tcp_input+0x730>)
 801cbde:	781b      	ldrb	r3, [r3, #0]
 801cbe0:	f003 0308 	and.w	r3, r3, #8
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d015      	beq.n	801cc14 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801cbe8:	69fb      	ldr	r3, [r7, #28]
 801cbea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d008      	beq.n	801cc04 <tcp_input+0x590>
 801cbf2:	69fb      	ldr	r3, [r7, #28]
 801cbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cbf8:	69fa      	ldr	r2, [r7, #28]
 801cbfa:	6912      	ldr	r2, [r2, #16]
 801cbfc:	f06f 010d 	mvn.w	r1, #13
 801cc00:	4610      	mov	r0, r2
 801cc02:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cc04:	69f9      	ldr	r1, [r7, #28]
 801cc06:	486c      	ldr	r0, [pc, #432]	@ (801cdb8 <tcp_input+0x744>)
 801cc08:	f7ff fbbc 	bl	801c384 <tcp_pcb_remove>
        tcp_free(pcb);
 801cc0c:	69f8      	ldr	r0, [r7, #28]
 801cc0e:	f7fd ff9f 	bl	801ab50 <tcp_free>
 801cc12:	e0da      	b.n	801cdca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801cc14:	2300      	movs	r3, #0
 801cc16:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801cc18:	4b63      	ldr	r3, [pc, #396]	@ (801cda8 <tcp_input+0x734>)
 801cc1a:	881b      	ldrh	r3, [r3, #0]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d01d      	beq.n	801cc5c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801cc20:	4b61      	ldr	r3, [pc, #388]	@ (801cda8 <tcp_input+0x734>)
 801cc22:	881b      	ldrh	r3, [r3, #0]
 801cc24:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801cc26:	69fb      	ldr	r3, [r7, #28]
 801cc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d00a      	beq.n	801cc46 <tcp_input+0x5d2>
 801cc30:	69fb      	ldr	r3, [r7, #28]
 801cc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cc36:	69fa      	ldr	r2, [r7, #28]
 801cc38:	6910      	ldr	r0, [r2, #16]
 801cc3a:	89fa      	ldrh	r2, [r7, #14]
 801cc3c:	69f9      	ldr	r1, [r7, #28]
 801cc3e:	4798      	blx	r3
 801cc40:	4603      	mov	r3, r0
 801cc42:	74fb      	strb	r3, [r7, #19]
 801cc44:	e001      	b.n	801cc4a <tcp_input+0x5d6>
 801cc46:	2300      	movs	r3, #0
 801cc48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cc4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cc4e:	f113 0f0d 	cmn.w	r3, #13
 801cc52:	f000 8098 	beq.w	801cd86 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801cc56:	4b54      	ldr	r3, [pc, #336]	@ (801cda8 <tcp_input+0x734>)
 801cc58:	2200      	movs	r2, #0
 801cc5a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801cc5c:	69f8      	ldr	r0, [r7, #28]
 801cc5e:	f000 f915 	bl	801ce8c <tcp_input_delayed_close>
 801cc62:	4603      	mov	r3, r0
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	f040 8090 	bne.w	801cd8a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801cc6a:	4b4d      	ldr	r3, [pc, #308]	@ (801cda0 <tcp_input+0x72c>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d041      	beq.n	801ccf6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801cc72:	69fb      	ldr	r3, [r7, #28]
 801cc74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d006      	beq.n	801cc88 <tcp_input+0x614>
 801cc7a:	4b50      	ldr	r3, [pc, #320]	@ (801cdbc <tcp_input+0x748>)
 801cc7c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801cc80:	494f      	ldr	r1, [pc, #316]	@ (801cdc0 <tcp_input+0x74c>)
 801cc82:	4850      	ldr	r0, [pc, #320]	@ (801cdc4 <tcp_input+0x750>)
 801cc84:	f008 fbf6 	bl	8025474 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801cc88:	69fb      	ldr	r3, [r7, #28]
 801cc8a:	8b5b      	ldrh	r3, [r3, #26]
 801cc8c:	f003 0310 	and.w	r3, r3, #16
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d008      	beq.n	801cca6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801cc94:	4b42      	ldr	r3, [pc, #264]	@ (801cda0 <tcp_input+0x72c>)
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f7fd fc9d 	bl	801a5d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801cc9e:	69f8      	ldr	r0, [r7, #28]
 801cca0:	f7fe fa9a 	bl	801b1d8 <tcp_abort>
            goto aborted;
 801cca4:	e091      	b.n	801cdca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801cca6:	69fb      	ldr	r3, [r7, #28]
 801cca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d00c      	beq.n	801ccca <tcp_input+0x656>
 801ccb0:	69fb      	ldr	r3, [r7, #28]
 801ccb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801ccb6:	69fb      	ldr	r3, [r7, #28]
 801ccb8:	6918      	ldr	r0, [r3, #16]
 801ccba:	4b39      	ldr	r3, [pc, #228]	@ (801cda0 <tcp_input+0x72c>)
 801ccbc:	681a      	ldr	r2, [r3, #0]
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	69f9      	ldr	r1, [r7, #28]
 801ccc2:	47a0      	blx	r4
 801ccc4:	4603      	mov	r3, r0
 801ccc6:	74fb      	strb	r3, [r7, #19]
 801ccc8:	e008      	b.n	801ccdc <tcp_input+0x668>
 801ccca:	4b35      	ldr	r3, [pc, #212]	@ (801cda0 <tcp_input+0x72c>)
 801cccc:	681a      	ldr	r2, [r3, #0]
 801ccce:	2300      	movs	r3, #0
 801ccd0:	69f9      	ldr	r1, [r7, #28]
 801ccd2:	2000      	movs	r0, #0
 801ccd4:	f7ff f890 	bl	801bdf8 <tcp_recv_null>
 801ccd8:	4603      	mov	r3, r0
 801ccda:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ccdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cce0:	f113 0f0d 	cmn.w	r3, #13
 801cce4:	d053      	beq.n	801cd8e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801cce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d003      	beq.n	801ccf6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ccee:	4b2c      	ldr	r3, [pc, #176]	@ (801cda0 <tcp_input+0x72c>)
 801ccf0:	681a      	ldr	r2, [r3, #0]
 801ccf2:	69fb      	ldr	r3, [r7, #28]
 801ccf4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ccf6:	4b2b      	ldr	r3, [pc, #172]	@ (801cda4 <tcp_input+0x730>)
 801ccf8:	781b      	ldrb	r3, [r3, #0]
 801ccfa:	f003 0320 	and.w	r3, r3, #32
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d030      	beq.n	801cd64 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801cd02:	69fb      	ldr	r3, [r7, #28]
 801cd04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d009      	beq.n	801cd1e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801cd0a:	69fb      	ldr	r3, [r7, #28]
 801cd0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd0e:	7b5a      	ldrb	r2, [r3, #13]
 801cd10:	69fb      	ldr	r3, [r7, #28]
 801cd12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cd14:	f042 0220 	orr.w	r2, r2, #32
 801cd18:	b2d2      	uxtb	r2, r2
 801cd1a:	735a      	strb	r2, [r3, #13]
 801cd1c:	e022      	b.n	801cd64 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cd1e:	69fb      	ldr	r3, [r7, #28]
 801cd20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cd22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801cd26:	d005      	beq.n	801cd34 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801cd28:	69fb      	ldr	r3, [r7, #28]
 801cd2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cd2c:	3301      	adds	r3, #1
 801cd2e:	b29a      	uxth	r2, r3
 801cd30:	69fb      	ldr	r3, [r7, #28]
 801cd32:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801cd34:	69fb      	ldr	r3, [r7, #28]
 801cd36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d00b      	beq.n	801cd56 <tcp_input+0x6e2>
 801cd3e:	69fb      	ldr	r3, [r7, #28]
 801cd40:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cd44:	69fb      	ldr	r3, [r7, #28]
 801cd46:	6918      	ldr	r0, [r3, #16]
 801cd48:	2300      	movs	r3, #0
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	69f9      	ldr	r1, [r7, #28]
 801cd4e:	47a0      	blx	r4
 801cd50:	4603      	mov	r3, r0
 801cd52:	74fb      	strb	r3, [r7, #19]
 801cd54:	e001      	b.n	801cd5a <tcp_input+0x6e6>
 801cd56:	2300      	movs	r3, #0
 801cd58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cd5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd5e:	f113 0f0d 	cmn.w	r3, #13
 801cd62:	d016      	beq.n	801cd92 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801cd64:	4b13      	ldr	r3, [pc, #76]	@ (801cdb4 <tcp_input+0x740>)
 801cd66:	2200      	movs	r2, #0
 801cd68:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801cd6a:	69f8      	ldr	r0, [r7, #28]
 801cd6c:	f000 f88e 	bl	801ce8c <tcp_input_delayed_close>
 801cd70:	4603      	mov	r3, r0
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d128      	bne.n	801cdc8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801cd76:	69f8      	ldr	r0, [r7, #28]
 801cd78:	f002 ff1a 	bl	801fbb0 <tcp_output>
 801cd7c:	e025      	b.n	801cdca <tcp_input+0x756>
        goto aborted;
 801cd7e:	bf00      	nop
 801cd80:	e023      	b.n	801cdca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801cd82:	bf00      	nop
 801cd84:	e021      	b.n	801cdca <tcp_input+0x756>
              goto aborted;
 801cd86:	bf00      	nop
 801cd88:	e01f      	b.n	801cdca <tcp_input+0x756>
          goto aborted;
 801cd8a:	bf00      	nop
 801cd8c:	e01d      	b.n	801cdca <tcp_input+0x756>
            goto aborted;
 801cd8e:	bf00      	nop
 801cd90:	e01b      	b.n	801cdca <tcp_input+0x756>
              goto aborted;
 801cd92:	bf00      	nop
 801cd94:	e019      	b.n	801cdca <tcp_input+0x756>
 801cd96:	bf00      	nop
 801cd98:	2400be7c 	.word	0x2400be7c
 801cd9c:	2400be8c 	.word	0x2400be8c
 801cda0:	2400beac 	.word	0x2400beac
 801cda4:	2400bea9 	.word	0x2400bea9
 801cda8:	2400bea4 	.word	0x2400bea4
 801cdac:	2400bea8 	.word	0x2400bea8
 801cdb0:	2400bea6 	.word	0x2400bea6
 801cdb4:	2400beb0 	.word	0x2400beb0
 801cdb8:	2400be70 	.word	0x2400be70
 801cdbc:	0802b718 	.word	0x0802b718
 801cdc0:	0802b8cc 	.word	0x0802b8cc
 801cdc4:	0802b764 	.word	0x0802b764
          goto aborted;
 801cdc8:	bf00      	nop
    tcp_input_pcb = NULL;
 801cdca:	4b27      	ldr	r3, [pc, #156]	@ (801ce68 <tcp_input+0x7f4>)
 801cdcc:	2200      	movs	r2, #0
 801cdce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801cdd0:	4b26      	ldr	r3, [pc, #152]	@ (801ce6c <tcp_input+0x7f8>)
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801cdd6:	4b26      	ldr	r3, [pc, #152]	@ (801ce70 <tcp_input+0x7fc>)
 801cdd8:	685b      	ldr	r3, [r3, #4]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d03f      	beq.n	801ce5e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801cdde:	4b24      	ldr	r3, [pc, #144]	@ (801ce70 <tcp_input+0x7fc>)
 801cde0:	685b      	ldr	r3, [r3, #4]
 801cde2:	4618      	mov	r0, r3
 801cde4:	f7fd fbf8 	bl	801a5d8 <pbuf_free>
      inseg.p = NULL;
 801cde8:	4b21      	ldr	r3, [pc, #132]	@ (801ce70 <tcp_input+0x7fc>)
 801cdea:	2200      	movs	r2, #0
 801cdec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801cdee:	e036      	b.n	801ce5e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801cdf0:	4b20      	ldr	r3, [pc, #128]	@ (801ce74 <tcp_input+0x800>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	899b      	ldrh	r3, [r3, #12]
 801cdf6:	b29b      	uxth	r3, r3
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	f7fb ff11 	bl	8018c20 <lwip_htons>
 801cdfe:	4603      	mov	r3, r0
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	f003 0304 	and.w	r3, r3, #4
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d118      	bne.n	801ce3c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce0a:	4b1b      	ldr	r3, [pc, #108]	@ (801ce78 <tcp_input+0x804>)
 801ce0c:	6819      	ldr	r1, [r3, #0]
 801ce0e:	4b1b      	ldr	r3, [pc, #108]	@ (801ce7c <tcp_input+0x808>)
 801ce10:	881b      	ldrh	r3, [r3, #0]
 801ce12:	461a      	mov	r2, r3
 801ce14:	4b1a      	ldr	r3, [pc, #104]	@ (801ce80 <tcp_input+0x80c>)
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce1a:	4b16      	ldr	r3, [pc, #88]	@ (801ce74 <tcp_input+0x800>)
 801ce1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce1e:	885b      	ldrh	r3, [r3, #2]
 801ce20:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ce22:	4a14      	ldr	r2, [pc, #80]	@ (801ce74 <tcp_input+0x800>)
 801ce24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ce26:	8812      	ldrh	r2, [r2, #0]
 801ce28:	b292      	uxth	r2, r2
 801ce2a:	9202      	str	r2, [sp, #8]
 801ce2c:	9301      	str	r3, [sp, #4]
 801ce2e:	4b15      	ldr	r3, [pc, #84]	@ (801ce84 <tcp_input+0x810>)
 801ce30:	9300      	str	r3, [sp, #0]
 801ce32:	4b15      	ldr	r3, [pc, #84]	@ (801ce88 <tcp_input+0x814>)
 801ce34:	4602      	mov	r2, r0
 801ce36:	2000      	movs	r0, #0
 801ce38:	f003 fc6e 	bl	8020718 <tcp_rst>
    pbuf_free(p);
 801ce3c:	6878      	ldr	r0, [r7, #4]
 801ce3e:	f7fd fbcb 	bl	801a5d8 <pbuf_free>
  return;
 801ce42:	e00c      	b.n	801ce5e <tcp_input+0x7ea>
    goto dropped;
 801ce44:	bf00      	nop
 801ce46:	e006      	b.n	801ce56 <tcp_input+0x7e2>
    goto dropped;
 801ce48:	bf00      	nop
 801ce4a:	e004      	b.n	801ce56 <tcp_input+0x7e2>
    goto dropped;
 801ce4c:	bf00      	nop
 801ce4e:	e002      	b.n	801ce56 <tcp_input+0x7e2>
      goto dropped;
 801ce50:	bf00      	nop
 801ce52:	e000      	b.n	801ce56 <tcp_input+0x7e2>
      goto dropped;
 801ce54:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ce56:	6878      	ldr	r0, [r7, #4]
 801ce58:	f7fd fbbe 	bl	801a5d8 <pbuf_free>
 801ce5c:	e000      	b.n	801ce60 <tcp_input+0x7ec>
  return;
 801ce5e:	bf00      	nop
}
 801ce60:	3724      	adds	r7, #36	@ 0x24
 801ce62:	46bd      	mov	sp, r7
 801ce64:	bd90      	pop	{r4, r7, pc}
 801ce66:	bf00      	nop
 801ce68:	2400beb0 	.word	0x2400beb0
 801ce6c:	2400beac 	.word	0x2400beac
 801ce70:	2400be7c 	.word	0x2400be7c
 801ce74:	2400be8c 	.word	0x2400be8c
 801ce78:	2400bea0 	.word	0x2400bea0
 801ce7c:	2400bea6 	.word	0x2400bea6
 801ce80:	2400be9c 	.word	0x2400be9c
 801ce84:	24008d74 	.word	0x24008d74
 801ce88:	24008d78 	.word	0x24008d78

0801ce8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b082      	sub	sp, #8
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d106      	bne.n	801cea8 <tcp_input_delayed_close+0x1c>
 801ce9a:	4b17      	ldr	r3, [pc, #92]	@ (801cef8 <tcp_input_delayed_close+0x6c>)
 801ce9c:	f240 225a 	movw	r2, #602	@ 0x25a
 801cea0:	4916      	ldr	r1, [pc, #88]	@ (801cefc <tcp_input_delayed_close+0x70>)
 801cea2:	4817      	ldr	r0, [pc, #92]	@ (801cf00 <tcp_input_delayed_close+0x74>)
 801cea4:	f008 fae6 	bl	8025474 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801cea8:	4b16      	ldr	r3, [pc, #88]	@ (801cf04 <tcp_input_delayed_close+0x78>)
 801ceaa:	781b      	ldrb	r3, [r3, #0]
 801ceac:	f003 0310 	and.w	r3, r3, #16
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d01c      	beq.n	801ceee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	8b5b      	ldrh	r3, [r3, #26]
 801ceb8:	f003 0310 	and.w	r3, r3, #16
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d10d      	bne.n	801cedc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d008      	beq.n	801cedc <tcp_input_delayed_close+0x50>
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ced0:	687a      	ldr	r2, [r7, #4]
 801ced2:	6912      	ldr	r2, [r2, #16]
 801ced4:	f06f 010e 	mvn.w	r1, #14
 801ced8:	4610      	mov	r0, r2
 801ceda:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cedc:	6879      	ldr	r1, [r7, #4]
 801cede:	480a      	ldr	r0, [pc, #40]	@ (801cf08 <tcp_input_delayed_close+0x7c>)
 801cee0:	f7ff fa50 	bl	801c384 <tcp_pcb_remove>
    tcp_free(pcb);
 801cee4:	6878      	ldr	r0, [r7, #4]
 801cee6:	f7fd fe33 	bl	801ab50 <tcp_free>
    return 1;
 801ceea:	2301      	movs	r3, #1
 801ceec:	e000      	b.n	801cef0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ceee:	2300      	movs	r3, #0
}
 801cef0:	4618      	mov	r0, r3
 801cef2:	3708      	adds	r7, #8
 801cef4:	46bd      	mov	sp, r7
 801cef6:	bd80      	pop	{r7, pc}
 801cef8:	0802b718 	.word	0x0802b718
 801cefc:	0802b8e8 	.word	0x0802b8e8
 801cf00:	0802b764 	.word	0x0802b764
 801cf04:	2400bea9 	.word	0x2400bea9
 801cf08:	2400be70 	.word	0x2400be70

0801cf0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801cf0c:	b590      	push	{r4, r7, lr}
 801cf0e:	b08b      	sub	sp, #44	@ 0x2c
 801cf10:	af04      	add	r7, sp, #16
 801cf12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cf14:	4b6f      	ldr	r3, [pc, #444]	@ (801d0d4 <tcp_listen_input+0x1c8>)
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	f003 0304 	and.w	r3, r3, #4
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	f040 80d2 	bne.w	801d0c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d106      	bne.n	801cf36 <tcp_listen_input+0x2a>
 801cf28:	4b6b      	ldr	r3, [pc, #428]	@ (801d0d8 <tcp_listen_input+0x1cc>)
 801cf2a:	f240 2281 	movw	r2, #641	@ 0x281
 801cf2e:	496b      	ldr	r1, [pc, #428]	@ (801d0dc <tcp_listen_input+0x1d0>)
 801cf30:	486b      	ldr	r0, [pc, #428]	@ (801d0e0 <tcp_listen_input+0x1d4>)
 801cf32:	f008 fa9f 	bl	8025474 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cf36:	4b67      	ldr	r3, [pc, #412]	@ (801d0d4 <tcp_listen_input+0x1c8>)
 801cf38:	781b      	ldrb	r3, [r3, #0]
 801cf3a:	f003 0310 	and.w	r3, r3, #16
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d019      	beq.n	801cf76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf42:	4b68      	ldr	r3, [pc, #416]	@ (801d0e4 <tcp_listen_input+0x1d8>)
 801cf44:	6819      	ldr	r1, [r3, #0]
 801cf46:	4b68      	ldr	r3, [pc, #416]	@ (801d0e8 <tcp_listen_input+0x1dc>)
 801cf48:	881b      	ldrh	r3, [r3, #0]
 801cf4a:	461a      	mov	r2, r3
 801cf4c:	4b67      	ldr	r3, [pc, #412]	@ (801d0ec <tcp_listen_input+0x1e0>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf52:	4b67      	ldr	r3, [pc, #412]	@ (801d0f0 <tcp_listen_input+0x1e4>)
 801cf54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf56:	885b      	ldrh	r3, [r3, #2]
 801cf58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf5a:	4a65      	ldr	r2, [pc, #404]	@ (801d0f0 <tcp_listen_input+0x1e4>)
 801cf5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf5e:	8812      	ldrh	r2, [r2, #0]
 801cf60:	b292      	uxth	r2, r2
 801cf62:	9202      	str	r2, [sp, #8]
 801cf64:	9301      	str	r3, [sp, #4]
 801cf66:	4b63      	ldr	r3, [pc, #396]	@ (801d0f4 <tcp_listen_input+0x1e8>)
 801cf68:	9300      	str	r3, [sp, #0]
 801cf6a:	4b63      	ldr	r3, [pc, #396]	@ (801d0f8 <tcp_listen_input+0x1ec>)
 801cf6c:	4602      	mov	r2, r0
 801cf6e:	6878      	ldr	r0, [r7, #4]
 801cf70:	f003 fbd2 	bl	8020718 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cf74:	e0a9      	b.n	801d0ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801cf76:	4b57      	ldr	r3, [pc, #348]	@ (801d0d4 <tcp_listen_input+0x1c8>)
 801cf78:	781b      	ldrb	r3, [r3, #0]
 801cf7a:	f003 0302 	and.w	r3, r3, #2
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	f000 80a3 	beq.w	801d0ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	7d5b      	ldrb	r3, [r3, #21]
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ff f859 	bl	801c040 <tcp_alloc>
 801cf8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801cf90:	697b      	ldr	r3, [r7, #20]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d111      	bne.n	801cfba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	699b      	ldr	r3, [r3, #24]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d00a      	beq.n	801cfb4 <tcp_listen_input+0xa8>
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	699b      	ldr	r3, [r3, #24]
 801cfa2:	687a      	ldr	r2, [r7, #4]
 801cfa4:	6910      	ldr	r0, [r2, #16]
 801cfa6:	f04f 32ff 	mov.w	r2, #4294967295
 801cfaa:	2100      	movs	r1, #0
 801cfac:	4798      	blx	r3
 801cfae:	4603      	mov	r3, r0
 801cfb0:	73bb      	strb	r3, [r7, #14]
      return;
 801cfb2:	e08b      	b.n	801d0cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cfb4:	23f0      	movs	r3, #240	@ 0xf0
 801cfb6:	73bb      	strb	r3, [r7, #14]
      return;
 801cfb8:	e088      	b.n	801d0cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cfba:	4b50      	ldr	r3, [pc, #320]	@ (801d0fc <tcp_listen_input+0x1f0>)
 801cfbc:	695a      	ldr	r2, [r3, #20]
 801cfbe:	697b      	ldr	r3, [r7, #20]
 801cfc0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cfc2:	4b4e      	ldr	r3, [pc, #312]	@ (801d0fc <tcp_listen_input+0x1f0>)
 801cfc4:	691a      	ldr	r2, [r3, #16]
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	8ada      	ldrh	r2, [r3, #22]
 801cfce:	697b      	ldr	r3, [r7, #20]
 801cfd0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801cfd2:	4b47      	ldr	r3, [pc, #284]	@ (801d0f0 <tcp_listen_input+0x1e4>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	881b      	ldrh	r3, [r3, #0]
 801cfd8:	b29a      	uxth	r2, r3
 801cfda:	697b      	ldr	r3, [r7, #20]
 801cfdc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801cfde:	697b      	ldr	r3, [r7, #20]
 801cfe0:	2203      	movs	r2, #3
 801cfe2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801cfe4:	4b41      	ldr	r3, [pc, #260]	@ (801d0ec <tcp_listen_input+0x1e0>)
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	1c5a      	adds	r2, r3, #1
 801cfea:	697b      	ldr	r3, [r7, #20]
 801cfec:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cfee:	697b      	ldr	r3, [r7, #20]
 801cff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cff2:	697b      	ldr	r3, [r7, #20]
 801cff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801cff6:	6978      	ldr	r0, [r7, #20]
 801cff8:	f7ff fa58 	bl	801c4ac <tcp_next_iss>
 801cffc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801cffe:	697b      	ldr	r3, [r7, #20]
 801d000:	693a      	ldr	r2, [r7, #16]
 801d002:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801d004:	697b      	ldr	r3, [r7, #20]
 801d006:	693a      	ldr	r2, [r7, #16]
 801d008:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801d00a:	697b      	ldr	r3, [r7, #20]
 801d00c:	693a      	ldr	r2, [r7, #16]
 801d00e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801d010:	697b      	ldr	r3, [r7, #20]
 801d012:	693a      	ldr	r2, [r7, #16]
 801d014:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d016:	4b35      	ldr	r3, [pc, #212]	@ (801d0ec <tcp_listen_input+0x1e0>)
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	1e5a      	subs	r2, r3, #1
 801d01c:	697b      	ldr	r3, [r7, #20]
 801d01e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	691a      	ldr	r2, [r3, #16]
 801d024:	697b      	ldr	r3, [r7, #20]
 801d026:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801d028:	697b      	ldr	r3, [r7, #20]
 801d02a:	687a      	ldr	r2, [r7, #4]
 801d02c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	7a5b      	ldrb	r3, [r3, #9]
 801d032:	f003 030c 	and.w	r3, r3, #12
 801d036:	b2da      	uxtb	r2, r3
 801d038:	697b      	ldr	r3, [r7, #20]
 801d03a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	7a1a      	ldrb	r2, [r3, #8]
 801d040:	697b      	ldr	r3, [r7, #20]
 801d042:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801d044:	4b2e      	ldr	r3, [pc, #184]	@ (801d100 <tcp_listen_input+0x1f4>)
 801d046:	681a      	ldr	r2, [r3, #0]
 801d048:	697b      	ldr	r3, [r7, #20]
 801d04a:	60da      	str	r2, [r3, #12]
 801d04c:	4a2c      	ldr	r2, [pc, #176]	@ (801d100 <tcp_listen_input+0x1f4>)
 801d04e:	697b      	ldr	r3, [r7, #20]
 801d050:	6013      	str	r3, [r2, #0]
 801d052:	f003 fd23 	bl	8020a9c <tcp_timer_needed>
 801d056:	4b2b      	ldr	r3, [pc, #172]	@ (801d104 <tcp_listen_input+0x1f8>)
 801d058:	2201      	movs	r2, #1
 801d05a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801d05c:	6978      	ldr	r0, [r7, #20]
 801d05e:	f001 fd8b 	bl	801eb78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801d062:	4b23      	ldr	r3, [pc, #140]	@ (801d0f0 <tcp_listen_input+0x1e4>)
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	89db      	ldrh	r3, [r3, #14]
 801d068:	b29a      	uxth	r2, r3
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d070:	697b      	ldr	r3, [r7, #20]
 801d072:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d076:	697b      	ldr	r3, [r7, #20]
 801d078:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d07c:	697b      	ldr	r3, [r7, #20]
 801d07e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	3304      	adds	r3, #4
 801d084:	4618      	mov	r0, r3
 801d086:	f005 fc6d 	bl	8022964 <ip4_route>
 801d08a:	4601      	mov	r1, r0
 801d08c:	697b      	ldr	r3, [r7, #20]
 801d08e:	3304      	adds	r3, #4
 801d090:	461a      	mov	r2, r3
 801d092:	4620      	mov	r0, r4
 801d094:	f7ff fa30 	bl	801c4f8 <tcp_eff_send_mss_netif>
 801d098:	4603      	mov	r3, r0
 801d09a:	461a      	mov	r2, r3
 801d09c:	697b      	ldr	r3, [r7, #20]
 801d09e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d0a0:	2112      	movs	r1, #18
 801d0a2:	6978      	ldr	r0, [r7, #20]
 801d0a4:	f002 fc96 	bl	801f9d4 <tcp_enqueue_flags>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801d0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d004      	beq.n	801d0be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801d0b4:	2100      	movs	r1, #0
 801d0b6:	6978      	ldr	r0, [r7, #20]
 801d0b8:	f7fd ffd0 	bl	801b05c <tcp_abandon>
      return;
 801d0bc:	e006      	b.n	801d0cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801d0be:	6978      	ldr	r0, [r7, #20]
 801d0c0:	f002 fd76 	bl	801fbb0 <tcp_output>
  return;
 801d0c4:	e001      	b.n	801d0ca <tcp_listen_input+0x1be>
    return;
 801d0c6:	bf00      	nop
 801d0c8:	e000      	b.n	801d0cc <tcp_listen_input+0x1c0>
  return;
 801d0ca:	bf00      	nop
}
 801d0cc:	371c      	adds	r7, #28
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd90      	pop	{r4, r7, pc}
 801d0d2:	bf00      	nop
 801d0d4:	2400bea8 	.word	0x2400bea8
 801d0d8:	0802b718 	.word	0x0802b718
 801d0dc:	0802b910 	.word	0x0802b910
 801d0e0:	0802b764 	.word	0x0802b764
 801d0e4:	2400bea0 	.word	0x2400bea0
 801d0e8:	2400bea6 	.word	0x2400bea6
 801d0ec:	2400be9c 	.word	0x2400be9c
 801d0f0:	2400be8c 	.word	0x2400be8c
 801d0f4:	24008d74 	.word	0x24008d74
 801d0f8:	24008d78 	.word	0x24008d78
 801d0fc:	24008d64 	.word	0x24008d64
 801d100:	2400be70 	.word	0x2400be70
 801d104:	2400be78 	.word	0x2400be78

0801d108 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b086      	sub	sp, #24
 801d10c:	af04      	add	r7, sp, #16
 801d10e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801d110:	4b2f      	ldr	r3, [pc, #188]	@ (801d1d0 <tcp_timewait_input+0xc8>)
 801d112:	781b      	ldrb	r3, [r3, #0]
 801d114:	f003 0304 	and.w	r3, r3, #4
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d153      	bne.n	801d1c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d106      	bne.n	801d130 <tcp_timewait_input+0x28>
 801d122:	4b2c      	ldr	r3, [pc, #176]	@ (801d1d4 <tcp_timewait_input+0xcc>)
 801d124:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d128:	492b      	ldr	r1, [pc, #172]	@ (801d1d8 <tcp_timewait_input+0xd0>)
 801d12a:	482c      	ldr	r0, [pc, #176]	@ (801d1dc <tcp_timewait_input+0xd4>)
 801d12c:	f008 f9a2 	bl	8025474 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801d130:	4b27      	ldr	r3, [pc, #156]	@ (801d1d0 <tcp_timewait_input+0xc8>)
 801d132:	781b      	ldrb	r3, [r3, #0]
 801d134:	f003 0302 	and.w	r3, r3, #2
 801d138:	2b00      	cmp	r3, #0
 801d13a:	d02a      	beq.n	801d192 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d13c:	4b28      	ldr	r3, [pc, #160]	@ (801d1e0 <tcp_timewait_input+0xd8>)
 801d13e:	681a      	ldr	r2, [r3, #0]
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d144:	1ad3      	subs	r3, r2, r3
 801d146:	2b00      	cmp	r3, #0
 801d148:	db2d      	blt.n	801d1a6 <tcp_timewait_input+0x9e>
 801d14a:	4b25      	ldr	r3, [pc, #148]	@ (801d1e0 <tcp_timewait_input+0xd8>)
 801d14c:	681a      	ldr	r2, [r3, #0]
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d152:	6879      	ldr	r1, [r7, #4]
 801d154:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d156:	440b      	add	r3, r1
 801d158:	1ad3      	subs	r3, r2, r3
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	dc23      	bgt.n	801d1a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d15e:	4b21      	ldr	r3, [pc, #132]	@ (801d1e4 <tcp_timewait_input+0xdc>)
 801d160:	6819      	ldr	r1, [r3, #0]
 801d162:	4b21      	ldr	r3, [pc, #132]	@ (801d1e8 <tcp_timewait_input+0xe0>)
 801d164:	881b      	ldrh	r3, [r3, #0]
 801d166:	461a      	mov	r2, r3
 801d168:	4b1d      	ldr	r3, [pc, #116]	@ (801d1e0 <tcp_timewait_input+0xd8>)
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d16e:	4b1f      	ldr	r3, [pc, #124]	@ (801d1ec <tcp_timewait_input+0xe4>)
 801d170:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d172:	885b      	ldrh	r3, [r3, #2]
 801d174:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d176:	4a1d      	ldr	r2, [pc, #116]	@ (801d1ec <tcp_timewait_input+0xe4>)
 801d178:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d17a:	8812      	ldrh	r2, [r2, #0]
 801d17c:	b292      	uxth	r2, r2
 801d17e:	9202      	str	r2, [sp, #8]
 801d180:	9301      	str	r3, [sp, #4]
 801d182:	4b1b      	ldr	r3, [pc, #108]	@ (801d1f0 <tcp_timewait_input+0xe8>)
 801d184:	9300      	str	r3, [sp, #0]
 801d186:	4b1b      	ldr	r3, [pc, #108]	@ (801d1f4 <tcp_timewait_input+0xec>)
 801d188:	4602      	mov	r2, r0
 801d18a:	6878      	ldr	r0, [r7, #4]
 801d18c:	f003 fac4 	bl	8020718 <tcp_rst>
      return;
 801d190:	e01b      	b.n	801d1ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801d192:	4b0f      	ldr	r3, [pc, #60]	@ (801d1d0 <tcp_timewait_input+0xc8>)
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	f003 0301 	and.w	r3, r3, #1
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d003      	beq.n	801d1a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801d19e:	4b16      	ldr	r3, [pc, #88]	@ (801d1f8 <tcp_timewait_input+0xf0>)
 801d1a0:	681a      	ldr	r2, [r3, #0]
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801d1a6:	4b10      	ldr	r3, [pc, #64]	@ (801d1e8 <tcp_timewait_input+0xe0>)
 801d1a8:	881b      	ldrh	r3, [r3, #0]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d00c      	beq.n	801d1c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	8b5b      	ldrh	r3, [r3, #26]
 801d1b2:	f043 0302 	orr.w	r3, r3, #2
 801d1b6:	b29a      	uxth	r2, r3
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d1bc:	6878      	ldr	r0, [r7, #4]
 801d1be:	f002 fcf7 	bl	801fbb0 <tcp_output>
  }
  return;
 801d1c2:	e001      	b.n	801d1c8 <tcp_timewait_input+0xc0>
    return;
 801d1c4:	bf00      	nop
 801d1c6:	e000      	b.n	801d1ca <tcp_timewait_input+0xc2>
  return;
 801d1c8:	bf00      	nop
}
 801d1ca:	3708      	adds	r7, #8
 801d1cc:	46bd      	mov	sp, r7
 801d1ce:	bd80      	pop	{r7, pc}
 801d1d0:	2400bea8 	.word	0x2400bea8
 801d1d4:	0802b718 	.word	0x0802b718
 801d1d8:	0802b930 	.word	0x0802b930
 801d1dc:	0802b764 	.word	0x0802b764
 801d1e0:	2400be9c 	.word	0x2400be9c
 801d1e4:	2400bea0 	.word	0x2400bea0
 801d1e8:	2400bea6 	.word	0x2400bea6
 801d1ec:	2400be8c 	.word	0x2400be8c
 801d1f0:	24008d74 	.word	0x24008d74
 801d1f4:	24008d78 	.word	0x24008d78
 801d1f8:	2400be64 	.word	0x2400be64

0801d1fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801d1fc:	b590      	push	{r4, r7, lr}
 801d1fe:	b08d      	sub	sp, #52	@ 0x34
 801d200:	af04      	add	r7, sp, #16
 801d202:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801d204:	2300      	movs	r3, #0
 801d206:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801d208:	2300      	movs	r3, #0
 801d20a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d106      	bne.n	801d220 <tcp_process+0x24>
 801d212:	4b9d      	ldr	r3, [pc, #628]	@ (801d488 <tcp_process+0x28c>)
 801d214:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801d218:	499c      	ldr	r1, [pc, #624]	@ (801d48c <tcp_process+0x290>)
 801d21a:	489d      	ldr	r0, [pc, #628]	@ (801d490 <tcp_process+0x294>)
 801d21c:	f008 f92a 	bl	8025474 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801d220:	4b9c      	ldr	r3, [pc, #624]	@ (801d494 <tcp_process+0x298>)
 801d222:	781b      	ldrb	r3, [r3, #0]
 801d224:	f003 0304 	and.w	r3, r3, #4
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d04e      	beq.n	801d2ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	7d1b      	ldrb	r3, [r3, #20]
 801d230:	2b02      	cmp	r3, #2
 801d232:	d108      	bne.n	801d246 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d238:	4b97      	ldr	r3, [pc, #604]	@ (801d498 <tcp_process+0x29c>)
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	429a      	cmp	r2, r3
 801d23e:	d123      	bne.n	801d288 <tcp_process+0x8c>
        acceptable = 1;
 801d240:	2301      	movs	r3, #1
 801d242:	76fb      	strb	r3, [r7, #27]
 801d244:	e020      	b.n	801d288 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d24a:	4b94      	ldr	r3, [pc, #592]	@ (801d49c <tcp_process+0x2a0>)
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	429a      	cmp	r2, r3
 801d250:	d102      	bne.n	801d258 <tcp_process+0x5c>
        acceptable = 1;
 801d252:	2301      	movs	r3, #1
 801d254:	76fb      	strb	r3, [r7, #27]
 801d256:	e017      	b.n	801d288 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d258:	4b90      	ldr	r3, [pc, #576]	@ (801d49c <tcp_process+0x2a0>)
 801d25a:	681a      	ldr	r2, [r3, #0]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d260:	1ad3      	subs	r3, r2, r3
 801d262:	2b00      	cmp	r3, #0
 801d264:	db10      	blt.n	801d288 <tcp_process+0x8c>
 801d266:	4b8d      	ldr	r3, [pc, #564]	@ (801d49c <tcp_process+0x2a0>)
 801d268:	681a      	ldr	r2, [r3, #0]
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d26e:	6879      	ldr	r1, [r7, #4]
 801d270:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801d272:	440b      	add	r3, r1
 801d274:	1ad3      	subs	r3, r2, r3
 801d276:	2b00      	cmp	r3, #0
 801d278:	dc06      	bgt.n	801d288 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	8b5b      	ldrh	r3, [r3, #26]
 801d27e:	f043 0302 	orr.w	r3, r3, #2
 801d282:	b29a      	uxth	r2, r3
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801d288:	7efb      	ldrb	r3, [r7, #27]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d01b      	beq.n	801d2c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	7d1b      	ldrb	r3, [r3, #20]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d106      	bne.n	801d2a4 <tcp_process+0xa8>
 801d296:	4b7c      	ldr	r3, [pc, #496]	@ (801d488 <tcp_process+0x28c>)
 801d298:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801d29c:	4980      	ldr	r1, [pc, #512]	@ (801d4a0 <tcp_process+0x2a4>)
 801d29e:	487c      	ldr	r0, [pc, #496]	@ (801d490 <tcp_process+0x294>)
 801d2a0:	f008 f8e8 	bl	8025474 <iprintf>
      recv_flags |= TF_RESET;
 801d2a4:	4b7f      	ldr	r3, [pc, #508]	@ (801d4a4 <tcp_process+0x2a8>)
 801d2a6:	781b      	ldrb	r3, [r3, #0]
 801d2a8:	f043 0308 	orr.w	r3, r3, #8
 801d2ac:	b2da      	uxtb	r2, r3
 801d2ae:	4b7d      	ldr	r3, [pc, #500]	@ (801d4a4 <tcp_process+0x2a8>)
 801d2b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	8b5b      	ldrh	r3, [r3, #26]
 801d2b6:	f023 0301 	bic.w	r3, r3, #1
 801d2ba:	b29a      	uxth	r2, r3
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801d2c0:	f06f 030d 	mvn.w	r3, #13
 801d2c4:	e37a      	b.n	801d9bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801d2c6:	2300      	movs	r3, #0
 801d2c8:	e378      	b.n	801d9bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d2ca:	4b72      	ldr	r3, [pc, #456]	@ (801d494 <tcp_process+0x298>)
 801d2cc:	781b      	ldrb	r3, [r3, #0]
 801d2ce:	f003 0302 	and.w	r3, r3, #2
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d010      	beq.n	801d2f8 <tcp_process+0xfc>
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	7d1b      	ldrb	r3, [r3, #20]
 801d2da:	2b02      	cmp	r3, #2
 801d2dc:	d00c      	beq.n	801d2f8 <tcp_process+0xfc>
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	7d1b      	ldrb	r3, [r3, #20]
 801d2e2:	2b03      	cmp	r3, #3
 801d2e4:	d008      	beq.n	801d2f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	8b5b      	ldrh	r3, [r3, #26]
 801d2ea:	f043 0302 	orr.w	r3, r3, #2
 801d2ee:	b29a      	uxth	r2, r3
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	e361      	b.n	801d9bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	8b5b      	ldrh	r3, [r3, #26]
 801d2fc:	f003 0310 	and.w	r3, r3, #16
 801d300:	2b00      	cmp	r3, #0
 801d302:	d103      	bne.n	801d30c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801d304:	4b68      	ldr	r3, [pc, #416]	@ (801d4a8 <tcp_process+0x2ac>)
 801d306:	681a      	ldr	r2, [r3, #0]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	2200      	movs	r2, #0
 801d310:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2200      	movs	r2, #0
 801d318:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801d31c:	6878      	ldr	r0, [r7, #4]
 801d31e:	f001 fc2b 	bl	801eb78 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	7d1b      	ldrb	r3, [r3, #20]
 801d326:	3b02      	subs	r3, #2
 801d328:	2b07      	cmp	r3, #7
 801d32a:	f200 8337 	bhi.w	801d99c <tcp_process+0x7a0>
 801d32e:	a201      	add	r2, pc, #4	@ (adr r2, 801d334 <tcp_process+0x138>)
 801d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d334:	0801d355 	.word	0x0801d355
 801d338:	0801d585 	.word	0x0801d585
 801d33c:	0801d6fd 	.word	0x0801d6fd
 801d340:	0801d727 	.word	0x0801d727
 801d344:	0801d84b 	.word	0x0801d84b
 801d348:	0801d6fd 	.word	0x0801d6fd
 801d34c:	0801d8d7 	.word	0x0801d8d7
 801d350:	0801d967 	.word	0x0801d967
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d354:	4b4f      	ldr	r3, [pc, #316]	@ (801d494 <tcp_process+0x298>)
 801d356:	781b      	ldrb	r3, [r3, #0]
 801d358:	f003 0310 	and.w	r3, r3, #16
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	f000 80e4 	beq.w	801d52a <tcp_process+0x32e>
 801d362:	4b4c      	ldr	r3, [pc, #304]	@ (801d494 <tcp_process+0x298>)
 801d364:	781b      	ldrb	r3, [r3, #0]
 801d366:	f003 0302 	and.w	r3, r3, #2
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	f000 80dd 	beq.w	801d52a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d374:	1c5a      	adds	r2, r3, #1
 801d376:	4b48      	ldr	r3, [pc, #288]	@ (801d498 <tcp_process+0x29c>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	429a      	cmp	r2, r3
 801d37c:	f040 80d5 	bne.w	801d52a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801d380:	4b46      	ldr	r3, [pc, #280]	@ (801d49c <tcp_process+0x2a0>)
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	1c5a      	adds	r2, r3, #1
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801d392:	4b41      	ldr	r3, [pc, #260]	@ (801d498 <tcp_process+0x29c>)
 801d394:	681a      	ldr	r2, [r3, #0]
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801d39a:	4b44      	ldr	r3, [pc, #272]	@ (801d4ac <tcp_process+0x2b0>)
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	89db      	ldrh	r3, [r3, #14]
 801d3a0:	b29a      	uxth	r2, r3
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d3b4:	4b39      	ldr	r3, [pc, #228]	@ (801d49c <tcp_process+0x2a0>)
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	1e5a      	subs	r2, r3, #1
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	2204      	movs	r2, #4
 801d3c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	3304      	adds	r3, #4
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f005 fac9 	bl	8022964 <ip4_route>
 801d3d2:	4601      	mov	r1, r0
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	3304      	adds	r3, #4
 801d3d8:	461a      	mov	r2, r3
 801d3da:	4620      	mov	r0, r4
 801d3dc:	f7ff f88c 	bl	801c4f8 <tcp_eff_send_mss_netif>
 801d3e0:	4603      	mov	r3, r0
 801d3e2:	461a      	mov	r2, r3
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d3ec:	009a      	lsls	r2, r3, #2
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d3f2:	005b      	lsls	r3, r3, #1
 801d3f4:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d3f8:	428b      	cmp	r3, r1
 801d3fa:	bf38      	it	cc
 801d3fc:	460b      	movcc	r3, r1
 801d3fe:	429a      	cmp	r2, r3
 801d400:	d204      	bcs.n	801d40c <tcp_process+0x210>
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d406:	009b      	lsls	r3, r3, #2
 801d408:	b29b      	uxth	r3, r3
 801d40a:	e00d      	b.n	801d428 <tcp_process+0x22c>
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d410:	005b      	lsls	r3, r3, #1
 801d412:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d416:	4293      	cmp	r3, r2
 801d418:	d904      	bls.n	801d424 <tcp_process+0x228>
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d41e:	005b      	lsls	r3, r3, #1
 801d420:	b29b      	uxth	r3, r3
 801d422:	e001      	b.n	801d428 <tcp_process+0x22c>
 801d424:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d428:	687a      	ldr	r2, [r7, #4]
 801d42a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d434:	2b00      	cmp	r3, #0
 801d436:	d106      	bne.n	801d446 <tcp_process+0x24a>
 801d438:	4b13      	ldr	r3, [pc, #76]	@ (801d488 <tcp_process+0x28c>)
 801d43a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801d43e:	491c      	ldr	r1, [pc, #112]	@ (801d4b0 <tcp_process+0x2b4>)
 801d440:	4813      	ldr	r0, [pc, #76]	@ (801d490 <tcp_process+0x294>)
 801d442:	f008 f817 	bl	8025474 <iprintf>
        --pcb->snd_queuelen;
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d44c:	3b01      	subs	r3, #1
 801d44e:	b29a      	uxth	r2, r3
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d45a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d45c:	69fb      	ldr	r3, [r7, #28]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d12a      	bne.n	801d4b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d466:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d468:	69fb      	ldr	r3, [r7, #28]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d106      	bne.n	801d47c <tcp_process+0x280>
 801d46e:	4b06      	ldr	r3, [pc, #24]	@ (801d488 <tcp_process+0x28c>)
 801d470:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801d474:	490f      	ldr	r1, [pc, #60]	@ (801d4b4 <tcp_process+0x2b8>)
 801d476:	4806      	ldr	r0, [pc, #24]	@ (801d490 <tcp_process+0x294>)
 801d478:	f007 fffc 	bl	8025474 <iprintf>
          pcb->unsent = rseg->next;
 801d47c:	69fb      	ldr	r3, [r7, #28]
 801d47e:	681a      	ldr	r2, [r3, #0]
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	66da      	str	r2, [r3, #108]	@ 0x6c
 801d484:	e01c      	b.n	801d4c0 <tcp_process+0x2c4>
 801d486:	bf00      	nop
 801d488:	0802b718 	.word	0x0802b718
 801d48c:	0802b950 	.word	0x0802b950
 801d490:	0802b764 	.word	0x0802b764
 801d494:	2400bea8 	.word	0x2400bea8
 801d498:	2400bea0 	.word	0x2400bea0
 801d49c:	2400be9c 	.word	0x2400be9c
 801d4a0:	0802b96c 	.word	0x0802b96c
 801d4a4:	2400bea9 	.word	0x2400bea9
 801d4a8:	2400be64 	.word	0x2400be64
 801d4ac:	2400be8c 	.word	0x2400be8c
 801d4b0:	0802b98c 	.word	0x0802b98c
 801d4b4:	0802b9a4 	.word	0x0802b9a4
        } else {
          pcb->unacked = rseg->next;
 801d4b8:	69fb      	ldr	r3, [r7, #28]
 801d4ba:	681a      	ldr	r2, [r3, #0]
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801d4c0:	69f8      	ldr	r0, [r7, #28]
 801d4c2:	f7fe fc54 	bl	801bd6e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d104      	bne.n	801d4d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d4d4:	861a      	strh	r2, [r3, #48]	@ 0x30
 801d4d6:	e006      	b.n	801d4e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	2200      	movs	r2, #0
 801d4dc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d00a      	beq.n	801d506 <tcp_process+0x30a>
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d4f6:	687a      	ldr	r2, [r7, #4]
 801d4f8:	6910      	ldr	r0, [r2, #16]
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	6879      	ldr	r1, [r7, #4]
 801d4fe:	4798      	blx	r3
 801d500:	4603      	mov	r3, r0
 801d502:	76bb      	strb	r3, [r7, #26]
 801d504:	e001      	b.n	801d50a <tcp_process+0x30e>
 801d506:	2300      	movs	r3, #0
 801d508:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d50a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d50e:	f113 0f0d 	cmn.w	r3, #13
 801d512:	d102      	bne.n	801d51a <tcp_process+0x31e>
          return ERR_ABRT;
 801d514:	f06f 030c 	mvn.w	r3, #12
 801d518:	e250      	b.n	801d9bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	8b5b      	ldrh	r3, [r3, #26]
 801d51e:	f043 0302 	orr.w	r3, r3, #2
 801d522:	b29a      	uxth	r2, r3
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d528:	e23a      	b.n	801d9a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d52a:	4b98      	ldr	r3, [pc, #608]	@ (801d78c <tcp_process+0x590>)
 801d52c:	781b      	ldrb	r3, [r3, #0]
 801d52e:	f003 0310 	and.w	r3, r3, #16
 801d532:	2b00      	cmp	r3, #0
 801d534:	f000 8234 	beq.w	801d9a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d538:	4b95      	ldr	r3, [pc, #596]	@ (801d790 <tcp_process+0x594>)
 801d53a:	6819      	ldr	r1, [r3, #0]
 801d53c:	4b95      	ldr	r3, [pc, #596]	@ (801d794 <tcp_process+0x598>)
 801d53e:	881b      	ldrh	r3, [r3, #0]
 801d540:	461a      	mov	r2, r3
 801d542:	4b95      	ldr	r3, [pc, #596]	@ (801d798 <tcp_process+0x59c>)
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d548:	4b94      	ldr	r3, [pc, #592]	@ (801d79c <tcp_process+0x5a0>)
 801d54a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d54c:	885b      	ldrh	r3, [r3, #2]
 801d54e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d550:	4a92      	ldr	r2, [pc, #584]	@ (801d79c <tcp_process+0x5a0>)
 801d552:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d554:	8812      	ldrh	r2, [r2, #0]
 801d556:	b292      	uxth	r2, r2
 801d558:	9202      	str	r2, [sp, #8]
 801d55a:	9301      	str	r3, [sp, #4]
 801d55c:	4b90      	ldr	r3, [pc, #576]	@ (801d7a0 <tcp_process+0x5a4>)
 801d55e:	9300      	str	r3, [sp, #0]
 801d560:	4b90      	ldr	r3, [pc, #576]	@ (801d7a4 <tcp_process+0x5a8>)
 801d562:	4602      	mov	r2, r0
 801d564:	6878      	ldr	r0, [r7, #4]
 801d566:	f003 f8d7 	bl	8020718 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801d570:	2b05      	cmp	r3, #5
 801d572:	f200 8215 	bhi.w	801d9a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	2200      	movs	r2, #0
 801d57a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801d57c:	6878      	ldr	r0, [r7, #4]
 801d57e:	f002 fea3 	bl	80202c8 <tcp_rexmit_rto>
      break;
 801d582:	e20d      	b.n	801d9a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d584:	4b81      	ldr	r3, [pc, #516]	@ (801d78c <tcp_process+0x590>)
 801d586:	781b      	ldrb	r3, [r3, #0]
 801d588:	f003 0310 	and.w	r3, r3, #16
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	f000 80a1 	beq.w	801d6d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d592:	4b7f      	ldr	r3, [pc, #508]	@ (801d790 <tcp_process+0x594>)
 801d594:	681a      	ldr	r2, [r3, #0]
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d59a:	1ad3      	subs	r3, r2, r3
 801d59c:	3b01      	subs	r3, #1
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	db7e      	blt.n	801d6a0 <tcp_process+0x4a4>
 801d5a2:	4b7b      	ldr	r3, [pc, #492]	@ (801d790 <tcp_process+0x594>)
 801d5a4:	681a      	ldr	r2, [r3, #0]
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d5aa:	1ad3      	subs	r3, r2, r3
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	dc77      	bgt.n	801d6a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	2204      	movs	r2, #4
 801d5b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d102      	bne.n	801d5c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d5be:	23fa      	movs	r3, #250	@ 0xfa
 801d5c0:	76bb      	strb	r3, [r7, #26]
 801d5c2:	e01d      	b.n	801d600 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d5c8:	699b      	ldr	r3, [r3, #24]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d106      	bne.n	801d5dc <tcp_process+0x3e0>
 801d5ce:	4b76      	ldr	r3, [pc, #472]	@ (801d7a8 <tcp_process+0x5ac>)
 801d5d0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801d5d4:	4975      	ldr	r1, [pc, #468]	@ (801d7ac <tcp_process+0x5b0>)
 801d5d6:	4876      	ldr	r0, [pc, #472]	@ (801d7b0 <tcp_process+0x5b4>)
 801d5d8:	f007 ff4c 	bl	8025474 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d5e0:	699b      	ldr	r3, [r3, #24]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d00a      	beq.n	801d5fc <tcp_process+0x400>
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d5ea:	699b      	ldr	r3, [r3, #24]
 801d5ec:	687a      	ldr	r2, [r7, #4]
 801d5ee:	6910      	ldr	r0, [r2, #16]
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	6879      	ldr	r1, [r7, #4]
 801d5f4:	4798      	blx	r3
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	76bb      	strb	r3, [r7, #26]
 801d5fa:	e001      	b.n	801d600 <tcp_process+0x404>
 801d5fc:	23f0      	movs	r3, #240	@ 0xf0
 801d5fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d600:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d00a      	beq.n	801d61e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d608:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d60c:	f113 0f0d 	cmn.w	r3, #13
 801d610:	d002      	beq.n	801d618 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d612:	6878      	ldr	r0, [r7, #4]
 801d614:	f7fd fde0 	bl	801b1d8 <tcp_abort>
            }
            return ERR_ABRT;
 801d618:	f06f 030c 	mvn.w	r3, #12
 801d61c:	e1ce      	b.n	801d9bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d61e:	6878      	ldr	r0, [r7, #4]
 801d620:	f000 fae0 	bl	801dbe4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d624:	4b63      	ldr	r3, [pc, #396]	@ (801d7b4 <tcp_process+0x5b8>)
 801d626:	881b      	ldrh	r3, [r3, #0]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d005      	beq.n	801d638 <tcp_process+0x43c>
            recv_acked--;
 801d62c:	4b61      	ldr	r3, [pc, #388]	@ (801d7b4 <tcp_process+0x5b8>)
 801d62e:	881b      	ldrh	r3, [r3, #0]
 801d630:	3b01      	subs	r3, #1
 801d632:	b29a      	uxth	r2, r3
 801d634:	4b5f      	ldr	r3, [pc, #380]	@ (801d7b4 <tcp_process+0x5b8>)
 801d636:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d63c:	009a      	lsls	r2, r3, #2
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d642:	005b      	lsls	r3, r3, #1
 801d644:	f241 111c 	movw	r1, #4380	@ 0x111c
 801d648:	428b      	cmp	r3, r1
 801d64a:	bf38      	it	cc
 801d64c:	460b      	movcc	r3, r1
 801d64e:	429a      	cmp	r2, r3
 801d650:	d204      	bcs.n	801d65c <tcp_process+0x460>
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d656:	009b      	lsls	r3, r3, #2
 801d658:	b29b      	uxth	r3, r3
 801d65a:	e00d      	b.n	801d678 <tcp_process+0x47c>
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d660:	005b      	lsls	r3, r3, #1
 801d662:	f241 121c 	movw	r2, #4380	@ 0x111c
 801d666:	4293      	cmp	r3, r2
 801d668:	d904      	bls.n	801d674 <tcp_process+0x478>
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801d66e:	005b      	lsls	r3, r3, #1
 801d670:	b29b      	uxth	r3, r3
 801d672:	e001      	b.n	801d678 <tcp_process+0x47c>
 801d674:	f241 131c 	movw	r3, #4380	@ 0x111c
 801d678:	687a      	ldr	r2, [r7, #4]
 801d67a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d67e:	4b4e      	ldr	r3, [pc, #312]	@ (801d7b8 <tcp_process+0x5bc>)
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	f003 0320 	and.w	r3, r3, #32
 801d686:	2b00      	cmp	r3, #0
 801d688:	d037      	beq.n	801d6fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	8b5b      	ldrh	r3, [r3, #26]
 801d68e:	f043 0302 	orr.w	r3, r3, #2
 801d692:	b29a      	uxth	r2, r3
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	2207      	movs	r2, #7
 801d69c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d69e:	e02c      	b.n	801d6fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d6a0:	4b3b      	ldr	r3, [pc, #236]	@ (801d790 <tcp_process+0x594>)
 801d6a2:	6819      	ldr	r1, [r3, #0]
 801d6a4:	4b3b      	ldr	r3, [pc, #236]	@ (801d794 <tcp_process+0x598>)
 801d6a6:	881b      	ldrh	r3, [r3, #0]
 801d6a8:	461a      	mov	r2, r3
 801d6aa:	4b3b      	ldr	r3, [pc, #236]	@ (801d798 <tcp_process+0x59c>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d6b0:	4b3a      	ldr	r3, [pc, #232]	@ (801d79c <tcp_process+0x5a0>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d6b4:	885b      	ldrh	r3, [r3, #2]
 801d6b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d6b8:	4a38      	ldr	r2, [pc, #224]	@ (801d79c <tcp_process+0x5a0>)
 801d6ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d6bc:	8812      	ldrh	r2, [r2, #0]
 801d6be:	b292      	uxth	r2, r2
 801d6c0:	9202      	str	r2, [sp, #8]
 801d6c2:	9301      	str	r3, [sp, #4]
 801d6c4:	4b36      	ldr	r3, [pc, #216]	@ (801d7a0 <tcp_process+0x5a4>)
 801d6c6:	9300      	str	r3, [sp, #0]
 801d6c8:	4b36      	ldr	r3, [pc, #216]	@ (801d7a4 <tcp_process+0x5a8>)
 801d6ca:	4602      	mov	r2, r0
 801d6cc:	6878      	ldr	r0, [r7, #4]
 801d6ce:	f003 f823 	bl	8020718 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d6d2:	e167      	b.n	801d9a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d6d4:	4b2d      	ldr	r3, [pc, #180]	@ (801d78c <tcp_process+0x590>)
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	f003 0302 	and.w	r3, r3, #2
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f000 8161 	beq.w	801d9a4 <tcp_process+0x7a8>
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6e6:	1e5a      	subs	r2, r3, #1
 801d6e8:	4b2b      	ldr	r3, [pc, #172]	@ (801d798 <tcp_process+0x59c>)
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	429a      	cmp	r2, r3
 801d6ee:	f040 8159 	bne.w	801d9a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d6f2:	6878      	ldr	r0, [r7, #4]
 801d6f4:	f002 fe0a 	bl	802030c <tcp_rexmit>
      break;
 801d6f8:	e154      	b.n	801d9a4 <tcp_process+0x7a8>
 801d6fa:	e153      	b.n	801d9a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d6fc:	6878      	ldr	r0, [r7, #4]
 801d6fe:	f000 fa71 	bl	801dbe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d702:	4b2d      	ldr	r3, [pc, #180]	@ (801d7b8 <tcp_process+0x5bc>)
 801d704:	781b      	ldrb	r3, [r3, #0]
 801d706:	f003 0320 	and.w	r3, r3, #32
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	f000 814c 	beq.w	801d9a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	8b5b      	ldrh	r3, [r3, #26]
 801d714:	f043 0302 	orr.w	r3, r3, #2
 801d718:	b29a      	uxth	r2, r3
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	2207      	movs	r2, #7
 801d722:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d724:	e140      	b.n	801d9a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d726:	6878      	ldr	r0, [r7, #4]
 801d728:	f000 fa5c 	bl	801dbe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d72c:	4b22      	ldr	r3, [pc, #136]	@ (801d7b8 <tcp_process+0x5bc>)
 801d72e:	781b      	ldrb	r3, [r3, #0]
 801d730:	f003 0320 	and.w	r3, r3, #32
 801d734:	2b00      	cmp	r3, #0
 801d736:	d071      	beq.n	801d81c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d738:	4b14      	ldr	r3, [pc, #80]	@ (801d78c <tcp_process+0x590>)
 801d73a:	781b      	ldrb	r3, [r3, #0]
 801d73c:	f003 0310 	and.w	r3, r3, #16
 801d740:	2b00      	cmp	r3, #0
 801d742:	d060      	beq.n	801d806 <tcp_process+0x60a>
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d748:	4b11      	ldr	r3, [pc, #68]	@ (801d790 <tcp_process+0x594>)
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	429a      	cmp	r2, r3
 801d74e:	d15a      	bne.n	801d806 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d754:	2b00      	cmp	r3, #0
 801d756:	d156      	bne.n	801d806 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	8b5b      	ldrh	r3, [r3, #26]
 801d75c:	f043 0302 	orr.w	r3, r3, #2
 801d760:	b29a      	uxth	r2, r3
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d766:	6878      	ldr	r0, [r7, #4]
 801d768:	f7fe fdbc 	bl	801c2e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d76c:	4b13      	ldr	r3, [pc, #76]	@ (801d7bc <tcp_process+0x5c0>)
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	687a      	ldr	r2, [r7, #4]
 801d772:	429a      	cmp	r2, r3
 801d774:	d105      	bne.n	801d782 <tcp_process+0x586>
 801d776:	4b11      	ldr	r3, [pc, #68]	@ (801d7bc <tcp_process+0x5c0>)
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	68db      	ldr	r3, [r3, #12]
 801d77c:	4a0f      	ldr	r2, [pc, #60]	@ (801d7bc <tcp_process+0x5c0>)
 801d77e:	6013      	str	r3, [r2, #0]
 801d780:	e02e      	b.n	801d7e0 <tcp_process+0x5e4>
 801d782:	4b0e      	ldr	r3, [pc, #56]	@ (801d7bc <tcp_process+0x5c0>)
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	617b      	str	r3, [r7, #20]
 801d788:	e027      	b.n	801d7da <tcp_process+0x5de>
 801d78a:	bf00      	nop
 801d78c:	2400bea8 	.word	0x2400bea8
 801d790:	2400bea0 	.word	0x2400bea0
 801d794:	2400bea6 	.word	0x2400bea6
 801d798:	2400be9c 	.word	0x2400be9c
 801d79c:	2400be8c 	.word	0x2400be8c
 801d7a0:	24008d74 	.word	0x24008d74
 801d7a4:	24008d78 	.word	0x24008d78
 801d7a8:	0802b718 	.word	0x0802b718
 801d7ac:	0802b9b8 	.word	0x0802b9b8
 801d7b0:	0802b764 	.word	0x0802b764
 801d7b4:	2400bea4 	.word	0x2400bea4
 801d7b8:	2400bea9 	.word	0x2400bea9
 801d7bc:	2400be70 	.word	0x2400be70
 801d7c0:	697b      	ldr	r3, [r7, #20]
 801d7c2:	68db      	ldr	r3, [r3, #12]
 801d7c4:	687a      	ldr	r2, [r7, #4]
 801d7c6:	429a      	cmp	r2, r3
 801d7c8:	d104      	bne.n	801d7d4 <tcp_process+0x5d8>
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	68da      	ldr	r2, [r3, #12]
 801d7ce:	697b      	ldr	r3, [r7, #20]
 801d7d0:	60da      	str	r2, [r3, #12]
 801d7d2:	e005      	b.n	801d7e0 <tcp_process+0x5e4>
 801d7d4:	697b      	ldr	r3, [r7, #20]
 801d7d6:	68db      	ldr	r3, [r3, #12]
 801d7d8:	617b      	str	r3, [r7, #20]
 801d7da:	697b      	ldr	r3, [r7, #20]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d1ef      	bne.n	801d7c0 <tcp_process+0x5c4>
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	60da      	str	r2, [r3, #12]
 801d7e6:	4b77      	ldr	r3, [pc, #476]	@ (801d9c4 <tcp_process+0x7c8>)
 801d7e8:	2201      	movs	r2, #1
 801d7ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	220a      	movs	r2, #10
 801d7f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d7f2:	4b75      	ldr	r3, [pc, #468]	@ (801d9c8 <tcp_process+0x7cc>)
 801d7f4:	681a      	ldr	r2, [r3, #0]
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	60da      	str	r2, [r3, #12]
 801d7fa:	4a73      	ldr	r2, [pc, #460]	@ (801d9c8 <tcp_process+0x7cc>)
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	6013      	str	r3, [r2, #0]
 801d800:	f003 f94c 	bl	8020a9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d804:	e0d2      	b.n	801d9ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	8b5b      	ldrh	r3, [r3, #26]
 801d80a:	f043 0302 	orr.w	r3, r3, #2
 801d80e:	b29a      	uxth	r2, r3
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	2208      	movs	r2, #8
 801d818:	751a      	strb	r2, [r3, #20]
      break;
 801d81a:	e0c7      	b.n	801d9ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d81c:	4b6b      	ldr	r3, [pc, #428]	@ (801d9cc <tcp_process+0x7d0>)
 801d81e:	781b      	ldrb	r3, [r3, #0]
 801d820:	f003 0310 	and.w	r3, r3, #16
 801d824:	2b00      	cmp	r3, #0
 801d826:	f000 80c1 	beq.w	801d9ac <tcp_process+0x7b0>
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d82e:	4b68      	ldr	r3, [pc, #416]	@ (801d9d0 <tcp_process+0x7d4>)
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	429a      	cmp	r2, r3
 801d834:	f040 80ba 	bne.w	801d9ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	f040 80b5 	bne.w	801d9ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	2206      	movs	r2, #6
 801d846:	751a      	strb	r2, [r3, #20]
      break;
 801d848:	e0b0      	b.n	801d9ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d84a:	6878      	ldr	r0, [r7, #4]
 801d84c:	f000 f9ca 	bl	801dbe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d850:	4b60      	ldr	r3, [pc, #384]	@ (801d9d4 <tcp_process+0x7d8>)
 801d852:	781b      	ldrb	r3, [r3, #0]
 801d854:	f003 0320 	and.w	r3, r3, #32
 801d858:	2b00      	cmp	r3, #0
 801d85a:	f000 80a9 	beq.w	801d9b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	8b5b      	ldrh	r3, [r3, #26]
 801d862:	f043 0302 	orr.w	r3, r3, #2
 801d866:	b29a      	uxth	r2, r3
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	f7fe fd39 	bl	801c2e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d872:	4b59      	ldr	r3, [pc, #356]	@ (801d9d8 <tcp_process+0x7dc>)
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	429a      	cmp	r2, r3
 801d87a:	d105      	bne.n	801d888 <tcp_process+0x68c>
 801d87c:	4b56      	ldr	r3, [pc, #344]	@ (801d9d8 <tcp_process+0x7dc>)
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	68db      	ldr	r3, [r3, #12]
 801d882:	4a55      	ldr	r2, [pc, #340]	@ (801d9d8 <tcp_process+0x7dc>)
 801d884:	6013      	str	r3, [r2, #0]
 801d886:	e013      	b.n	801d8b0 <tcp_process+0x6b4>
 801d888:	4b53      	ldr	r3, [pc, #332]	@ (801d9d8 <tcp_process+0x7dc>)
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	613b      	str	r3, [r7, #16]
 801d88e:	e00c      	b.n	801d8aa <tcp_process+0x6ae>
 801d890:	693b      	ldr	r3, [r7, #16]
 801d892:	68db      	ldr	r3, [r3, #12]
 801d894:	687a      	ldr	r2, [r7, #4]
 801d896:	429a      	cmp	r2, r3
 801d898:	d104      	bne.n	801d8a4 <tcp_process+0x6a8>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	68da      	ldr	r2, [r3, #12]
 801d89e:	693b      	ldr	r3, [r7, #16]
 801d8a0:	60da      	str	r2, [r3, #12]
 801d8a2:	e005      	b.n	801d8b0 <tcp_process+0x6b4>
 801d8a4:	693b      	ldr	r3, [r7, #16]
 801d8a6:	68db      	ldr	r3, [r3, #12]
 801d8a8:	613b      	str	r3, [r7, #16]
 801d8aa:	693b      	ldr	r3, [r7, #16]
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d1ef      	bne.n	801d890 <tcp_process+0x694>
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	60da      	str	r2, [r3, #12]
 801d8b6:	4b43      	ldr	r3, [pc, #268]	@ (801d9c4 <tcp_process+0x7c8>)
 801d8b8:	2201      	movs	r2, #1
 801d8ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	220a      	movs	r2, #10
 801d8c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d8c2:	4b41      	ldr	r3, [pc, #260]	@ (801d9c8 <tcp_process+0x7cc>)
 801d8c4:	681a      	ldr	r2, [r3, #0]
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	60da      	str	r2, [r3, #12]
 801d8ca:	4a3f      	ldr	r2, [pc, #252]	@ (801d9c8 <tcp_process+0x7cc>)
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	6013      	str	r3, [r2, #0]
 801d8d0:	f003 f8e4 	bl	8020a9c <tcp_timer_needed>
      }
      break;
 801d8d4:	e06c      	b.n	801d9b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d8d6:	6878      	ldr	r0, [r7, #4]
 801d8d8:	f000 f984 	bl	801dbe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d8dc:	4b3b      	ldr	r3, [pc, #236]	@ (801d9cc <tcp_process+0x7d0>)
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	f003 0310 	and.w	r3, r3, #16
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d065      	beq.n	801d9b4 <tcp_process+0x7b8>
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d8ec:	4b38      	ldr	r3, [pc, #224]	@ (801d9d0 <tcp_process+0x7d4>)
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	429a      	cmp	r2, r3
 801d8f2:	d15f      	bne.n	801d9b4 <tcp_process+0x7b8>
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d15b      	bne.n	801d9b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d8fc:	6878      	ldr	r0, [r7, #4]
 801d8fe:	f7fe fcf1 	bl	801c2e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d902:	4b35      	ldr	r3, [pc, #212]	@ (801d9d8 <tcp_process+0x7dc>)
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	687a      	ldr	r2, [r7, #4]
 801d908:	429a      	cmp	r2, r3
 801d90a:	d105      	bne.n	801d918 <tcp_process+0x71c>
 801d90c:	4b32      	ldr	r3, [pc, #200]	@ (801d9d8 <tcp_process+0x7dc>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	68db      	ldr	r3, [r3, #12]
 801d912:	4a31      	ldr	r2, [pc, #196]	@ (801d9d8 <tcp_process+0x7dc>)
 801d914:	6013      	str	r3, [r2, #0]
 801d916:	e013      	b.n	801d940 <tcp_process+0x744>
 801d918:	4b2f      	ldr	r3, [pc, #188]	@ (801d9d8 <tcp_process+0x7dc>)
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	60fb      	str	r3, [r7, #12]
 801d91e:	e00c      	b.n	801d93a <tcp_process+0x73e>
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	68db      	ldr	r3, [r3, #12]
 801d924:	687a      	ldr	r2, [r7, #4]
 801d926:	429a      	cmp	r2, r3
 801d928:	d104      	bne.n	801d934 <tcp_process+0x738>
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	68da      	ldr	r2, [r3, #12]
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	60da      	str	r2, [r3, #12]
 801d932:	e005      	b.n	801d940 <tcp_process+0x744>
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	68db      	ldr	r3, [r3, #12]
 801d938:	60fb      	str	r3, [r7, #12]
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d1ef      	bne.n	801d920 <tcp_process+0x724>
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2200      	movs	r2, #0
 801d944:	60da      	str	r2, [r3, #12]
 801d946:	4b1f      	ldr	r3, [pc, #124]	@ (801d9c4 <tcp_process+0x7c8>)
 801d948:	2201      	movs	r2, #1
 801d94a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	220a      	movs	r2, #10
 801d950:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d952:	4b1d      	ldr	r3, [pc, #116]	@ (801d9c8 <tcp_process+0x7cc>)
 801d954:	681a      	ldr	r2, [r3, #0]
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	60da      	str	r2, [r3, #12]
 801d95a:	4a1b      	ldr	r2, [pc, #108]	@ (801d9c8 <tcp_process+0x7cc>)
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	6013      	str	r3, [r2, #0]
 801d960:	f003 f89c 	bl	8020a9c <tcp_timer_needed>
      }
      break;
 801d964:	e026      	b.n	801d9b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d966:	6878      	ldr	r0, [r7, #4]
 801d968:	f000 f93c 	bl	801dbe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d96c:	4b17      	ldr	r3, [pc, #92]	@ (801d9cc <tcp_process+0x7d0>)
 801d96e:	781b      	ldrb	r3, [r3, #0]
 801d970:	f003 0310 	and.w	r3, r3, #16
 801d974:	2b00      	cmp	r3, #0
 801d976:	d01f      	beq.n	801d9b8 <tcp_process+0x7bc>
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d97c:	4b14      	ldr	r3, [pc, #80]	@ (801d9d0 <tcp_process+0x7d4>)
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	429a      	cmp	r2, r3
 801d982:	d119      	bne.n	801d9b8 <tcp_process+0x7bc>
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d115      	bne.n	801d9b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d98c:	4b11      	ldr	r3, [pc, #68]	@ (801d9d4 <tcp_process+0x7d8>)
 801d98e:	781b      	ldrb	r3, [r3, #0]
 801d990:	f043 0310 	orr.w	r3, r3, #16
 801d994:	b2da      	uxtb	r2, r3
 801d996:	4b0f      	ldr	r3, [pc, #60]	@ (801d9d4 <tcp_process+0x7d8>)
 801d998:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d99a:	e00d      	b.n	801d9b8 <tcp_process+0x7bc>
    default:
      break;
 801d99c:	bf00      	nop
 801d99e:	e00c      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9a0:	bf00      	nop
 801d9a2:	e00a      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9a4:	bf00      	nop
 801d9a6:	e008      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9a8:	bf00      	nop
 801d9aa:	e006      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9ac:	bf00      	nop
 801d9ae:	e004      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9b0:	bf00      	nop
 801d9b2:	e002      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9b4:	bf00      	nop
 801d9b6:	e000      	b.n	801d9ba <tcp_process+0x7be>
      break;
 801d9b8:	bf00      	nop
  }
  return ERR_OK;
 801d9ba:	2300      	movs	r3, #0
}
 801d9bc:	4618      	mov	r0, r3
 801d9be:	3724      	adds	r7, #36	@ 0x24
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	bd90      	pop	{r4, r7, pc}
 801d9c4:	2400be78 	.word	0x2400be78
 801d9c8:	2400be74 	.word	0x2400be74
 801d9cc:	2400bea8 	.word	0x2400bea8
 801d9d0:	2400bea0 	.word	0x2400bea0
 801d9d4:	2400bea9 	.word	0x2400bea9
 801d9d8:	2400be70 	.word	0x2400be70

0801d9dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d9dc:	b590      	push	{r4, r7, lr}
 801d9de:	b085      	sub	sp, #20
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]
 801d9e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d106      	bne.n	801d9fa <tcp_oos_insert_segment+0x1e>
 801d9ec:	4b3b      	ldr	r3, [pc, #236]	@ (801dadc <tcp_oos_insert_segment+0x100>)
 801d9ee:	f240 421f 	movw	r2, #1055	@ 0x41f
 801d9f2:	493b      	ldr	r1, [pc, #236]	@ (801dae0 <tcp_oos_insert_segment+0x104>)
 801d9f4:	483b      	ldr	r0, [pc, #236]	@ (801dae4 <tcp_oos_insert_segment+0x108>)
 801d9f6:	f007 fd3d 	bl	8025474 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	68db      	ldr	r3, [r3, #12]
 801d9fe:	899b      	ldrh	r3, [r3, #12]
 801da00:	b29b      	uxth	r3, r3
 801da02:	4618      	mov	r0, r3
 801da04:	f7fb f90c 	bl	8018c20 <lwip_htons>
 801da08:	4603      	mov	r3, r0
 801da0a:	b2db      	uxtb	r3, r3
 801da0c:	f003 0301 	and.w	r3, r3, #1
 801da10:	2b00      	cmp	r3, #0
 801da12:	d028      	beq.n	801da66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801da14:	6838      	ldr	r0, [r7, #0]
 801da16:	f7fe f995 	bl	801bd44 <tcp_segs_free>
    next = NULL;
 801da1a:	2300      	movs	r3, #0
 801da1c:	603b      	str	r3, [r7, #0]
 801da1e:	e056      	b.n	801dace <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	68db      	ldr	r3, [r3, #12]
 801da24:	899b      	ldrh	r3, [r3, #12]
 801da26:	b29b      	uxth	r3, r3
 801da28:	4618      	mov	r0, r3
 801da2a:	f7fb f8f9 	bl	8018c20 <lwip_htons>
 801da2e:	4603      	mov	r3, r0
 801da30:	b2db      	uxtb	r3, r3
 801da32:	f003 0301 	and.w	r3, r3, #1
 801da36:	2b00      	cmp	r3, #0
 801da38:	d00d      	beq.n	801da56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	68db      	ldr	r3, [r3, #12]
 801da3e:	899b      	ldrh	r3, [r3, #12]
 801da40:	b29c      	uxth	r4, r3
 801da42:	2001      	movs	r0, #1
 801da44:	f7fb f8ec 	bl	8018c20 <lwip_htons>
 801da48:	4603      	mov	r3, r0
 801da4a:	461a      	mov	r2, r3
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	68db      	ldr	r3, [r3, #12]
 801da50:	4322      	orrs	r2, r4
 801da52:	b292      	uxth	r2, r2
 801da54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801da5a:	683b      	ldr	r3, [r7, #0]
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801da60:	68f8      	ldr	r0, [r7, #12]
 801da62:	f7fe f984 	bl	801bd6e <tcp_seg_free>
    while (next &&
 801da66:	683b      	ldr	r3, [r7, #0]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d00e      	beq.n	801da8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	891b      	ldrh	r3, [r3, #8]
 801da70:	461a      	mov	r2, r3
 801da72:	4b1d      	ldr	r3, [pc, #116]	@ (801dae8 <tcp_oos_insert_segment+0x10c>)
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	441a      	add	r2, r3
 801da78:	683b      	ldr	r3, [r7, #0]
 801da7a:	68db      	ldr	r3, [r3, #12]
 801da7c:	685b      	ldr	r3, [r3, #4]
 801da7e:	6839      	ldr	r1, [r7, #0]
 801da80:	8909      	ldrh	r1, [r1, #8]
 801da82:	440b      	add	r3, r1
 801da84:	1ad3      	subs	r3, r2, r3
    while (next &&
 801da86:	2b00      	cmp	r3, #0
 801da88:	daca      	bge.n	801da20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d01e      	beq.n	801dace <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	891b      	ldrh	r3, [r3, #8]
 801da94:	461a      	mov	r2, r3
 801da96:	4b14      	ldr	r3, [pc, #80]	@ (801dae8 <tcp_oos_insert_segment+0x10c>)
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	441a      	add	r2, r3
 801da9c:	683b      	ldr	r3, [r7, #0]
 801da9e:	68db      	ldr	r3, [r3, #12]
 801daa0:	685b      	ldr	r3, [r3, #4]
 801daa2:	1ad3      	subs	r3, r2, r3
    if (next &&
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	dd12      	ble.n	801dace <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	68db      	ldr	r3, [r3, #12]
 801daac:	685b      	ldr	r3, [r3, #4]
 801daae:	b29a      	uxth	r2, r3
 801dab0:	4b0d      	ldr	r3, [pc, #52]	@ (801dae8 <tcp_oos_insert_segment+0x10c>)
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	b29b      	uxth	r3, r3
 801dab6:	1ad3      	subs	r3, r2, r3
 801dab8:	b29a      	uxth	r2, r3
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	685a      	ldr	r2, [r3, #4]
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	891b      	ldrh	r3, [r3, #8]
 801dac6:	4619      	mov	r1, r3
 801dac8:	4610      	mov	r0, r2
 801daca:	f7fc fbcd 	bl	801a268 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	683a      	ldr	r2, [r7, #0]
 801dad2:	601a      	str	r2, [r3, #0]
}
 801dad4:	bf00      	nop
 801dad6:	3714      	adds	r7, #20
 801dad8:	46bd      	mov	sp, r7
 801dada:	bd90      	pop	{r4, r7, pc}
 801dadc:	0802b718 	.word	0x0802b718
 801dae0:	0802b9d8 	.word	0x0802b9d8
 801dae4:	0802b764 	.word	0x0802b764
 801dae8:	2400be9c 	.word	0x2400be9c

0801daec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801daec:	b5b0      	push	{r4, r5, r7, lr}
 801daee:	b086      	sub	sp, #24
 801daf0:	af00      	add	r7, sp, #0
 801daf2:	60f8      	str	r0, [r7, #12]
 801daf4:	60b9      	str	r1, [r7, #8]
 801daf6:	607a      	str	r2, [r7, #4]
 801daf8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801dafa:	e03e      	b.n	801db7a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801dafc:	68bb      	ldr	r3, [r7, #8]
 801dafe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801db00:	68bb      	ldr	r3, [r7, #8]
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801db06:	697b      	ldr	r3, [r7, #20]
 801db08:	685b      	ldr	r3, [r3, #4]
 801db0a:	4618      	mov	r0, r3
 801db0c:	f7fc fdf2 	bl	801a6f4 <pbuf_clen>
 801db10:	4603      	mov	r3, r0
 801db12:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801db1a:	8a7a      	ldrh	r2, [r7, #18]
 801db1c:	429a      	cmp	r2, r3
 801db1e:	d906      	bls.n	801db2e <tcp_free_acked_segments+0x42>
 801db20:	4b2a      	ldr	r3, [pc, #168]	@ (801dbcc <tcp_free_acked_segments+0xe0>)
 801db22:	f240 4257 	movw	r2, #1111	@ 0x457
 801db26:	492a      	ldr	r1, [pc, #168]	@ (801dbd0 <tcp_free_acked_segments+0xe4>)
 801db28:	482a      	ldr	r0, [pc, #168]	@ (801dbd4 <tcp_free_acked_segments+0xe8>)
 801db2a:	f007 fca3 	bl	8025474 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801db34:	8a7b      	ldrh	r3, [r7, #18]
 801db36:	1ad3      	subs	r3, r2, r3
 801db38:	b29a      	uxth	r2, r3
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801db40:	697b      	ldr	r3, [r7, #20]
 801db42:	891a      	ldrh	r2, [r3, #8]
 801db44:	4b24      	ldr	r3, [pc, #144]	@ (801dbd8 <tcp_free_acked_segments+0xec>)
 801db46:	881b      	ldrh	r3, [r3, #0]
 801db48:	4413      	add	r3, r2
 801db4a:	b29a      	uxth	r2, r3
 801db4c:	4b22      	ldr	r3, [pc, #136]	@ (801dbd8 <tcp_free_acked_segments+0xec>)
 801db4e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801db50:	6978      	ldr	r0, [r7, #20]
 801db52:	f7fe f90c 	bl	801bd6e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d00c      	beq.n	801db7a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801db60:	68bb      	ldr	r3, [r7, #8]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d109      	bne.n	801db7a <tcp_free_acked_segments+0x8e>
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d106      	bne.n	801db7a <tcp_free_acked_segments+0x8e>
 801db6c:	4b17      	ldr	r3, [pc, #92]	@ (801dbcc <tcp_free_acked_segments+0xe0>)
 801db6e:	f240 4261 	movw	r2, #1121	@ 0x461
 801db72:	491a      	ldr	r1, [pc, #104]	@ (801dbdc <tcp_free_acked_segments+0xf0>)
 801db74:	4817      	ldr	r0, [pc, #92]	@ (801dbd4 <tcp_free_acked_segments+0xe8>)
 801db76:	f007 fc7d 	bl	8025474 <iprintf>
  while (seg_list != NULL &&
 801db7a:	68bb      	ldr	r3, [r7, #8]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d020      	beq.n	801dbc2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801db80:	68bb      	ldr	r3, [r7, #8]
 801db82:	68db      	ldr	r3, [r3, #12]
 801db84:	685b      	ldr	r3, [r3, #4]
 801db86:	4618      	mov	r0, r3
 801db88:	f7fb f85f 	bl	8018c4a <lwip_htonl>
 801db8c:	4604      	mov	r4, r0
 801db8e:	68bb      	ldr	r3, [r7, #8]
 801db90:	891b      	ldrh	r3, [r3, #8]
 801db92:	461d      	mov	r5, r3
 801db94:	68bb      	ldr	r3, [r7, #8]
 801db96:	68db      	ldr	r3, [r3, #12]
 801db98:	899b      	ldrh	r3, [r3, #12]
 801db9a:	b29b      	uxth	r3, r3
 801db9c:	4618      	mov	r0, r3
 801db9e:	f7fb f83f 	bl	8018c20 <lwip_htons>
 801dba2:	4603      	mov	r3, r0
 801dba4:	b2db      	uxtb	r3, r3
 801dba6:	f003 0303 	and.w	r3, r3, #3
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d001      	beq.n	801dbb2 <tcp_free_acked_segments+0xc6>
 801dbae:	2301      	movs	r3, #1
 801dbb0:	e000      	b.n	801dbb4 <tcp_free_acked_segments+0xc8>
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	442b      	add	r3, r5
 801dbb6:	18e2      	adds	r2, r4, r3
 801dbb8:	4b09      	ldr	r3, [pc, #36]	@ (801dbe0 <tcp_free_acked_segments+0xf4>)
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	dd9c      	ble.n	801dafc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801dbc2:	68bb      	ldr	r3, [r7, #8]
}
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	3718      	adds	r7, #24
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	bdb0      	pop	{r4, r5, r7, pc}
 801dbcc:	0802b718 	.word	0x0802b718
 801dbd0:	0802ba00 	.word	0x0802ba00
 801dbd4:	0802b764 	.word	0x0802b764
 801dbd8:	2400bea4 	.word	0x2400bea4
 801dbdc:	0802ba28 	.word	0x0802ba28
 801dbe0:	2400bea0 	.word	0x2400bea0

0801dbe4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801dbe4:	b5b0      	push	{r4, r5, r7, lr}
 801dbe6:	b094      	sub	sp, #80	@ 0x50
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801dbec:	2300      	movs	r3, #0
 801dbee:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d106      	bne.n	801dc04 <tcp_receive+0x20>
 801dbf6:	4b91      	ldr	r3, [pc, #580]	@ (801de3c <tcp_receive+0x258>)
 801dbf8:	f240 427b 	movw	r2, #1147	@ 0x47b
 801dbfc:	4990      	ldr	r1, [pc, #576]	@ (801de40 <tcp_receive+0x25c>)
 801dbfe:	4891      	ldr	r0, [pc, #580]	@ (801de44 <tcp_receive+0x260>)
 801dc00:	f007 fc38 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	7d1b      	ldrb	r3, [r3, #20]
 801dc08:	2b03      	cmp	r3, #3
 801dc0a:	d806      	bhi.n	801dc1a <tcp_receive+0x36>
 801dc0c:	4b8b      	ldr	r3, [pc, #556]	@ (801de3c <tcp_receive+0x258>)
 801dc0e:	f240 427c 	movw	r2, #1148	@ 0x47c
 801dc12:	498d      	ldr	r1, [pc, #564]	@ (801de48 <tcp_receive+0x264>)
 801dc14:	488b      	ldr	r0, [pc, #556]	@ (801de44 <tcp_receive+0x260>)
 801dc16:	f007 fc2d 	bl	8025474 <iprintf>

  if (flags & TCP_ACK) {
 801dc1a:	4b8c      	ldr	r3, [pc, #560]	@ (801de4c <tcp_receive+0x268>)
 801dc1c:	781b      	ldrb	r3, [r3, #0]
 801dc1e:	f003 0310 	and.w	r3, r3, #16
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	f000 8264 	beq.w	801e0f0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dc2e:	461a      	mov	r2, r3
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc34:	4413      	add	r3, r2
 801dc36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801dc3c:	4b84      	ldr	r3, [pc, #528]	@ (801de50 <tcp_receive+0x26c>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	1ad3      	subs	r3, r2, r3
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	db1b      	blt.n	801dc7e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801dc4a:	4b81      	ldr	r3, [pc, #516]	@ (801de50 <tcp_receive+0x26c>)
 801dc4c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dc4e:	429a      	cmp	r2, r3
 801dc50:	d106      	bne.n	801dc60 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801dc56:	4b7f      	ldr	r3, [pc, #508]	@ (801de54 <tcp_receive+0x270>)
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	1ad3      	subs	r3, r2, r3
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	db0e      	blt.n	801dc7e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801dc64:	4b7b      	ldr	r3, [pc, #492]	@ (801de54 <tcp_receive+0x270>)
 801dc66:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc68:	429a      	cmp	r2, r3
 801dc6a:	d125      	bne.n	801dcb8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dc6c:	4b7a      	ldr	r3, [pc, #488]	@ (801de58 <tcp_receive+0x274>)
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	89db      	ldrh	r3, [r3, #14]
 801dc72:	b29a      	uxth	r2, r3
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dc7a:	429a      	cmp	r2, r3
 801dc7c:	d91c      	bls.n	801dcb8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801dc7e:	4b76      	ldr	r3, [pc, #472]	@ (801de58 <tcp_receive+0x274>)
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	89db      	ldrh	r3, [r3, #14]
 801dc84:	b29a      	uxth	r2, r3
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dc98:	429a      	cmp	r2, r3
 801dc9a:	d205      	bcs.n	801dca8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801dca8:	4b69      	ldr	r3, [pc, #420]	@ (801de50 <tcp_receive+0x26c>)
 801dcaa:	681a      	ldr	r2, [r3, #0]
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801dcb0:	4b68      	ldr	r3, [pc, #416]	@ (801de54 <tcp_receive+0x270>)
 801dcb2:	681a      	ldr	r2, [r3, #0]
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801dcb8:	4b66      	ldr	r3, [pc, #408]	@ (801de54 <tcp_receive+0x270>)
 801dcba:	681a      	ldr	r2, [r3, #0]
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dcc0:	1ad3      	subs	r3, r2, r3
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	dc58      	bgt.n	801dd78 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801dcc6:	4b65      	ldr	r3, [pc, #404]	@ (801de5c <tcp_receive+0x278>)
 801dcc8:	881b      	ldrh	r3, [r3, #0]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d14b      	bne.n	801dd66 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dcd2:	687a      	ldr	r2, [r7, #4]
 801dcd4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801dcd8:	4413      	add	r3, r2
 801dcda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dcdc:	429a      	cmp	r2, r3
 801dcde:	d142      	bne.n	801dd66 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	db3d      	blt.n	801dd66 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801dcee:	4b59      	ldr	r3, [pc, #356]	@ (801de54 <tcp_receive+0x270>)
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	429a      	cmp	r2, r3
 801dcf4:	d137      	bne.n	801dd66 <tcp_receive+0x182>
              found_dupack = 1;
 801dcf6:	2301      	movs	r3, #1
 801dcf8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd00:	2bff      	cmp	r3, #255	@ 0xff
 801dd02:	d007      	beq.n	801dd14 <tcp_receive+0x130>
                ++pcb->dupacks;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd0a:	3301      	adds	r3, #1
 801dd0c:	b2da      	uxtb	r2, r3
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd1a:	2b03      	cmp	r3, #3
 801dd1c:	d91b      	bls.n	801dd56 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dd28:	4413      	add	r3, r2
 801dd2a:	b29a      	uxth	r2, r3
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dd32:	429a      	cmp	r2, r3
 801dd34:	d30a      	bcc.n	801dd4c <tcp_receive+0x168>
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dd40:	4413      	add	r3, r2
 801dd42:	b29a      	uxth	r2, r3
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dd4a:	e004      	b.n	801dd56 <tcp_receive+0x172>
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd52:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801dd5c:	2b02      	cmp	r3, #2
 801dd5e:	d902      	bls.n	801dd66 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801dd60:	6878      	ldr	r0, [r7, #4]
 801dd62:	f002 fb3f 	bl	80203e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801dd66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	f040 8161 	bne.w	801e030 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	2200      	movs	r2, #0
 801dd72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801dd76:	e15b      	b.n	801e030 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dd78:	4b36      	ldr	r3, [pc, #216]	@ (801de54 <tcp_receive+0x270>)
 801dd7a:	681a      	ldr	r2, [r3, #0]
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dd80:	1ad3      	subs	r3, r2, r3
 801dd82:	3b01      	subs	r3, #1
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	f2c0 814e 	blt.w	801e026 <tcp_receive+0x442>
 801dd8a:	4b32      	ldr	r3, [pc, #200]	@ (801de54 <tcp_receive+0x270>)
 801dd8c:	681a      	ldr	r2, [r3, #0]
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd92:	1ad3      	subs	r3, r2, r3
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	f300 8146 	bgt.w	801e026 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	8b5b      	ldrh	r3, [r3, #26]
 801dd9e:	f003 0304 	and.w	r3, r3, #4
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d010      	beq.n	801ddc8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	8b5b      	ldrh	r3, [r3, #26]
 801ddaa:	f023 0304 	bic.w	r3, r3, #4
 801ddae:	b29a      	uxth	r2, r3
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	2200      	movs	r2, #0
 801ddcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ddd6:	10db      	asrs	r3, r3, #3
 801ddd8:	b21b      	sxth	r3, r3
 801ddda:	b29a      	uxth	r2, r3
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801dde2:	b29b      	uxth	r3, r3
 801dde4:	4413      	add	r3, r2
 801dde6:	b29b      	uxth	r3, r3
 801dde8:	b21a      	sxth	r2, r3
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801ddf0:	4b18      	ldr	r3, [pc, #96]	@ (801de54 <tcp_receive+0x270>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	b29a      	uxth	r2, r3
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ddfa:	b29b      	uxth	r3, r3
 801ddfc:	1ad3      	subs	r3, r2, r3
 801ddfe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	2200      	movs	r2, #0
 801de04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801de08:	4b12      	ldr	r3, [pc, #72]	@ (801de54 <tcp_receive+0x270>)
 801de0a:	681a      	ldr	r2, [r3, #0]
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	7d1b      	ldrb	r3, [r3, #20]
 801de14:	2b03      	cmp	r3, #3
 801de16:	f240 8097 	bls.w	801df48 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801de26:	429a      	cmp	r2, r3
 801de28:	d245      	bcs.n	801deb6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	8b5b      	ldrh	r3, [r3, #26]
 801de2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801de32:	2b00      	cmp	r3, #0
 801de34:	d014      	beq.n	801de60 <tcp_receive+0x27c>
 801de36:	2301      	movs	r3, #1
 801de38:	e013      	b.n	801de62 <tcp_receive+0x27e>
 801de3a:	bf00      	nop
 801de3c:	0802b718 	.word	0x0802b718
 801de40:	0802ba48 	.word	0x0802ba48
 801de44:	0802b764 	.word	0x0802b764
 801de48:	0802ba64 	.word	0x0802ba64
 801de4c:	2400bea8 	.word	0x2400bea8
 801de50:	2400be9c 	.word	0x2400be9c
 801de54:	2400bea0 	.word	0x2400bea0
 801de58:	2400be8c 	.word	0x2400be8c
 801de5c:	2400bea6 	.word	0x2400bea6
 801de60:	2302      	movs	r3, #2
 801de62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801de66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801de6a:	b29a      	uxth	r2, r3
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801de70:	fb12 f303 	smulbb	r3, r2, r3
 801de74:	b29b      	uxth	r3, r3
 801de76:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801de78:	4293      	cmp	r3, r2
 801de7a:	bf28      	it	cs
 801de7c:	4613      	movcs	r3, r2
 801de7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801de86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801de88:	4413      	add	r3, r2
 801de8a:	b29a      	uxth	r2, r3
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801de92:	429a      	cmp	r2, r3
 801de94:	d309      	bcc.n	801deaa <tcp_receive+0x2c6>
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801de9c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801de9e:	4413      	add	r3, r2
 801dea0:	b29a      	uxth	r2, r3
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801dea8:	e04e      	b.n	801df48 <tcp_receive+0x364>
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801deb0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801deb4:	e048      	b.n	801df48 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801debc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801debe:	4413      	add	r3, r2
 801dec0:	b29a      	uxth	r2, r3
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801dec8:	429a      	cmp	r2, r3
 801deca:	d309      	bcc.n	801dee0 <tcp_receive+0x2fc>
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ded2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ded4:	4413      	add	r3, r2
 801ded6:	b29a      	uxth	r2, r3
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801dede:	e004      	b.n	801deea <tcp_receive+0x306>
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801def6:	429a      	cmp	r2, r3
 801def8:	d326      	bcc.n	801df48 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df06:	1ad3      	subs	r3, r2, r3
 801df08:	b29a      	uxth	r2, r3
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801df1a:	4413      	add	r3, r2
 801df1c:	b29a      	uxth	r2, r3
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801df24:	429a      	cmp	r2, r3
 801df26:	d30a      	bcc.n	801df3e <tcp_receive+0x35a>
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801df32:	4413      	add	r3, r2
 801df34:	b29a      	uxth	r2, r3
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801df3c:	e004      	b.n	801df48 <tcp_receive+0x364>
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801df44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df50:	4a98      	ldr	r2, [pc, #608]	@ (801e1b4 <tcp_receive+0x5d0>)
 801df52:	6878      	ldr	r0, [r7, #4]
 801df54:	f7ff fdca 	bl	801daec <tcp_free_acked_segments>
 801df58:	4602      	mov	r2, r0
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df66:	4a94      	ldr	r2, [pc, #592]	@ (801e1b8 <tcp_receive+0x5d4>)
 801df68:	6878      	ldr	r0, [r7, #4]
 801df6a:	f7ff fdbf 	bl	801daec <tcp_free_acked_segments>
 801df6e:	4602      	mov	r2, r0
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d104      	bne.n	801df86 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801df82:	861a      	strh	r2, [r3, #48]	@ 0x30
 801df84:	e002      	b.n	801df8c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	2200      	movs	r2, #0
 801df8a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	2200      	movs	r2, #0
 801df90:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df96:	2b00      	cmp	r3, #0
 801df98:	d103      	bne.n	801dfa2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	2200      	movs	r2, #0
 801df9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801dfa8:	4b84      	ldr	r3, [pc, #528]	@ (801e1bc <tcp_receive+0x5d8>)
 801dfaa:	881b      	ldrh	r3, [r3, #0]
 801dfac:	4413      	add	r3, r2
 801dfae:	b29a      	uxth	r2, r3
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	8b5b      	ldrh	r3, [r3, #26]
 801dfba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d035      	beq.n	801e02e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d118      	bne.n	801dffc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d00c      	beq.n	801dfec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dfda:	68db      	ldr	r3, [r3, #12]
 801dfdc:	685b      	ldr	r3, [r3, #4]
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f7fa fe33 	bl	8018c4a <lwip_htonl>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	dc20      	bgt.n	801e02e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	8b5b      	ldrh	r3, [r3, #26]
 801dff0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801dff4:	b29a      	uxth	r2, r3
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dffa:	e018      	b.n	801e02e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e004:	68db      	ldr	r3, [r3, #12]
 801e006:	685b      	ldr	r3, [r3, #4]
 801e008:	4618      	mov	r0, r3
 801e00a:	f7fa fe1e 	bl	8018c4a <lwip_htonl>
 801e00e:	4603      	mov	r3, r0
 801e010:	1ae3      	subs	r3, r4, r3
 801e012:	2b00      	cmp	r3, #0
 801e014:	dc0b      	bgt.n	801e02e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	8b5b      	ldrh	r3, [r3, #26]
 801e01a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801e01e:	b29a      	uxth	r2, r3
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e024:	e003      	b.n	801e02e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801e026:	6878      	ldr	r0, [r7, #4]
 801e028:	f002 fbc8 	bl	80207bc <tcp_send_empty_ack>
 801e02c:	e000      	b.n	801e030 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e02e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e034:	2b00      	cmp	r3, #0
 801e036:	d05b      	beq.n	801e0f0 <tcp_receive+0x50c>
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e03c:	4b60      	ldr	r3, [pc, #384]	@ (801e1c0 <tcp_receive+0x5dc>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	1ad3      	subs	r3, r2, r3
 801e042:	2b00      	cmp	r3, #0
 801e044:	da54      	bge.n	801e0f0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e046:	4b5f      	ldr	r3, [pc, #380]	@ (801e1c4 <tcp_receive+0x5e0>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	b29a      	uxth	r2, r3
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e050:	b29b      	uxth	r3, r3
 801e052:	1ad3      	subs	r3, r2, r3
 801e054:	b29b      	uxth	r3, r3
 801e056:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801e05a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e064:	10db      	asrs	r3, r3, #3
 801e066:	b21b      	sxth	r3, r3
 801e068:	b29b      	uxth	r3, r3
 801e06a:	1ad3      	subs	r3, r2, r3
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e078:	b29a      	uxth	r2, r3
 801e07a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e07e:	4413      	add	r3, r2
 801e080:	b29b      	uxth	r3, r3
 801e082:	b21a      	sxth	r2, r3
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801e088:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	da05      	bge.n	801e09c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801e090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e094:	425b      	negs	r3, r3
 801e096:	b29b      	uxth	r3, r3
 801e098:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801e09c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e0a6:	109b      	asrs	r3, r3, #2
 801e0a8:	b21b      	sxth	r3, r3
 801e0aa:	b29b      	uxth	r3, r3
 801e0ac:	1ad3      	subs	r3, r2, r3
 801e0ae:	b29b      	uxth	r3, r3
 801e0b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e0ba:	b29a      	uxth	r2, r3
 801e0bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801e0c0:	4413      	add	r3, r2
 801e0c2:	b29b      	uxth	r3, r3
 801e0c4:	b21a      	sxth	r2, r3
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801e0d0:	10db      	asrs	r3, r3, #3
 801e0d2:	b21b      	sxth	r3, r3
 801e0d4:	b29a      	uxth	r2, r3
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801e0dc:	b29b      	uxth	r3, r3
 801e0de:	4413      	add	r3, r2
 801e0e0:	b29b      	uxth	r3, r3
 801e0e2:	b21a      	sxth	r2, r3
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e0f0:	4b35      	ldr	r3, [pc, #212]	@ (801e1c8 <tcp_receive+0x5e4>)
 801e0f2:	881b      	ldrh	r3, [r3, #0]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	f000 84df 	beq.w	801eab8 <tcp_receive+0xed4>
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	7d1b      	ldrb	r3, [r3, #20]
 801e0fe:	2b06      	cmp	r3, #6
 801e100:	f200 84da 	bhi.w	801eab8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e108:	4b30      	ldr	r3, [pc, #192]	@ (801e1cc <tcp_receive+0x5e8>)
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	1ad3      	subs	r3, r2, r3
 801e10e:	3b01      	subs	r3, #1
 801e110:	2b00      	cmp	r3, #0
 801e112:	f2c0 808f 	blt.w	801e234 <tcp_receive+0x650>
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e11a:	4b2b      	ldr	r3, [pc, #172]	@ (801e1c8 <tcp_receive+0x5e4>)
 801e11c:	881b      	ldrh	r3, [r3, #0]
 801e11e:	4619      	mov	r1, r3
 801e120:	4b2a      	ldr	r3, [pc, #168]	@ (801e1cc <tcp_receive+0x5e8>)
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	440b      	add	r3, r1
 801e126:	1ad3      	subs	r3, r2, r3
 801e128:	3301      	adds	r3, #1
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	f300 8082 	bgt.w	801e234 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801e130:	4b27      	ldr	r3, [pc, #156]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e132:	685b      	ldr	r3, [r3, #4]
 801e134:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e13a:	4b24      	ldr	r3, [pc, #144]	@ (801e1cc <tcp_receive+0x5e8>)
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	1ad3      	subs	r3, r2, r3
 801e140:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e142:	4b23      	ldr	r3, [pc, #140]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e144:	685b      	ldr	r3, [r3, #4]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d106      	bne.n	801e158 <tcp_receive+0x574>
 801e14a:	4b22      	ldr	r3, [pc, #136]	@ (801e1d4 <tcp_receive+0x5f0>)
 801e14c:	f240 5294 	movw	r2, #1428	@ 0x594
 801e150:	4921      	ldr	r1, [pc, #132]	@ (801e1d8 <tcp_receive+0x5f4>)
 801e152:	4822      	ldr	r0, [pc, #136]	@ (801e1dc <tcp_receive+0x5f8>)
 801e154:	f007 f98e 	bl	8025474 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e15a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e15e:	4293      	cmp	r3, r2
 801e160:	d906      	bls.n	801e170 <tcp_receive+0x58c>
 801e162:	4b1c      	ldr	r3, [pc, #112]	@ (801e1d4 <tcp_receive+0x5f0>)
 801e164:	f240 5295 	movw	r2, #1429	@ 0x595
 801e168:	491d      	ldr	r1, [pc, #116]	@ (801e1e0 <tcp_receive+0x5fc>)
 801e16a:	481c      	ldr	r0, [pc, #112]	@ (801e1dc <tcp_receive+0x5f8>)
 801e16c:	f007 f982 	bl	8025474 <iprintf>
      off = (u16_t)off32;
 801e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e172:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e176:	4b16      	ldr	r3, [pc, #88]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	891b      	ldrh	r3, [r3, #8]
 801e17c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e180:	429a      	cmp	r2, r3
 801e182:	d906      	bls.n	801e192 <tcp_receive+0x5ae>
 801e184:	4b13      	ldr	r3, [pc, #76]	@ (801e1d4 <tcp_receive+0x5f0>)
 801e186:	f240 5297 	movw	r2, #1431	@ 0x597
 801e18a:	4916      	ldr	r1, [pc, #88]	@ (801e1e4 <tcp_receive+0x600>)
 801e18c:	4813      	ldr	r0, [pc, #76]	@ (801e1dc <tcp_receive+0x5f8>)
 801e18e:	f007 f971 	bl	8025474 <iprintf>
      inseg.len -= off;
 801e192:	4b0f      	ldr	r3, [pc, #60]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e194:	891a      	ldrh	r2, [r3, #8]
 801e196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e19a:	1ad3      	subs	r3, r2, r3
 801e19c:	b29a      	uxth	r2, r3
 801e19e:	4b0c      	ldr	r3, [pc, #48]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e1a0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e1a2:	4b0b      	ldr	r3, [pc, #44]	@ (801e1d0 <tcp_receive+0x5ec>)
 801e1a4:	685b      	ldr	r3, [r3, #4]
 801e1a6:	891a      	ldrh	r2, [r3, #8]
 801e1a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e1ac:	1ad3      	subs	r3, r2, r3
 801e1ae:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801e1b0:	e02a      	b.n	801e208 <tcp_receive+0x624>
 801e1b2:	bf00      	nop
 801e1b4:	0802ba80 	.word	0x0802ba80
 801e1b8:	0802ba88 	.word	0x0802ba88
 801e1bc:	2400bea4 	.word	0x2400bea4
 801e1c0:	2400bea0 	.word	0x2400bea0
 801e1c4:	2400be64 	.word	0x2400be64
 801e1c8:	2400bea6 	.word	0x2400bea6
 801e1cc:	2400be9c 	.word	0x2400be9c
 801e1d0:	2400be7c 	.word	0x2400be7c
 801e1d4:	0802b718 	.word	0x0802b718
 801e1d8:	0802ba90 	.word	0x0802ba90
 801e1dc:	0802b764 	.word	0x0802b764
 801e1e0:	0802baa0 	.word	0x0802baa0
 801e1e4:	0802bab0 	.word	0x0802bab0
        off -= p->len;
 801e1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e1ea:	895b      	ldrh	r3, [r3, #10]
 801e1ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e1f0:	1ad3      	subs	r3, r2, r3
 801e1f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801e1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e1f8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e1fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801e1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e1fe:	2200      	movs	r2, #0
 801e200:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801e202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801e208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e20a:	895b      	ldrh	r3, [r3, #10]
 801e20c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e210:	429a      	cmp	r2, r3
 801e212:	d8e9      	bhi.n	801e1e8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801e214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e218:	4619      	mov	r1, r3
 801e21a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e21c:	f7fc f924 	bl	801a468 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e224:	4a90      	ldr	r2, [pc, #576]	@ (801e468 <tcp_receive+0x884>)
 801e226:	6013      	str	r3, [r2, #0]
 801e228:	4b90      	ldr	r3, [pc, #576]	@ (801e46c <tcp_receive+0x888>)
 801e22a:	68db      	ldr	r3, [r3, #12]
 801e22c:	4a8e      	ldr	r2, [pc, #568]	@ (801e468 <tcp_receive+0x884>)
 801e22e:	6812      	ldr	r2, [r2, #0]
 801e230:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e232:	e00d      	b.n	801e250 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e234:	4b8c      	ldr	r3, [pc, #560]	@ (801e468 <tcp_receive+0x884>)
 801e236:	681a      	ldr	r2, [r3, #0]
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e23c:	1ad3      	subs	r3, r2, r3
 801e23e:	2b00      	cmp	r3, #0
 801e240:	da06      	bge.n	801e250 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	8b5b      	ldrh	r3, [r3, #26]
 801e246:	f043 0302 	orr.w	r3, r3, #2
 801e24a:	b29a      	uxth	r2, r3
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e250:	4b85      	ldr	r3, [pc, #532]	@ (801e468 <tcp_receive+0x884>)
 801e252:	681a      	ldr	r2, [r3, #0]
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e258:	1ad3      	subs	r3, r2, r3
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	f2c0 8427 	blt.w	801eaae <tcp_receive+0xeca>
 801e260:	4b81      	ldr	r3, [pc, #516]	@ (801e468 <tcp_receive+0x884>)
 801e262:	681a      	ldr	r2, [r3, #0]
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e268:	6879      	ldr	r1, [r7, #4]
 801e26a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e26c:	440b      	add	r3, r1
 801e26e:	1ad3      	subs	r3, r2, r3
 801e270:	3301      	adds	r3, #1
 801e272:	2b00      	cmp	r3, #0
 801e274:	f300 841b 	bgt.w	801eaae <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e27c:	4b7a      	ldr	r3, [pc, #488]	@ (801e468 <tcp_receive+0x884>)
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	429a      	cmp	r2, r3
 801e282:	f040 8298 	bne.w	801e7b6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801e286:	4b79      	ldr	r3, [pc, #484]	@ (801e46c <tcp_receive+0x888>)
 801e288:	891c      	ldrh	r4, [r3, #8]
 801e28a:	4b78      	ldr	r3, [pc, #480]	@ (801e46c <tcp_receive+0x888>)
 801e28c:	68db      	ldr	r3, [r3, #12]
 801e28e:	899b      	ldrh	r3, [r3, #12]
 801e290:	b29b      	uxth	r3, r3
 801e292:	4618      	mov	r0, r3
 801e294:	f7fa fcc4 	bl	8018c20 <lwip_htons>
 801e298:	4603      	mov	r3, r0
 801e29a:	b2db      	uxtb	r3, r3
 801e29c:	f003 0303 	and.w	r3, r3, #3
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d001      	beq.n	801e2a8 <tcp_receive+0x6c4>
 801e2a4:	2301      	movs	r3, #1
 801e2a6:	e000      	b.n	801e2aa <tcp_receive+0x6c6>
 801e2a8:	2300      	movs	r3, #0
 801e2aa:	4423      	add	r3, r4
 801e2ac:	b29a      	uxth	r2, r3
 801e2ae:	4b70      	ldr	r3, [pc, #448]	@ (801e470 <tcp_receive+0x88c>)
 801e2b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e2b6:	4b6e      	ldr	r3, [pc, #440]	@ (801e470 <tcp_receive+0x88c>)
 801e2b8:	881b      	ldrh	r3, [r3, #0]
 801e2ba:	429a      	cmp	r2, r3
 801e2bc:	d274      	bcs.n	801e3a8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e2be:	4b6b      	ldr	r3, [pc, #428]	@ (801e46c <tcp_receive+0x888>)
 801e2c0:	68db      	ldr	r3, [r3, #12]
 801e2c2:	899b      	ldrh	r3, [r3, #12]
 801e2c4:	b29b      	uxth	r3, r3
 801e2c6:	4618      	mov	r0, r3
 801e2c8:	f7fa fcaa 	bl	8018c20 <lwip_htons>
 801e2cc:	4603      	mov	r3, r0
 801e2ce:	b2db      	uxtb	r3, r3
 801e2d0:	f003 0301 	and.w	r3, r3, #1
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d01e      	beq.n	801e316 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e2d8:	4b64      	ldr	r3, [pc, #400]	@ (801e46c <tcp_receive+0x888>)
 801e2da:	68db      	ldr	r3, [r3, #12]
 801e2dc:	899b      	ldrh	r3, [r3, #12]
 801e2de:	b29b      	uxth	r3, r3
 801e2e0:	b21b      	sxth	r3, r3
 801e2e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e2e6:	b21c      	sxth	r4, r3
 801e2e8:	4b60      	ldr	r3, [pc, #384]	@ (801e46c <tcp_receive+0x888>)
 801e2ea:	68db      	ldr	r3, [r3, #12]
 801e2ec:	899b      	ldrh	r3, [r3, #12]
 801e2ee:	b29b      	uxth	r3, r3
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	f7fa fc95 	bl	8018c20 <lwip_htons>
 801e2f6:	4603      	mov	r3, r0
 801e2f8:	b2db      	uxtb	r3, r3
 801e2fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e2fe:	b29b      	uxth	r3, r3
 801e300:	4618      	mov	r0, r3
 801e302:	f7fa fc8d 	bl	8018c20 <lwip_htons>
 801e306:	4603      	mov	r3, r0
 801e308:	b21b      	sxth	r3, r3
 801e30a:	4323      	orrs	r3, r4
 801e30c:	b21a      	sxth	r2, r3
 801e30e:	4b57      	ldr	r3, [pc, #348]	@ (801e46c <tcp_receive+0x888>)
 801e310:	68db      	ldr	r3, [r3, #12]
 801e312:	b292      	uxth	r2, r2
 801e314:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e31a:	4b54      	ldr	r3, [pc, #336]	@ (801e46c <tcp_receive+0x888>)
 801e31c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e31e:	4b53      	ldr	r3, [pc, #332]	@ (801e46c <tcp_receive+0x888>)
 801e320:	68db      	ldr	r3, [r3, #12]
 801e322:	899b      	ldrh	r3, [r3, #12]
 801e324:	b29b      	uxth	r3, r3
 801e326:	4618      	mov	r0, r3
 801e328:	f7fa fc7a 	bl	8018c20 <lwip_htons>
 801e32c:	4603      	mov	r3, r0
 801e32e:	b2db      	uxtb	r3, r3
 801e330:	f003 0302 	and.w	r3, r3, #2
 801e334:	2b00      	cmp	r3, #0
 801e336:	d005      	beq.n	801e344 <tcp_receive+0x760>
            inseg.len -= 1;
 801e338:	4b4c      	ldr	r3, [pc, #304]	@ (801e46c <tcp_receive+0x888>)
 801e33a:	891b      	ldrh	r3, [r3, #8]
 801e33c:	3b01      	subs	r3, #1
 801e33e:	b29a      	uxth	r2, r3
 801e340:	4b4a      	ldr	r3, [pc, #296]	@ (801e46c <tcp_receive+0x888>)
 801e342:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801e344:	4b49      	ldr	r3, [pc, #292]	@ (801e46c <tcp_receive+0x888>)
 801e346:	685b      	ldr	r3, [r3, #4]
 801e348:	4a48      	ldr	r2, [pc, #288]	@ (801e46c <tcp_receive+0x888>)
 801e34a:	8912      	ldrh	r2, [r2, #8]
 801e34c:	4611      	mov	r1, r2
 801e34e:	4618      	mov	r0, r3
 801e350:	f7fb ff8a 	bl	801a268 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e354:	4b45      	ldr	r3, [pc, #276]	@ (801e46c <tcp_receive+0x888>)
 801e356:	891c      	ldrh	r4, [r3, #8]
 801e358:	4b44      	ldr	r3, [pc, #272]	@ (801e46c <tcp_receive+0x888>)
 801e35a:	68db      	ldr	r3, [r3, #12]
 801e35c:	899b      	ldrh	r3, [r3, #12]
 801e35e:	b29b      	uxth	r3, r3
 801e360:	4618      	mov	r0, r3
 801e362:	f7fa fc5d 	bl	8018c20 <lwip_htons>
 801e366:	4603      	mov	r3, r0
 801e368:	b2db      	uxtb	r3, r3
 801e36a:	f003 0303 	and.w	r3, r3, #3
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d001      	beq.n	801e376 <tcp_receive+0x792>
 801e372:	2301      	movs	r3, #1
 801e374:	e000      	b.n	801e378 <tcp_receive+0x794>
 801e376:	2300      	movs	r3, #0
 801e378:	4423      	add	r3, r4
 801e37a:	b29a      	uxth	r2, r3
 801e37c:	4b3c      	ldr	r3, [pc, #240]	@ (801e470 <tcp_receive+0x88c>)
 801e37e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e380:	4b3b      	ldr	r3, [pc, #236]	@ (801e470 <tcp_receive+0x88c>)
 801e382:	881b      	ldrh	r3, [r3, #0]
 801e384:	461a      	mov	r2, r3
 801e386:	4b38      	ldr	r3, [pc, #224]	@ (801e468 <tcp_receive+0x884>)
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	441a      	add	r2, r3
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e390:	6879      	ldr	r1, [r7, #4]
 801e392:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e394:	440b      	add	r3, r1
 801e396:	429a      	cmp	r2, r3
 801e398:	d006      	beq.n	801e3a8 <tcp_receive+0x7c4>
 801e39a:	4b36      	ldr	r3, [pc, #216]	@ (801e474 <tcp_receive+0x890>)
 801e39c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801e3a0:	4935      	ldr	r1, [pc, #212]	@ (801e478 <tcp_receive+0x894>)
 801e3a2:	4836      	ldr	r0, [pc, #216]	@ (801e47c <tcp_receive+0x898>)
 801e3a4:	f007 f866 	bl	8025474 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	f000 80e6 	beq.w	801e57e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e3b2:	4b2e      	ldr	r3, [pc, #184]	@ (801e46c <tcp_receive+0x888>)
 801e3b4:	68db      	ldr	r3, [r3, #12]
 801e3b6:	899b      	ldrh	r3, [r3, #12]
 801e3b8:	b29b      	uxth	r3, r3
 801e3ba:	4618      	mov	r0, r3
 801e3bc:	f7fa fc30 	bl	8018c20 <lwip_htons>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	b2db      	uxtb	r3, r3
 801e3c4:	f003 0301 	and.w	r3, r3, #1
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d010      	beq.n	801e3ee <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801e3cc:	e00a      	b.n	801e3e4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3d2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3d8:	681a      	ldr	r2, [r3, #0]
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801e3de:	68f8      	ldr	r0, [r7, #12]
 801e3e0:	f7fd fcc5 	bl	801bd6e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d1f0      	bne.n	801e3ce <tcp_receive+0x7ea>
 801e3ec:	e0c7      	b.n	801e57e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801e3f4:	e051      	b.n	801e49a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e3f8:	68db      	ldr	r3, [r3, #12]
 801e3fa:	899b      	ldrh	r3, [r3, #12]
 801e3fc:	b29b      	uxth	r3, r3
 801e3fe:	4618      	mov	r0, r3
 801e400:	f7fa fc0e 	bl	8018c20 <lwip_htons>
 801e404:	4603      	mov	r3, r0
 801e406:	b2db      	uxtb	r3, r3
 801e408:	f003 0301 	and.w	r3, r3, #1
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d03c      	beq.n	801e48a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e410:	4b16      	ldr	r3, [pc, #88]	@ (801e46c <tcp_receive+0x888>)
 801e412:	68db      	ldr	r3, [r3, #12]
 801e414:	899b      	ldrh	r3, [r3, #12]
 801e416:	b29b      	uxth	r3, r3
 801e418:	4618      	mov	r0, r3
 801e41a:	f7fa fc01 	bl	8018c20 <lwip_htons>
 801e41e:	4603      	mov	r3, r0
 801e420:	b2db      	uxtb	r3, r3
 801e422:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e426:	2b00      	cmp	r3, #0
 801e428:	d12f      	bne.n	801e48a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e42a:	4b10      	ldr	r3, [pc, #64]	@ (801e46c <tcp_receive+0x888>)
 801e42c:	68db      	ldr	r3, [r3, #12]
 801e42e:	899b      	ldrh	r3, [r3, #12]
 801e430:	b29c      	uxth	r4, r3
 801e432:	2001      	movs	r0, #1
 801e434:	f7fa fbf4 	bl	8018c20 <lwip_htons>
 801e438:	4603      	mov	r3, r0
 801e43a:	461a      	mov	r2, r3
 801e43c:	4b0b      	ldr	r3, [pc, #44]	@ (801e46c <tcp_receive+0x888>)
 801e43e:	68db      	ldr	r3, [r3, #12]
 801e440:	4322      	orrs	r2, r4
 801e442:	b292      	uxth	r2, r2
 801e444:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e446:	4b09      	ldr	r3, [pc, #36]	@ (801e46c <tcp_receive+0x888>)
 801e448:	891c      	ldrh	r4, [r3, #8]
 801e44a:	4b08      	ldr	r3, [pc, #32]	@ (801e46c <tcp_receive+0x888>)
 801e44c:	68db      	ldr	r3, [r3, #12]
 801e44e:	899b      	ldrh	r3, [r3, #12]
 801e450:	b29b      	uxth	r3, r3
 801e452:	4618      	mov	r0, r3
 801e454:	f7fa fbe4 	bl	8018c20 <lwip_htons>
 801e458:	4603      	mov	r3, r0
 801e45a:	b2db      	uxtb	r3, r3
 801e45c:	f003 0303 	and.w	r3, r3, #3
 801e460:	2b00      	cmp	r3, #0
 801e462:	d00d      	beq.n	801e480 <tcp_receive+0x89c>
 801e464:	2301      	movs	r3, #1
 801e466:	e00c      	b.n	801e482 <tcp_receive+0x89e>
 801e468:	2400be9c 	.word	0x2400be9c
 801e46c:	2400be7c 	.word	0x2400be7c
 801e470:	2400bea6 	.word	0x2400bea6
 801e474:	0802b718 	.word	0x0802b718
 801e478:	0802bac0 	.word	0x0802bac0
 801e47c:	0802b764 	.word	0x0802b764
 801e480:	2300      	movs	r3, #0
 801e482:	4423      	add	r3, r4
 801e484:	b29a      	uxth	r2, r3
 801e486:	4b98      	ldr	r3, [pc, #608]	@ (801e6e8 <tcp_receive+0xb04>)
 801e488:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e48c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801e494:	6938      	ldr	r0, [r7, #16]
 801e496:	f7fd fc6a 	bl	801bd6e <tcp_seg_free>
            while (next &&
 801e49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d00e      	beq.n	801e4be <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e4a0:	4b91      	ldr	r3, [pc, #580]	@ (801e6e8 <tcp_receive+0xb04>)
 801e4a2:	881b      	ldrh	r3, [r3, #0]
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	4b91      	ldr	r3, [pc, #580]	@ (801e6ec <tcp_receive+0xb08>)
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	441a      	add	r2, r3
 801e4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e4ae:	68db      	ldr	r3, [r3, #12]
 801e4b0:	685b      	ldr	r3, [r3, #4]
 801e4b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e4b4:	8909      	ldrh	r1, [r1, #8]
 801e4b6:	440b      	add	r3, r1
 801e4b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	da9b      	bge.n	801e3f6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d059      	beq.n	801e578 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801e4c4:	4b88      	ldr	r3, [pc, #544]	@ (801e6e8 <tcp_receive+0xb04>)
 801e4c6:	881b      	ldrh	r3, [r3, #0]
 801e4c8:	461a      	mov	r2, r3
 801e4ca:	4b88      	ldr	r3, [pc, #544]	@ (801e6ec <tcp_receive+0xb08>)
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	441a      	add	r2, r3
 801e4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e4d2:	68db      	ldr	r3, [r3, #12]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	dd4d      	ble.n	801e578 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e4de:	68db      	ldr	r3, [r3, #12]
 801e4e0:	685b      	ldr	r3, [r3, #4]
 801e4e2:	b29a      	uxth	r2, r3
 801e4e4:	4b81      	ldr	r3, [pc, #516]	@ (801e6ec <tcp_receive+0xb08>)
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	b29b      	uxth	r3, r3
 801e4ea:	1ad3      	subs	r3, r2, r3
 801e4ec:	b29a      	uxth	r2, r3
 801e4ee:	4b80      	ldr	r3, [pc, #512]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e4f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e4f2:	4b7f      	ldr	r3, [pc, #508]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e4f4:	68db      	ldr	r3, [r3, #12]
 801e4f6:	899b      	ldrh	r3, [r3, #12]
 801e4f8:	b29b      	uxth	r3, r3
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	f7fa fb90 	bl	8018c20 <lwip_htons>
 801e500:	4603      	mov	r3, r0
 801e502:	b2db      	uxtb	r3, r3
 801e504:	f003 0302 	and.w	r3, r3, #2
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d005      	beq.n	801e518 <tcp_receive+0x934>
                inseg.len -= 1;
 801e50c:	4b78      	ldr	r3, [pc, #480]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e50e:	891b      	ldrh	r3, [r3, #8]
 801e510:	3b01      	subs	r3, #1
 801e512:	b29a      	uxth	r2, r3
 801e514:	4b76      	ldr	r3, [pc, #472]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e516:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e518:	4b75      	ldr	r3, [pc, #468]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e51a:	685b      	ldr	r3, [r3, #4]
 801e51c:	4a74      	ldr	r2, [pc, #464]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e51e:	8912      	ldrh	r2, [r2, #8]
 801e520:	4611      	mov	r1, r2
 801e522:	4618      	mov	r0, r3
 801e524:	f7fb fea0 	bl	801a268 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e528:	4b71      	ldr	r3, [pc, #452]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e52a:	891c      	ldrh	r4, [r3, #8]
 801e52c:	4b70      	ldr	r3, [pc, #448]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e52e:	68db      	ldr	r3, [r3, #12]
 801e530:	899b      	ldrh	r3, [r3, #12]
 801e532:	b29b      	uxth	r3, r3
 801e534:	4618      	mov	r0, r3
 801e536:	f7fa fb73 	bl	8018c20 <lwip_htons>
 801e53a:	4603      	mov	r3, r0
 801e53c:	b2db      	uxtb	r3, r3
 801e53e:	f003 0303 	and.w	r3, r3, #3
 801e542:	2b00      	cmp	r3, #0
 801e544:	d001      	beq.n	801e54a <tcp_receive+0x966>
 801e546:	2301      	movs	r3, #1
 801e548:	e000      	b.n	801e54c <tcp_receive+0x968>
 801e54a:	2300      	movs	r3, #0
 801e54c:	4423      	add	r3, r4
 801e54e:	b29a      	uxth	r2, r3
 801e550:	4b65      	ldr	r3, [pc, #404]	@ (801e6e8 <tcp_receive+0xb04>)
 801e552:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e554:	4b64      	ldr	r3, [pc, #400]	@ (801e6e8 <tcp_receive+0xb04>)
 801e556:	881b      	ldrh	r3, [r3, #0]
 801e558:	461a      	mov	r2, r3
 801e55a:	4b64      	ldr	r3, [pc, #400]	@ (801e6ec <tcp_receive+0xb08>)
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	441a      	add	r2, r3
 801e560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e562:	68db      	ldr	r3, [r3, #12]
 801e564:	685b      	ldr	r3, [r3, #4]
 801e566:	429a      	cmp	r2, r3
 801e568:	d006      	beq.n	801e578 <tcp_receive+0x994>
 801e56a:	4b62      	ldr	r3, [pc, #392]	@ (801e6f4 <tcp_receive+0xb10>)
 801e56c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801e570:	4961      	ldr	r1, [pc, #388]	@ (801e6f8 <tcp_receive+0xb14>)
 801e572:	4862      	ldr	r0, [pc, #392]	@ (801e6fc <tcp_receive+0xb18>)
 801e574:	f006 ff7e 	bl	8025474 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e57c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e57e:	4b5a      	ldr	r3, [pc, #360]	@ (801e6e8 <tcp_receive+0xb04>)
 801e580:	881b      	ldrh	r3, [r3, #0]
 801e582:	461a      	mov	r2, r3
 801e584:	4b59      	ldr	r3, [pc, #356]	@ (801e6ec <tcp_receive+0xb08>)
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	441a      	add	r2, r3
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e592:	4b55      	ldr	r3, [pc, #340]	@ (801e6e8 <tcp_receive+0xb04>)
 801e594:	881b      	ldrh	r3, [r3, #0]
 801e596:	429a      	cmp	r2, r3
 801e598:	d206      	bcs.n	801e5a8 <tcp_receive+0x9c4>
 801e59a:	4b56      	ldr	r3, [pc, #344]	@ (801e6f4 <tcp_receive+0xb10>)
 801e59c:	f240 6207 	movw	r2, #1543	@ 0x607
 801e5a0:	4957      	ldr	r1, [pc, #348]	@ (801e700 <tcp_receive+0xb1c>)
 801e5a2:	4856      	ldr	r0, [pc, #344]	@ (801e6fc <tcp_receive+0xb18>)
 801e5a4:	f006 ff66 	bl	8025474 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e5ac:	4b4e      	ldr	r3, [pc, #312]	@ (801e6e8 <tcp_receive+0xb04>)
 801e5ae:	881b      	ldrh	r3, [r3, #0]
 801e5b0:	1ad3      	subs	r3, r2, r3
 801e5b2:	b29a      	uxth	r2, r3
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e5b8:	6878      	ldr	r0, [r7, #4]
 801e5ba:	f7fc feb1 	bl	801b320 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e5be:	4b4c      	ldr	r3, [pc, #304]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e5c0:	685b      	ldr	r3, [r3, #4]
 801e5c2:	891b      	ldrh	r3, [r3, #8]
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d006      	beq.n	801e5d6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801e5c8:	4b49      	ldr	r3, [pc, #292]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e5ca:	685b      	ldr	r3, [r3, #4]
 801e5cc:	4a4d      	ldr	r2, [pc, #308]	@ (801e704 <tcp_receive+0xb20>)
 801e5ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e5d0:	4b47      	ldr	r3, [pc, #284]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e5d6:	4b46      	ldr	r3, [pc, #280]	@ (801e6f0 <tcp_receive+0xb0c>)
 801e5d8:	68db      	ldr	r3, [r3, #12]
 801e5da:	899b      	ldrh	r3, [r3, #12]
 801e5dc:	b29b      	uxth	r3, r3
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f7fa fb1e 	bl	8018c20 <lwip_htons>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	b2db      	uxtb	r3, r3
 801e5e8:	f003 0301 	and.w	r3, r3, #1
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	f000 80b8 	beq.w	801e762 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e5f2:	4b45      	ldr	r3, [pc, #276]	@ (801e708 <tcp_receive+0xb24>)
 801e5f4:	781b      	ldrb	r3, [r3, #0]
 801e5f6:	f043 0320 	orr.w	r3, r3, #32
 801e5fa:	b2da      	uxtb	r2, r3
 801e5fc:	4b42      	ldr	r3, [pc, #264]	@ (801e708 <tcp_receive+0xb24>)
 801e5fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e600:	e0af      	b.n	801e762 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e606:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e60c:	68db      	ldr	r3, [r3, #12]
 801e60e:	685b      	ldr	r3, [r3, #4]
 801e610:	4a36      	ldr	r2, [pc, #216]	@ (801e6ec <tcp_receive+0xb08>)
 801e612:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e614:	68bb      	ldr	r3, [r7, #8]
 801e616:	891b      	ldrh	r3, [r3, #8]
 801e618:	461c      	mov	r4, r3
 801e61a:	68bb      	ldr	r3, [r7, #8]
 801e61c:	68db      	ldr	r3, [r3, #12]
 801e61e:	899b      	ldrh	r3, [r3, #12]
 801e620:	b29b      	uxth	r3, r3
 801e622:	4618      	mov	r0, r3
 801e624:	f7fa fafc 	bl	8018c20 <lwip_htons>
 801e628:	4603      	mov	r3, r0
 801e62a:	b2db      	uxtb	r3, r3
 801e62c:	f003 0303 	and.w	r3, r3, #3
 801e630:	2b00      	cmp	r3, #0
 801e632:	d001      	beq.n	801e638 <tcp_receive+0xa54>
 801e634:	2301      	movs	r3, #1
 801e636:	e000      	b.n	801e63a <tcp_receive+0xa56>
 801e638:	2300      	movs	r3, #0
 801e63a:	191a      	adds	r2, r3, r4
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e640:	441a      	add	r2, r3
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e64a:	461c      	mov	r4, r3
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	891b      	ldrh	r3, [r3, #8]
 801e650:	461d      	mov	r5, r3
 801e652:	68bb      	ldr	r3, [r7, #8]
 801e654:	68db      	ldr	r3, [r3, #12]
 801e656:	899b      	ldrh	r3, [r3, #12]
 801e658:	b29b      	uxth	r3, r3
 801e65a:	4618      	mov	r0, r3
 801e65c:	f7fa fae0 	bl	8018c20 <lwip_htons>
 801e660:	4603      	mov	r3, r0
 801e662:	b2db      	uxtb	r3, r3
 801e664:	f003 0303 	and.w	r3, r3, #3
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d001      	beq.n	801e670 <tcp_receive+0xa8c>
 801e66c:	2301      	movs	r3, #1
 801e66e:	e000      	b.n	801e672 <tcp_receive+0xa8e>
 801e670:	2300      	movs	r3, #0
 801e672:	442b      	add	r3, r5
 801e674:	429c      	cmp	r4, r3
 801e676:	d206      	bcs.n	801e686 <tcp_receive+0xaa2>
 801e678:	4b1e      	ldr	r3, [pc, #120]	@ (801e6f4 <tcp_receive+0xb10>)
 801e67a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801e67e:	4923      	ldr	r1, [pc, #140]	@ (801e70c <tcp_receive+0xb28>)
 801e680:	481e      	ldr	r0, [pc, #120]	@ (801e6fc <tcp_receive+0xb18>)
 801e682:	f006 fef7 	bl	8025474 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e686:	68bb      	ldr	r3, [r7, #8]
 801e688:	891b      	ldrh	r3, [r3, #8]
 801e68a:	461c      	mov	r4, r3
 801e68c:	68bb      	ldr	r3, [r7, #8]
 801e68e:	68db      	ldr	r3, [r3, #12]
 801e690:	899b      	ldrh	r3, [r3, #12]
 801e692:	b29b      	uxth	r3, r3
 801e694:	4618      	mov	r0, r3
 801e696:	f7fa fac3 	bl	8018c20 <lwip_htons>
 801e69a:	4603      	mov	r3, r0
 801e69c:	b2db      	uxtb	r3, r3
 801e69e:	f003 0303 	and.w	r3, r3, #3
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d001      	beq.n	801e6aa <tcp_receive+0xac6>
 801e6a6:	2301      	movs	r3, #1
 801e6a8:	e000      	b.n	801e6ac <tcp_receive+0xac8>
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	1919      	adds	r1, r3, r4
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801e6b2:	b28b      	uxth	r3, r1
 801e6b4:	1ad3      	subs	r3, r2, r3
 801e6b6:	b29a      	uxth	r2, r3
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e6bc:	6878      	ldr	r0, [r7, #4]
 801e6be:	f7fc fe2f 	bl	801b320 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e6c2:	68bb      	ldr	r3, [r7, #8]
 801e6c4:	685b      	ldr	r3, [r3, #4]
 801e6c6:	891b      	ldrh	r3, [r3, #8]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d028      	beq.n	801e71e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e6cc:	4b0d      	ldr	r3, [pc, #52]	@ (801e704 <tcp_receive+0xb20>)
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d01d      	beq.n	801e710 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801e6d4:	4b0b      	ldr	r3, [pc, #44]	@ (801e704 <tcp_receive+0xb20>)
 801e6d6:	681a      	ldr	r2, [r3, #0]
 801e6d8:	68bb      	ldr	r3, [r7, #8]
 801e6da:	685b      	ldr	r3, [r3, #4]
 801e6dc:	4619      	mov	r1, r3
 801e6de:	4610      	mov	r0, r2
 801e6e0:	f7fc f848 	bl	801a774 <pbuf_cat>
 801e6e4:	e018      	b.n	801e718 <tcp_receive+0xb34>
 801e6e6:	bf00      	nop
 801e6e8:	2400bea6 	.word	0x2400bea6
 801e6ec:	2400be9c 	.word	0x2400be9c
 801e6f0:	2400be7c 	.word	0x2400be7c
 801e6f4:	0802b718 	.word	0x0802b718
 801e6f8:	0802baf8 	.word	0x0802baf8
 801e6fc:	0802b764 	.word	0x0802b764
 801e700:	0802bb34 	.word	0x0802bb34
 801e704:	2400beac 	.word	0x2400beac
 801e708:	2400bea9 	.word	0x2400bea9
 801e70c:	0802bb54 	.word	0x0802bb54
            } else {
              recv_data = cseg->p;
 801e710:	68bb      	ldr	r3, [r7, #8]
 801e712:	685b      	ldr	r3, [r3, #4]
 801e714:	4a70      	ldr	r2, [pc, #448]	@ (801e8d8 <tcp_receive+0xcf4>)
 801e716:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e718:	68bb      	ldr	r3, [r7, #8]
 801e71a:	2200      	movs	r2, #0
 801e71c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e71e:	68bb      	ldr	r3, [r7, #8]
 801e720:	68db      	ldr	r3, [r3, #12]
 801e722:	899b      	ldrh	r3, [r3, #12]
 801e724:	b29b      	uxth	r3, r3
 801e726:	4618      	mov	r0, r3
 801e728:	f7fa fa7a 	bl	8018c20 <lwip_htons>
 801e72c:	4603      	mov	r3, r0
 801e72e:	b2db      	uxtb	r3, r3
 801e730:	f003 0301 	and.w	r3, r3, #1
 801e734:	2b00      	cmp	r3, #0
 801e736:	d00d      	beq.n	801e754 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e738:	4b68      	ldr	r3, [pc, #416]	@ (801e8dc <tcp_receive+0xcf8>)
 801e73a:	781b      	ldrb	r3, [r3, #0]
 801e73c:	f043 0320 	orr.w	r3, r3, #32
 801e740:	b2da      	uxtb	r2, r3
 801e742:	4b66      	ldr	r3, [pc, #408]	@ (801e8dc <tcp_receive+0xcf8>)
 801e744:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	7d1b      	ldrb	r3, [r3, #20]
 801e74a:	2b04      	cmp	r3, #4
 801e74c:	d102      	bne.n	801e754 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	2207      	movs	r2, #7
 801e752:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e754:	68bb      	ldr	r3, [r7, #8]
 801e756:	681a      	ldr	r2, [r3, #0]
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801e75c:	68b8      	ldr	r0, [r7, #8]
 801e75e:	f7fd fb06 	bl	801bd6e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e766:	2b00      	cmp	r3, #0
 801e768:	d008      	beq.n	801e77c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e76e:	68db      	ldr	r3, [r3, #12]
 801e770:	685a      	ldr	r2, [r3, #4]
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801e776:	429a      	cmp	r2, r3
 801e778:	f43f af43 	beq.w	801e602 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	8b5b      	ldrh	r3, [r3, #26]
 801e780:	f003 0301 	and.w	r3, r3, #1
 801e784:	2b00      	cmp	r3, #0
 801e786:	d00e      	beq.n	801e7a6 <tcp_receive+0xbc2>
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	8b5b      	ldrh	r3, [r3, #26]
 801e78c:	f023 0301 	bic.w	r3, r3, #1
 801e790:	b29a      	uxth	r2, r3
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	835a      	strh	r2, [r3, #26]
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	8b5b      	ldrh	r3, [r3, #26]
 801e79a:	f043 0302 	orr.w	r3, r3, #2
 801e79e:	b29a      	uxth	r2, r3
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e7a4:	e187      	b.n	801eab6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	8b5b      	ldrh	r3, [r3, #26]
 801e7aa:	f043 0301 	orr.w	r3, r3, #1
 801e7ae:	b29a      	uxth	r2, r3
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e7b4:	e17f      	b.n	801eab6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d106      	bne.n	801e7cc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e7be:	4848      	ldr	r0, [pc, #288]	@ (801e8e0 <tcp_receive+0xcfc>)
 801e7c0:	f7fd faee 	bl	801bda0 <tcp_seg_copy>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	675a      	str	r2, [r3, #116]	@ 0x74
 801e7ca:	e16c      	b.n	801eaa6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e7d6:	e156      	b.n	801ea86 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801e7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7da:	68db      	ldr	r3, [r3, #12]
 801e7dc:	685a      	ldr	r2, [r3, #4]
 801e7de:	4b41      	ldr	r3, [pc, #260]	@ (801e8e4 <tcp_receive+0xd00>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	429a      	cmp	r2, r3
 801e7e4:	d11d      	bne.n	801e822 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e7e6:	4b3e      	ldr	r3, [pc, #248]	@ (801e8e0 <tcp_receive+0xcfc>)
 801e7e8:	891a      	ldrh	r2, [r3, #8]
 801e7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7ec:	891b      	ldrh	r3, [r3, #8]
 801e7ee:	429a      	cmp	r2, r3
 801e7f0:	f240 814e 	bls.w	801ea90 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e7f4:	483a      	ldr	r0, [pc, #232]	@ (801e8e0 <tcp_receive+0xcfc>)
 801e7f6:	f7fd fad3 	bl	801bda0 <tcp_seg_copy>
 801e7fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e7fc:	697b      	ldr	r3, [r7, #20]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f000 8148 	beq.w	801ea94 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801e804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e806:	2b00      	cmp	r3, #0
 801e808:	d003      	beq.n	801e812 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801e80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e80c:	697a      	ldr	r2, [r7, #20]
 801e80e:	601a      	str	r2, [r3, #0]
 801e810:	e002      	b.n	801e818 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	697a      	ldr	r2, [r7, #20]
 801e816:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e81a:	6978      	ldr	r0, [r7, #20]
 801e81c:	f7ff f8de 	bl	801d9dc <tcp_oos_insert_segment>
                }
                break;
 801e820:	e138      	b.n	801ea94 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e824:	2b00      	cmp	r3, #0
 801e826:	d117      	bne.n	801e858 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e828:	4b2e      	ldr	r3, [pc, #184]	@ (801e8e4 <tcp_receive+0xd00>)
 801e82a:	681a      	ldr	r2, [r3, #0]
 801e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e82e:	68db      	ldr	r3, [r3, #12]
 801e830:	685b      	ldr	r3, [r3, #4]
 801e832:	1ad3      	subs	r3, r2, r3
 801e834:	2b00      	cmp	r3, #0
 801e836:	da57      	bge.n	801e8e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e838:	4829      	ldr	r0, [pc, #164]	@ (801e8e0 <tcp_receive+0xcfc>)
 801e83a:	f7fd fab1 	bl	801bda0 <tcp_seg_copy>
 801e83e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e840:	69bb      	ldr	r3, [r7, #24]
 801e842:	2b00      	cmp	r3, #0
 801e844:	f000 8128 	beq.w	801ea98 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	69ba      	ldr	r2, [r7, #24]
 801e84c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e84e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e850:	69b8      	ldr	r0, [r7, #24]
 801e852:	f7ff f8c3 	bl	801d9dc <tcp_oos_insert_segment>
                  }
                  break;
 801e856:	e11f      	b.n	801ea98 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e858:	4b22      	ldr	r3, [pc, #136]	@ (801e8e4 <tcp_receive+0xd00>)
 801e85a:	681a      	ldr	r2, [r3, #0]
 801e85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e85e:	68db      	ldr	r3, [r3, #12]
 801e860:	685b      	ldr	r3, [r3, #4]
 801e862:	1ad3      	subs	r3, r2, r3
 801e864:	3b01      	subs	r3, #1
 801e866:	2b00      	cmp	r3, #0
 801e868:	db3e      	blt.n	801e8e8 <tcp_receive+0xd04>
 801e86a:	4b1e      	ldr	r3, [pc, #120]	@ (801e8e4 <tcp_receive+0xd00>)
 801e86c:	681a      	ldr	r2, [r3, #0]
 801e86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e870:	68db      	ldr	r3, [r3, #12]
 801e872:	685b      	ldr	r3, [r3, #4]
 801e874:	1ad3      	subs	r3, r2, r3
 801e876:	3301      	adds	r3, #1
 801e878:	2b00      	cmp	r3, #0
 801e87a:	dc35      	bgt.n	801e8e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e87c:	4818      	ldr	r0, [pc, #96]	@ (801e8e0 <tcp_receive+0xcfc>)
 801e87e:	f7fd fa8f 	bl	801bda0 <tcp_seg_copy>
 801e882:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e884:	69fb      	ldr	r3, [r7, #28]
 801e886:	2b00      	cmp	r3, #0
 801e888:	f000 8108 	beq.w	801ea9c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e88e:	68db      	ldr	r3, [r3, #12]
 801e890:	685b      	ldr	r3, [r3, #4]
 801e892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e894:	8912      	ldrh	r2, [r2, #8]
 801e896:	441a      	add	r2, r3
 801e898:	4b12      	ldr	r3, [pc, #72]	@ (801e8e4 <tcp_receive+0xd00>)
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	1ad3      	subs	r3, r2, r3
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	dd12      	ble.n	801e8c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e8a2:	4b10      	ldr	r3, [pc, #64]	@ (801e8e4 <tcp_receive+0xd00>)
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	b29a      	uxth	r2, r3
 801e8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8aa:	68db      	ldr	r3, [r3, #12]
 801e8ac:	685b      	ldr	r3, [r3, #4]
 801e8ae:	b29b      	uxth	r3, r3
 801e8b0:	1ad3      	subs	r3, r2, r3
 801e8b2:	b29a      	uxth	r2, r3
 801e8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8ba:	685a      	ldr	r2, [r3, #4]
 801e8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8be:	891b      	ldrh	r3, [r3, #8]
 801e8c0:	4619      	mov	r1, r3
 801e8c2:	4610      	mov	r0, r2
 801e8c4:	f7fb fcd0 	bl	801a268 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8ca:	69fa      	ldr	r2, [r7, #28]
 801e8cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e8ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801e8d0:	69f8      	ldr	r0, [r7, #28]
 801e8d2:	f7ff f883 	bl	801d9dc <tcp_oos_insert_segment>
                  }
                  break;
 801e8d6:	e0e1      	b.n	801ea9c <tcp_receive+0xeb8>
 801e8d8:	2400beac 	.word	0x2400beac
 801e8dc:	2400bea9 	.word	0x2400bea9
 801e8e0:	2400be7c 	.word	0x2400be7c
 801e8e4:	2400be9c 	.word	0x2400be9c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8ea:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	f040 80c5 	bne.w	801ea80 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e8f6:	4b7f      	ldr	r3, [pc, #508]	@ (801eaf4 <tcp_receive+0xf10>)
 801e8f8:	681a      	ldr	r2, [r3, #0]
 801e8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e8fc:	68db      	ldr	r3, [r3, #12]
 801e8fe:	685b      	ldr	r3, [r3, #4]
 801e900:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e902:	2b00      	cmp	r3, #0
 801e904:	f340 80bc 	ble.w	801ea80 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e90a:	68db      	ldr	r3, [r3, #12]
 801e90c:	899b      	ldrh	r3, [r3, #12]
 801e90e:	b29b      	uxth	r3, r3
 801e910:	4618      	mov	r0, r3
 801e912:	f7fa f985 	bl	8018c20 <lwip_htons>
 801e916:	4603      	mov	r3, r0
 801e918:	b2db      	uxtb	r3, r3
 801e91a:	f003 0301 	and.w	r3, r3, #1
 801e91e:	2b00      	cmp	r3, #0
 801e920:	f040 80be 	bne.w	801eaa0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e924:	4874      	ldr	r0, [pc, #464]	@ (801eaf8 <tcp_receive+0xf14>)
 801e926:	f7fd fa3b 	bl	801bda0 <tcp_seg_copy>
 801e92a:	4602      	mov	r2, r0
 801e92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e92e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	2b00      	cmp	r3, #0
 801e936:	f000 80b5 	beq.w	801eaa4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e93c:	68db      	ldr	r3, [r3, #12]
 801e93e:	685b      	ldr	r3, [r3, #4]
 801e940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e942:	8912      	ldrh	r2, [r2, #8]
 801e944:	441a      	add	r2, r3
 801e946:	4b6b      	ldr	r3, [pc, #428]	@ (801eaf4 <tcp_receive+0xf10>)
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	1ad3      	subs	r3, r2, r3
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	dd12      	ble.n	801e976 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e950:	4b68      	ldr	r3, [pc, #416]	@ (801eaf4 <tcp_receive+0xf10>)
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	b29a      	uxth	r2, r3
 801e956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e958:	68db      	ldr	r3, [r3, #12]
 801e95a:	685b      	ldr	r3, [r3, #4]
 801e95c:	b29b      	uxth	r3, r3
 801e95e:	1ad3      	subs	r3, r2, r3
 801e960:	b29a      	uxth	r2, r3
 801e962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e964:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e968:	685a      	ldr	r2, [r3, #4]
 801e96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e96c:	891b      	ldrh	r3, [r3, #8]
 801e96e:	4619      	mov	r1, r3
 801e970:	4610      	mov	r0, r2
 801e972:	f7fb fc79 	bl	801a268 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e976:	4b61      	ldr	r3, [pc, #388]	@ (801eafc <tcp_receive+0xf18>)
 801e978:	881b      	ldrh	r3, [r3, #0]
 801e97a:	461a      	mov	r2, r3
 801e97c:	4b5d      	ldr	r3, [pc, #372]	@ (801eaf4 <tcp_receive+0xf10>)
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	441a      	add	r2, r3
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e986:	6879      	ldr	r1, [r7, #4]
 801e988:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e98a:	440b      	add	r3, r1
 801e98c:	1ad3      	subs	r3, r2, r3
 801e98e:	2b00      	cmp	r3, #0
 801e990:	f340 8088 	ble.w	801eaa4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	68db      	ldr	r3, [r3, #12]
 801e99a:	899b      	ldrh	r3, [r3, #12]
 801e99c:	b29b      	uxth	r3, r3
 801e99e:	4618      	mov	r0, r3
 801e9a0:	f7fa f93e 	bl	8018c20 <lwip_htons>
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	b2db      	uxtb	r3, r3
 801e9a8:	f003 0301 	and.w	r3, r3, #1
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d021      	beq.n	801e9f4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	68db      	ldr	r3, [r3, #12]
 801e9b6:	899b      	ldrh	r3, [r3, #12]
 801e9b8:	b29b      	uxth	r3, r3
 801e9ba:	b21b      	sxth	r3, r3
 801e9bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e9c0:	b21c      	sxth	r4, r3
 801e9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	68db      	ldr	r3, [r3, #12]
 801e9c8:	899b      	ldrh	r3, [r3, #12]
 801e9ca:	b29b      	uxth	r3, r3
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	f7fa f927 	bl	8018c20 <lwip_htons>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	b2db      	uxtb	r3, r3
 801e9d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801e9da:	b29b      	uxth	r3, r3
 801e9dc:	4618      	mov	r0, r3
 801e9de:	f7fa f91f 	bl	8018c20 <lwip_htons>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	b21b      	sxth	r3, r3
 801e9e6:	4323      	orrs	r3, r4
 801e9e8:	b21a      	sxth	r2, r3
 801e9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	68db      	ldr	r3, [r3, #12]
 801e9f0:	b292      	uxth	r2, r2
 801e9f2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e9f8:	b29a      	uxth	r2, r3
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e9fe:	4413      	add	r3, r2
 801ea00:	b299      	uxth	r1, r3
 801ea02:	4b3c      	ldr	r3, [pc, #240]	@ (801eaf4 <tcp_receive+0xf10>)
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	b29a      	uxth	r2, r3
 801ea08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	1a8a      	subs	r2, r1, r2
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801ea12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea14:	681b      	ldr	r3, [r3, #0]
 801ea16:	685a      	ldr	r2, [r3, #4]
 801ea18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	891b      	ldrh	r3, [r3, #8]
 801ea1e:	4619      	mov	r1, r3
 801ea20:	4610      	mov	r0, r2
 801ea22:	f7fb fc21 	bl	801a268 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801ea26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	891c      	ldrh	r4, [r3, #8]
 801ea2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	68db      	ldr	r3, [r3, #12]
 801ea32:	899b      	ldrh	r3, [r3, #12]
 801ea34:	b29b      	uxth	r3, r3
 801ea36:	4618      	mov	r0, r3
 801ea38:	f7fa f8f2 	bl	8018c20 <lwip_htons>
 801ea3c:	4603      	mov	r3, r0
 801ea3e:	b2db      	uxtb	r3, r3
 801ea40:	f003 0303 	and.w	r3, r3, #3
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d001      	beq.n	801ea4c <tcp_receive+0xe68>
 801ea48:	2301      	movs	r3, #1
 801ea4a:	e000      	b.n	801ea4e <tcp_receive+0xe6a>
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	4423      	add	r3, r4
 801ea50:	b29a      	uxth	r2, r3
 801ea52:	4b2a      	ldr	r3, [pc, #168]	@ (801eafc <tcp_receive+0xf18>)
 801ea54:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ea56:	4b29      	ldr	r3, [pc, #164]	@ (801eafc <tcp_receive+0xf18>)
 801ea58:	881b      	ldrh	r3, [r3, #0]
 801ea5a:	461a      	mov	r2, r3
 801ea5c:	4b25      	ldr	r3, [pc, #148]	@ (801eaf4 <tcp_receive+0xf10>)
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	441a      	add	r2, r3
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ea66:	6879      	ldr	r1, [r7, #4]
 801ea68:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ea6a:	440b      	add	r3, r1
 801ea6c:	429a      	cmp	r2, r3
 801ea6e:	d019      	beq.n	801eaa4 <tcp_receive+0xec0>
 801ea70:	4b23      	ldr	r3, [pc, #140]	@ (801eb00 <tcp_receive+0xf1c>)
 801ea72:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801ea76:	4923      	ldr	r1, [pc, #140]	@ (801eb04 <tcp_receive+0xf20>)
 801ea78:	4823      	ldr	r0, [pc, #140]	@ (801eb08 <tcp_receive+0xf24>)
 801ea7a:	f006 fcfb 	bl	8025474 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ea7e:	e011      	b.n	801eaa4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ea80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	f47f aea5 	bne.w	801e7d8 <tcp_receive+0xbf4>
 801ea8e:	e00a      	b.n	801eaa6 <tcp_receive+0xec2>
                break;
 801ea90:	bf00      	nop
 801ea92:	e008      	b.n	801eaa6 <tcp_receive+0xec2>
                break;
 801ea94:	bf00      	nop
 801ea96:	e006      	b.n	801eaa6 <tcp_receive+0xec2>
                  break;
 801ea98:	bf00      	nop
 801ea9a:	e004      	b.n	801eaa6 <tcp_receive+0xec2>
                  break;
 801ea9c:	bf00      	nop
 801ea9e:	e002      	b.n	801eaa6 <tcp_receive+0xec2>
                  break;
 801eaa0:	bf00      	nop
 801eaa2:	e000      	b.n	801eaa6 <tcp_receive+0xec2>
                break;
 801eaa4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801eaa6:	6878      	ldr	r0, [r7, #4]
 801eaa8:	f001 fe88 	bl	80207bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801eaac:	e003      	b.n	801eab6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801eaae:	6878      	ldr	r0, [r7, #4]
 801eab0:	f001 fe84 	bl	80207bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801eab4:	e01a      	b.n	801eaec <tcp_receive+0xf08>
 801eab6:	e019      	b.n	801eaec <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801eab8:	4b0e      	ldr	r3, [pc, #56]	@ (801eaf4 <tcp_receive+0xf10>)
 801eaba:	681a      	ldr	r2, [r3, #0]
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eac0:	1ad3      	subs	r3, r2, r3
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	db0a      	blt.n	801eadc <tcp_receive+0xef8>
 801eac6:	4b0b      	ldr	r3, [pc, #44]	@ (801eaf4 <tcp_receive+0xf10>)
 801eac8:	681a      	ldr	r2, [r3, #0]
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eace:	6879      	ldr	r1, [r7, #4]
 801ead0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801ead2:	440b      	add	r3, r1
 801ead4:	1ad3      	subs	r3, r2, r3
 801ead6:	3301      	adds	r3, #1
 801ead8:	2b00      	cmp	r3, #0
 801eada:	dd07      	ble.n	801eaec <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	8b5b      	ldrh	r3, [r3, #26]
 801eae0:	f043 0302 	orr.w	r3, r3, #2
 801eae4:	b29a      	uxth	r2, r3
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801eaea:	e7ff      	b.n	801eaec <tcp_receive+0xf08>
 801eaec:	bf00      	nop
 801eaee:	3750      	adds	r7, #80	@ 0x50
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	bdb0      	pop	{r4, r5, r7, pc}
 801eaf4:	2400be9c 	.word	0x2400be9c
 801eaf8:	2400be7c 	.word	0x2400be7c
 801eafc:	2400bea6 	.word	0x2400bea6
 801eb00:	0802b718 	.word	0x0802b718
 801eb04:	0802bac0 	.word	0x0802bac0
 801eb08:	0802b764 	.word	0x0802b764

0801eb0c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801eb0c:	b480      	push	{r7}
 801eb0e:	b083      	sub	sp, #12
 801eb10:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801eb12:	4b15      	ldr	r3, [pc, #84]	@ (801eb68 <tcp_get_next_optbyte+0x5c>)
 801eb14:	881b      	ldrh	r3, [r3, #0]
 801eb16:	1c5a      	adds	r2, r3, #1
 801eb18:	b291      	uxth	r1, r2
 801eb1a:	4a13      	ldr	r2, [pc, #76]	@ (801eb68 <tcp_get_next_optbyte+0x5c>)
 801eb1c:	8011      	strh	r1, [r2, #0]
 801eb1e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eb20:	4b12      	ldr	r3, [pc, #72]	@ (801eb6c <tcp_get_next_optbyte+0x60>)
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d004      	beq.n	801eb32 <tcp_get_next_optbyte+0x26>
 801eb28:	4b11      	ldr	r3, [pc, #68]	@ (801eb70 <tcp_get_next_optbyte+0x64>)
 801eb2a:	881b      	ldrh	r3, [r3, #0]
 801eb2c:	88fa      	ldrh	r2, [r7, #6]
 801eb2e:	429a      	cmp	r2, r3
 801eb30:	d208      	bcs.n	801eb44 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801eb32:	4b10      	ldr	r3, [pc, #64]	@ (801eb74 <tcp_get_next_optbyte+0x68>)
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	3314      	adds	r3, #20
 801eb38:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801eb3a:	88fb      	ldrh	r3, [r7, #6]
 801eb3c:	683a      	ldr	r2, [r7, #0]
 801eb3e:	4413      	add	r3, r2
 801eb40:	781b      	ldrb	r3, [r3, #0]
 801eb42:	e00b      	b.n	801eb5c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801eb44:	88fb      	ldrh	r3, [r7, #6]
 801eb46:	b2da      	uxtb	r2, r3
 801eb48:	4b09      	ldr	r3, [pc, #36]	@ (801eb70 <tcp_get_next_optbyte+0x64>)
 801eb4a:	881b      	ldrh	r3, [r3, #0]
 801eb4c:	b2db      	uxtb	r3, r3
 801eb4e:	1ad3      	subs	r3, r2, r3
 801eb50:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801eb52:	4b06      	ldr	r3, [pc, #24]	@ (801eb6c <tcp_get_next_optbyte+0x60>)
 801eb54:	681a      	ldr	r2, [r3, #0]
 801eb56:	797b      	ldrb	r3, [r7, #5]
 801eb58:	4413      	add	r3, r2
 801eb5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	370c      	adds	r7, #12
 801eb60:	46bd      	mov	sp, r7
 801eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb66:	4770      	bx	lr
 801eb68:	2400be98 	.word	0x2400be98
 801eb6c:	2400be94 	.word	0x2400be94
 801eb70:	2400be92 	.word	0x2400be92
 801eb74:	2400be8c 	.word	0x2400be8c

0801eb78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801eb78:	b580      	push	{r7, lr}
 801eb7a:	b084      	sub	sp, #16
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d106      	bne.n	801eb94 <tcp_parseopt+0x1c>
 801eb86:	4b32      	ldr	r3, [pc, #200]	@ (801ec50 <tcp_parseopt+0xd8>)
 801eb88:	f240 727d 	movw	r2, #1917	@ 0x77d
 801eb8c:	4931      	ldr	r1, [pc, #196]	@ (801ec54 <tcp_parseopt+0xdc>)
 801eb8e:	4832      	ldr	r0, [pc, #200]	@ (801ec58 <tcp_parseopt+0xe0>)
 801eb90:	f006 fc70 	bl	8025474 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801eb94:	4b31      	ldr	r3, [pc, #196]	@ (801ec5c <tcp_parseopt+0xe4>)
 801eb96:	881b      	ldrh	r3, [r3, #0]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d056      	beq.n	801ec4a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801eb9c:	4b30      	ldr	r3, [pc, #192]	@ (801ec60 <tcp_parseopt+0xe8>)
 801eb9e:	2200      	movs	r2, #0
 801eba0:	801a      	strh	r2, [r3, #0]
 801eba2:	e046      	b.n	801ec32 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801eba4:	f7ff ffb2 	bl	801eb0c <tcp_get_next_optbyte>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801ebac:	7bfb      	ldrb	r3, [r7, #15]
 801ebae:	2b02      	cmp	r3, #2
 801ebb0:	d006      	beq.n	801ebc0 <tcp_parseopt+0x48>
 801ebb2:	2b02      	cmp	r3, #2
 801ebb4:	dc2a      	bgt.n	801ec0c <tcp_parseopt+0x94>
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	d042      	beq.n	801ec40 <tcp_parseopt+0xc8>
 801ebba:	2b01      	cmp	r3, #1
 801ebbc:	d038      	beq.n	801ec30 <tcp_parseopt+0xb8>
 801ebbe:	e025      	b.n	801ec0c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ebc0:	f7ff ffa4 	bl	801eb0c <tcp_get_next_optbyte>
 801ebc4:	4603      	mov	r3, r0
 801ebc6:	2b04      	cmp	r3, #4
 801ebc8:	d13c      	bne.n	801ec44 <tcp_parseopt+0xcc>
 801ebca:	4b25      	ldr	r3, [pc, #148]	@ (801ec60 <tcp_parseopt+0xe8>)
 801ebcc:	881b      	ldrh	r3, [r3, #0]
 801ebce:	3301      	adds	r3, #1
 801ebd0:	4a22      	ldr	r2, [pc, #136]	@ (801ec5c <tcp_parseopt+0xe4>)
 801ebd2:	8812      	ldrh	r2, [r2, #0]
 801ebd4:	4293      	cmp	r3, r2
 801ebd6:	da35      	bge.n	801ec44 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ebd8:	f7ff ff98 	bl	801eb0c <tcp_get_next_optbyte>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	021b      	lsls	r3, r3, #8
 801ebe0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801ebe2:	f7ff ff93 	bl	801eb0c <tcp_get_next_optbyte>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	461a      	mov	r2, r3
 801ebea:	89bb      	ldrh	r3, [r7, #12]
 801ebec:	4313      	orrs	r3, r2
 801ebee:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ebf0:	89bb      	ldrh	r3, [r7, #12]
 801ebf2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801ebf6:	d804      	bhi.n	801ec02 <tcp_parseopt+0x8a>
 801ebf8:	89bb      	ldrh	r3, [r7, #12]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d001      	beq.n	801ec02 <tcp_parseopt+0x8a>
 801ebfe:	89ba      	ldrh	r2, [r7, #12]
 801ec00:	e001      	b.n	801ec06 <tcp_parseopt+0x8e>
 801ec02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801ec0a:	e012      	b.n	801ec32 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801ec0c:	f7ff ff7e 	bl	801eb0c <tcp_get_next_optbyte>
 801ec10:	4603      	mov	r3, r0
 801ec12:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ec14:	7afb      	ldrb	r3, [r7, #11]
 801ec16:	2b01      	cmp	r3, #1
 801ec18:	d916      	bls.n	801ec48 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ec1a:	7afb      	ldrb	r3, [r7, #11]
 801ec1c:	b29a      	uxth	r2, r3
 801ec1e:	4b10      	ldr	r3, [pc, #64]	@ (801ec60 <tcp_parseopt+0xe8>)
 801ec20:	881b      	ldrh	r3, [r3, #0]
 801ec22:	4413      	add	r3, r2
 801ec24:	b29b      	uxth	r3, r3
 801ec26:	3b02      	subs	r3, #2
 801ec28:	b29a      	uxth	r2, r3
 801ec2a:	4b0d      	ldr	r3, [pc, #52]	@ (801ec60 <tcp_parseopt+0xe8>)
 801ec2c:	801a      	strh	r2, [r3, #0]
 801ec2e:	e000      	b.n	801ec32 <tcp_parseopt+0xba>
          break;
 801ec30:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec32:	4b0b      	ldr	r3, [pc, #44]	@ (801ec60 <tcp_parseopt+0xe8>)
 801ec34:	881a      	ldrh	r2, [r3, #0]
 801ec36:	4b09      	ldr	r3, [pc, #36]	@ (801ec5c <tcp_parseopt+0xe4>)
 801ec38:	881b      	ldrh	r3, [r3, #0]
 801ec3a:	429a      	cmp	r2, r3
 801ec3c:	d3b2      	bcc.n	801eba4 <tcp_parseopt+0x2c>
 801ec3e:	e004      	b.n	801ec4a <tcp_parseopt+0xd2>
          return;
 801ec40:	bf00      	nop
 801ec42:	e002      	b.n	801ec4a <tcp_parseopt+0xd2>
            return;
 801ec44:	bf00      	nop
 801ec46:	e000      	b.n	801ec4a <tcp_parseopt+0xd2>
            return;
 801ec48:	bf00      	nop
      }
    }
  }
}
 801ec4a:	3710      	adds	r7, #16
 801ec4c:	46bd      	mov	sp, r7
 801ec4e:	bd80      	pop	{r7, pc}
 801ec50:	0802b718 	.word	0x0802b718
 801ec54:	0802bb7c 	.word	0x0802bb7c
 801ec58:	0802b764 	.word	0x0802b764
 801ec5c:	2400be90 	.word	0x2400be90
 801ec60:	2400be98 	.word	0x2400be98

0801ec64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ec64:	b480      	push	{r7}
 801ec66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ec68:	4b05      	ldr	r3, [pc, #20]	@ (801ec80 <tcp_trigger_input_pcb_close+0x1c>)
 801ec6a:	781b      	ldrb	r3, [r3, #0]
 801ec6c:	f043 0310 	orr.w	r3, r3, #16
 801ec70:	b2da      	uxtb	r2, r3
 801ec72:	4b03      	ldr	r3, [pc, #12]	@ (801ec80 <tcp_trigger_input_pcb_close+0x1c>)
 801ec74:	701a      	strb	r2, [r3, #0]
}
 801ec76:	bf00      	nop
 801ec78:	46bd      	mov	sp, r7
 801ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec7e:	4770      	bx	lr
 801ec80:	2400bea9 	.word	0x2400bea9

0801ec84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b084      	sub	sp, #16
 801ec88:	af00      	add	r7, sp, #0
 801ec8a:	60f8      	str	r0, [r7, #12]
 801ec8c:	60b9      	str	r1, [r7, #8]
 801ec8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d00a      	beq.n	801ecac <tcp_route+0x28>
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	7a1b      	ldrb	r3, [r3, #8]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d006      	beq.n	801ecac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ec9e:	68fb      	ldr	r3, [r7, #12]
 801eca0:	7a1b      	ldrb	r3, [r3, #8]
 801eca2:	4618      	mov	r0, r3
 801eca4:	f7fb f8d8 	bl	8019e58 <netif_get_by_index>
 801eca8:	4603      	mov	r3, r0
 801ecaa:	e003      	b.n	801ecb4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ecac:	6878      	ldr	r0, [r7, #4]
 801ecae:	f003 fe59 	bl	8022964 <ip4_route>
 801ecb2:	4603      	mov	r3, r0
  }
}
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	3710      	adds	r7, #16
 801ecb8:	46bd      	mov	sp, r7
 801ecba:	bd80      	pop	{r7, pc}

0801ecbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ecbc:	b590      	push	{r4, r7, lr}
 801ecbe:	b087      	sub	sp, #28
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	60f8      	str	r0, [r7, #12]
 801ecc4:	60b9      	str	r1, [r7, #8]
 801ecc6:	603b      	str	r3, [r7, #0]
 801ecc8:	4613      	mov	r3, r2
 801ecca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801eccc:	68fb      	ldr	r3, [r7, #12]
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d105      	bne.n	801ecde <tcp_create_segment+0x22>
 801ecd2:	4b43      	ldr	r3, [pc, #268]	@ (801ede0 <tcp_create_segment+0x124>)
 801ecd4:	22a3      	movs	r2, #163	@ 0xa3
 801ecd6:	4943      	ldr	r1, [pc, #268]	@ (801ede4 <tcp_create_segment+0x128>)
 801ecd8:	4843      	ldr	r0, [pc, #268]	@ (801ede8 <tcp_create_segment+0x12c>)
 801ecda:	f006 fbcb 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ecde:	68bb      	ldr	r3, [r7, #8]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d105      	bne.n	801ecf0 <tcp_create_segment+0x34>
 801ece4:	4b3e      	ldr	r3, [pc, #248]	@ (801ede0 <tcp_create_segment+0x124>)
 801ece6:	22a4      	movs	r2, #164	@ 0xa4
 801ece8:	4940      	ldr	r1, [pc, #256]	@ (801edec <tcp_create_segment+0x130>)
 801ecea:	483f      	ldr	r0, [pc, #252]	@ (801ede8 <tcp_create_segment+0x12c>)
 801ecec:	f006 fbc2 	bl	8025474 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ecf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ecf4:	009b      	lsls	r3, r3, #2
 801ecf6:	b2db      	uxtb	r3, r3
 801ecf8:	f003 0304 	and.w	r3, r3, #4
 801ecfc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ecfe:	2003      	movs	r0, #3
 801ed00:	f7fa fd1e 	bl	8019740 <memp_malloc>
 801ed04:	6138      	str	r0, [r7, #16]
 801ed06:	693b      	ldr	r3, [r7, #16]
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d104      	bne.n	801ed16 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ed0c:	68b8      	ldr	r0, [r7, #8]
 801ed0e:	f7fb fc63 	bl	801a5d8 <pbuf_free>
    return NULL;
 801ed12:	2300      	movs	r3, #0
 801ed14:	e060      	b.n	801edd8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801ed16:	693b      	ldr	r3, [r7, #16]
 801ed18:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801ed1c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ed1e:	693b      	ldr	r3, [r7, #16]
 801ed20:	2200      	movs	r2, #0
 801ed22:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ed24:	693b      	ldr	r3, [r7, #16]
 801ed26:	68ba      	ldr	r2, [r7, #8]
 801ed28:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ed2a:	68bb      	ldr	r3, [r7, #8]
 801ed2c:	891a      	ldrh	r2, [r3, #8]
 801ed2e:	7dfb      	ldrb	r3, [r7, #23]
 801ed30:	b29b      	uxth	r3, r3
 801ed32:	429a      	cmp	r2, r3
 801ed34:	d205      	bcs.n	801ed42 <tcp_create_segment+0x86>
 801ed36:	4b2a      	ldr	r3, [pc, #168]	@ (801ede0 <tcp_create_segment+0x124>)
 801ed38:	22b0      	movs	r2, #176	@ 0xb0
 801ed3a:	492d      	ldr	r1, [pc, #180]	@ (801edf0 <tcp_create_segment+0x134>)
 801ed3c:	482a      	ldr	r0, [pc, #168]	@ (801ede8 <tcp_create_segment+0x12c>)
 801ed3e:	f006 fb99 	bl	8025474 <iprintf>
  seg->len = p->tot_len - optlen;
 801ed42:	68bb      	ldr	r3, [r7, #8]
 801ed44:	891a      	ldrh	r2, [r3, #8]
 801ed46:	7dfb      	ldrb	r3, [r7, #23]
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	1ad3      	subs	r3, r2, r3
 801ed4c:	b29a      	uxth	r2, r3
 801ed4e:	693b      	ldr	r3, [r7, #16]
 801ed50:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ed52:	2114      	movs	r1, #20
 801ed54:	68b8      	ldr	r0, [r7, #8]
 801ed56:	f7fb fb77 	bl	801a448 <pbuf_add_header>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d004      	beq.n	801ed6a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ed60:	6938      	ldr	r0, [r7, #16]
 801ed62:	f7fd f804 	bl	801bd6e <tcp_seg_free>
    return NULL;
 801ed66:	2300      	movs	r3, #0
 801ed68:	e036      	b.n	801edd8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ed6a:	693b      	ldr	r3, [r7, #16]
 801ed6c:	685b      	ldr	r3, [r3, #4]
 801ed6e:	685a      	ldr	r2, [r3, #4]
 801ed70:	693b      	ldr	r3, [r7, #16]
 801ed72:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	8ada      	ldrh	r2, [r3, #22]
 801ed78:	693b      	ldr	r3, [r7, #16]
 801ed7a:	68dc      	ldr	r4, [r3, #12]
 801ed7c:	4610      	mov	r0, r2
 801ed7e:	f7f9 ff4f 	bl	8018c20 <lwip_htons>
 801ed82:	4603      	mov	r3, r0
 801ed84:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	8b1a      	ldrh	r2, [r3, #24]
 801ed8a:	693b      	ldr	r3, [r7, #16]
 801ed8c:	68dc      	ldr	r4, [r3, #12]
 801ed8e:	4610      	mov	r0, r2
 801ed90:	f7f9 ff46 	bl	8018c20 <lwip_htons>
 801ed94:	4603      	mov	r3, r0
 801ed96:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ed98:	693b      	ldr	r3, [r7, #16]
 801ed9a:	68dc      	ldr	r4, [r3, #12]
 801ed9c:	6838      	ldr	r0, [r7, #0]
 801ed9e:	f7f9 ff54 	bl	8018c4a <lwip_htonl>
 801eda2:	4603      	mov	r3, r0
 801eda4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801eda6:	7dfb      	ldrb	r3, [r7, #23]
 801eda8:	089b      	lsrs	r3, r3, #2
 801edaa:	b2db      	uxtb	r3, r3
 801edac:	3305      	adds	r3, #5
 801edae:	b29b      	uxth	r3, r3
 801edb0:	031b      	lsls	r3, r3, #12
 801edb2:	b29a      	uxth	r2, r3
 801edb4:	79fb      	ldrb	r3, [r7, #7]
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	4313      	orrs	r3, r2
 801edba:	b29a      	uxth	r2, r3
 801edbc:	693b      	ldr	r3, [r7, #16]
 801edbe:	68dc      	ldr	r4, [r3, #12]
 801edc0:	4610      	mov	r0, r2
 801edc2:	f7f9 ff2d 	bl	8018c20 <lwip_htons>
 801edc6:	4603      	mov	r3, r0
 801edc8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801edca:	693b      	ldr	r3, [r7, #16]
 801edcc:	68db      	ldr	r3, [r3, #12]
 801edce:	2200      	movs	r2, #0
 801edd0:	749a      	strb	r2, [r3, #18]
 801edd2:	2200      	movs	r2, #0
 801edd4:	74da      	strb	r2, [r3, #19]
  return seg;
 801edd6:	693b      	ldr	r3, [r7, #16]
}
 801edd8:	4618      	mov	r0, r3
 801edda:	371c      	adds	r7, #28
 801eddc:	46bd      	mov	sp, r7
 801edde:	bd90      	pop	{r4, r7, pc}
 801ede0:	0802bb98 	.word	0x0802bb98
 801ede4:	0802bbcc 	.word	0x0802bbcc
 801ede8:	0802bbec 	.word	0x0802bbec
 801edec:	0802bc14 	.word	0x0802bc14
 801edf0:	0802bc38 	.word	0x0802bc38

0801edf4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801edf4:	b580      	push	{r7, lr}
 801edf6:	b086      	sub	sp, #24
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	607b      	str	r3, [r7, #4]
 801edfc:	4603      	mov	r3, r0
 801edfe:	73fb      	strb	r3, [r7, #15]
 801ee00:	460b      	mov	r3, r1
 801ee02:	81bb      	strh	r3, [r7, #12]
 801ee04:	4613      	mov	r3, r2
 801ee06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ee08:	89bb      	ldrh	r3, [r7, #12]
 801ee0a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d105      	bne.n	801ee1e <tcp_pbuf_prealloc+0x2a>
 801ee12:	4b30      	ldr	r3, [pc, #192]	@ (801eed4 <tcp_pbuf_prealloc+0xe0>)
 801ee14:	22e8      	movs	r2, #232	@ 0xe8
 801ee16:	4930      	ldr	r1, [pc, #192]	@ (801eed8 <tcp_pbuf_prealloc+0xe4>)
 801ee18:	4830      	ldr	r0, [pc, #192]	@ (801eedc <tcp_pbuf_prealloc+0xe8>)
 801ee1a:	f006 fb2b 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ee1e:	6a3b      	ldr	r3, [r7, #32]
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d105      	bne.n	801ee30 <tcp_pbuf_prealloc+0x3c>
 801ee24:	4b2b      	ldr	r3, [pc, #172]	@ (801eed4 <tcp_pbuf_prealloc+0xe0>)
 801ee26:	22e9      	movs	r2, #233	@ 0xe9
 801ee28:	492d      	ldr	r1, [pc, #180]	@ (801eee0 <tcp_pbuf_prealloc+0xec>)
 801ee2a:	482c      	ldr	r0, [pc, #176]	@ (801eedc <tcp_pbuf_prealloc+0xe8>)
 801ee2c:	f006 fb22 	bl	8025474 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801ee30:	89ba      	ldrh	r2, [r7, #12]
 801ee32:	897b      	ldrh	r3, [r7, #10]
 801ee34:	429a      	cmp	r2, r3
 801ee36:	d221      	bcs.n	801ee7c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ee38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ee3c:	f003 0302 	and.w	r3, r3, #2
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d111      	bne.n	801ee68 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801ee44:	6a3b      	ldr	r3, [r7, #32]
 801ee46:	8b5b      	ldrh	r3, [r3, #26]
 801ee48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d115      	bne.n	801ee7c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ee50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d007      	beq.n	801ee68 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ee58:	6a3b      	ldr	r3, [r7, #32]
 801ee5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d103      	bne.n	801ee68 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ee60:	6a3b      	ldr	r3, [r7, #32]
 801ee62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d009      	beq.n	801ee7c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ee68:	89bb      	ldrh	r3, [r7, #12]
 801ee6a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801ee6e:	f023 0203 	bic.w	r2, r3, #3
 801ee72:	897b      	ldrh	r3, [r7, #10]
 801ee74:	4293      	cmp	r3, r2
 801ee76:	bf28      	it	cs
 801ee78:	4613      	movcs	r3, r2
 801ee7a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ee7c:	8af9      	ldrh	r1, [r7, #22]
 801ee7e:	7bfb      	ldrb	r3, [r7, #15]
 801ee80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ee84:	4618      	mov	r0, r3
 801ee86:	f7fb f891 	bl	8019fac <pbuf_alloc>
 801ee8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ee8c:	693b      	ldr	r3, [r7, #16]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d101      	bne.n	801ee96 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ee92:	2300      	movs	r3, #0
 801ee94:	e019      	b.n	801eeca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ee96:	693b      	ldr	r3, [r7, #16]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d006      	beq.n	801eeac <tcp_pbuf_prealloc+0xb8>
 801ee9e:	4b0d      	ldr	r3, [pc, #52]	@ (801eed4 <tcp_pbuf_prealloc+0xe0>)
 801eea0:	f240 120b 	movw	r2, #267	@ 0x10b
 801eea4:	490f      	ldr	r1, [pc, #60]	@ (801eee4 <tcp_pbuf_prealloc+0xf0>)
 801eea6:	480d      	ldr	r0, [pc, #52]	@ (801eedc <tcp_pbuf_prealloc+0xe8>)
 801eea8:	f006 fae4 	bl	8025474 <iprintf>
  *oversize = p->len - length;
 801eeac:	693b      	ldr	r3, [r7, #16]
 801eeae:	895a      	ldrh	r2, [r3, #10]
 801eeb0:	89bb      	ldrh	r3, [r7, #12]
 801eeb2:	1ad3      	subs	r3, r2, r3
 801eeb4:	b29a      	uxth	r2, r3
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801eeba:	693b      	ldr	r3, [r7, #16]
 801eebc:	89ba      	ldrh	r2, [r7, #12]
 801eebe:	811a      	strh	r2, [r3, #8]
 801eec0:	693b      	ldr	r3, [r7, #16]
 801eec2:	891a      	ldrh	r2, [r3, #8]
 801eec4:	693b      	ldr	r3, [r7, #16]
 801eec6:	815a      	strh	r2, [r3, #10]
  return p;
 801eec8:	693b      	ldr	r3, [r7, #16]
}
 801eeca:	4618      	mov	r0, r3
 801eecc:	3718      	adds	r7, #24
 801eece:	46bd      	mov	sp, r7
 801eed0:	bd80      	pop	{r7, pc}
 801eed2:	bf00      	nop
 801eed4:	0802bb98 	.word	0x0802bb98
 801eed8:	0802bc50 	.word	0x0802bc50
 801eedc:	0802bbec 	.word	0x0802bbec
 801eee0:	0802bc74 	.word	0x0802bc74
 801eee4:	0802bc94 	.word	0x0802bc94

0801eee8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	b082      	sub	sp, #8
 801eeec:	af00      	add	r7, sp, #0
 801eeee:	6078      	str	r0, [r7, #4]
 801eef0:	460b      	mov	r3, r1
 801eef2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d106      	bne.n	801ef08 <tcp_write_checks+0x20>
 801eefa:	4b33      	ldr	r3, [pc, #204]	@ (801efc8 <tcp_write_checks+0xe0>)
 801eefc:	f240 1233 	movw	r2, #307	@ 0x133
 801ef00:	4932      	ldr	r1, [pc, #200]	@ (801efcc <tcp_write_checks+0xe4>)
 801ef02:	4833      	ldr	r0, [pc, #204]	@ (801efd0 <tcp_write_checks+0xe8>)
 801ef04:	f006 fab6 	bl	8025474 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	7d1b      	ldrb	r3, [r3, #20]
 801ef0c:	2b04      	cmp	r3, #4
 801ef0e:	d00e      	beq.n	801ef2e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801ef14:	2b07      	cmp	r3, #7
 801ef16:	d00a      	beq.n	801ef2e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801ef1c:	2b02      	cmp	r3, #2
 801ef1e:	d006      	beq.n	801ef2e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801ef24:	2b03      	cmp	r3, #3
 801ef26:	d002      	beq.n	801ef2e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801ef28:	f06f 030a 	mvn.w	r3, #10
 801ef2c:	e048      	b.n	801efc0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801ef2e:	887b      	ldrh	r3, [r7, #2]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d101      	bne.n	801ef38 <tcp_write_checks+0x50>
    return ERR_OK;
 801ef34:	2300      	movs	r3, #0
 801ef36:	e043      	b.n	801efc0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801ef3e:	887a      	ldrh	r2, [r7, #2]
 801ef40:	429a      	cmp	r2, r3
 801ef42:	d909      	bls.n	801ef58 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	8b5b      	ldrh	r3, [r3, #26]
 801ef48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ef4c:	b29a      	uxth	r2, r3
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ef52:	f04f 33ff 	mov.w	r3, #4294967295
 801ef56:	e033      	b.n	801efc0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ef5e:	2b08      	cmp	r3, #8
 801ef60:	d909      	bls.n	801ef76 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	8b5b      	ldrh	r3, [r3, #26]
 801ef66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ef6a:	b29a      	uxth	r2, r3
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ef70:	f04f 33ff 	mov.w	r3, #4294967295
 801ef74:	e024      	b.n	801efc0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d00f      	beq.n	801efa0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d11a      	bne.n	801efbe <tcp_write_checks+0xd6>
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d116      	bne.n	801efbe <tcp_write_checks+0xd6>
 801ef90:	4b0d      	ldr	r3, [pc, #52]	@ (801efc8 <tcp_write_checks+0xe0>)
 801ef92:	f240 1255 	movw	r2, #341	@ 0x155
 801ef96:	490f      	ldr	r1, [pc, #60]	@ (801efd4 <tcp_write_checks+0xec>)
 801ef98:	480d      	ldr	r0, [pc, #52]	@ (801efd0 <tcp_write_checks+0xe8>)
 801ef9a:	f006 fa6b 	bl	8025474 <iprintf>
 801ef9e:	e00e      	b.n	801efbe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d103      	bne.n	801efb0 <tcp_write_checks+0xc8>
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801efac:	2b00      	cmp	r3, #0
 801efae:	d006      	beq.n	801efbe <tcp_write_checks+0xd6>
 801efb0:	4b05      	ldr	r3, [pc, #20]	@ (801efc8 <tcp_write_checks+0xe0>)
 801efb2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801efb6:	4908      	ldr	r1, [pc, #32]	@ (801efd8 <tcp_write_checks+0xf0>)
 801efb8:	4805      	ldr	r0, [pc, #20]	@ (801efd0 <tcp_write_checks+0xe8>)
 801efba:	f006 fa5b 	bl	8025474 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801efbe:	2300      	movs	r3, #0
}
 801efc0:	4618      	mov	r0, r3
 801efc2:	3708      	adds	r7, #8
 801efc4:	46bd      	mov	sp, r7
 801efc6:	bd80      	pop	{r7, pc}
 801efc8:	0802bb98 	.word	0x0802bb98
 801efcc:	0802bca8 	.word	0x0802bca8
 801efd0:	0802bbec 	.word	0x0802bbec
 801efd4:	0802bcc8 	.word	0x0802bcc8
 801efd8:	0802bd04 	.word	0x0802bd04

0801efdc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801efdc:	b590      	push	{r4, r7, lr}
 801efde:	b09b      	sub	sp, #108	@ 0x6c
 801efe0:	af04      	add	r7, sp, #16
 801efe2:	60f8      	str	r0, [r7, #12]
 801efe4:	60b9      	str	r1, [r7, #8]
 801efe6:	4611      	mov	r1, r2
 801efe8:	461a      	mov	r2, r3
 801efea:	460b      	mov	r3, r1
 801efec:	80fb      	strh	r3, [r7, #6]
 801efee:	4613      	mov	r3, r2
 801eff0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801eff2:	2300      	movs	r3, #0
 801eff4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801eff6:	2300      	movs	r3, #0
 801eff8:	653b      	str	r3, [r7, #80]	@ 0x50
 801effa:	2300      	movs	r3, #0
 801effc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801effe:	2300      	movs	r3, #0
 801f000:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f002:	2300      	movs	r3, #0
 801f004:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801f006:	2300      	movs	r3, #0
 801f008:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801f00c:	2300      	movs	r3, #0
 801f00e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801f012:	2300      	movs	r3, #0
 801f014:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801f016:	2300      	movs	r3, #0
 801f018:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801f01a:	2300      	movs	r3, #0
 801f01c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d109      	bne.n	801f038 <tcp_write+0x5c>
 801f024:	4ba4      	ldr	r3, [pc, #656]	@ (801f2b8 <tcp_write+0x2dc>)
 801f026:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801f02a:	49a4      	ldr	r1, [pc, #656]	@ (801f2bc <tcp_write+0x2e0>)
 801f02c:	48a4      	ldr	r0, [pc, #656]	@ (801f2c0 <tcp_write+0x2e4>)
 801f02e:	f006 fa21 	bl	8025474 <iprintf>
 801f032:	f06f 030f 	mvn.w	r3, #15
 801f036:	e32a      	b.n	801f68e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f038:	68fb      	ldr	r3, [r7, #12]
 801f03a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f03e:	085b      	lsrs	r3, r3, #1
 801f040:	b29a      	uxth	r2, r3
 801f042:	68fb      	ldr	r3, [r7, #12]
 801f044:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f046:	4293      	cmp	r3, r2
 801f048:	bf28      	it	cs
 801f04a:	4613      	movcs	r3, r2
 801f04c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801f04e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f050:	2b00      	cmp	r3, #0
 801f052:	d102      	bne.n	801f05a <tcp_write+0x7e>
 801f054:	68fb      	ldr	r3, [r7, #12]
 801f056:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f058:	e000      	b.n	801f05c <tcp_write+0x80>
 801f05a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f05c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f05e:	68bb      	ldr	r3, [r7, #8]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d109      	bne.n	801f078 <tcp_write+0x9c>
 801f064:	4b94      	ldr	r3, [pc, #592]	@ (801f2b8 <tcp_write+0x2dc>)
 801f066:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801f06a:	4996      	ldr	r1, [pc, #600]	@ (801f2c4 <tcp_write+0x2e8>)
 801f06c:	4894      	ldr	r0, [pc, #592]	@ (801f2c0 <tcp_write+0x2e4>)
 801f06e:	f006 fa01 	bl	8025474 <iprintf>
 801f072:	f06f 030f 	mvn.w	r3, #15
 801f076:	e30a      	b.n	801f68e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801f078:	88fb      	ldrh	r3, [r7, #6]
 801f07a:	4619      	mov	r1, r3
 801f07c:	68f8      	ldr	r0, [r7, #12]
 801f07e:	f7ff ff33 	bl	801eee8 <tcp_write_checks>
 801f082:	4603      	mov	r3, r0
 801f084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801f088:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d002      	beq.n	801f096 <tcp_write+0xba>
    return err;
 801f090:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801f094:	e2fb      	b.n	801f68e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801f096:	68fb      	ldr	r3, [r7, #12]
 801f098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f09c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	f000 80f6 	beq.w	801f29c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f0b4:	653b      	str	r3, [r7, #80]	@ 0x50
 801f0b6:	e002      	b.n	801f0be <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801f0b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d1f8      	bne.n	801f0b8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f0c8:	7a9b      	ldrb	r3, [r3, #10]
 801f0ca:	009b      	lsls	r3, r3, #2
 801f0cc:	b29b      	uxth	r3, r3
 801f0ce:	f003 0304 	and.w	r3, r3, #4
 801f0d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f0d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f0d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f0d8:	891b      	ldrh	r3, [r3, #8]
 801f0da:	4619      	mov	r1, r3
 801f0dc:	8c3b      	ldrh	r3, [r7, #32]
 801f0de:	440b      	add	r3, r1
 801f0e0:	429a      	cmp	r2, r3
 801f0e2:	da06      	bge.n	801f0f2 <tcp_write+0x116>
 801f0e4:	4b74      	ldr	r3, [pc, #464]	@ (801f2b8 <tcp_write+0x2dc>)
 801f0e6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801f0ea:	4977      	ldr	r1, [pc, #476]	@ (801f2c8 <tcp_write+0x2ec>)
 801f0ec:	4874      	ldr	r0, [pc, #464]	@ (801f2c0 <tcp_write+0x2e4>)
 801f0ee:	f006 f9c1 	bl	8025474 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f0f4:	891a      	ldrh	r2, [r3, #8]
 801f0f6:	8c3b      	ldrh	r3, [r7, #32]
 801f0f8:	4413      	add	r3, r2
 801f0fa:	b29b      	uxth	r3, r3
 801f0fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f0fe:	1ad3      	subs	r3, r2, r3
 801f100:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f108:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801f10a:	8a7b      	ldrh	r3, [r7, #18]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d026      	beq.n	801f15e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f110:	8a7b      	ldrh	r3, [r7, #18]
 801f112:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f114:	429a      	cmp	r2, r3
 801f116:	d206      	bcs.n	801f126 <tcp_write+0x14a>
 801f118:	4b67      	ldr	r3, [pc, #412]	@ (801f2b8 <tcp_write+0x2dc>)
 801f11a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801f11e:	496b      	ldr	r1, [pc, #428]	@ (801f2cc <tcp_write+0x2f0>)
 801f120:	4867      	ldr	r0, [pc, #412]	@ (801f2c0 <tcp_write+0x2e4>)
 801f122:	f006 f9a7 	bl	8025474 <iprintf>
      seg = last_unsent;
 801f126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f128:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f12a:	8a7b      	ldrh	r3, [r7, #18]
 801f12c:	88fa      	ldrh	r2, [r7, #6]
 801f12e:	4293      	cmp	r3, r2
 801f130:	bf28      	it	cs
 801f132:	4613      	movcs	r3, r2
 801f134:	b29b      	uxth	r3, r3
 801f136:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f138:	4293      	cmp	r3, r2
 801f13a:	bf28      	it	cs
 801f13c:	4613      	movcs	r3, r2
 801f13e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801f140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f144:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f146:	4413      	add	r3, r2
 801f148:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801f14c:	8a7a      	ldrh	r2, [r7, #18]
 801f14e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f150:	1ad3      	subs	r3, r2, r3
 801f152:	b29b      	uxth	r3, r3
 801f154:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801f156:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f158:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f15a:	1ad3      	subs	r3, r2, r3
 801f15c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f15e:	8a7b      	ldrh	r3, [r7, #18]
 801f160:	2b00      	cmp	r3, #0
 801f162:	d00b      	beq.n	801f17c <tcp_write+0x1a0>
 801f164:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f168:	88fb      	ldrh	r3, [r7, #6]
 801f16a:	429a      	cmp	r2, r3
 801f16c:	d006      	beq.n	801f17c <tcp_write+0x1a0>
 801f16e:	4b52      	ldr	r3, [pc, #328]	@ (801f2b8 <tcp_write+0x2dc>)
 801f170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801f174:	4956      	ldr	r1, [pc, #344]	@ (801f2d0 <tcp_write+0x2f4>)
 801f176:	4852      	ldr	r0, [pc, #328]	@ (801f2c0 <tcp_write+0x2e4>)
 801f178:	f006 f97c 	bl	8025474 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f17c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f180:	88fb      	ldrh	r3, [r7, #6]
 801f182:	429a      	cmp	r2, r3
 801f184:	f080 8167 	bcs.w	801f456 <tcp_write+0x47a>
 801f188:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	f000 8163 	beq.w	801f456 <tcp_write+0x47a>
 801f190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f192:	891b      	ldrh	r3, [r3, #8]
 801f194:	2b00      	cmp	r3, #0
 801f196:	f000 815e 	beq.w	801f456 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801f19a:	88fa      	ldrh	r2, [r7, #6]
 801f19c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f1a0:	1ad2      	subs	r2, r2, r3
 801f1a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f1a4:	4293      	cmp	r3, r2
 801f1a6:	bfa8      	it	ge
 801f1a8:	4613      	movge	r3, r2
 801f1aa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801f1ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f1ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f1b0:	797b      	ldrb	r3, [r7, #5]
 801f1b2:	f003 0301 	and.w	r3, r3, #1
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d027      	beq.n	801f20a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801f1ba:	f107 0012 	add.w	r0, r7, #18
 801f1be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f1c0:	8bf9      	ldrh	r1, [r7, #30]
 801f1c2:	2301      	movs	r3, #1
 801f1c4:	9302      	str	r3, [sp, #8]
 801f1c6:	797b      	ldrb	r3, [r7, #5]
 801f1c8:	9301      	str	r3, [sp, #4]
 801f1ca:	68fb      	ldr	r3, [r7, #12]
 801f1cc:	9300      	str	r3, [sp, #0]
 801f1ce:	4603      	mov	r3, r0
 801f1d0:	2000      	movs	r0, #0
 801f1d2:	f7ff fe0f 	bl	801edf4 <tcp_pbuf_prealloc>
 801f1d6:	6578      	str	r0, [r7, #84]	@ 0x54
 801f1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	f000 8225 	beq.w	801f62a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801f1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f1e2:	6858      	ldr	r0, [r3, #4]
 801f1e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f1e8:	68ba      	ldr	r2, [r7, #8]
 801f1ea:	4413      	add	r3, r2
 801f1ec:	8bfa      	ldrh	r2, [r7, #30]
 801f1ee:	4619      	mov	r1, r3
 801f1f0:	f006 facd 	bl	802578e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801f1f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f1f6:	f7fb fa7d 	bl	801a6f4 <pbuf_clen>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	461a      	mov	r2, r3
 801f1fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f202:	4413      	add	r3, r2
 801f204:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801f208:	e041      	b.n	801f28e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801f20a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f20c:	685b      	ldr	r3, [r3, #4]
 801f20e:	637b      	str	r3, [r7, #52]	@ 0x34
 801f210:	e002      	b.n	801f218 <tcp_write+0x23c>
 801f212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	637b      	str	r3, [r7, #52]	@ 0x34
 801f218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d1f8      	bne.n	801f212 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f222:	7b1b      	ldrb	r3, [r3, #12]
 801f224:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d115      	bne.n	801f258 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801f22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f22e:	685b      	ldr	r3, [r3, #4]
 801f230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f232:	8952      	ldrh	r2, [r2, #10]
 801f234:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f236:	68ba      	ldr	r2, [r7, #8]
 801f238:	429a      	cmp	r2, r3
 801f23a:	d10d      	bne.n	801f258 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801f23c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f240:	2b00      	cmp	r3, #0
 801f242:	d006      	beq.n	801f252 <tcp_write+0x276>
 801f244:	4b1c      	ldr	r3, [pc, #112]	@ (801f2b8 <tcp_write+0x2dc>)
 801f246:	f240 2231 	movw	r2, #561	@ 0x231
 801f24a:	4922      	ldr	r1, [pc, #136]	@ (801f2d4 <tcp_write+0x2f8>)
 801f24c:	481c      	ldr	r0, [pc, #112]	@ (801f2c0 <tcp_write+0x2e4>)
 801f24e:	f006 f911 	bl	8025474 <iprintf>
          extendlen = seglen;
 801f252:	8bfb      	ldrh	r3, [r7, #30]
 801f254:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801f256:	e01a      	b.n	801f28e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801f258:	8bfb      	ldrh	r3, [r7, #30]
 801f25a:	2201      	movs	r2, #1
 801f25c:	4619      	mov	r1, r3
 801f25e:	2000      	movs	r0, #0
 801f260:	f7fa fea4 	bl	8019fac <pbuf_alloc>
 801f264:	6578      	str	r0, [r7, #84]	@ 0x54
 801f266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f268:	2b00      	cmp	r3, #0
 801f26a:	f000 81e0 	beq.w	801f62e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801f26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f272:	68ba      	ldr	r2, [r7, #8]
 801f274:	441a      	add	r2, r3
 801f276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f278:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801f27a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f27c:	f7fb fa3a 	bl	801a6f4 <pbuf_clen>
 801f280:	4603      	mov	r3, r0
 801f282:	461a      	mov	r2, r3
 801f284:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f288:	4413      	add	r3, r2
 801f28a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801f28e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f292:	8bfb      	ldrh	r3, [r7, #30]
 801f294:	4413      	add	r3, r2
 801f296:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801f29a:	e0dc      	b.n	801f456 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	f000 80d7 	beq.w	801f456 <tcp_write+0x47a>
 801f2a8:	4b03      	ldr	r3, [pc, #12]	@ (801f2b8 <tcp_write+0x2dc>)
 801f2aa:	f240 224a 	movw	r2, #586	@ 0x24a
 801f2ae:	490a      	ldr	r1, [pc, #40]	@ (801f2d8 <tcp_write+0x2fc>)
 801f2b0:	4803      	ldr	r0, [pc, #12]	@ (801f2c0 <tcp_write+0x2e4>)
 801f2b2:	f006 f8df 	bl	8025474 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801f2b6:	e0ce      	b.n	801f456 <tcp_write+0x47a>
 801f2b8:	0802bb98 	.word	0x0802bb98
 801f2bc:	0802bd38 	.word	0x0802bd38
 801f2c0:	0802bbec 	.word	0x0802bbec
 801f2c4:	0802bd50 	.word	0x0802bd50
 801f2c8:	0802bd84 	.word	0x0802bd84
 801f2cc:	0802bd9c 	.word	0x0802bd9c
 801f2d0:	0802bdbc 	.word	0x0802bdbc
 801f2d4:	0802bddc 	.word	0x0802bddc
 801f2d8:	0802be08 	.word	0x0802be08
    struct pbuf *p;
    u16_t left = len - pos;
 801f2dc:	88fa      	ldrh	r2, [r7, #6]
 801f2de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f2e2:	1ad3      	subs	r3, r2, r3
 801f2e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801f2e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f2ee:	1ad3      	subs	r3, r2, r3
 801f2f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801f2f2:	8b7a      	ldrh	r2, [r7, #26]
 801f2f4:	8bbb      	ldrh	r3, [r7, #28]
 801f2f6:	4293      	cmp	r3, r2
 801f2f8:	bf28      	it	cs
 801f2fa:	4613      	movcs	r3, r2
 801f2fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f2fe:	797b      	ldrb	r3, [r7, #5]
 801f300:	f003 0301 	and.w	r3, r3, #1
 801f304:	2b00      	cmp	r3, #0
 801f306:	d036      	beq.n	801f376 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801f308:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f30c:	b29a      	uxth	r2, r3
 801f30e:	8b3b      	ldrh	r3, [r7, #24]
 801f310:	4413      	add	r3, r2
 801f312:	b299      	uxth	r1, r3
 801f314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f316:	2b00      	cmp	r3, #0
 801f318:	bf0c      	ite	eq
 801f31a:	2301      	moveq	r3, #1
 801f31c:	2300      	movne	r3, #0
 801f31e:	b2db      	uxtb	r3, r3
 801f320:	f107 0012 	add.w	r0, r7, #18
 801f324:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801f326:	9302      	str	r3, [sp, #8]
 801f328:	797b      	ldrb	r3, [r7, #5]
 801f32a:	9301      	str	r3, [sp, #4]
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	9300      	str	r3, [sp, #0]
 801f330:	4603      	mov	r3, r0
 801f332:	2036      	movs	r0, #54	@ 0x36
 801f334:	f7ff fd5e 	bl	801edf4 <tcp_pbuf_prealloc>
 801f338:	6338      	str	r0, [r7, #48]	@ 0x30
 801f33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	f000 8178 	beq.w	801f632 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801f342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f344:	895b      	ldrh	r3, [r3, #10]
 801f346:	8b3a      	ldrh	r2, [r7, #24]
 801f348:	429a      	cmp	r2, r3
 801f34a:	d906      	bls.n	801f35a <tcp_write+0x37e>
 801f34c:	4b8c      	ldr	r3, [pc, #560]	@ (801f580 <tcp_write+0x5a4>)
 801f34e:	f240 2266 	movw	r2, #614	@ 0x266
 801f352:	498c      	ldr	r1, [pc, #560]	@ (801f584 <tcp_write+0x5a8>)
 801f354:	488c      	ldr	r0, [pc, #560]	@ (801f588 <tcp_write+0x5ac>)
 801f356:	f006 f88d 	bl	8025474 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801f35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f35c:	685a      	ldr	r2, [r3, #4]
 801f35e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f362:	18d0      	adds	r0, r2, r3
 801f364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f368:	68ba      	ldr	r2, [r7, #8]
 801f36a:	4413      	add	r3, r2
 801f36c:	8b3a      	ldrh	r2, [r7, #24]
 801f36e:	4619      	mov	r1, r3
 801f370:	f006 fa0d 	bl	802578e <memcpy>
 801f374:	e02f      	b.n	801f3d6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801f376:	8a7b      	ldrh	r3, [r7, #18]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d006      	beq.n	801f38a <tcp_write+0x3ae>
 801f37c:	4b80      	ldr	r3, [pc, #512]	@ (801f580 <tcp_write+0x5a4>)
 801f37e:	f240 2271 	movw	r2, #625	@ 0x271
 801f382:	4982      	ldr	r1, [pc, #520]	@ (801f58c <tcp_write+0x5b0>)
 801f384:	4880      	ldr	r0, [pc, #512]	@ (801f588 <tcp_write+0x5ac>)
 801f386:	f006 f875 	bl	8025474 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801f38a:	8b3b      	ldrh	r3, [r7, #24]
 801f38c:	2201      	movs	r2, #1
 801f38e:	4619      	mov	r1, r3
 801f390:	2036      	movs	r0, #54	@ 0x36
 801f392:	f7fa fe0b 	bl	8019fac <pbuf_alloc>
 801f396:	6178      	str	r0, [r7, #20]
 801f398:	697b      	ldr	r3, [r7, #20]
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	f000 814b 	beq.w	801f636 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801f3a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f3a4:	68ba      	ldr	r2, [r7, #8]
 801f3a6:	441a      	add	r2, r3
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f3ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801f3b0:	b29b      	uxth	r3, r3
 801f3b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f3b6:	4619      	mov	r1, r3
 801f3b8:	2036      	movs	r0, #54	@ 0x36
 801f3ba:	f7fa fdf7 	bl	8019fac <pbuf_alloc>
 801f3be:	6338      	str	r0, [r7, #48]	@ 0x30
 801f3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d103      	bne.n	801f3ce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801f3c6:	6978      	ldr	r0, [r7, #20]
 801f3c8:	f7fb f906 	bl	801a5d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801f3cc:	e136      	b.n	801f63c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801f3ce:	6979      	ldr	r1, [r7, #20]
 801f3d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f3d2:	f7fb f9cf 	bl	801a774 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801f3d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f3d8:	f7fb f98c 	bl	801a6f4 <pbuf_clen>
 801f3dc:	4603      	mov	r3, r0
 801f3de:	461a      	mov	r2, r3
 801f3e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f3e4:	4413      	add	r3, r2
 801f3e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801f3ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f3ee:	2b09      	cmp	r3, #9
 801f3f0:	d903      	bls.n	801f3fa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801f3f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f3f4:	f7fb f8f0 	bl	801a5d8 <pbuf_free>
      goto memerr;
 801f3f8:	e120      	b.n	801f63c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801f3fa:	68fb      	ldr	r3, [r7, #12]
 801f3fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f3fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f402:	441a      	add	r2, r3
 801f404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f408:	9300      	str	r3, [sp, #0]
 801f40a:	4613      	mov	r3, r2
 801f40c:	2200      	movs	r2, #0
 801f40e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f410:	68f8      	ldr	r0, [r7, #12]
 801f412:	f7ff fc53 	bl	801ecbc <tcp_create_segment>
 801f416:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801f418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	f000 810d 	beq.w	801f63a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801f420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f422:	2b00      	cmp	r3, #0
 801f424:	d102      	bne.n	801f42c <tcp_write+0x450>
      queue = seg;
 801f426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f428:	647b      	str	r3, [r7, #68]	@ 0x44
 801f42a:	e00c      	b.n	801f446 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801f42c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d106      	bne.n	801f440 <tcp_write+0x464>
 801f432:	4b53      	ldr	r3, [pc, #332]	@ (801f580 <tcp_write+0x5a4>)
 801f434:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f438:	4955      	ldr	r1, [pc, #340]	@ (801f590 <tcp_write+0x5b4>)
 801f43a:	4853      	ldr	r0, [pc, #332]	@ (801f588 <tcp_write+0x5ac>)
 801f43c:	f006 f81a 	bl	8025474 <iprintf>
      prev_seg->next = seg;
 801f440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f444:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801f446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f448:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801f44a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f44e:	8b3b      	ldrh	r3, [r7, #24]
 801f450:	4413      	add	r3, r2
 801f452:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801f456:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f45a:	88fb      	ldrh	r3, [r7, #6]
 801f45c:	429a      	cmp	r2, r3
 801f45e:	f4ff af3d 	bcc.w	801f2dc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801f462:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f464:	2b00      	cmp	r3, #0
 801f466:	d02c      	beq.n	801f4c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801f468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f46a:	685b      	ldr	r3, [r3, #4]
 801f46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f46e:	e01e      	b.n	801f4ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801f470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f472:	891a      	ldrh	r2, [r3, #8]
 801f474:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f476:	4413      	add	r3, r2
 801f478:	b29a      	uxth	r2, r3
 801f47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f47c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801f47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	2b00      	cmp	r3, #0
 801f484:	d110      	bne.n	801f4a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801f486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f488:	685b      	ldr	r3, [r3, #4]
 801f48a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f48c:	8952      	ldrh	r2, [r2, #10]
 801f48e:	4413      	add	r3, r2
 801f490:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f492:	68b9      	ldr	r1, [r7, #8]
 801f494:	4618      	mov	r0, r3
 801f496:	f006 f97a 	bl	802578e <memcpy>
        p->len += oversize_used;
 801f49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f49c:	895a      	ldrh	r2, [r3, #10]
 801f49e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f4a0:	4413      	add	r3, r2
 801f4a2:	b29a      	uxth	r2, r3
 801f4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801f4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4aa:	681b      	ldr	r3, [r3, #0]
 801f4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d1dd      	bne.n	801f470 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801f4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4b6:	891a      	ldrh	r2, [r3, #8]
 801f4b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f4ba:	4413      	add	r3, r2
 801f4bc:	b29a      	uxth	r2, r3
 801f4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801f4c2:	8a7a      	ldrh	r2, [r7, #18]
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801f4ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	d018      	beq.n	801f502 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801f4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	d106      	bne.n	801f4e4 <tcp_write+0x508>
 801f4d6:	4b2a      	ldr	r3, [pc, #168]	@ (801f580 <tcp_write+0x5a4>)
 801f4d8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801f4dc:	492d      	ldr	r1, [pc, #180]	@ (801f594 <tcp_write+0x5b8>)
 801f4de:	482a      	ldr	r0, [pc, #168]	@ (801f588 <tcp_write+0x5ac>)
 801f4e0:	f005 ffc8 	bl	8025474 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801f4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4e6:	685b      	ldr	r3, [r3, #4]
 801f4e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801f4ea:	4618      	mov	r0, r3
 801f4ec:	f7fb f942 	bl	801a774 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801f4f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4f2:	891a      	ldrh	r2, [r3, #8]
 801f4f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f4f6:	891b      	ldrh	r3, [r3, #8]
 801f4f8:	4413      	add	r3, r2
 801f4fa:	b29a      	uxth	r2, r3
 801f4fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4fe:	811a      	strh	r2, [r3, #8]
 801f500:	e037      	b.n	801f572 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801f502:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f504:	2b00      	cmp	r3, #0
 801f506:	d034      	beq.n	801f572 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801f508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d003      	beq.n	801f516 <tcp_write+0x53a>
 801f50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f510:	685b      	ldr	r3, [r3, #4]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d106      	bne.n	801f524 <tcp_write+0x548>
 801f516:	4b1a      	ldr	r3, [pc, #104]	@ (801f580 <tcp_write+0x5a4>)
 801f518:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801f51c:	491e      	ldr	r1, [pc, #120]	@ (801f598 <tcp_write+0x5bc>)
 801f51e:	481a      	ldr	r0, [pc, #104]	@ (801f588 <tcp_write+0x5ac>)
 801f520:	f005 ffa8 	bl	8025474 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f526:	685b      	ldr	r3, [r3, #4]
 801f528:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f52a:	e009      	b.n	801f540 <tcp_write+0x564>
      p->tot_len += extendlen;
 801f52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f52e:	891a      	ldrh	r2, [r3, #8]
 801f530:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f532:	4413      	add	r3, r2
 801f534:	b29a      	uxth	r2, r3
 801f536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f538:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d1f1      	bne.n	801f52c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801f548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f54a:	891a      	ldrh	r2, [r3, #8]
 801f54c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f54e:	4413      	add	r3, r2
 801f550:	b29a      	uxth	r2, r3
 801f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f554:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801f556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f558:	895a      	ldrh	r2, [r3, #10]
 801f55a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f55c:	4413      	add	r3, r2
 801f55e:	b29a      	uxth	r2, r3
 801f560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f562:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801f564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f566:	891a      	ldrh	r2, [r3, #8]
 801f568:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f56a:	4413      	add	r3, r2
 801f56c:	b29a      	uxth	r2, r3
 801f56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f570:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801f572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f574:	2b00      	cmp	r3, #0
 801f576:	d111      	bne.n	801f59c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f57c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801f57e:	e010      	b.n	801f5a2 <tcp_write+0x5c6>
 801f580:	0802bb98 	.word	0x0802bb98
 801f584:	0802be38 	.word	0x0802be38
 801f588:	0802bbec 	.word	0x0802bbec
 801f58c:	0802be78 	.word	0x0802be78
 801f590:	0802be88 	.word	0x0802be88
 801f594:	0802be9c 	.word	0x0802be9c
 801f598:	0802bed4 	.word	0x0802bed4
  } else {
    last_unsent->next = queue;
 801f59c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f59e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f5a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801f5a2:	68fb      	ldr	r3, [r7, #12]
 801f5a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801f5a6:	88fb      	ldrh	r3, [r7, #6]
 801f5a8:	441a      	add	r2, r3
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801f5ae:	68fb      	ldr	r3, [r7, #12]
 801f5b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801f5b4:	88fb      	ldrh	r3, [r7, #6]
 801f5b6:	1ad3      	subs	r3, r2, r3
 801f5b8:	b29a      	uxth	r2, r3
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f5c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d00e      	beq.n	801f5f2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801f5d4:	68fb      	ldr	r3, [r7, #12]
 801f5d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d10a      	bne.n	801f5f2 <tcp_write+0x616>
 801f5dc:	68fb      	ldr	r3, [r7, #12]
 801f5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d106      	bne.n	801f5f2 <tcp_write+0x616>
 801f5e4:	4b2c      	ldr	r3, [pc, #176]	@ (801f698 <tcp_write+0x6bc>)
 801f5e6:	f240 3212 	movw	r2, #786	@ 0x312
 801f5ea:	492c      	ldr	r1, [pc, #176]	@ (801f69c <tcp_write+0x6c0>)
 801f5ec:	482c      	ldr	r0, [pc, #176]	@ (801f6a0 <tcp_write+0x6c4>)
 801f5ee:	f005 ff41 	bl	8025474 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801f5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d016      	beq.n	801f626 <tcp_write+0x64a>
 801f5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f5fa:	68db      	ldr	r3, [r3, #12]
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d012      	beq.n	801f626 <tcp_write+0x64a>
 801f600:	797b      	ldrb	r3, [r7, #5]
 801f602:	f003 0302 	and.w	r3, r3, #2
 801f606:	2b00      	cmp	r3, #0
 801f608:	d10d      	bne.n	801f626 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801f60a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f60c:	68db      	ldr	r3, [r3, #12]
 801f60e:	899b      	ldrh	r3, [r3, #12]
 801f610:	b29c      	uxth	r4, r3
 801f612:	2008      	movs	r0, #8
 801f614:	f7f9 fb04 	bl	8018c20 <lwip_htons>
 801f618:	4603      	mov	r3, r0
 801f61a:	461a      	mov	r2, r3
 801f61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f61e:	68db      	ldr	r3, [r3, #12]
 801f620:	4322      	orrs	r2, r4
 801f622:	b292      	uxth	r2, r2
 801f624:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801f626:	2300      	movs	r3, #0
 801f628:	e031      	b.n	801f68e <tcp_write+0x6b2>
          goto memerr;
 801f62a:	bf00      	nop
 801f62c:	e006      	b.n	801f63c <tcp_write+0x660>
            goto memerr;
 801f62e:	bf00      	nop
 801f630:	e004      	b.n	801f63c <tcp_write+0x660>
        goto memerr;
 801f632:	bf00      	nop
 801f634:	e002      	b.n	801f63c <tcp_write+0x660>
        goto memerr;
 801f636:	bf00      	nop
 801f638:	e000      	b.n	801f63c <tcp_write+0x660>
      goto memerr;
 801f63a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	8b5b      	ldrh	r3, [r3, #26]
 801f640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f644:	b29a      	uxth	r2, r3
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801f64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	d002      	beq.n	801f656 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801f650:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801f652:	f7fa ffc1 	bl	801a5d8 <pbuf_free>
  }
  if (queue != NULL) {
 801f656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d002      	beq.n	801f662 <tcp_write+0x686>
    tcp_segs_free(queue);
 801f65c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801f65e:	f7fc fb71 	bl	801bd44 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d00e      	beq.n	801f68a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f670:	2b00      	cmp	r3, #0
 801f672:	d10a      	bne.n	801f68a <tcp_write+0x6ae>
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d106      	bne.n	801f68a <tcp_write+0x6ae>
 801f67c:	4b06      	ldr	r3, [pc, #24]	@ (801f698 <tcp_write+0x6bc>)
 801f67e:	f240 3227 	movw	r2, #807	@ 0x327
 801f682:	4906      	ldr	r1, [pc, #24]	@ (801f69c <tcp_write+0x6c0>)
 801f684:	4806      	ldr	r0, [pc, #24]	@ (801f6a0 <tcp_write+0x6c4>)
 801f686:	f005 fef5 	bl	8025474 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801f68a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f68e:	4618      	mov	r0, r3
 801f690:	375c      	adds	r7, #92	@ 0x5c
 801f692:	46bd      	mov	sp, r7
 801f694:	bd90      	pop	{r4, r7, pc}
 801f696:	bf00      	nop
 801f698:	0802bb98 	.word	0x0802bb98
 801f69c:	0802bf0c 	.word	0x0802bf0c
 801f6a0:	0802bbec 	.word	0x0802bbec

0801f6a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801f6a4:	b590      	push	{r4, r7, lr}
 801f6a6:	b08b      	sub	sp, #44	@ 0x2c
 801f6a8:	af02      	add	r7, sp, #8
 801f6aa:	6078      	str	r0, [r7, #4]
 801f6ac:	460b      	mov	r3, r1
 801f6ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801f6b0:	2300      	movs	r3, #0
 801f6b2:	61fb      	str	r3, [r7, #28]
 801f6b4:	2300      	movs	r3, #0
 801f6b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d106      	bne.n	801f6d0 <tcp_split_unsent_seg+0x2c>
 801f6c2:	4b95      	ldr	r3, [pc, #596]	@ (801f918 <tcp_split_unsent_seg+0x274>)
 801f6c4:	f240 324b 	movw	r2, #843	@ 0x34b
 801f6c8:	4994      	ldr	r1, [pc, #592]	@ (801f91c <tcp_split_unsent_seg+0x278>)
 801f6ca:	4895      	ldr	r0, [pc, #596]	@ (801f920 <tcp_split_unsent_seg+0x27c>)
 801f6cc:	f005 fed2 	bl	8025474 <iprintf>

  useg = pcb->unsent;
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f6d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801f6d6:	697b      	ldr	r3, [r7, #20]
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d102      	bne.n	801f6e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801f6dc:	f04f 33ff 	mov.w	r3, #4294967295
 801f6e0:	e116      	b.n	801f910 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801f6e2:	887b      	ldrh	r3, [r7, #2]
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	d109      	bne.n	801f6fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f6e8:	4b8b      	ldr	r3, [pc, #556]	@ (801f918 <tcp_split_unsent_seg+0x274>)
 801f6ea:	f240 3253 	movw	r2, #851	@ 0x353
 801f6ee:	498d      	ldr	r1, [pc, #564]	@ (801f924 <tcp_split_unsent_seg+0x280>)
 801f6f0:	488b      	ldr	r0, [pc, #556]	@ (801f920 <tcp_split_unsent_seg+0x27c>)
 801f6f2:	f005 febf 	bl	8025474 <iprintf>
    return ERR_VAL;
 801f6f6:	f06f 0305 	mvn.w	r3, #5
 801f6fa:	e109      	b.n	801f910 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801f6fc:	697b      	ldr	r3, [r7, #20]
 801f6fe:	891b      	ldrh	r3, [r3, #8]
 801f700:	887a      	ldrh	r2, [r7, #2]
 801f702:	429a      	cmp	r2, r3
 801f704:	d301      	bcc.n	801f70a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801f706:	2300      	movs	r3, #0
 801f708:	e102      	b.n	801f910 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f70e:	887a      	ldrh	r2, [r7, #2]
 801f710:	429a      	cmp	r2, r3
 801f712:	d906      	bls.n	801f722 <tcp_split_unsent_seg+0x7e>
 801f714:	4b80      	ldr	r3, [pc, #512]	@ (801f918 <tcp_split_unsent_seg+0x274>)
 801f716:	f240 325b 	movw	r2, #859	@ 0x35b
 801f71a:	4983      	ldr	r1, [pc, #524]	@ (801f928 <tcp_split_unsent_seg+0x284>)
 801f71c:	4880      	ldr	r0, [pc, #512]	@ (801f920 <tcp_split_unsent_seg+0x27c>)
 801f71e:	f005 fea9 	bl	8025474 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f722:	697b      	ldr	r3, [r7, #20]
 801f724:	891b      	ldrh	r3, [r3, #8]
 801f726:	2b00      	cmp	r3, #0
 801f728:	d106      	bne.n	801f738 <tcp_split_unsent_seg+0x94>
 801f72a:	4b7b      	ldr	r3, [pc, #492]	@ (801f918 <tcp_split_unsent_seg+0x274>)
 801f72c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801f730:	497e      	ldr	r1, [pc, #504]	@ (801f92c <tcp_split_unsent_seg+0x288>)
 801f732:	487b      	ldr	r0, [pc, #492]	@ (801f920 <tcp_split_unsent_seg+0x27c>)
 801f734:	f005 fe9e 	bl	8025474 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801f738:	697b      	ldr	r3, [r7, #20]
 801f73a:	7a9b      	ldrb	r3, [r3, #10]
 801f73c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801f73e:	7bfb      	ldrb	r3, [r7, #15]
 801f740:	009b      	lsls	r3, r3, #2
 801f742:	b2db      	uxtb	r3, r3
 801f744:	f003 0304 	and.w	r3, r3, #4
 801f748:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801f74a:	697b      	ldr	r3, [r7, #20]
 801f74c:	891a      	ldrh	r2, [r3, #8]
 801f74e:	887b      	ldrh	r3, [r7, #2]
 801f750:	1ad3      	subs	r3, r2, r3
 801f752:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801f754:	7bbb      	ldrb	r3, [r7, #14]
 801f756:	b29a      	uxth	r2, r3
 801f758:	89bb      	ldrh	r3, [r7, #12]
 801f75a:	4413      	add	r3, r2
 801f75c:	b29b      	uxth	r3, r3
 801f75e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f762:	4619      	mov	r1, r3
 801f764:	2036      	movs	r0, #54	@ 0x36
 801f766:	f7fa fc21 	bl	8019fac <pbuf_alloc>
 801f76a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f76c:	693b      	ldr	r3, [r7, #16]
 801f76e:	2b00      	cmp	r3, #0
 801f770:	f000 80b7 	beq.w	801f8e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801f774:	697b      	ldr	r3, [r7, #20]
 801f776:	685b      	ldr	r3, [r3, #4]
 801f778:	891a      	ldrh	r2, [r3, #8]
 801f77a:	697b      	ldr	r3, [r7, #20]
 801f77c:	891b      	ldrh	r3, [r3, #8]
 801f77e:	1ad3      	subs	r3, r2, r3
 801f780:	b29a      	uxth	r2, r3
 801f782:	887b      	ldrh	r3, [r7, #2]
 801f784:	4413      	add	r3, r2
 801f786:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f788:	697b      	ldr	r3, [r7, #20]
 801f78a:	6858      	ldr	r0, [r3, #4]
 801f78c:	693b      	ldr	r3, [r7, #16]
 801f78e:	685a      	ldr	r2, [r3, #4]
 801f790:	7bbb      	ldrb	r3, [r7, #14]
 801f792:	18d1      	adds	r1, r2, r3
 801f794:	897b      	ldrh	r3, [r7, #10]
 801f796:	89ba      	ldrh	r2, [r7, #12]
 801f798:	f7fb f924 	bl	801a9e4 <pbuf_copy_partial>
 801f79c:	4603      	mov	r3, r0
 801f79e:	461a      	mov	r2, r3
 801f7a0:	89bb      	ldrh	r3, [r7, #12]
 801f7a2:	4293      	cmp	r3, r2
 801f7a4:	f040 809f 	bne.w	801f8e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f7a8:	697b      	ldr	r3, [r7, #20]
 801f7aa:	68db      	ldr	r3, [r3, #12]
 801f7ac:	899b      	ldrh	r3, [r3, #12]
 801f7ae:	b29b      	uxth	r3, r3
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	f7f9 fa35 	bl	8018c20 <lwip_htons>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	b2db      	uxtb	r3, r3
 801f7ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f7be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801f7c4:	7efb      	ldrb	r3, [r7, #27]
 801f7c6:	f003 0308 	and.w	r3, r3, #8
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d007      	beq.n	801f7de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801f7ce:	7efb      	ldrb	r3, [r7, #27]
 801f7d0:	f023 0308 	bic.w	r3, r3, #8
 801f7d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801f7d6:	7ebb      	ldrb	r3, [r7, #26]
 801f7d8:	f043 0308 	orr.w	r3, r3, #8
 801f7dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801f7de:	7efb      	ldrb	r3, [r7, #27]
 801f7e0:	f003 0301 	and.w	r3, r3, #1
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d007      	beq.n	801f7f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801f7e8:	7efb      	ldrb	r3, [r7, #27]
 801f7ea:	f023 0301 	bic.w	r3, r3, #1
 801f7ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801f7f0:	7ebb      	ldrb	r3, [r7, #26]
 801f7f2:	f043 0301 	orr.w	r3, r3, #1
 801f7f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f7f8:	697b      	ldr	r3, [r7, #20]
 801f7fa:	68db      	ldr	r3, [r3, #12]
 801f7fc:	685b      	ldr	r3, [r3, #4]
 801f7fe:	4618      	mov	r0, r3
 801f800:	f7f9 fa23 	bl	8018c4a <lwip_htonl>
 801f804:	4602      	mov	r2, r0
 801f806:	887b      	ldrh	r3, [r7, #2]
 801f808:	18d1      	adds	r1, r2, r3
 801f80a:	7eba      	ldrb	r2, [r7, #26]
 801f80c:	7bfb      	ldrb	r3, [r7, #15]
 801f80e:	9300      	str	r3, [sp, #0]
 801f810:	460b      	mov	r3, r1
 801f812:	6939      	ldr	r1, [r7, #16]
 801f814:	6878      	ldr	r0, [r7, #4]
 801f816:	f7ff fa51 	bl	801ecbc <tcp_create_segment>
 801f81a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801f81c:	69fb      	ldr	r3, [r7, #28]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d063      	beq.n	801f8ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f822:	697b      	ldr	r3, [r7, #20]
 801f824:	685b      	ldr	r3, [r3, #4]
 801f826:	4618      	mov	r0, r3
 801f828:	f7fa ff64 	bl	801a6f4 <pbuf_clen>
 801f82c:	4603      	mov	r3, r0
 801f82e:	461a      	mov	r2, r3
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f836:	1a9b      	subs	r3, r3, r2
 801f838:	b29a      	uxth	r2, r3
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f840:	697b      	ldr	r3, [r7, #20]
 801f842:	6858      	ldr	r0, [r3, #4]
 801f844:	697b      	ldr	r3, [r7, #20]
 801f846:	685b      	ldr	r3, [r3, #4]
 801f848:	891a      	ldrh	r2, [r3, #8]
 801f84a:	89bb      	ldrh	r3, [r7, #12]
 801f84c:	1ad3      	subs	r3, r2, r3
 801f84e:	b29b      	uxth	r3, r3
 801f850:	4619      	mov	r1, r3
 801f852:	f7fa fd09 	bl	801a268 <pbuf_realloc>
  useg->len -= remainder;
 801f856:	697b      	ldr	r3, [r7, #20]
 801f858:	891a      	ldrh	r2, [r3, #8]
 801f85a:	89bb      	ldrh	r3, [r7, #12]
 801f85c:	1ad3      	subs	r3, r2, r3
 801f85e:	b29a      	uxth	r2, r3
 801f860:	697b      	ldr	r3, [r7, #20]
 801f862:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f864:	697b      	ldr	r3, [r7, #20]
 801f866:	68db      	ldr	r3, [r3, #12]
 801f868:	899b      	ldrh	r3, [r3, #12]
 801f86a:	b29c      	uxth	r4, r3
 801f86c:	7efb      	ldrb	r3, [r7, #27]
 801f86e:	b29b      	uxth	r3, r3
 801f870:	4618      	mov	r0, r3
 801f872:	f7f9 f9d5 	bl	8018c20 <lwip_htons>
 801f876:	4603      	mov	r3, r0
 801f878:	461a      	mov	r2, r3
 801f87a:	697b      	ldr	r3, [r7, #20]
 801f87c:	68db      	ldr	r3, [r3, #12]
 801f87e:	4322      	orrs	r2, r4
 801f880:	b292      	uxth	r2, r2
 801f882:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f884:	697b      	ldr	r3, [r7, #20]
 801f886:	685b      	ldr	r3, [r3, #4]
 801f888:	4618      	mov	r0, r3
 801f88a:	f7fa ff33 	bl	801a6f4 <pbuf_clen>
 801f88e:	4603      	mov	r3, r0
 801f890:	461a      	mov	r2, r3
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f898:	4413      	add	r3, r2
 801f89a:	b29a      	uxth	r2, r3
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f8a2:	69fb      	ldr	r3, [r7, #28]
 801f8a4:	685b      	ldr	r3, [r3, #4]
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f7fa ff24 	bl	801a6f4 <pbuf_clen>
 801f8ac:	4603      	mov	r3, r0
 801f8ae:	461a      	mov	r2, r3
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f8b6:	4413      	add	r3, r2
 801f8b8:	b29a      	uxth	r2, r3
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f8c0:	697b      	ldr	r3, [r7, #20]
 801f8c2:	681a      	ldr	r2, [r3, #0]
 801f8c4:	69fb      	ldr	r3, [r7, #28]
 801f8c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f8c8:	697b      	ldr	r3, [r7, #20]
 801f8ca:	69fa      	ldr	r2, [r7, #28]
 801f8cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f8ce:	69fb      	ldr	r3, [r7, #28]
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d103      	bne.n	801f8de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	2200      	movs	r2, #0
 801f8da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f8de:	2300      	movs	r3, #0
 801f8e0:	e016      	b.n	801f910 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f8e2:	bf00      	nop
 801f8e4:	e002      	b.n	801f8ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f8e6:	bf00      	nop
 801f8e8:	e000      	b.n	801f8ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f8ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f8ec:	69fb      	ldr	r3, [r7, #28]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d006      	beq.n	801f900 <tcp_split_unsent_seg+0x25c>
 801f8f2:	4b09      	ldr	r3, [pc, #36]	@ (801f918 <tcp_split_unsent_seg+0x274>)
 801f8f4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801f8f8:	490d      	ldr	r1, [pc, #52]	@ (801f930 <tcp_split_unsent_seg+0x28c>)
 801f8fa:	4809      	ldr	r0, [pc, #36]	@ (801f920 <tcp_split_unsent_seg+0x27c>)
 801f8fc:	f005 fdba 	bl	8025474 <iprintf>
  if (p != NULL) {
 801f900:	693b      	ldr	r3, [r7, #16]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d002      	beq.n	801f90c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f906:	6938      	ldr	r0, [r7, #16]
 801f908:	f7fa fe66 	bl	801a5d8 <pbuf_free>
  }

  return ERR_MEM;
 801f90c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f910:	4618      	mov	r0, r3
 801f912:	3724      	adds	r7, #36	@ 0x24
 801f914:	46bd      	mov	sp, r7
 801f916:	bd90      	pop	{r4, r7, pc}
 801f918:	0802bb98 	.word	0x0802bb98
 801f91c:	0802bf2c 	.word	0x0802bf2c
 801f920:	0802bbec 	.word	0x0802bbec
 801f924:	0802bf50 	.word	0x0802bf50
 801f928:	0802bf74 	.word	0x0802bf74
 801f92c:	0802bf84 	.word	0x0802bf84
 801f930:	0802bf94 	.word	0x0802bf94

0801f934 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f934:	b590      	push	{r4, r7, lr}
 801f936:	b085      	sub	sp, #20
 801f938:	af00      	add	r7, sp, #0
 801f93a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	2b00      	cmp	r3, #0
 801f940:	d106      	bne.n	801f950 <tcp_send_fin+0x1c>
 801f942:	4b21      	ldr	r3, [pc, #132]	@ (801f9c8 <tcp_send_fin+0x94>)
 801f944:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801f948:	4920      	ldr	r1, [pc, #128]	@ (801f9cc <tcp_send_fin+0x98>)
 801f94a:	4821      	ldr	r0, [pc, #132]	@ (801f9d0 <tcp_send_fin+0x9c>)
 801f94c:	f005 fd92 	bl	8025474 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f954:	2b00      	cmp	r3, #0
 801f956:	d02e      	beq.n	801f9b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f958:	687b      	ldr	r3, [r7, #4]
 801f95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f95c:	60fb      	str	r3, [r7, #12]
 801f95e:	e002      	b.n	801f966 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d1f8      	bne.n	801f960 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f96e:	68fb      	ldr	r3, [r7, #12]
 801f970:	68db      	ldr	r3, [r3, #12]
 801f972:	899b      	ldrh	r3, [r3, #12]
 801f974:	b29b      	uxth	r3, r3
 801f976:	4618      	mov	r0, r3
 801f978:	f7f9 f952 	bl	8018c20 <lwip_htons>
 801f97c:	4603      	mov	r3, r0
 801f97e:	b2db      	uxtb	r3, r3
 801f980:	f003 0307 	and.w	r3, r3, #7
 801f984:	2b00      	cmp	r3, #0
 801f986:	d116      	bne.n	801f9b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	68db      	ldr	r3, [r3, #12]
 801f98c:	899b      	ldrh	r3, [r3, #12]
 801f98e:	b29c      	uxth	r4, r3
 801f990:	2001      	movs	r0, #1
 801f992:	f7f9 f945 	bl	8018c20 <lwip_htons>
 801f996:	4603      	mov	r3, r0
 801f998:	461a      	mov	r2, r3
 801f99a:	68fb      	ldr	r3, [r7, #12]
 801f99c:	68db      	ldr	r3, [r3, #12]
 801f99e:	4322      	orrs	r2, r4
 801f9a0:	b292      	uxth	r2, r2
 801f9a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	8b5b      	ldrh	r3, [r3, #26]
 801f9a8:	f043 0320 	orr.w	r3, r3, #32
 801f9ac:	b29a      	uxth	r2, r3
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	e004      	b.n	801f9c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f9b6:	2101      	movs	r1, #1
 801f9b8:	6878      	ldr	r0, [r7, #4]
 801f9ba:	f000 f80b 	bl	801f9d4 <tcp_enqueue_flags>
 801f9be:	4603      	mov	r3, r0
}
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	3714      	adds	r7, #20
 801f9c4:	46bd      	mov	sp, r7
 801f9c6:	bd90      	pop	{r4, r7, pc}
 801f9c8:	0802bb98 	.word	0x0802bb98
 801f9cc:	0802bfa0 	.word	0x0802bfa0
 801f9d0:	0802bbec 	.word	0x0802bbec

0801f9d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801f9d4:	b580      	push	{r7, lr}
 801f9d6:	b08a      	sub	sp, #40	@ 0x28
 801f9d8:	af02      	add	r7, sp, #8
 801f9da:	6078      	str	r0, [r7, #4]
 801f9dc:	460b      	mov	r3, r1
 801f9de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f9e8:	78fb      	ldrb	r3, [r7, #3]
 801f9ea:	f003 0303 	and.w	r3, r3, #3
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d106      	bne.n	801fa00 <tcp_enqueue_flags+0x2c>
 801f9f2:	4b67      	ldr	r3, [pc, #412]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801f9f4:	f240 4211 	movw	r2, #1041	@ 0x411
 801f9f8:	4966      	ldr	r1, [pc, #408]	@ (801fb94 <tcp_enqueue_flags+0x1c0>)
 801f9fa:	4867      	ldr	r0, [pc, #412]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801f9fc:	f005 fd3a 	bl	8025474 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d106      	bne.n	801fa14 <tcp_enqueue_flags+0x40>
 801fa06:	4b62      	ldr	r3, [pc, #392]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801fa08:	f240 4213 	movw	r2, #1043	@ 0x413
 801fa0c:	4963      	ldr	r1, [pc, #396]	@ (801fb9c <tcp_enqueue_flags+0x1c8>)
 801fa0e:	4862      	ldr	r0, [pc, #392]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801fa10:	f005 fd30 	bl	8025474 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801fa14:	78fb      	ldrb	r3, [r7, #3]
 801fa16:	f003 0302 	and.w	r3, r3, #2
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d001      	beq.n	801fa22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801fa1e:	2301      	movs	r3, #1
 801fa20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa22:	7ffb      	ldrb	r3, [r7, #31]
 801fa24:	009b      	lsls	r3, r3, #2
 801fa26:	b2db      	uxtb	r3, r3
 801fa28:	f003 0304 	and.w	r3, r3, #4
 801fa2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fa2e:	7dfb      	ldrb	r3, [r7, #23]
 801fa30:	b29b      	uxth	r3, r3
 801fa32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fa36:	4619      	mov	r1, r3
 801fa38:	2036      	movs	r0, #54	@ 0x36
 801fa3a:	f7fa fab7 	bl	8019fac <pbuf_alloc>
 801fa3e:	6138      	str	r0, [r7, #16]
 801fa40:	693b      	ldr	r3, [r7, #16]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d109      	bne.n	801fa5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	8b5b      	ldrh	r3, [r3, #26]
 801fa4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fa4e:	b29a      	uxth	r2, r3
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fa54:	f04f 33ff 	mov.w	r3, #4294967295
 801fa58:	e095      	b.n	801fb86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801fa5a:	693b      	ldr	r3, [r7, #16]
 801fa5c:	895a      	ldrh	r2, [r3, #10]
 801fa5e:	7dfb      	ldrb	r3, [r7, #23]
 801fa60:	b29b      	uxth	r3, r3
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d206      	bcs.n	801fa74 <tcp_enqueue_flags+0xa0>
 801fa66:	4b4a      	ldr	r3, [pc, #296]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801fa68:	f240 4239 	movw	r2, #1081	@ 0x439
 801fa6c:	494c      	ldr	r1, [pc, #304]	@ (801fba0 <tcp_enqueue_flags+0x1cc>)
 801fa6e:	484a      	ldr	r0, [pc, #296]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801fa70:	f005 fd00 	bl	8025474 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801fa78:	78fa      	ldrb	r2, [r7, #3]
 801fa7a:	7ffb      	ldrb	r3, [r7, #31]
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	460b      	mov	r3, r1
 801fa80:	6939      	ldr	r1, [r7, #16]
 801fa82:	6878      	ldr	r0, [r7, #4]
 801fa84:	f7ff f91a 	bl	801ecbc <tcp_create_segment>
 801fa88:	60f8      	str	r0, [r7, #12]
 801fa8a:	68fb      	ldr	r3, [r7, #12]
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d109      	bne.n	801faa4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	8b5b      	ldrh	r3, [r3, #26]
 801fa94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fa98:	b29a      	uxth	r2, r3
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fa9e:	f04f 33ff 	mov.w	r3, #4294967295
 801faa2:	e070      	b.n	801fb86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	68db      	ldr	r3, [r3, #12]
 801faa8:	f003 0303 	and.w	r3, r3, #3
 801faac:	2b00      	cmp	r3, #0
 801faae:	d006      	beq.n	801fabe <tcp_enqueue_flags+0xea>
 801fab0:	4b37      	ldr	r3, [pc, #220]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801fab2:	f240 4242 	movw	r2, #1090	@ 0x442
 801fab6:	493b      	ldr	r1, [pc, #236]	@ (801fba4 <tcp_enqueue_flags+0x1d0>)
 801fab8:	4837      	ldr	r0, [pc, #220]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801faba:	f005 fcdb 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	891b      	ldrh	r3, [r3, #8]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d006      	beq.n	801fad4 <tcp_enqueue_flags+0x100>
 801fac6:	4b32      	ldr	r3, [pc, #200]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801fac8:	f240 4243 	movw	r2, #1091	@ 0x443
 801facc:	4936      	ldr	r1, [pc, #216]	@ (801fba8 <tcp_enqueue_flags+0x1d4>)
 801face:	4832      	ldr	r0, [pc, #200]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801fad0:	f005 fcd0 	bl	8025474 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fad8:	2b00      	cmp	r3, #0
 801fada:	d103      	bne.n	801fae4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	68fa      	ldr	r2, [r7, #12]
 801fae0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801fae2:	e00d      	b.n	801fb00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fae8:	61bb      	str	r3, [r7, #24]
 801faea:	e002      	b.n	801faf2 <tcp_enqueue_flags+0x11e>
 801faec:	69bb      	ldr	r3, [r7, #24]
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	61bb      	str	r3, [r7, #24]
 801faf2:	69bb      	ldr	r3, [r7, #24]
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d1f8      	bne.n	801faec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801fafa:	69bb      	ldr	r3, [r7, #24]
 801fafc:	68fa      	ldr	r2, [r7, #12]
 801fafe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	2200      	movs	r2, #0
 801fb04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801fb08:	78fb      	ldrb	r3, [r7, #3]
 801fb0a:	f003 0302 	and.w	r3, r3, #2
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	d104      	bne.n	801fb1c <tcp_enqueue_flags+0x148>
 801fb12:	78fb      	ldrb	r3, [r7, #3]
 801fb14:	f003 0301 	and.w	r3, r3, #1
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	d004      	beq.n	801fb26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fb20:	1c5a      	adds	r2, r3, #1
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801fb26:	78fb      	ldrb	r3, [r7, #3]
 801fb28:	f003 0301 	and.w	r3, r3, #1
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d006      	beq.n	801fb3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	8b5b      	ldrh	r3, [r3, #26]
 801fb34:	f043 0320 	orr.w	r3, r3, #32
 801fb38:	b29a      	uxth	r2, r3
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	685b      	ldr	r3, [r3, #4]
 801fb42:	4618      	mov	r0, r3
 801fb44:	f7fa fdd6 	bl	801a6f4 <pbuf_clen>
 801fb48:	4603      	mov	r3, r0
 801fb4a:	461a      	mov	r2, r3
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fb52:	4413      	add	r3, r2
 801fb54:	b29a      	uxth	r2, r3
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801fb5c:	687b      	ldr	r3, [r7, #4]
 801fb5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d00e      	beq.n	801fb84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	d10a      	bne.n	801fb84 <tcp_enqueue_flags+0x1b0>
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d106      	bne.n	801fb84 <tcp_enqueue_flags+0x1b0>
 801fb76:	4b06      	ldr	r3, [pc, #24]	@ (801fb90 <tcp_enqueue_flags+0x1bc>)
 801fb78:	f240 4265 	movw	r2, #1125	@ 0x465
 801fb7c:	490b      	ldr	r1, [pc, #44]	@ (801fbac <tcp_enqueue_flags+0x1d8>)
 801fb7e:	4806      	ldr	r0, [pc, #24]	@ (801fb98 <tcp_enqueue_flags+0x1c4>)
 801fb80:	f005 fc78 	bl	8025474 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801fb84:	2300      	movs	r3, #0
}
 801fb86:	4618      	mov	r0, r3
 801fb88:	3720      	adds	r7, #32
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd80      	pop	{r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	0802bb98 	.word	0x0802bb98
 801fb94:	0802bfbc 	.word	0x0802bfbc
 801fb98:	0802bbec 	.word	0x0802bbec
 801fb9c:	0802c014 	.word	0x0802c014
 801fba0:	0802c034 	.word	0x0802c034
 801fba4:	0802c070 	.word	0x0802c070
 801fba8:	0802c088 	.word	0x0802c088
 801fbac:	0802c0b4 	.word	0x0802c0b4

0801fbb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801fbb0:	b5b0      	push	{r4, r5, r7, lr}
 801fbb2:	b08a      	sub	sp, #40	@ 0x28
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d106      	bne.n	801fbcc <tcp_output+0x1c>
 801fbbe:	4b8a      	ldr	r3, [pc, #552]	@ (801fde8 <tcp_output+0x238>)
 801fbc0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801fbc4:	4989      	ldr	r1, [pc, #548]	@ (801fdec <tcp_output+0x23c>)
 801fbc6:	488a      	ldr	r0, [pc, #552]	@ (801fdf0 <tcp_output+0x240>)
 801fbc8:	f005 fc54 	bl	8025474 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	7d1b      	ldrb	r3, [r3, #20]
 801fbd0:	2b01      	cmp	r3, #1
 801fbd2:	d106      	bne.n	801fbe2 <tcp_output+0x32>
 801fbd4:	4b84      	ldr	r3, [pc, #528]	@ (801fde8 <tcp_output+0x238>)
 801fbd6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801fbda:	4986      	ldr	r1, [pc, #536]	@ (801fdf4 <tcp_output+0x244>)
 801fbdc:	4884      	ldr	r0, [pc, #528]	@ (801fdf0 <tcp_output+0x240>)
 801fbde:	f005 fc49 	bl	8025474 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801fbe2:	4b85      	ldr	r3, [pc, #532]	@ (801fdf8 <tcp_output+0x248>)
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	687a      	ldr	r2, [r7, #4]
 801fbe8:	429a      	cmp	r2, r3
 801fbea:	d101      	bne.n	801fbf0 <tcp_output+0x40>
    return ERR_OK;
 801fbec:	2300      	movs	r3, #0
 801fbee:	e1ce      	b.n	801ff8e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fbfc:	4293      	cmp	r3, r2
 801fbfe:	bf28      	it	cs
 801fc00:	4613      	movcs	r3, r2
 801fc02:	b29b      	uxth	r3, r3
 801fc04:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fc0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801fc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d10b      	bne.n	801fc2a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	8b5b      	ldrh	r3, [r3, #26]
 801fc16:	f003 0302 	and.w	r3, r3, #2
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	f000 81aa 	beq.w	801ff74 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801fc20:	6878      	ldr	r0, [r7, #4]
 801fc22:	f000 fdcb 	bl	80207bc <tcp_send_empty_ack>
 801fc26:	4603      	mov	r3, r0
 801fc28:	e1b1      	b.n	801ff8e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801fc2a:	6879      	ldr	r1, [r7, #4]
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	3304      	adds	r3, #4
 801fc30:	461a      	mov	r2, r3
 801fc32:	6878      	ldr	r0, [r7, #4]
 801fc34:	f7ff f826 	bl	801ec84 <tcp_route>
 801fc38:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	d102      	bne.n	801fc46 <tcp_output+0x96>
    return ERR_RTE;
 801fc40:	f06f 0303 	mvn.w	r3, #3
 801fc44:	e1a3      	b.n	801ff8e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d003      	beq.n	801fc54 <tcp_output+0xa4>
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d111      	bne.n	801fc78 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801fc54:	697b      	ldr	r3, [r7, #20]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d002      	beq.n	801fc60 <tcp_output+0xb0>
 801fc5a:	697b      	ldr	r3, [r7, #20]
 801fc5c:	3304      	adds	r3, #4
 801fc5e:	e000      	b.n	801fc62 <tcp_output+0xb2>
 801fc60:	2300      	movs	r3, #0
 801fc62:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801fc64:	693b      	ldr	r3, [r7, #16]
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d102      	bne.n	801fc70 <tcp_output+0xc0>
      return ERR_RTE;
 801fc6a:	f06f 0303 	mvn.w	r3, #3
 801fc6e:	e18e      	b.n	801ff8e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801fc70:	693b      	ldr	r3, [r7, #16]
 801fc72:	681a      	ldr	r2, [r3, #0]
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801fc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fc7a:	68db      	ldr	r3, [r3, #12]
 801fc7c:	685b      	ldr	r3, [r3, #4]
 801fc7e:	4618      	mov	r0, r3
 801fc80:	f7f8 ffe3 	bl	8018c4a <lwip_htonl>
 801fc84:	4602      	mov	r2, r0
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fc8a:	1ad3      	subs	r3, r2, r3
 801fc8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fc8e:	8912      	ldrh	r2, [r2, #8]
 801fc90:	4413      	add	r3, r2
 801fc92:	69ba      	ldr	r2, [r7, #24]
 801fc94:	429a      	cmp	r2, r3
 801fc96:	d227      	bcs.n	801fce8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801fc9e:	461a      	mov	r2, r3
 801fca0:	69bb      	ldr	r3, [r7, #24]
 801fca2:	4293      	cmp	r3, r2
 801fca4:	d114      	bne.n	801fcd0 <tcp_output+0x120>
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	d110      	bne.n	801fcd0 <tcp_output+0x120>
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	d10b      	bne.n	801fcd0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2200      	movs	r2, #0
 801fcbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	2201      	movs	r2, #1
 801fcc4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	2200      	movs	r2, #0
 801fccc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	8b5b      	ldrh	r3, [r3, #26]
 801fcd4:	f003 0302 	and.w	r3, r3, #2
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	f000 814d 	beq.w	801ff78 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801fcde:	6878      	ldr	r0, [r7, #4]
 801fce0:	f000 fd6c 	bl	80207bc <tcp_send_empty_ack>
 801fce4:	4603      	mov	r3, r0
 801fce6:	e152      	b.n	801ff8e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	2200      	movs	r2, #0
 801fcec:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fcf4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801fcf6:	6a3b      	ldr	r3, [r7, #32]
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	f000 811c 	beq.w	801ff36 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801fcfe:	e002      	b.n	801fd06 <tcp_output+0x156>
 801fd00:	6a3b      	ldr	r3, [r7, #32]
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	623b      	str	r3, [r7, #32]
 801fd06:	6a3b      	ldr	r3, [r7, #32]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d1f8      	bne.n	801fd00 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801fd0e:	e112      	b.n	801ff36 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801fd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd12:	68db      	ldr	r3, [r3, #12]
 801fd14:	899b      	ldrh	r3, [r3, #12]
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	4618      	mov	r0, r3
 801fd1a:	f7f8 ff81 	bl	8018c20 <lwip_htons>
 801fd1e:	4603      	mov	r3, r0
 801fd20:	b2db      	uxtb	r3, r3
 801fd22:	f003 0304 	and.w	r3, r3, #4
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d006      	beq.n	801fd38 <tcp_output+0x188>
 801fd2a:	4b2f      	ldr	r3, [pc, #188]	@ (801fde8 <tcp_output+0x238>)
 801fd2c:	f240 5236 	movw	r2, #1334	@ 0x536
 801fd30:	4932      	ldr	r1, [pc, #200]	@ (801fdfc <tcp_output+0x24c>)
 801fd32:	482f      	ldr	r0, [pc, #188]	@ (801fdf0 <tcp_output+0x240>)
 801fd34:	f005 fb9e 	bl	8025474 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d01f      	beq.n	801fd80 <tcp_output+0x1d0>
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	8b5b      	ldrh	r3, [r3, #26]
 801fd44:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d119      	bne.n	801fd80 <tcp_output+0x1d0>
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d00b      	beq.n	801fd6c <tcp_output+0x1bc>
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d110      	bne.n	801fd80 <tcp_output+0x1d0>
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fd62:	891a      	ldrh	r2, [r3, #8]
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801fd68:	429a      	cmp	r2, r3
 801fd6a:	d209      	bcs.n	801fd80 <tcp_output+0x1d0>
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d004      	beq.n	801fd80 <tcp_output+0x1d0>
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fd7c:	2b08      	cmp	r3, #8
 801fd7e:	d901      	bls.n	801fd84 <tcp_output+0x1d4>
 801fd80:	2301      	movs	r3, #1
 801fd82:	e000      	b.n	801fd86 <tcp_output+0x1d6>
 801fd84:	2300      	movs	r3, #0
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d106      	bne.n	801fd98 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	8b5b      	ldrh	r3, [r3, #26]
 801fd8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	f000 80e4 	beq.w	801ff60 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	7d1b      	ldrb	r3, [r3, #20]
 801fd9c:	2b02      	cmp	r3, #2
 801fd9e:	d00d      	beq.n	801fdbc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801fda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fda2:	68db      	ldr	r3, [r3, #12]
 801fda4:	899b      	ldrh	r3, [r3, #12]
 801fda6:	b29c      	uxth	r4, r3
 801fda8:	2010      	movs	r0, #16
 801fdaa:	f7f8 ff39 	bl	8018c20 <lwip_htons>
 801fdae:	4603      	mov	r3, r0
 801fdb0:	461a      	mov	r2, r3
 801fdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdb4:	68db      	ldr	r3, [r3, #12]
 801fdb6:	4322      	orrs	r2, r4
 801fdb8:	b292      	uxth	r2, r2
 801fdba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801fdbc:	697a      	ldr	r2, [r7, #20]
 801fdbe:	6879      	ldr	r1, [r7, #4]
 801fdc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801fdc2:	f000 f909 	bl	801ffd8 <tcp_output_segment>
 801fdc6:	4603      	mov	r3, r0
 801fdc8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801fdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d016      	beq.n	801fe00 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	8b5b      	ldrh	r3, [r3, #26]
 801fdd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fdda:	b29a      	uxth	r2, r3
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	835a      	strh	r2, [r3, #26]
      return err;
 801fde0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fde4:	e0d3      	b.n	801ff8e <tcp_output+0x3de>
 801fde6:	bf00      	nop
 801fde8:	0802bb98 	.word	0x0802bb98
 801fdec:	0802c0dc 	.word	0x0802c0dc
 801fdf0:	0802bbec 	.word	0x0802bbec
 801fdf4:	0802c0f4 	.word	0x0802c0f4
 801fdf8:	2400beb0 	.word	0x2400beb0
 801fdfc:	0802c11c 	.word	0x0802c11c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801fe00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe02:	681a      	ldr	r2, [r3, #0]
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	7d1b      	ldrb	r3, [r3, #20]
 801fe0c:	2b02      	cmp	r3, #2
 801fe0e:	d006      	beq.n	801fe1e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	8b5b      	ldrh	r3, [r3, #26]
 801fe14:	f023 0303 	bic.w	r3, r3, #3
 801fe18:	b29a      	uxth	r2, r3
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fe1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe20:	68db      	ldr	r3, [r3, #12]
 801fe22:	685b      	ldr	r3, [r3, #4]
 801fe24:	4618      	mov	r0, r3
 801fe26:	f7f8 ff10 	bl	8018c4a <lwip_htonl>
 801fe2a:	4604      	mov	r4, r0
 801fe2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe2e:	891b      	ldrh	r3, [r3, #8]
 801fe30:	461d      	mov	r5, r3
 801fe32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe34:	68db      	ldr	r3, [r3, #12]
 801fe36:	899b      	ldrh	r3, [r3, #12]
 801fe38:	b29b      	uxth	r3, r3
 801fe3a:	4618      	mov	r0, r3
 801fe3c:	f7f8 fef0 	bl	8018c20 <lwip_htons>
 801fe40:	4603      	mov	r3, r0
 801fe42:	b2db      	uxtb	r3, r3
 801fe44:	f003 0303 	and.w	r3, r3, #3
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d001      	beq.n	801fe50 <tcp_output+0x2a0>
 801fe4c:	2301      	movs	r3, #1
 801fe4e:	e000      	b.n	801fe52 <tcp_output+0x2a2>
 801fe50:	2300      	movs	r3, #0
 801fe52:	442b      	add	r3, r5
 801fe54:	4423      	add	r3, r4
 801fe56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fe5c:	68bb      	ldr	r3, [r7, #8]
 801fe5e:	1ad3      	subs	r3, r2, r3
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	da02      	bge.n	801fe6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	68ba      	ldr	r2, [r7, #8]
 801fe68:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801fe6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe6c:	891b      	ldrh	r3, [r3, #8]
 801fe6e:	461c      	mov	r4, r3
 801fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe72:	68db      	ldr	r3, [r3, #12]
 801fe74:	899b      	ldrh	r3, [r3, #12]
 801fe76:	b29b      	uxth	r3, r3
 801fe78:	4618      	mov	r0, r3
 801fe7a:	f7f8 fed1 	bl	8018c20 <lwip_htons>
 801fe7e:	4603      	mov	r3, r0
 801fe80:	b2db      	uxtb	r3, r3
 801fe82:	f003 0303 	and.w	r3, r3, #3
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	d001      	beq.n	801fe8e <tcp_output+0x2de>
 801fe8a:	2301      	movs	r3, #1
 801fe8c:	e000      	b.n	801fe90 <tcp_output+0x2e0>
 801fe8e:	2300      	movs	r3, #0
 801fe90:	4423      	add	r3, r4
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d049      	beq.n	801ff2a <tcp_output+0x37a>
      seg->next = NULL;
 801fe96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe98:	2200      	movs	r2, #0
 801fe9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d105      	bne.n	801feb0 <tcp_output+0x300>
        pcb->unacked = seg;
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fea8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801feac:	623b      	str	r3, [r7, #32]
 801feae:	e03f      	b.n	801ff30 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801feb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801feb2:	68db      	ldr	r3, [r3, #12]
 801feb4:	685b      	ldr	r3, [r3, #4]
 801feb6:	4618      	mov	r0, r3
 801feb8:	f7f8 fec7 	bl	8018c4a <lwip_htonl>
 801febc:	4604      	mov	r4, r0
 801febe:	6a3b      	ldr	r3, [r7, #32]
 801fec0:	68db      	ldr	r3, [r3, #12]
 801fec2:	685b      	ldr	r3, [r3, #4]
 801fec4:	4618      	mov	r0, r3
 801fec6:	f7f8 fec0 	bl	8018c4a <lwip_htonl>
 801feca:	4603      	mov	r3, r0
 801fecc:	1ae3      	subs	r3, r4, r3
 801fece:	2b00      	cmp	r3, #0
 801fed0:	da24      	bge.n	801ff1c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	3370      	adds	r3, #112	@ 0x70
 801fed6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fed8:	e002      	b.n	801fee0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801feda:	69fb      	ldr	r3, [r7, #28]
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fee0:	69fb      	ldr	r3, [r7, #28]
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d011      	beq.n	801ff0c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801fee8:	69fb      	ldr	r3, [r7, #28]
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	68db      	ldr	r3, [r3, #12]
 801feee:	685b      	ldr	r3, [r3, #4]
 801fef0:	4618      	mov	r0, r3
 801fef2:	f7f8 feaa 	bl	8018c4a <lwip_htonl>
 801fef6:	4604      	mov	r4, r0
 801fef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fefa:	68db      	ldr	r3, [r3, #12]
 801fefc:	685b      	ldr	r3, [r3, #4]
 801fefe:	4618      	mov	r0, r3
 801ff00:	f7f8 fea3 	bl	8018c4a <lwip_htonl>
 801ff04:	4603      	mov	r3, r0
 801ff06:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	dbe6      	blt.n	801feda <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ff0c:	69fb      	ldr	r3, [r7, #28]
 801ff0e:	681a      	ldr	r2, [r3, #0]
 801ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff12:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ff14:	69fb      	ldr	r3, [r7, #28]
 801ff16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff18:	601a      	str	r2, [r3, #0]
 801ff1a:	e009      	b.n	801ff30 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ff1c:	6a3b      	ldr	r3, [r7, #32]
 801ff1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff20:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ff22:	6a3b      	ldr	r3, [r7, #32]
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	623b      	str	r3, [r7, #32]
 801ff28:	e002      	b.n	801ff30 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ff2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ff2c:	f7fb ff1f 	bl	801bd6e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff34:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801ff36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d012      	beq.n	801ff62 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ff3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff3e:	68db      	ldr	r3, [r3, #12]
 801ff40:	685b      	ldr	r3, [r3, #4]
 801ff42:	4618      	mov	r0, r3
 801ff44:	f7f8 fe81 	bl	8018c4a <lwip_htonl>
 801ff48:	4602      	mov	r2, r0
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ff4e:	1ad3      	subs	r3, r2, r3
 801ff50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff52:	8912      	ldrh	r2, [r2, #8]
 801ff54:	4413      	add	r3, r2
  while (seg != NULL &&
 801ff56:	69ba      	ldr	r2, [r7, #24]
 801ff58:	429a      	cmp	r2, r3
 801ff5a:	f4bf aed9 	bcs.w	801fd10 <tcp_output+0x160>
 801ff5e:	e000      	b.n	801ff62 <tcp_output+0x3b2>
      break;
 801ff60:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d108      	bne.n	801ff7c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	2200      	movs	r2, #0
 801ff6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801ff72:	e004      	b.n	801ff7e <tcp_output+0x3ce>
    goto output_done;
 801ff74:	bf00      	nop
 801ff76:	e002      	b.n	801ff7e <tcp_output+0x3ce>
    goto output_done;
 801ff78:	bf00      	nop
 801ff7a:	e000      	b.n	801ff7e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ff7c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	8b5b      	ldrh	r3, [r3, #26]
 801ff82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ff86:	b29a      	uxth	r2, r3
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ff8c:	2300      	movs	r3, #0
}
 801ff8e:	4618      	mov	r0, r3
 801ff90:	3728      	adds	r7, #40	@ 0x28
 801ff92:	46bd      	mov	sp, r7
 801ff94:	bdb0      	pop	{r4, r5, r7, pc}
 801ff96:	bf00      	nop

0801ff98 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ff98:	b580      	push	{r7, lr}
 801ff9a:	b082      	sub	sp, #8
 801ff9c:	af00      	add	r7, sp, #0
 801ff9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ffa0:	687b      	ldr	r3, [r7, #4]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d106      	bne.n	801ffb4 <tcp_output_segment_busy+0x1c>
 801ffa6:	4b09      	ldr	r3, [pc, #36]	@ (801ffcc <tcp_output_segment_busy+0x34>)
 801ffa8:	f240 529a 	movw	r2, #1434	@ 0x59a
 801ffac:	4908      	ldr	r1, [pc, #32]	@ (801ffd0 <tcp_output_segment_busy+0x38>)
 801ffae:	4809      	ldr	r0, [pc, #36]	@ (801ffd4 <tcp_output_segment_busy+0x3c>)
 801ffb0:	f005 fa60 	bl	8025474 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	685b      	ldr	r3, [r3, #4]
 801ffb8:	7b9b      	ldrb	r3, [r3, #14]
 801ffba:	2b01      	cmp	r3, #1
 801ffbc:	d001      	beq.n	801ffc2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ffbe:	2301      	movs	r3, #1
 801ffc0:	e000      	b.n	801ffc4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ffc2:	2300      	movs	r3, #0
}
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	3708      	adds	r7, #8
 801ffc8:	46bd      	mov	sp, r7
 801ffca:	bd80      	pop	{r7, pc}
 801ffcc:	0802bb98 	.word	0x0802bb98
 801ffd0:	0802c134 	.word	0x0802c134
 801ffd4:	0802bbec 	.word	0x0802bbec

0801ffd8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ffd8:	b5b0      	push	{r4, r5, r7, lr}
 801ffda:	b08c      	sub	sp, #48	@ 0x30
 801ffdc:	af04      	add	r7, sp, #16
 801ffde:	60f8      	str	r0, [r7, #12]
 801ffe0:	60b9      	str	r1, [r7, #8]
 801ffe2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d106      	bne.n	801fff8 <tcp_output_segment+0x20>
 801ffea:	4b64      	ldr	r3, [pc, #400]	@ (802017c <tcp_output_segment+0x1a4>)
 801ffec:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801fff0:	4963      	ldr	r1, [pc, #396]	@ (8020180 <tcp_output_segment+0x1a8>)
 801fff2:	4864      	ldr	r0, [pc, #400]	@ (8020184 <tcp_output_segment+0x1ac>)
 801fff4:	f005 fa3e 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801fff8:	68bb      	ldr	r3, [r7, #8]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d106      	bne.n	802000c <tcp_output_segment+0x34>
 801fffe:	4b5f      	ldr	r3, [pc, #380]	@ (802017c <tcp_output_segment+0x1a4>)
 8020000:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8020004:	4960      	ldr	r1, [pc, #384]	@ (8020188 <tcp_output_segment+0x1b0>)
 8020006:	485f      	ldr	r0, [pc, #380]	@ (8020184 <tcp_output_segment+0x1ac>)
 8020008:	f005 fa34 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	2b00      	cmp	r3, #0
 8020010:	d106      	bne.n	8020020 <tcp_output_segment+0x48>
 8020012:	4b5a      	ldr	r3, [pc, #360]	@ (802017c <tcp_output_segment+0x1a4>)
 8020014:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8020018:	495c      	ldr	r1, [pc, #368]	@ (802018c <tcp_output_segment+0x1b4>)
 802001a:	485a      	ldr	r0, [pc, #360]	@ (8020184 <tcp_output_segment+0x1ac>)
 802001c:	f005 fa2a 	bl	8025474 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020020:	68f8      	ldr	r0, [r7, #12]
 8020022:	f7ff ffb9 	bl	801ff98 <tcp_output_segment_busy>
 8020026:	4603      	mov	r3, r0
 8020028:	2b00      	cmp	r3, #0
 802002a:	d001      	beq.n	8020030 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 802002c:	2300      	movs	r3, #0
 802002e:	e0a1      	b.n	8020174 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020030:	68bb      	ldr	r3, [r7, #8]
 8020032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	68dc      	ldr	r4, [r3, #12]
 8020038:	4610      	mov	r0, r2
 802003a:	f7f8 fe06 	bl	8018c4a <lwip_htonl>
 802003e:	4603      	mov	r3, r0
 8020040:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020042:	68bb      	ldr	r3, [r7, #8]
 8020044:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	68dc      	ldr	r4, [r3, #12]
 802004a:	4610      	mov	r0, r2
 802004c:	f7f8 fde8 	bl	8018c20 <lwip_htons>
 8020050:	4603      	mov	r3, r0
 8020052:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020054:	68bb      	ldr	r3, [r7, #8]
 8020056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020058:	68ba      	ldr	r2, [r7, #8]
 802005a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 802005c:	441a      	add	r2, r3
 802005e:	68bb      	ldr	r3, [r7, #8]
 8020060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	68db      	ldr	r3, [r3, #12]
 8020066:	3314      	adds	r3, #20
 8020068:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	7a9b      	ldrb	r3, [r3, #10]
 802006e:	f003 0301 	and.w	r3, r3, #1
 8020072:	2b00      	cmp	r3, #0
 8020074:	d015      	beq.n	80200a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020076:	68bb      	ldr	r3, [r7, #8]
 8020078:	3304      	adds	r3, #4
 802007a:	461a      	mov	r2, r3
 802007c:	6879      	ldr	r1, [r7, #4]
 802007e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8020082:	f7fc fa39 	bl	801c4f8 <tcp_eff_send_mss_netif>
 8020086:	4603      	mov	r3, r0
 8020088:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 802008a:	8b7b      	ldrh	r3, [r7, #26]
 802008c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8020090:	4618      	mov	r0, r3
 8020092:	f7f8 fdda 	bl	8018c4a <lwip_htonl>
 8020096:	4602      	mov	r2, r0
 8020098:	69fb      	ldr	r3, [r7, #28]
 802009a:	601a      	str	r2, [r3, #0]
    opts += 1;
 802009c:	69fb      	ldr	r3, [r7, #28]
 802009e:	3304      	adds	r3, #4
 80200a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80200a2:	68bb      	ldr	r3, [r7, #8]
 80200a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	da02      	bge.n	80200b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80200ac:	68bb      	ldr	r3, [r7, #8]
 80200ae:	2200      	movs	r2, #0
 80200b0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80200b2:	68bb      	ldr	r3, [r7, #8]
 80200b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d10c      	bne.n	80200d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80200ba:	4b35      	ldr	r3, [pc, #212]	@ (8020190 <tcp_output_segment+0x1b8>)
 80200bc:	681a      	ldr	r2, [r3, #0]
 80200be:	68bb      	ldr	r3, [r7, #8]
 80200c0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80200c2:	68fb      	ldr	r3, [r7, #12]
 80200c4:	68db      	ldr	r3, [r3, #12]
 80200c6:	685b      	ldr	r3, [r3, #4]
 80200c8:	4618      	mov	r0, r3
 80200ca:	f7f8 fdbe 	bl	8018c4a <lwip_htonl>
 80200ce:	4602      	mov	r2, r0
 80200d0:	68bb      	ldr	r3, [r7, #8]
 80200d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80200d4:	68fb      	ldr	r3, [r7, #12]
 80200d6:	68da      	ldr	r2, [r3, #12]
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	685b      	ldr	r3, [r3, #4]
 80200dc:	685b      	ldr	r3, [r3, #4]
 80200de:	1ad3      	subs	r3, r2, r3
 80200e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80200e2:	68fb      	ldr	r3, [r7, #12]
 80200e4:	685b      	ldr	r3, [r3, #4]
 80200e6:	8959      	ldrh	r1, [r3, #10]
 80200e8:	68fb      	ldr	r3, [r7, #12]
 80200ea:	685b      	ldr	r3, [r3, #4]
 80200ec:	8b3a      	ldrh	r2, [r7, #24]
 80200ee:	1a8a      	subs	r2, r1, r2
 80200f0:	b292      	uxth	r2, r2
 80200f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	685b      	ldr	r3, [r3, #4]
 80200f8:	8919      	ldrh	r1, [r3, #8]
 80200fa:	68fb      	ldr	r3, [r7, #12]
 80200fc:	685b      	ldr	r3, [r3, #4]
 80200fe:	8b3a      	ldrh	r2, [r7, #24]
 8020100:	1a8a      	subs	r2, r1, r2
 8020102:	b292      	uxth	r2, r2
 8020104:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	685b      	ldr	r3, [r3, #4]
 802010a:	68fa      	ldr	r2, [r7, #12]
 802010c:	68d2      	ldr	r2, [r2, #12]
 802010e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	68db      	ldr	r3, [r3, #12]
 8020114:	2200      	movs	r2, #0
 8020116:	741a      	strb	r2, [r3, #16]
 8020118:	2200      	movs	r2, #0
 802011a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	68da      	ldr	r2, [r3, #12]
 8020120:	68fb      	ldr	r3, [r7, #12]
 8020122:	7a9b      	ldrb	r3, [r3, #10]
 8020124:	f003 0301 	and.w	r3, r3, #1
 8020128:	2b00      	cmp	r3, #0
 802012a:	d001      	beq.n	8020130 <tcp_output_segment+0x158>
 802012c:	2318      	movs	r3, #24
 802012e:	e000      	b.n	8020132 <tcp_output_segment+0x15a>
 8020130:	2314      	movs	r3, #20
 8020132:	4413      	add	r3, r2
 8020134:	69fa      	ldr	r2, [r7, #28]
 8020136:	429a      	cmp	r2, r3
 8020138:	d006      	beq.n	8020148 <tcp_output_segment+0x170>
 802013a:	4b10      	ldr	r3, [pc, #64]	@ (802017c <tcp_output_segment+0x1a4>)
 802013c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8020140:	4914      	ldr	r1, [pc, #80]	@ (8020194 <tcp_output_segment+0x1bc>)
 8020142:	4810      	ldr	r0, [pc, #64]	@ (8020184 <tcp_output_segment+0x1ac>)
 8020144:	f005 f996 	bl	8025474 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	6858      	ldr	r0, [r3, #4]
 802014c:	68b9      	ldr	r1, [r7, #8]
 802014e:	68bb      	ldr	r3, [r7, #8]
 8020150:	1d1c      	adds	r4, r3, #4
 8020152:	68bb      	ldr	r3, [r7, #8]
 8020154:	7add      	ldrb	r5, [r3, #11]
 8020156:	68bb      	ldr	r3, [r7, #8]
 8020158:	7a9b      	ldrb	r3, [r3, #10]
 802015a:	687a      	ldr	r2, [r7, #4]
 802015c:	9202      	str	r2, [sp, #8]
 802015e:	2206      	movs	r2, #6
 8020160:	9201      	str	r2, [sp, #4]
 8020162:	9300      	str	r3, [sp, #0]
 8020164:	462b      	mov	r3, r5
 8020166:	4622      	mov	r2, r4
 8020168:	f002 fdba 	bl	8022ce0 <ip4_output_if>
 802016c:	4603      	mov	r3, r0
 802016e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8020170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020174:	4618      	mov	r0, r3
 8020176:	3720      	adds	r7, #32
 8020178:	46bd      	mov	sp, r7
 802017a:	bdb0      	pop	{r4, r5, r7, pc}
 802017c:	0802bb98 	.word	0x0802bb98
 8020180:	0802c15c 	.word	0x0802c15c
 8020184:	0802bbec 	.word	0x0802bbec
 8020188:	0802c17c 	.word	0x0802c17c
 802018c:	0802c19c 	.word	0x0802c19c
 8020190:	2400be64 	.word	0x2400be64
 8020194:	0802c1c0 	.word	0x0802c1c0

08020198 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8020198:	b5b0      	push	{r4, r5, r7, lr}
 802019a:	b084      	sub	sp, #16
 802019c:	af00      	add	r7, sp, #0
 802019e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d106      	bne.n	80201b4 <tcp_rexmit_rto_prepare+0x1c>
 80201a6:	4b31      	ldr	r3, [pc, #196]	@ (802026c <tcp_rexmit_rto_prepare+0xd4>)
 80201a8:	f240 6263 	movw	r2, #1635	@ 0x663
 80201ac:	4930      	ldr	r1, [pc, #192]	@ (8020270 <tcp_rexmit_rto_prepare+0xd8>)
 80201ae:	4831      	ldr	r0, [pc, #196]	@ (8020274 <tcp_rexmit_rto_prepare+0xdc>)
 80201b0:	f005 f960 	bl	8025474 <iprintf>

  if (pcb->unacked == NULL) {
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	d102      	bne.n	80201c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80201bc:	f06f 0305 	mvn.w	r3, #5
 80201c0:	e050      	b.n	8020264 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201c6:	60fb      	str	r3, [r7, #12]
 80201c8:	e00b      	b.n	80201e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80201ca:	68f8      	ldr	r0, [r7, #12]
 80201cc:	f7ff fee4 	bl	801ff98 <tcp_output_segment_busy>
 80201d0:	4603      	mov	r3, r0
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d002      	beq.n	80201dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80201d6:	f06f 0305 	mvn.w	r3, #5
 80201da:	e043      	b.n	8020264 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80201dc:	68fb      	ldr	r3, [r7, #12]
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	60fb      	str	r3, [r7, #12]
 80201e2:	68fb      	ldr	r3, [r7, #12]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	2b00      	cmp	r3, #0
 80201e8:	d1ef      	bne.n	80201ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80201ea:	68f8      	ldr	r0, [r7, #12]
 80201ec:	f7ff fed4 	bl	801ff98 <tcp_output_segment_busy>
 80201f0:	4603      	mov	r3, r0
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d002      	beq.n	80201fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80201f6:	f06f 0305 	mvn.w	r3, #5
 80201fa:	e033      	b.n	8020264 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8020200:	68fb      	ldr	r3, [r7, #12]
 8020202:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	2200      	movs	r2, #0
 8020210:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	8b5b      	ldrh	r3, [r3, #26]
 8020216:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802021a:	b29a      	uxth	r2, r3
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020220:	68fb      	ldr	r3, [r7, #12]
 8020222:	68db      	ldr	r3, [r3, #12]
 8020224:	685b      	ldr	r3, [r3, #4]
 8020226:	4618      	mov	r0, r3
 8020228:	f7f8 fd0f 	bl	8018c4a <lwip_htonl>
 802022c:	4604      	mov	r4, r0
 802022e:	68fb      	ldr	r3, [r7, #12]
 8020230:	891b      	ldrh	r3, [r3, #8]
 8020232:	461d      	mov	r5, r3
 8020234:	68fb      	ldr	r3, [r7, #12]
 8020236:	68db      	ldr	r3, [r3, #12]
 8020238:	899b      	ldrh	r3, [r3, #12]
 802023a:	b29b      	uxth	r3, r3
 802023c:	4618      	mov	r0, r3
 802023e:	f7f8 fcef 	bl	8018c20 <lwip_htons>
 8020242:	4603      	mov	r3, r0
 8020244:	b2db      	uxtb	r3, r3
 8020246:	f003 0303 	and.w	r3, r3, #3
 802024a:	2b00      	cmp	r3, #0
 802024c:	d001      	beq.n	8020252 <tcp_rexmit_rto_prepare+0xba>
 802024e:	2301      	movs	r3, #1
 8020250:	e000      	b.n	8020254 <tcp_rexmit_rto_prepare+0xbc>
 8020252:	2300      	movs	r3, #0
 8020254:	442b      	add	r3, r5
 8020256:	18e2      	adds	r2, r4, r3
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	2200      	movs	r2, #0
 8020260:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8020262:	2300      	movs	r3, #0
}
 8020264:	4618      	mov	r0, r3
 8020266:	3710      	adds	r7, #16
 8020268:	46bd      	mov	sp, r7
 802026a:	bdb0      	pop	{r4, r5, r7, pc}
 802026c:	0802bb98 	.word	0x0802bb98
 8020270:	0802c1d4 	.word	0x0802c1d4
 8020274:	0802bbec 	.word	0x0802bbec

08020278 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020278:	b580      	push	{r7, lr}
 802027a:	b082      	sub	sp, #8
 802027c:	af00      	add	r7, sp, #0
 802027e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d106      	bne.n	8020294 <tcp_rexmit_rto_commit+0x1c>
 8020286:	4b0d      	ldr	r3, [pc, #52]	@ (80202bc <tcp_rexmit_rto_commit+0x44>)
 8020288:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 802028c:	490c      	ldr	r1, [pc, #48]	@ (80202c0 <tcp_rexmit_rto_commit+0x48>)
 802028e:	480d      	ldr	r0, [pc, #52]	@ (80202c4 <tcp_rexmit_rto_commit+0x4c>)
 8020290:	f005 f8f0 	bl	8025474 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 802029a:	2bff      	cmp	r3, #255	@ 0xff
 802029c:	d007      	beq.n	80202ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80202a4:	3301      	adds	r3, #1
 80202a6:	b2da      	uxtb	r2, r3
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80202ae:	6878      	ldr	r0, [r7, #4]
 80202b0:	f7ff fc7e 	bl	801fbb0 <tcp_output>
}
 80202b4:	bf00      	nop
 80202b6:	3708      	adds	r7, #8
 80202b8:	46bd      	mov	sp, r7
 80202ba:	bd80      	pop	{r7, pc}
 80202bc:	0802bb98 	.word	0x0802bb98
 80202c0:	0802c1f8 	.word	0x0802c1f8
 80202c4:	0802bbec 	.word	0x0802bbec

080202c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80202c8:	b580      	push	{r7, lr}
 80202ca:	b082      	sub	sp, #8
 80202cc:	af00      	add	r7, sp, #0
 80202ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d106      	bne.n	80202e4 <tcp_rexmit_rto+0x1c>
 80202d6:	4b0a      	ldr	r3, [pc, #40]	@ (8020300 <tcp_rexmit_rto+0x38>)
 80202d8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80202dc:	4909      	ldr	r1, [pc, #36]	@ (8020304 <tcp_rexmit_rto+0x3c>)
 80202de:	480a      	ldr	r0, [pc, #40]	@ (8020308 <tcp_rexmit_rto+0x40>)
 80202e0:	f005 f8c8 	bl	8025474 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80202e4:	6878      	ldr	r0, [r7, #4]
 80202e6:	f7ff ff57 	bl	8020198 <tcp_rexmit_rto_prepare>
 80202ea:	4603      	mov	r3, r0
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d102      	bne.n	80202f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80202f0:	6878      	ldr	r0, [r7, #4]
 80202f2:	f7ff ffc1 	bl	8020278 <tcp_rexmit_rto_commit>
  }
}
 80202f6:	bf00      	nop
 80202f8:	3708      	adds	r7, #8
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd80      	pop	{r7, pc}
 80202fe:	bf00      	nop
 8020300:	0802bb98 	.word	0x0802bb98
 8020304:	0802c21c 	.word	0x0802c21c
 8020308:	0802bbec 	.word	0x0802bbec

0802030c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 802030c:	b590      	push	{r4, r7, lr}
 802030e:	b085      	sub	sp, #20
 8020310:	af00      	add	r7, sp, #0
 8020312:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	2b00      	cmp	r3, #0
 8020318:	d106      	bne.n	8020328 <tcp_rexmit+0x1c>
 802031a:	4b2f      	ldr	r3, [pc, #188]	@ (80203d8 <tcp_rexmit+0xcc>)
 802031c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8020320:	492e      	ldr	r1, [pc, #184]	@ (80203dc <tcp_rexmit+0xd0>)
 8020322:	482f      	ldr	r0, [pc, #188]	@ (80203e0 <tcp_rexmit+0xd4>)
 8020324:	f005 f8a6 	bl	8025474 <iprintf>

  if (pcb->unacked == NULL) {
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802032c:	2b00      	cmp	r3, #0
 802032e:	d102      	bne.n	8020336 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020330:	f06f 0305 	mvn.w	r3, #5
 8020334:	e04c      	b.n	80203d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802033a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 802033c:	68b8      	ldr	r0, [r7, #8]
 802033e:	f7ff fe2b 	bl	801ff98 <tcp_output_segment_busy>
 8020342:	4603      	mov	r3, r0
 8020344:	2b00      	cmp	r3, #0
 8020346:	d002      	beq.n	802034e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020348:	f06f 0305 	mvn.w	r3, #5
 802034c:	e040      	b.n	80203d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 802034e:	68bb      	ldr	r3, [r7, #8]
 8020350:	681a      	ldr	r2, [r3, #0]
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	336c      	adds	r3, #108	@ 0x6c
 802035a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802035c:	e002      	b.n	8020364 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 802035e:	68fb      	ldr	r3, [r7, #12]
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	2b00      	cmp	r3, #0
 802036a:	d011      	beq.n	8020390 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	68db      	ldr	r3, [r3, #12]
 8020372:	685b      	ldr	r3, [r3, #4]
 8020374:	4618      	mov	r0, r3
 8020376:	f7f8 fc68 	bl	8018c4a <lwip_htonl>
 802037a:	4604      	mov	r4, r0
 802037c:	68bb      	ldr	r3, [r7, #8]
 802037e:	68db      	ldr	r3, [r3, #12]
 8020380:	685b      	ldr	r3, [r3, #4]
 8020382:	4618      	mov	r0, r3
 8020384:	f7f8 fc61 	bl	8018c4a <lwip_htonl>
 8020388:	4603      	mov	r3, r0
 802038a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802038c:	2b00      	cmp	r3, #0
 802038e:	dbe6      	blt.n	802035e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020390:	68fb      	ldr	r3, [r7, #12]
 8020392:	681a      	ldr	r2, [r3, #0]
 8020394:	68bb      	ldr	r3, [r7, #8]
 8020396:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	68ba      	ldr	r2, [r7, #8]
 802039c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 802039e:	68bb      	ldr	r3, [r7, #8]
 80203a0:	681b      	ldr	r3, [r3, #0]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d103      	bne.n	80203ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	2200      	movs	r2, #0
 80203aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80203b4:	2bff      	cmp	r3, #255	@ 0xff
 80203b6:	d007      	beq.n	80203c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80203be:	3301      	adds	r3, #1
 80203c0:	b2da      	uxtb	r2, r3
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	2200      	movs	r2, #0
 80203cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80203ce:	2300      	movs	r3, #0
}
 80203d0:	4618      	mov	r0, r3
 80203d2:	3714      	adds	r7, #20
 80203d4:	46bd      	mov	sp, r7
 80203d6:	bd90      	pop	{r4, r7, pc}
 80203d8:	0802bb98 	.word	0x0802bb98
 80203dc:	0802c238 	.word	0x0802c238
 80203e0:	0802bbec 	.word	0x0802bbec

080203e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80203e4:	b580      	push	{r7, lr}
 80203e6:	b082      	sub	sp, #8
 80203e8:	af00      	add	r7, sp, #0
 80203ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	d106      	bne.n	8020400 <tcp_rexmit_fast+0x1c>
 80203f2:	4b2a      	ldr	r3, [pc, #168]	@ (802049c <tcp_rexmit_fast+0xb8>)
 80203f4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80203f8:	4929      	ldr	r1, [pc, #164]	@ (80204a0 <tcp_rexmit_fast+0xbc>)
 80203fa:	482a      	ldr	r0, [pc, #168]	@ (80204a4 <tcp_rexmit_fast+0xc0>)
 80203fc:	f005 f83a 	bl	8025474 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020404:	2b00      	cmp	r3, #0
 8020406:	d045      	beq.n	8020494 <tcp_rexmit_fast+0xb0>
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	8b5b      	ldrh	r3, [r3, #26]
 802040c:	f003 0304 	and.w	r3, r3, #4
 8020410:	2b00      	cmp	r3, #0
 8020412:	d13f      	bne.n	8020494 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8020414:	6878      	ldr	r0, [r7, #4]
 8020416:	f7ff ff79 	bl	802030c <tcp_rexmit>
 802041a:	4603      	mov	r3, r0
 802041c:	2b00      	cmp	r3, #0
 802041e:	d139      	bne.n	8020494 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802042c:	4293      	cmp	r3, r2
 802042e:	bf28      	it	cs
 8020430:	4613      	movcs	r3, r2
 8020432:	b29b      	uxth	r3, r3
 8020434:	2b00      	cmp	r3, #0
 8020436:	da00      	bge.n	802043a <tcp_rexmit_fast+0x56>
 8020438:	3301      	adds	r3, #1
 802043a:	105b      	asrs	r3, r3, #1
 802043c:	b29a      	uxth	r2, r3
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 802044a:	461a      	mov	r2, r3
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020450:	005b      	lsls	r3, r3, #1
 8020452:	429a      	cmp	r2, r3
 8020454:	d206      	bcs.n	8020464 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802045a:	005b      	lsls	r3, r3, #1
 802045c:	b29a      	uxth	r2, r3
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802046e:	4619      	mov	r1, r3
 8020470:	0049      	lsls	r1, r1, #1
 8020472:	440b      	add	r3, r1
 8020474:	b29b      	uxth	r3, r3
 8020476:	4413      	add	r3, r2
 8020478:	b29a      	uxth	r2, r3
 802047a:	687b      	ldr	r3, [r7, #4]
 802047c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	8b5b      	ldrh	r3, [r3, #26]
 8020484:	f043 0304 	orr.w	r3, r3, #4
 8020488:	b29a      	uxth	r2, r3
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	2200      	movs	r2, #0
 8020492:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8020494:	bf00      	nop
 8020496:	3708      	adds	r7, #8
 8020498:	46bd      	mov	sp, r7
 802049a:	bd80      	pop	{r7, pc}
 802049c:	0802bb98 	.word	0x0802bb98
 80204a0:	0802c250 	.word	0x0802c250
 80204a4:	0802bbec 	.word	0x0802bbec

080204a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b086      	sub	sp, #24
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	60f8      	str	r0, [r7, #12]
 80204b0:	607b      	str	r3, [r7, #4]
 80204b2:	460b      	mov	r3, r1
 80204b4:	817b      	strh	r3, [r7, #10]
 80204b6:	4613      	mov	r3, r2
 80204b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80204ba:	897a      	ldrh	r2, [r7, #10]
 80204bc:	893b      	ldrh	r3, [r7, #8]
 80204be:	4413      	add	r3, r2
 80204c0:	b29b      	uxth	r3, r3
 80204c2:	3314      	adds	r3, #20
 80204c4:	b29b      	uxth	r3, r3
 80204c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80204ca:	4619      	mov	r1, r3
 80204cc:	2022      	movs	r0, #34	@ 0x22
 80204ce:	f7f9 fd6d 	bl	8019fac <pbuf_alloc>
 80204d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80204d4:	697b      	ldr	r3, [r7, #20]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d04d      	beq.n	8020576 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80204da:	897b      	ldrh	r3, [r7, #10]
 80204dc:	3313      	adds	r3, #19
 80204de:	697a      	ldr	r2, [r7, #20]
 80204e0:	8952      	ldrh	r2, [r2, #10]
 80204e2:	4293      	cmp	r3, r2
 80204e4:	db06      	blt.n	80204f4 <tcp_output_alloc_header_common+0x4c>
 80204e6:	4b26      	ldr	r3, [pc, #152]	@ (8020580 <tcp_output_alloc_header_common+0xd8>)
 80204e8:	f240 7223 	movw	r2, #1827	@ 0x723
 80204ec:	4925      	ldr	r1, [pc, #148]	@ (8020584 <tcp_output_alloc_header_common+0xdc>)
 80204ee:	4826      	ldr	r0, [pc, #152]	@ (8020588 <tcp_output_alloc_header_common+0xe0>)
 80204f0:	f004 ffc0 	bl	8025474 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80204f4:	697b      	ldr	r3, [r7, #20]
 80204f6:	685b      	ldr	r3, [r3, #4]
 80204f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80204fa:	8c3b      	ldrh	r3, [r7, #32]
 80204fc:	4618      	mov	r0, r3
 80204fe:	f7f8 fb8f 	bl	8018c20 <lwip_htons>
 8020502:	4603      	mov	r3, r0
 8020504:	461a      	mov	r2, r3
 8020506:	693b      	ldr	r3, [r7, #16]
 8020508:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 802050a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802050c:	4618      	mov	r0, r3
 802050e:	f7f8 fb87 	bl	8018c20 <lwip_htons>
 8020512:	4603      	mov	r3, r0
 8020514:	461a      	mov	r2, r3
 8020516:	693b      	ldr	r3, [r7, #16]
 8020518:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802051a:	693b      	ldr	r3, [r7, #16]
 802051c:	687a      	ldr	r2, [r7, #4]
 802051e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8020520:	68f8      	ldr	r0, [r7, #12]
 8020522:	f7f8 fb92 	bl	8018c4a <lwip_htonl>
 8020526:	4602      	mov	r2, r0
 8020528:	693b      	ldr	r3, [r7, #16]
 802052a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802052c:	897b      	ldrh	r3, [r7, #10]
 802052e:	089b      	lsrs	r3, r3, #2
 8020530:	b29b      	uxth	r3, r3
 8020532:	3305      	adds	r3, #5
 8020534:	b29b      	uxth	r3, r3
 8020536:	031b      	lsls	r3, r3, #12
 8020538:	b29a      	uxth	r2, r3
 802053a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 802053e:	b29b      	uxth	r3, r3
 8020540:	4313      	orrs	r3, r2
 8020542:	b29b      	uxth	r3, r3
 8020544:	4618      	mov	r0, r3
 8020546:	f7f8 fb6b 	bl	8018c20 <lwip_htons>
 802054a:	4603      	mov	r3, r0
 802054c:	461a      	mov	r2, r3
 802054e:	693b      	ldr	r3, [r7, #16]
 8020550:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020552:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020554:	4618      	mov	r0, r3
 8020556:	f7f8 fb63 	bl	8018c20 <lwip_htons>
 802055a:	4603      	mov	r3, r0
 802055c:	461a      	mov	r2, r3
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020562:	693b      	ldr	r3, [r7, #16]
 8020564:	2200      	movs	r2, #0
 8020566:	741a      	strb	r2, [r3, #16]
 8020568:	2200      	movs	r2, #0
 802056a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802056c:	693b      	ldr	r3, [r7, #16]
 802056e:	2200      	movs	r2, #0
 8020570:	749a      	strb	r2, [r3, #18]
 8020572:	2200      	movs	r2, #0
 8020574:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020576:	697b      	ldr	r3, [r7, #20]
}
 8020578:	4618      	mov	r0, r3
 802057a:	3718      	adds	r7, #24
 802057c:	46bd      	mov	sp, r7
 802057e:	bd80      	pop	{r7, pc}
 8020580:	0802bb98 	.word	0x0802bb98
 8020584:	0802c270 	.word	0x0802c270
 8020588:	0802bbec 	.word	0x0802bbec

0802058c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 802058c:	b5b0      	push	{r4, r5, r7, lr}
 802058e:	b08a      	sub	sp, #40	@ 0x28
 8020590:	af04      	add	r7, sp, #16
 8020592:	60f8      	str	r0, [r7, #12]
 8020594:	607b      	str	r3, [r7, #4]
 8020596:	460b      	mov	r3, r1
 8020598:	817b      	strh	r3, [r7, #10]
 802059a:	4613      	mov	r3, r2
 802059c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d106      	bne.n	80205b2 <tcp_output_alloc_header+0x26>
 80205a4:	4b15      	ldr	r3, [pc, #84]	@ (80205fc <tcp_output_alloc_header+0x70>)
 80205a6:	f240 7242 	movw	r2, #1858	@ 0x742
 80205aa:	4915      	ldr	r1, [pc, #84]	@ (8020600 <tcp_output_alloc_header+0x74>)
 80205ac:	4815      	ldr	r0, [pc, #84]	@ (8020604 <tcp_output_alloc_header+0x78>)
 80205ae:	f004 ff61 	bl	8025474 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	8adb      	ldrh	r3, [r3, #22]
 80205ba:	68fa      	ldr	r2, [r7, #12]
 80205bc:	8b12      	ldrh	r2, [r2, #24]
 80205be:	68f9      	ldr	r1, [r7, #12]
 80205c0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80205c2:	893d      	ldrh	r5, [r7, #8]
 80205c4:	897c      	ldrh	r4, [r7, #10]
 80205c6:	9103      	str	r1, [sp, #12]
 80205c8:	2110      	movs	r1, #16
 80205ca:	9102      	str	r1, [sp, #8]
 80205cc:	9201      	str	r2, [sp, #4]
 80205ce:	9300      	str	r3, [sp, #0]
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	462a      	mov	r2, r5
 80205d4:	4621      	mov	r1, r4
 80205d6:	f7ff ff67 	bl	80204a8 <tcp_output_alloc_header_common>
 80205da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80205dc:	697b      	ldr	r3, [r7, #20]
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d006      	beq.n	80205f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80205e6:	68fa      	ldr	r2, [r7, #12]
 80205e8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80205ea:	441a      	add	r2, r3
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80205f0:	697b      	ldr	r3, [r7, #20]
}
 80205f2:	4618      	mov	r0, r3
 80205f4:	3718      	adds	r7, #24
 80205f6:	46bd      	mov	sp, r7
 80205f8:	bdb0      	pop	{r4, r5, r7, pc}
 80205fa:	bf00      	nop
 80205fc:	0802bb98 	.word	0x0802bb98
 8020600:	0802c2a0 	.word	0x0802c2a0
 8020604:	0802bbec 	.word	0x0802bbec

08020608 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	b088      	sub	sp, #32
 802060c:	af00      	add	r7, sp, #0
 802060e:	60f8      	str	r0, [r7, #12]
 8020610:	60b9      	str	r1, [r7, #8]
 8020612:	4611      	mov	r1, r2
 8020614:	461a      	mov	r2, r3
 8020616:	460b      	mov	r3, r1
 8020618:	71fb      	strb	r3, [r7, #7]
 802061a:	4613      	mov	r3, r2
 802061c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802061e:	2300      	movs	r3, #0
 8020620:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020622:	68bb      	ldr	r3, [r7, #8]
 8020624:	2b00      	cmp	r3, #0
 8020626:	d106      	bne.n	8020636 <tcp_output_fill_options+0x2e>
 8020628:	4b12      	ldr	r3, [pc, #72]	@ (8020674 <tcp_output_fill_options+0x6c>)
 802062a:	f240 7256 	movw	r2, #1878	@ 0x756
 802062e:	4912      	ldr	r1, [pc, #72]	@ (8020678 <tcp_output_fill_options+0x70>)
 8020630:	4812      	ldr	r0, [pc, #72]	@ (802067c <tcp_output_fill_options+0x74>)
 8020632:	f004 ff1f 	bl	8025474 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020636:	68bb      	ldr	r3, [r7, #8]
 8020638:	685b      	ldr	r3, [r3, #4]
 802063a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802063c:	69bb      	ldr	r3, [r7, #24]
 802063e:	3314      	adds	r3, #20
 8020640:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020642:	8bfb      	ldrh	r3, [r7, #30]
 8020644:	009b      	lsls	r3, r3, #2
 8020646:	461a      	mov	r2, r3
 8020648:	79fb      	ldrb	r3, [r7, #7]
 802064a:	009b      	lsls	r3, r3, #2
 802064c:	f003 0304 	and.w	r3, r3, #4
 8020650:	4413      	add	r3, r2
 8020652:	3314      	adds	r3, #20
 8020654:	69ba      	ldr	r2, [r7, #24]
 8020656:	4413      	add	r3, r2
 8020658:	697a      	ldr	r2, [r7, #20]
 802065a:	429a      	cmp	r2, r3
 802065c:	d006      	beq.n	802066c <tcp_output_fill_options+0x64>
 802065e:	4b05      	ldr	r3, [pc, #20]	@ (8020674 <tcp_output_fill_options+0x6c>)
 8020660:	f240 7275 	movw	r2, #1909	@ 0x775
 8020664:	4906      	ldr	r1, [pc, #24]	@ (8020680 <tcp_output_fill_options+0x78>)
 8020666:	4805      	ldr	r0, [pc, #20]	@ (802067c <tcp_output_fill_options+0x74>)
 8020668:	f004 ff04 	bl	8025474 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 802066c:	bf00      	nop
 802066e:	3720      	adds	r7, #32
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}
 8020674:	0802bb98 	.word	0x0802bb98
 8020678:	0802c2c8 	.word	0x0802c2c8
 802067c:	0802bbec 	.word	0x0802bbec
 8020680:	0802c1c0 	.word	0x0802c1c0

08020684 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020684:	b580      	push	{r7, lr}
 8020686:	b08a      	sub	sp, #40	@ 0x28
 8020688:	af04      	add	r7, sp, #16
 802068a:	60f8      	str	r0, [r7, #12]
 802068c:	60b9      	str	r1, [r7, #8]
 802068e:	607a      	str	r2, [r7, #4]
 8020690:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020692:	68bb      	ldr	r3, [r7, #8]
 8020694:	2b00      	cmp	r3, #0
 8020696:	d106      	bne.n	80206a6 <tcp_output_control_segment+0x22>
 8020698:	4b1c      	ldr	r3, [pc, #112]	@ (802070c <tcp_output_control_segment+0x88>)
 802069a:	f240 7287 	movw	r2, #1927	@ 0x787
 802069e:	491c      	ldr	r1, [pc, #112]	@ (8020710 <tcp_output_control_segment+0x8c>)
 80206a0:	481c      	ldr	r0, [pc, #112]	@ (8020714 <tcp_output_control_segment+0x90>)
 80206a2:	f004 fee7 	bl	8025474 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80206a6:	683a      	ldr	r2, [r7, #0]
 80206a8:	6879      	ldr	r1, [r7, #4]
 80206aa:	68f8      	ldr	r0, [r7, #12]
 80206ac:	f7fe faea 	bl	801ec84 <tcp_route>
 80206b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d102      	bne.n	80206be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80206b8:	23fc      	movs	r3, #252	@ 0xfc
 80206ba:	75fb      	strb	r3, [r7, #23]
 80206bc:	e01c      	b.n	80206f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80206be:	68fb      	ldr	r3, [r7, #12]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	d006      	beq.n	80206d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	7adb      	ldrb	r3, [r3, #11]
 80206c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	7a9b      	ldrb	r3, [r3, #10]
 80206ce:	757b      	strb	r3, [r7, #21]
 80206d0:	e003      	b.n	80206da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80206d2:	23ff      	movs	r3, #255	@ 0xff
 80206d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80206d6:	2300      	movs	r3, #0
 80206d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80206da:	7dba      	ldrb	r2, [r7, #22]
 80206dc:	693b      	ldr	r3, [r7, #16]
 80206de:	9302      	str	r3, [sp, #8]
 80206e0:	2306      	movs	r3, #6
 80206e2:	9301      	str	r3, [sp, #4]
 80206e4:	7d7b      	ldrb	r3, [r7, #21]
 80206e6:	9300      	str	r3, [sp, #0]
 80206e8:	4613      	mov	r3, r2
 80206ea:	683a      	ldr	r2, [r7, #0]
 80206ec:	6879      	ldr	r1, [r7, #4]
 80206ee:	68b8      	ldr	r0, [r7, #8]
 80206f0:	f002 faf6 	bl	8022ce0 <ip4_output_if>
 80206f4:	4603      	mov	r3, r0
 80206f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80206f8:	68b8      	ldr	r0, [r7, #8]
 80206fa:	f7f9 ff6d 	bl	801a5d8 <pbuf_free>
  return err;
 80206fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020702:	4618      	mov	r0, r3
 8020704:	3718      	adds	r7, #24
 8020706:	46bd      	mov	sp, r7
 8020708:	bd80      	pop	{r7, pc}
 802070a:	bf00      	nop
 802070c:	0802bb98 	.word	0x0802bb98
 8020710:	0802c2f0 	.word	0x0802c2f0
 8020714:	0802bbec 	.word	0x0802bbec

08020718 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8020718:	b590      	push	{r4, r7, lr}
 802071a:	b08b      	sub	sp, #44	@ 0x2c
 802071c:	af04      	add	r7, sp, #16
 802071e:	60f8      	str	r0, [r7, #12]
 8020720:	60b9      	str	r1, [r7, #8]
 8020722:	607a      	str	r2, [r7, #4]
 8020724:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8020726:	683b      	ldr	r3, [r7, #0]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d106      	bne.n	802073a <tcp_rst+0x22>
 802072c:	4b1f      	ldr	r3, [pc, #124]	@ (80207ac <tcp_rst+0x94>)
 802072e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8020732:	491f      	ldr	r1, [pc, #124]	@ (80207b0 <tcp_rst+0x98>)
 8020734:	481f      	ldr	r0, [pc, #124]	@ (80207b4 <tcp_rst+0x9c>)
 8020736:	f004 fe9d 	bl	8025474 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802073c:	2b00      	cmp	r3, #0
 802073e:	d106      	bne.n	802074e <tcp_rst+0x36>
 8020740:	4b1a      	ldr	r3, [pc, #104]	@ (80207ac <tcp_rst+0x94>)
 8020742:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8020746:	491c      	ldr	r1, [pc, #112]	@ (80207b8 <tcp_rst+0xa0>)
 8020748:	481a      	ldr	r0, [pc, #104]	@ (80207b4 <tcp_rst+0x9c>)
 802074a:	f004 fe93 	bl	8025474 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802074e:	2300      	movs	r3, #0
 8020750:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020752:	f246 0308 	movw	r3, #24584	@ 0x6008
 8020756:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8020758:	7dfb      	ldrb	r3, [r7, #23]
 802075a:	b29c      	uxth	r4, r3
 802075c:	68b8      	ldr	r0, [r7, #8]
 802075e:	f7f8 fa74 	bl	8018c4a <lwip_htonl>
 8020762:	4602      	mov	r2, r0
 8020764:	8abb      	ldrh	r3, [r7, #20]
 8020766:	9303      	str	r3, [sp, #12]
 8020768:	2314      	movs	r3, #20
 802076a:	9302      	str	r3, [sp, #8]
 802076c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 802076e:	9301      	str	r3, [sp, #4]
 8020770:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8020772:	9300      	str	r3, [sp, #0]
 8020774:	4613      	mov	r3, r2
 8020776:	2200      	movs	r2, #0
 8020778:	4621      	mov	r1, r4
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	f7ff fe94 	bl	80204a8 <tcp_output_alloc_header_common>
 8020780:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020782:	693b      	ldr	r3, [r7, #16]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d00c      	beq.n	80207a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020788:	7dfb      	ldrb	r3, [r7, #23]
 802078a:	2200      	movs	r2, #0
 802078c:	6939      	ldr	r1, [r7, #16]
 802078e:	68f8      	ldr	r0, [r7, #12]
 8020790:	f7ff ff3a 	bl	8020608 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020796:	683a      	ldr	r2, [r7, #0]
 8020798:	6939      	ldr	r1, [r7, #16]
 802079a:	68f8      	ldr	r0, [r7, #12]
 802079c:	f7ff ff72 	bl	8020684 <tcp_output_control_segment>
 80207a0:	e000      	b.n	80207a4 <tcp_rst+0x8c>
    return;
 80207a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80207a4:	371c      	adds	r7, #28
 80207a6:	46bd      	mov	sp, r7
 80207a8:	bd90      	pop	{r4, r7, pc}
 80207aa:	bf00      	nop
 80207ac:	0802bb98 	.word	0x0802bb98
 80207b0:	0802c31c 	.word	0x0802c31c
 80207b4:	0802bbec 	.word	0x0802bbec
 80207b8:	0802c338 	.word	0x0802c338

080207bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80207bc:	b590      	push	{r4, r7, lr}
 80207be:	b087      	sub	sp, #28
 80207c0:	af00      	add	r7, sp, #0
 80207c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80207c4:	2300      	movs	r3, #0
 80207c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80207c8:	2300      	movs	r3, #0
 80207ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d106      	bne.n	80207e0 <tcp_send_empty_ack+0x24>
 80207d2:	4b28      	ldr	r3, [pc, #160]	@ (8020874 <tcp_send_empty_ack+0xb8>)
 80207d4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80207d8:	4927      	ldr	r1, [pc, #156]	@ (8020878 <tcp_send_empty_ack+0xbc>)
 80207da:	4828      	ldr	r0, [pc, #160]	@ (802087c <tcp_send_empty_ack+0xc0>)
 80207dc:	f004 fe4a 	bl	8025474 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80207e0:	7dfb      	ldrb	r3, [r7, #23]
 80207e2:	009b      	lsls	r3, r3, #2
 80207e4:	b2db      	uxtb	r3, r3
 80207e6:	f003 0304 	and.w	r3, r3, #4
 80207ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80207ec:	7d7b      	ldrb	r3, [r7, #21]
 80207ee:	b29c      	uxth	r4, r3
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80207f4:	4618      	mov	r0, r3
 80207f6:	f7f8 fa28 	bl	8018c4a <lwip_htonl>
 80207fa:	4603      	mov	r3, r0
 80207fc:	2200      	movs	r2, #0
 80207fe:	4621      	mov	r1, r4
 8020800:	6878      	ldr	r0, [r7, #4]
 8020802:	f7ff fec3 	bl	802058c <tcp_output_alloc_header>
 8020806:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020808:	693b      	ldr	r3, [r7, #16]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d109      	bne.n	8020822 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	8b5b      	ldrh	r3, [r3, #26]
 8020812:	f043 0303 	orr.w	r3, r3, #3
 8020816:	b29a      	uxth	r2, r3
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802081c:	f06f 0301 	mvn.w	r3, #1
 8020820:	e023      	b.n	802086a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8020822:	7dbb      	ldrb	r3, [r7, #22]
 8020824:	7dfa      	ldrb	r2, [r7, #23]
 8020826:	6939      	ldr	r1, [r7, #16]
 8020828:	6878      	ldr	r0, [r7, #4]
 802082a:	f7ff feed 	bl	8020608 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802082e:	687a      	ldr	r2, [r7, #4]
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	3304      	adds	r3, #4
 8020834:	6939      	ldr	r1, [r7, #16]
 8020836:	6878      	ldr	r0, [r7, #4]
 8020838:	f7ff ff24 	bl	8020684 <tcp_output_control_segment>
 802083c:	4603      	mov	r3, r0
 802083e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8020840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d007      	beq.n	8020858 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	8b5b      	ldrh	r3, [r3, #26]
 802084c:	f043 0303 	orr.w	r3, r3, #3
 8020850:	b29a      	uxth	r2, r3
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	835a      	strh	r2, [r3, #26]
 8020856:	e006      	b.n	8020866 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	8b5b      	ldrh	r3, [r3, #26]
 802085c:	f023 0303 	bic.w	r3, r3, #3
 8020860:	b29a      	uxth	r2, r3
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8020866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802086a:	4618      	mov	r0, r3
 802086c:	371c      	adds	r7, #28
 802086e:	46bd      	mov	sp, r7
 8020870:	bd90      	pop	{r4, r7, pc}
 8020872:	bf00      	nop
 8020874:	0802bb98 	.word	0x0802bb98
 8020878:	0802c354 	.word	0x0802c354
 802087c:	0802bbec 	.word	0x0802bbec

08020880 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020880:	b590      	push	{r4, r7, lr}
 8020882:	b087      	sub	sp, #28
 8020884:	af00      	add	r7, sp, #0
 8020886:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020888:	2300      	movs	r3, #0
 802088a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	2b00      	cmp	r3, #0
 8020890:	d106      	bne.n	80208a0 <tcp_keepalive+0x20>
 8020892:	4b18      	ldr	r3, [pc, #96]	@ (80208f4 <tcp_keepalive+0x74>)
 8020894:	f640 0224 	movw	r2, #2084	@ 0x824
 8020898:	4917      	ldr	r1, [pc, #92]	@ (80208f8 <tcp_keepalive+0x78>)
 802089a:	4818      	ldr	r0, [pc, #96]	@ (80208fc <tcp_keepalive+0x7c>)
 802089c:	f004 fdea 	bl	8025474 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80208a0:	7dfb      	ldrb	r3, [r7, #23]
 80208a2:	b29c      	uxth	r4, r3
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80208a8:	3b01      	subs	r3, #1
 80208aa:	4618      	mov	r0, r3
 80208ac:	f7f8 f9cd 	bl	8018c4a <lwip_htonl>
 80208b0:	4603      	mov	r3, r0
 80208b2:	2200      	movs	r2, #0
 80208b4:	4621      	mov	r1, r4
 80208b6:	6878      	ldr	r0, [r7, #4]
 80208b8:	f7ff fe68 	bl	802058c <tcp_output_alloc_header>
 80208bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80208be:	693b      	ldr	r3, [r7, #16]
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	d102      	bne.n	80208ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80208c4:	f04f 33ff 	mov.w	r3, #4294967295
 80208c8:	e010      	b.n	80208ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80208ca:	7dfb      	ldrb	r3, [r7, #23]
 80208cc:	2200      	movs	r2, #0
 80208ce:	6939      	ldr	r1, [r7, #16]
 80208d0:	6878      	ldr	r0, [r7, #4]
 80208d2:	f7ff fe99 	bl	8020608 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80208d6:	687a      	ldr	r2, [r7, #4]
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	3304      	adds	r3, #4
 80208dc:	6939      	ldr	r1, [r7, #16]
 80208de:	6878      	ldr	r0, [r7, #4]
 80208e0:	f7ff fed0 	bl	8020684 <tcp_output_control_segment>
 80208e4:	4603      	mov	r3, r0
 80208e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80208e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80208ec:	4618      	mov	r0, r3
 80208ee:	371c      	adds	r7, #28
 80208f0:	46bd      	mov	sp, r7
 80208f2:	bd90      	pop	{r4, r7, pc}
 80208f4:	0802bb98 	.word	0x0802bb98
 80208f8:	0802c374 	.word	0x0802c374
 80208fc:	0802bbec 	.word	0x0802bbec

08020900 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020900:	b590      	push	{r4, r7, lr}
 8020902:	b08b      	sub	sp, #44	@ 0x2c
 8020904:	af00      	add	r7, sp, #0
 8020906:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020908:	2300      	movs	r3, #0
 802090a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	2b00      	cmp	r3, #0
 8020912:	d106      	bne.n	8020922 <tcp_zero_window_probe+0x22>
 8020914:	4b4c      	ldr	r3, [pc, #304]	@ (8020a48 <tcp_zero_window_probe+0x148>)
 8020916:	f640 024f 	movw	r2, #2127	@ 0x84f
 802091a:	494c      	ldr	r1, [pc, #304]	@ (8020a4c <tcp_zero_window_probe+0x14c>)
 802091c:	484c      	ldr	r0, [pc, #304]	@ (8020a50 <tcp_zero_window_probe+0x150>)
 802091e:	f004 fda9 	bl	8025474 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020922:	687b      	ldr	r3, [r7, #4]
 8020924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020926:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8020928:	6a3b      	ldr	r3, [r7, #32]
 802092a:	2b00      	cmp	r3, #0
 802092c:	d101      	bne.n	8020932 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802092e:	2300      	movs	r3, #0
 8020930:	e086      	b.n	8020a40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8020938:	2bff      	cmp	r3, #255	@ 0xff
 802093a:	d007      	beq.n	802094c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8020942:	3301      	adds	r3, #1
 8020944:	b2da      	uxtb	r2, r3
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 802094c:	6a3b      	ldr	r3, [r7, #32]
 802094e:	68db      	ldr	r3, [r3, #12]
 8020950:	899b      	ldrh	r3, [r3, #12]
 8020952:	b29b      	uxth	r3, r3
 8020954:	4618      	mov	r0, r3
 8020956:	f7f8 f963 	bl	8018c20 <lwip_htons>
 802095a:	4603      	mov	r3, r0
 802095c:	b2db      	uxtb	r3, r3
 802095e:	f003 0301 	and.w	r3, r3, #1
 8020962:	2b00      	cmp	r3, #0
 8020964:	d005      	beq.n	8020972 <tcp_zero_window_probe+0x72>
 8020966:	6a3b      	ldr	r3, [r7, #32]
 8020968:	891b      	ldrh	r3, [r3, #8]
 802096a:	2b00      	cmp	r3, #0
 802096c:	d101      	bne.n	8020972 <tcp_zero_window_probe+0x72>
 802096e:	2301      	movs	r3, #1
 8020970:	e000      	b.n	8020974 <tcp_zero_window_probe+0x74>
 8020972:	2300      	movs	r3, #0
 8020974:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8020976:	7ffb      	ldrb	r3, [r7, #31]
 8020978:	2b00      	cmp	r3, #0
 802097a:	bf0c      	ite	eq
 802097c:	2301      	moveq	r3, #1
 802097e:	2300      	movne	r3, #0
 8020980:	b2db      	uxtb	r3, r3
 8020982:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020988:	b299      	uxth	r1, r3
 802098a:	6a3b      	ldr	r3, [r7, #32]
 802098c:	68db      	ldr	r3, [r3, #12]
 802098e:	685b      	ldr	r3, [r3, #4]
 8020990:	8bba      	ldrh	r2, [r7, #28]
 8020992:	6878      	ldr	r0, [r7, #4]
 8020994:	f7ff fdfa 	bl	802058c <tcp_output_alloc_header>
 8020998:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802099a:	69bb      	ldr	r3, [r7, #24]
 802099c:	2b00      	cmp	r3, #0
 802099e:	d102      	bne.n	80209a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80209a0:	f04f 33ff 	mov.w	r3, #4294967295
 80209a4:	e04c      	b.n	8020a40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80209a6:	69bb      	ldr	r3, [r7, #24]
 80209a8:	685b      	ldr	r3, [r3, #4]
 80209aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80209ac:	7ffb      	ldrb	r3, [r7, #31]
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d011      	beq.n	80209d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80209b2:	697b      	ldr	r3, [r7, #20]
 80209b4:	899b      	ldrh	r3, [r3, #12]
 80209b6:	b29b      	uxth	r3, r3
 80209b8:	b21b      	sxth	r3, r3
 80209ba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80209be:	b21c      	sxth	r4, r3
 80209c0:	2011      	movs	r0, #17
 80209c2:	f7f8 f92d 	bl	8018c20 <lwip_htons>
 80209c6:	4603      	mov	r3, r0
 80209c8:	b21b      	sxth	r3, r3
 80209ca:	4323      	orrs	r3, r4
 80209cc:	b21b      	sxth	r3, r3
 80209ce:	b29a      	uxth	r2, r3
 80209d0:	697b      	ldr	r3, [r7, #20]
 80209d2:	819a      	strh	r2, [r3, #12]
 80209d4:	e010      	b.n	80209f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80209d6:	69bb      	ldr	r3, [r7, #24]
 80209d8:	685b      	ldr	r3, [r3, #4]
 80209da:	3314      	adds	r3, #20
 80209dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80209de:	6a3b      	ldr	r3, [r7, #32]
 80209e0:	6858      	ldr	r0, [r3, #4]
 80209e2:	6a3b      	ldr	r3, [r7, #32]
 80209e4:	685b      	ldr	r3, [r3, #4]
 80209e6:	891a      	ldrh	r2, [r3, #8]
 80209e8:	6a3b      	ldr	r3, [r7, #32]
 80209ea:	891b      	ldrh	r3, [r3, #8]
 80209ec:	1ad3      	subs	r3, r2, r3
 80209ee:	b29b      	uxth	r3, r3
 80209f0:	2201      	movs	r2, #1
 80209f2:	6939      	ldr	r1, [r7, #16]
 80209f4:	f7f9 fff6 	bl	801a9e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80209f8:	6a3b      	ldr	r3, [r7, #32]
 80209fa:	68db      	ldr	r3, [r3, #12]
 80209fc:	685b      	ldr	r3, [r3, #4]
 80209fe:	4618      	mov	r0, r3
 8020a00:	f7f8 f923 	bl	8018c4a <lwip_htonl>
 8020a04:	4603      	mov	r3, r0
 8020a06:	3301      	adds	r3, #1
 8020a08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	1ad3      	subs	r3, r2, r3
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	da02      	bge.n	8020a1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	68fa      	ldr	r2, [r7, #12]
 8020a1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020a20:	2200      	movs	r2, #0
 8020a22:	69b9      	ldr	r1, [r7, #24]
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	f7ff fdef 	bl	8020608 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a2a:	687a      	ldr	r2, [r7, #4]
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	3304      	adds	r3, #4
 8020a30:	69b9      	ldr	r1, [r7, #24]
 8020a32:	6878      	ldr	r0, [r7, #4]
 8020a34:	f7ff fe26 	bl	8020684 <tcp_output_control_segment>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020a3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020a40:	4618      	mov	r0, r3
 8020a42:	372c      	adds	r7, #44	@ 0x2c
 8020a44:	46bd      	mov	sp, r7
 8020a46:	bd90      	pop	{r4, r7, pc}
 8020a48:	0802bb98 	.word	0x0802bb98
 8020a4c:	0802c390 	.word	0x0802c390
 8020a50:	0802bbec 	.word	0x0802bbec

08020a54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020a54:	b580      	push	{r7, lr}
 8020a56:	b082      	sub	sp, #8
 8020a58:	af00      	add	r7, sp, #0
 8020a5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8020a5c:	f7fa f8b0 	bl	801abc0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020a60:	4b0a      	ldr	r3, [pc, #40]	@ (8020a8c <tcpip_tcp_timer+0x38>)
 8020a62:	681b      	ldr	r3, [r3, #0]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d103      	bne.n	8020a70 <tcpip_tcp_timer+0x1c>
 8020a68:	4b09      	ldr	r3, [pc, #36]	@ (8020a90 <tcpip_tcp_timer+0x3c>)
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d005      	beq.n	8020a7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020a70:	2200      	movs	r2, #0
 8020a72:	4908      	ldr	r1, [pc, #32]	@ (8020a94 <tcpip_tcp_timer+0x40>)
 8020a74:	20fa      	movs	r0, #250	@ 0xfa
 8020a76:	f000 f8f3 	bl	8020c60 <sys_timeout>
 8020a7a:	e003      	b.n	8020a84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8020a7c:	4b06      	ldr	r3, [pc, #24]	@ (8020a98 <tcpip_tcp_timer+0x44>)
 8020a7e:	2200      	movs	r2, #0
 8020a80:	601a      	str	r2, [r3, #0]
  }
}
 8020a82:	bf00      	nop
 8020a84:	bf00      	nop
 8020a86:	3708      	adds	r7, #8
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	bd80      	pop	{r7, pc}
 8020a8c:	2400be70 	.word	0x2400be70
 8020a90:	2400be74 	.word	0x2400be74
 8020a94:	08020a55 	.word	0x08020a55
 8020a98:	2400bebc 	.word	0x2400bebc

08020a9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8020acc <tcp_timer_needed+0x30>)
 8020aa2:	681b      	ldr	r3, [r3, #0]
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d10f      	bne.n	8020ac8 <tcp_timer_needed+0x2c>
 8020aa8:	4b09      	ldr	r3, [pc, #36]	@ (8020ad0 <tcp_timer_needed+0x34>)
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d103      	bne.n	8020ab8 <tcp_timer_needed+0x1c>
 8020ab0:	4b08      	ldr	r3, [pc, #32]	@ (8020ad4 <tcp_timer_needed+0x38>)
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d007      	beq.n	8020ac8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8020ab8:	4b04      	ldr	r3, [pc, #16]	@ (8020acc <tcp_timer_needed+0x30>)
 8020aba:	2201      	movs	r2, #1
 8020abc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020abe:	2200      	movs	r2, #0
 8020ac0:	4905      	ldr	r1, [pc, #20]	@ (8020ad8 <tcp_timer_needed+0x3c>)
 8020ac2:	20fa      	movs	r0, #250	@ 0xfa
 8020ac4:	f000 f8cc 	bl	8020c60 <sys_timeout>
  }
}
 8020ac8:	bf00      	nop
 8020aca:	bd80      	pop	{r7, pc}
 8020acc:	2400bebc 	.word	0x2400bebc
 8020ad0:	2400be70 	.word	0x2400be70
 8020ad4:	2400be74 	.word	0x2400be74
 8020ad8:	08020a55 	.word	0x08020a55

08020adc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b086      	sub	sp, #24
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	60f8      	str	r0, [r7, #12]
 8020ae4:	60b9      	str	r1, [r7, #8]
 8020ae6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020ae8:	200a      	movs	r0, #10
 8020aea:	f7f8 fe29 	bl	8019740 <memp_malloc>
 8020aee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8020af0:	693b      	ldr	r3, [r7, #16]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d109      	bne.n	8020b0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020af6:	693b      	ldr	r3, [r7, #16]
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	d151      	bne.n	8020ba0 <sys_timeout_abs+0xc4>
 8020afc:	4b2a      	ldr	r3, [pc, #168]	@ (8020ba8 <sys_timeout_abs+0xcc>)
 8020afe:	22be      	movs	r2, #190	@ 0xbe
 8020b00:	492a      	ldr	r1, [pc, #168]	@ (8020bac <sys_timeout_abs+0xd0>)
 8020b02:	482b      	ldr	r0, [pc, #172]	@ (8020bb0 <sys_timeout_abs+0xd4>)
 8020b04:	f004 fcb6 	bl	8025474 <iprintf>
    return;
 8020b08:	e04a      	b.n	8020ba0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8020b0a:	693b      	ldr	r3, [r7, #16]
 8020b0c:	2200      	movs	r2, #0
 8020b0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8020b10:	693b      	ldr	r3, [r7, #16]
 8020b12:	68ba      	ldr	r2, [r7, #8]
 8020b14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8020b16:	693b      	ldr	r3, [r7, #16]
 8020b18:	687a      	ldr	r2, [r7, #4]
 8020b1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8020b1c:	693b      	ldr	r3, [r7, #16]
 8020b1e:	68fa      	ldr	r2, [r7, #12]
 8020b20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020b22:	4b24      	ldr	r3, [pc, #144]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d103      	bne.n	8020b32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8020b2a:	4a22      	ldr	r2, [pc, #136]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b2c:	693b      	ldr	r3, [r7, #16]
 8020b2e:	6013      	str	r3, [r2, #0]
    return;
 8020b30:	e037      	b.n	8020ba2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8020b32:	693b      	ldr	r3, [r7, #16]
 8020b34:	685a      	ldr	r2, [r3, #4]
 8020b36:	4b1f      	ldr	r3, [pc, #124]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b38:	681b      	ldr	r3, [r3, #0]
 8020b3a:	685b      	ldr	r3, [r3, #4]
 8020b3c:	1ad3      	subs	r3, r2, r3
 8020b3e:	0fdb      	lsrs	r3, r3, #31
 8020b40:	f003 0301 	and.w	r3, r3, #1
 8020b44:	b2db      	uxtb	r3, r3
 8020b46:	2b00      	cmp	r3, #0
 8020b48:	d007      	beq.n	8020b5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8020b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b4c:	681a      	ldr	r2, [r3, #0]
 8020b4e:	693b      	ldr	r3, [r7, #16]
 8020b50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8020b52:	4a18      	ldr	r2, [pc, #96]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b54:	693b      	ldr	r3, [r7, #16]
 8020b56:	6013      	str	r3, [r2, #0]
 8020b58:	e023      	b.n	8020ba2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8020b5a:	4b16      	ldr	r3, [pc, #88]	@ (8020bb4 <sys_timeout_abs+0xd8>)
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	617b      	str	r3, [r7, #20]
 8020b60:	e01a      	b.n	8020b98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020b62:	697b      	ldr	r3, [r7, #20]
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d00b      	beq.n	8020b82 <sys_timeout_abs+0xa6>
 8020b6a:	693b      	ldr	r3, [r7, #16]
 8020b6c:	685a      	ldr	r2, [r3, #4]
 8020b6e:	697b      	ldr	r3, [r7, #20]
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	685b      	ldr	r3, [r3, #4]
 8020b74:	1ad3      	subs	r3, r2, r3
 8020b76:	0fdb      	lsrs	r3, r3, #31
 8020b78:	f003 0301 	and.w	r3, r3, #1
 8020b7c:	b2db      	uxtb	r3, r3
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d007      	beq.n	8020b92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	681a      	ldr	r2, [r3, #0]
 8020b86:	693b      	ldr	r3, [r7, #16]
 8020b88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8020b8a:	697b      	ldr	r3, [r7, #20]
 8020b8c:	693a      	ldr	r2, [r7, #16]
 8020b8e:	601a      	str	r2, [r3, #0]
        break;
 8020b90:	e007      	b.n	8020ba2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	617b      	str	r3, [r7, #20]
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	d1e1      	bne.n	8020b62 <sys_timeout_abs+0x86>
 8020b9e:	e000      	b.n	8020ba2 <sys_timeout_abs+0xc6>
    return;
 8020ba0:	bf00      	nop
      }
    }
  }
}
 8020ba2:	3718      	adds	r7, #24
 8020ba4:	46bd      	mov	sp, r7
 8020ba6:	bd80      	pop	{r7, pc}
 8020ba8:	0802c3b4 	.word	0x0802c3b4
 8020bac:	0802c3e8 	.word	0x0802c3e8
 8020bb0:	0802c428 	.word	0x0802c428
 8020bb4:	2400beb4 	.word	0x2400beb4

08020bb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020bb8:	b580      	push	{r7, lr}
 8020bba:	b086      	sub	sp, #24
 8020bbc:	af00      	add	r7, sp, #0
 8020bbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	685b      	ldr	r3, [r3, #4]
 8020bc8:	4798      	blx	r3

  now = sys_now();
 8020bca:	f7f1 fac9 	bl	8012160 <sys_now>
 8020bce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	681a      	ldr	r2, [r3, #0]
 8020bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8020c14 <lwip_cyclic_timer+0x5c>)
 8020bd6:	681b      	ldr	r3, [r3, #0]
 8020bd8:	4413      	add	r3, r2
 8020bda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020bdc:	68fa      	ldr	r2, [r7, #12]
 8020bde:	693b      	ldr	r3, [r7, #16]
 8020be0:	1ad3      	subs	r3, r2, r3
 8020be2:	0fdb      	lsrs	r3, r3, #31
 8020be4:	f003 0301 	and.w	r3, r3, #1
 8020be8:	b2db      	uxtb	r3, r3
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d009      	beq.n	8020c02 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020bee:	697b      	ldr	r3, [r7, #20]
 8020bf0:	681a      	ldr	r2, [r3, #0]
 8020bf2:	693b      	ldr	r3, [r7, #16]
 8020bf4:	4413      	add	r3, r2
 8020bf6:	687a      	ldr	r2, [r7, #4]
 8020bf8:	4907      	ldr	r1, [pc, #28]	@ (8020c18 <lwip_cyclic_timer+0x60>)
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	f7ff ff6e 	bl	8020adc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020c00:	e004      	b.n	8020c0c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020c02:	687a      	ldr	r2, [r7, #4]
 8020c04:	4904      	ldr	r1, [pc, #16]	@ (8020c18 <lwip_cyclic_timer+0x60>)
 8020c06:	68f8      	ldr	r0, [r7, #12]
 8020c08:	f7ff ff68 	bl	8020adc <sys_timeout_abs>
}
 8020c0c:	bf00      	nop
 8020c0e:	3718      	adds	r7, #24
 8020c10:	46bd      	mov	sp, r7
 8020c12:	bd80      	pop	{r7, pc}
 8020c14:	2400beb8 	.word	0x2400beb8
 8020c18:	08020bb9 	.word	0x08020bb9

08020c1c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020c1c:	b580      	push	{r7, lr}
 8020c1e:	b082      	sub	sp, #8
 8020c20:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020c22:	2301      	movs	r3, #1
 8020c24:	607b      	str	r3, [r7, #4]
 8020c26:	e00e      	b.n	8020c46 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020c28:	4a0b      	ldr	r2, [pc, #44]	@ (8020c58 <sys_timeouts_init+0x3c>)
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	00db      	lsls	r3, r3, #3
 8020c34:	4a08      	ldr	r2, [pc, #32]	@ (8020c58 <sys_timeouts_init+0x3c>)
 8020c36:	4413      	add	r3, r2
 8020c38:	461a      	mov	r2, r3
 8020c3a:	4908      	ldr	r1, [pc, #32]	@ (8020c5c <sys_timeouts_init+0x40>)
 8020c3c:	f000 f810 	bl	8020c60 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	3301      	adds	r3, #1
 8020c44:	607b      	str	r3, [r7, #4]
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	2b02      	cmp	r3, #2
 8020c4a:	d9ed      	bls.n	8020c28 <sys_timeouts_init+0xc>
  }
}
 8020c4c:	bf00      	nop
 8020c4e:	bf00      	nop
 8020c50:	3708      	adds	r7, #8
 8020c52:	46bd      	mov	sp, r7
 8020c54:	bd80      	pop	{r7, pc}
 8020c56:	bf00      	nop
 8020c58:	0802d0cc 	.word	0x0802d0cc
 8020c5c:	08020bb9 	.word	0x08020bb9

08020c60 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b086      	sub	sp, #24
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	60f8      	str	r0, [r7, #12]
 8020c68:	60b9      	str	r1, [r7, #8]
 8020c6a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020c72:	d306      	bcc.n	8020c82 <sys_timeout+0x22>
 8020c74:	4b0a      	ldr	r3, [pc, #40]	@ (8020ca0 <sys_timeout+0x40>)
 8020c76:	f240 1229 	movw	r2, #297	@ 0x129
 8020c7a:	490a      	ldr	r1, [pc, #40]	@ (8020ca4 <sys_timeout+0x44>)
 8020c7c:	480a      	ldr	r0, [pc, #40]	@ (8020ca8 <sys_timeout+0x48>)
 8020c7e:	f004 fbf9 	bl	8025474 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020c82:	f7f1 fa6d 	bl	8012160 <sys_now>
 8020c86:	4602      	mov	r2, r0
 8020c88:	68fb      	ldr	r3, [r7, #12]
 8020c8a:	4413      	add	r3, r2
 8020c8c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020c8e:	687a      	ldr	r2, [r7, #4]
 8020c90:	68b9      	ldr	r1, [r7, #8]
 8020c92:	6978      	ldr	r0, [r7, #20]
 8020c94:	f7ff ff22 	bl	8020adc <sys_timeout_abs>
#endif
}
 8020c98:	bf00      	nop
 8020c9a:	3718      	adds	r7, #24
 8020c9c:	46bd      	mov	sp, r7
 8020c9e:	bd80      	pop	{r7, pc}
 8020ca0:	0802c3b4 	.word	0x0802c3b4
 8020ca4:	0802c450 	.word	0x0802c450
 8020ca8:	0802c428 	.word	0x0802c428

08020cac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8020cac:	b580      	push	{r7, lr}
 8020cae:	b084      	sub	sp, #16
 8020cb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8020cb2:	f7f1 fa55 	bl	8012160 <sys_now>
 8020cb6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8020cb8:	4b17      	ldr	r3, [pc, #92]	@ (8020d18 <sys_check_timeouts+0x6c>)
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8020cbe:	68bb      	ldr	r3, [r7, #8]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d022      	beq.n	8020d0a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8020cc4:	68bb      	ldr	r3, [r7, #8]
 8020cc6:	685b      	ldr	r3, [r3, #4]
 8020cc8:	68fa      	ldr	r2, [r7, #12]
 8020cca:	1ad3      	subs	r3, r2, r3
 8020ccc:	0fdb      	lsrs	r3, r3, #31
 8020cce:	f003 0301 	and.w	r3, r3, #1
 8020cd2:	b2db      	uxtb	r3, r3
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d11a      	bne.n	8020d0e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8020cd8:	68bb      	ldr	r3, [r7, #8]
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8020d18 <sys_check_timeouts+0x6c>)
 8020cde:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8020ce0:	68bb      	ldr	r3, [r7, #8]
 8020ce2:	689b      	ldr	r3, [r3, #8]
 8020ce4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8020ce6:	68bb      	ldr	r3, [r7, #8]
 8020ce8:	68db      	ldr	r3, [r3, #12]
 8020cea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8020cec:	68bb      	ldr	r3, [r7, #8]
 8020cee:	685b      	ldr	r3, [r3, #4]
 8020cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8020d1c <sys_check_timeouts+0x70>)
 8020cf2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8020cf4:	68b9      	ldr	r1, [r7, #8]
 8020cf6:	200a      	movs	r0, #10
 8020cf8:	f7f8 fd98 	bl	801982c <memp_free>
    if (handler != NULL) {
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d0da      	beq.n	8020cb8 <sys_check_timeouts+0xc>
      handler(arg);
 8020d02:	687b      	ldr	r3, [r7, #4]
 8020d04:	6838      	ldr	r0, [r7, #0]
 8020d06:	4798      	blx	r3
  do {
 8020d08:	e7d6      	b.n	8020cb8 <sys_check_timeouts+0xc>
      return;
 8020d0a:	bf00      	nop
 8020d0c:	e000      	b.n	8020d10 <sys_check_timeouts+0x64>
      return;
 8020d0e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8020d10:	3710      	adds	r7, #16
 8020d12:	46bd      	mov	sp, r7
 8020d14:	bd80      	pop	{r7, pc}
 8020d16:	bf00      	nop
 8020d18:	2400beb4 	.word	0x2400beb4
 8020d1c:	2400beb8 	.word	0x2400beb8

08020d20 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b082      	sub	sp, #8
 8020d24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8020d26:	4b16      	ldr	r3, [pc, #88]	@ (8020d80 <sys_timeouts_sleeptime+0x60>)
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	d102      	bne.n	8020d34 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8020d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8020d32:	e020      	b.n	8020d76 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8020d34:	f7f1 fa14 	bl	8012160 <sys_now>
 8020d38:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8020d3a:	4b11      	ldr	r3, [pc, #68]	@ (8020d80 <sys_timeouts_sleeptime+0x60>)
 8020d3c:	681b      	ldr	r3, [r3, #0]
 8020d3e:	685a      	ldr	r2, [r3, #4]
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	1ad3      	subs	r3, r2, r3
 8020d44:	0fdb      	lsrs	r3, r3, #31
 8020d46:	f003 0301 	and.w	r3, r3, #1
 8020d4a:	b2db      	uxtb	r3, r3
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d001      	beq.n	8020d54 <sys_timeouts_sleeptime+0x34>
    return 0;
 8020d50:	2300      	movs	r3, #0
 8020d52:	e010      	b.n	8020d76 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020d54:	4b0a      	ldr	r3, [pc, #40]	@ (8020d80 <sys_timeouts_sleeptime+0x60>)
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	685a      	ldr	r2, [r3, #4]
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	1ad3      	subs	r3, r2, r3
 8020d5e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8020d60:	683b      	ldr	r3, [r7, #0]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	da06      	bge.n	8020d74 <sys_timeouts_sleeptime+0x54>
 8020d66:	4b07      	ldr	r3, [pc, #28]	@ (8020d84 <sys_timeouts_sleeptime+0x64>)
 8020d68:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8020d6c:	4906      	ldr	r1, [pc, #24]	@ (8020d88 <sys_timeouts_sleeptime+0x68>)
 8020d6e:	4807      	ldr	r0, [pc, #28]	@ (8020d8c <sys_timeouts_sleeptime+0x6c>)
 8020d70:	f004 fb80 	bl	8025474 <iprintf>
    return ret;
 8020d74:	683b      	ldr	r3, [r7, #0]
  }
}
 8020d76:	4618      	mov	r0, r3
 8020d78:	3708      	adds	r7, #8
 8020d7a:	46bd      	mov	sp, r7
 8020d7c:	bd80      	pop	{r7, pc}
 8020d7e:	bf00      	nop
 8020d80:	2400beb4 	.word	0x2400beb4
 8020d84:	0802c3b4 	.word	0x0802c3b4
 8020d88:	0802c488 	.word	0x0802c488
 8020d8c:	0802c428 	.word	0x0802c428

08020d90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020d90:	b580      	push	{r7, lr}
 8020d92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020d94:	f003 fbb0 	bl	80244f8 <rand>
 8020d98:	4603      	mov	r3, r0
 8020d9a:	b29b      	uxth	r3, r3
 8020d9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020da0:	b29b      	uxth	r3, r3
 8020da2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8020da6:	b29a      	uxth	r2, r3
 8020da8:	4b01      	ldr	r3, [pc, #4]	@ (8020db0 <udp_init+0x20>)
 8020daa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020dac:	bf00      	nop
 8020dae:	bd80      	pop	{r7, pc}
 8020db0:	24000214 	.word	0x24000214

08020db4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020db4:	b480      	push	{r7}
 8020db6:	b083      	sub	sp, #12
 8020db8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020dbe:	4b17      	ldr	r3, [pc, #92]	@ (8020e1c <udp_new_port+0x68>)
 8020dc0:	881b      	ldrh	r3, [r3, #0]
 8020dc2:	1c5a      	adds	r2, r3, #1
 8020dc4:	b291      	uxth	r1, r2
 8020dc6:	4a15      	ldr	r2, [pc, #84]	@ (8020e1c <udp_new_port+0x68>)
 8020dc8:	8011      	strh	r1, [r2, #0]
 8020dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020dce:	4293      	cmp	r3, r2
 8020dd0:	d103      	bne.n	8020dda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020dd2:	4b12      	ldr	r3, [pc, #72]	@ (8020e1c <udp_new_port+0x68>)
 8020dd4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8020dd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020dda:	4b11      	ldr	r3, [pc, #68]	@ (8020e20 <udp_new_port+0x6c>)
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	603b      	str	r3, [r7, #0]
 8020de0:	e011      	b.n	8020e06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8020de2:	683b      	ldr	r3, [r7, #0]
 8020de4:	8a5a      	ldrh	r2, [r3, #18]
 8020de6:	4b0d      	ldr	r3, [pc, #52]	@ (8020e1c <udp_new_port+0x68>)
 8020de8:	881b      	ldrh	r3, [r3, #0]
 8020dea:	429a      	cmp	r2, r3
 8020dec:	d108      	bne.n	8020e00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020dee:	88fb      	ldrh	r3, [r7, #6]
 8020df0:	3301      	adds	r3, #1
 8020df2:	80fb      	strh	r3, [r7, #6]
 8020df4:	88fb      	ldrh	r3, [r7, #6]
 8020df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020dfa:	d3e0      	bcc.n	8020dbe <udp_new_port+0xa>
        return 0;
 8020dfc:	2300      	movs	r3, #0
 8020dfe:	e007      	b.n	8020e10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020e00:	683b      	ldr	r3, [r7, #0]
 8020e02:	68db      	ldr	r3, [r3, #12]
 8020e04:	603b      	str	r3, [r7, #0]
 8020e06:	683b      	ldr	r3, [r7, #0]
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d1ea      	bne.n	8020de2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8020e0c:	4b03      	ldr	r3, [pc, #12]	@ (8020e1c <udp_new_port+0x68>)
 8020e0e:	881b      	ldrh	r3, [r3, #0]
}
 8020e10:	4618      	mov	r0, r3
 8020e12:	370c      	adds	r7, #12
 8020e14:	46bd      	mov	sp, r7
 8020e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1a:	4770      	bx	lr
 8020e1c:	24000214 	.word	0x24000214
 8020e20:	2400bec0 	.word	0x2400bec0

08020e24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8020e24:	b580      	push	{r7, lr}
 8020e26:	b084      	sub	sp, #16
 8020e28:	af00      	add	r7, sp, #0
 8020e2a:	60f8      	str	r0, [r7, #12]
 8020e2c:	60b9      	str	r1, [r7, #8]
 8020e2e:	4613      	mov	r3, r2
 8020e30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8020e32:	68fb      	ldr	r3, [r7, #12]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d105      	bne.n	8020e44 <udp_input_local_match+0x20>
 8020e38:	4b27      	ldr	r3, [pc, #156]	@ (8020ed8 <udp_input_local_match+0xb4>)
 8020e3a:	2287      	movs	r2, #135	@ 0x87
 8020e3c:	4927      	ldr	r1, [pc, #156]	@ (8020edc <udp_input_local_match+0xb8>)
 8020e3e:	4828      	ldr	r0, [pc, #160]	@ (8020ee0 <udp_input_local_match+0xbc>)
 8020e40:	f004 fb18 	bl	8025474 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020e44:	68bb      	ldr	r3, [r7, #8]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d105      	bne.n	8020e56 <udp_input_local_match+0x32>
 8020e4a:	4b23      	ldr	r3, [pc, #140]	@ (8020ed8 <udp_input_local_match+0xb4>)
 8020e4c:	2288      	movs	r2, #136	@ 0x88
 8020e4e:	4925      	ldr	r1, [pc, #148]	@ (8020ee4 <udp_input_local_match+0xc0>)
 8020e50:	4823      	ldr	r0, [pc, #140]	@ (8020ee0 <udp_input_local_match+0xbc>)
 8020e52:	f004 fb0f 	bl	8025474 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	7a1b      	ldrb	r3, [r3, #8]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d00b      	beq.n	8020e76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020e5e:	68fb      	ldr	r3, [r7, #12]
 8020e60:	7a1a      	ldrb	r2, [r3, #8]
 8020e62:	4b21      	ldr	r3, [pc, #132]	@ (8020ee8 <udp_input_local_match+0xc4>)
 8020e64:	685b      	ldr	r3, [r3, #4]
 8020e66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8020e6a:	3301      	adds	r3, #1
 8020e6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020e6e:	429a      	cmp	r2, r3
 8020e70:	d001      	beq.n	8020e76 <udp_input_local_match+0x52>
    return 0;
 8020e72:	2300      	movs	r3, #0
 8020e74:	e02b      	b.n	8020ece <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8020e76:	79fb      	ldrb	r3, [r7, #7]
 8020e78:	2b00      	cmp	r3, #0
 8020e7a:	d018      	beq.n	8020eae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020e7c:	68fb      	ldr	r3, [r7, #12]
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d013      	beq.n	8020eaa <udp_input_local_match+0x86>
 8020e82:	68fb      	ldr	r3, [r7, #12]
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d00f      	beq.n	8020eaa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020e8a:	4b17      	ldr	r3, [pc, #92]	@ (8020ee8 <udp_input_local_match+0xc4>)
 8020e8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e92:	d00a      	beq.n	8020eaa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	681a      	ldr	r2, [r3, #0]
 8020e98:	4b13      	ldr	r3, [pc, #76]	@ (8020ee8 <udp_input_local_match+0xc4>)
 8020e9a:	695b      	ldr	r3, [r3, #20]
 8020e9c:	405a      	eors	r2, r3
 8020e9e:	68bb      	ldr	r3, [r7, #8]
 8020ea0:	3308      	adds	r3, #8
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d110      	bne.n	8020ecc <udp_input_local_match+0xa8>
          return 1;
 8020eaa:	2301      	movs	r3, #1
 8020eac:	e00f      	b.n	8020ece <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020eae:	68fb      	ldr	r3, [r7, #12]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d009      	beq.n	8020ec8 <udp_input_local_match+0xa4>
 8020eb4:	68fb      	ldr	r3, [r7, #12]
 8020eb6:	681b      	ldr	r3, [r3, #0]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d005      	beq.n	8020ec8 <udp_input_local_match+0xa4>
 8020ebc:	68fb      	ldr	r3, [r7, #12]
 8020ebe:	681a      	ldr	r2, [r3, #0]
 8020ec0:	4b09      	ldr	r3, [pc, #36]	@ (8020ee8 <udp_input_local_match+0xc4>)
 8020ec2:	695b      	ldr	r3, [r3, #20]
 8020ec4:	429a      	cmp	r2, r3
 8020ec6:	d101      	bne.n	8020ecc <udp_input_local_match+0xa8>
        return 1;
 8020ec8:	2301      	movs	r3, #1
 8020eca:	e000      	b.n	8020ece <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020ecc:	2300      	movs	r3, #0
}
 8020ece:	4618      	mov	r0, r3
 8020ed0:	3710      	adds	r7, #16
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	bd80      	pop	{r7, pc}
 8020ed6:	bf00      	nop
 8020ed8:	0802c49c 	.word	0x0802c49c
 8020edc:	0802c4cc 	.word	0x0802c4cc
 8020ee0:	0802c4f0 	.word	0x0802c4f0
 8020ee4:	0802c518 	.word	0x0802c518
 8020ee8:	24008d64 	.word	0x24008d64

08020eec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8020eec:	b590      	push	{r4, r7, lr}
 8020eee:	b08d      	sub	sp, #52	@ 0x34
 8020ef0:	af02      	add	r7, sp, #8
 8020ef2:	6078      	str	r0, [r7, #4]
 8020ef4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8020ef6:	2300      	movs	r3, #0
 8020ef8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d105      	bne.n	8020f0c <udp_input+0x20>
 8020f00:	4b7c      	ldr	r3, [pc, #496]	@ (80210f4 <udp_input+0x208>)
 8020f02:	22cf      	movs	r2, #207	@ 0xcf
 8020f04:	497c      	ldr	r1, [pc, #496]	@ (80210f8 <udp_input+0x20c>)
 8020f06:	487d      	ldr	r0, [pc, #500]	@ (80210fc <udp_input+0x210>)
 8020f08:	f004 fab4 	bl	8025474 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d105      	bne.n	8020f1e <udp_input+0x32>
 8020f12:	4b78      	ldr	r3, [pc, #480]	@ (80210f4 <udp_input+0x208>)
 8020f14:	22d0      	movs	r2, #208	@ 0xd0
 8020f16:	497a      	ldr	r1, [pc, #488]	@ (8021100 <udp_input+0x214>)
 8020f18:	4878      	ldr	r0, [pc, #480]	@ (80210fc <udp_input+0x210>)
 8020f1a:	f004 faab 	bl	8025474 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	895b      	ldrh	r3, [r3, #10]
 8020f22:	2b07      	cmp	r3, #7
 8020f24:	d803      	bhi.n	8020f2e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020f26:	6878      	ldr	r0, [r7, #4]
 8020f28:	f7f9 fb56 	bl	801a5d8 <pbuf_free>
    goto end;
 8020f2c:	e0de      	b.n	80210ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	685b      	ldr	r3, [r3, #4]
 8020f32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020f34:	4b73      	ldr	r3, [pc, #460]	@ (8021104 <udp_input+0x218>)
 8020f36:	695b      	ldr	r3, [r3, #20]
 8020f38:	4a72      	ldr	r2, [pc, #456]	@ (8021104 <udp_input+0x218>)
 8020f3a:	6812      	ldr	r2, [r2, #0]
 8020f3c:	4611      	mov	r1, r2
 8020f3e:	4618      	mov	r0, r3
 8020f40:	f001 ffa6 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8020f44:	4603      	mov	r3, r0
 8020f46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020f48:	697b      	ldr	r3, [r7, #20]
 8020f4a:	881b      	ldrh	r3, [r3, #0]
 8020f4c:	b29b      	uxth	r3, r3
 8020f4e:	4618      	mov	r0, r3
 8020f50:	f7f7 fe66 	bl	8018c20 <lwip_htons>
 8020f54:	4603      	mov	r3, r0
 8020f56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020f58:	697b      	ldr	r3, [r7, #20]
 8020f5a:	885b      	ldrh	r3, [r3, #2]
 8020f5c:	b29b      	uxth	r3, r3
 8020f5e:	4618      	mov	r0, r3
 8020f60:	f7f7 fe5e 	bl	8018c20 <lwip_htons>
 8020f64:	4603      	mov	r3, r0
 8020f66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8020f68:	2300      	movs	r3, #0
 8020f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8020f6c:	2300      	movs	r3, #0
 8020f6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020f70:	2300      	movs	r3, #0
 8020f72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020f74:	4b64      	ldr	r3, [pc, #400]	@ (8021108 <udp_input+0x21c>)
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8020f7a:	e054      	b.n	8021026 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f7e:	8a5b      	ldrh	r3, [r3, #18]
 8020f80:	89fa      	ldrh	r2, [r7, #14]
 8020f82:	429a      	cmp	r2, r3
 8020f84:	d14a      	bne.n	802101c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020f86:	7cfb      	ldrb	r3, [r7, #19]
 8020f88:	461a      	mov	r2, r3
 8020f8a:	6839      	ldr	r1, [r7, #0]
 8020f8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020f8e:	f7ff ff49 	bl	8020e24 <udp_input_local_match>
 8020f92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d041      	beq.n	802101c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8020f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f9a:	7c1b      	ldrb	r3, [r3, #16]
 8020f9c:	f003 0304 	and.w	r3, r3, #4
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	d11d      	bne.n	8020fe0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8020fa4:	69fb      	ldr	r3, [r7, #28]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	d102      	bne.n	8020fb0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8020faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fac:	61fb      	str	r3, [r7, #28]
 8020fae:	e017      	b.n	8020fe0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020fb0:	7cfb      	ldrb	r3, [r7, #19]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d014      	beq.n	8020fe0 <udp_input+0xf4>
 8020fb6:	4b53      	ldr	r3, [pc, #332]	@ (8021104 <udp_input+0x218>)
 8020fb8:	695b      	ldr	r3, [r3, #20]
 8020fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fbe:	d10f      	bne.n	8020fe0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020fc0:	69fb      	ldr	r3, [r7, #28]
 8020fc2:	681a      	ldr	r2, [r3, #0]
 8020fc4:	683b      	ldr	r3, [r7, #0]
 8020fc6:	3304      	adds	r3, #4
 8020fc8:	681b      	ldr	r3, [r3, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d008      	beq.n	8020fe0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fd0:	681a      	ldr	r2, [r3, #0]
 8020fd2:	683b      	ldr	r3, [r7, #0]
 8020fd4:	3304      	adds	r3, #4
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	429a      	cmp	r2, r3
 8020fda:	d101      	bne.n	8020fe0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8020fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fde:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8020fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fe2:	8a9b      	ldrh	r3, [r3, #20]
 8020fe4:	8a3a      	ldrh	r2, [r7, #16]
 8020fe6:	429a      	cmp	r2, r3
 8020fe8:	d118      	bne.n	802101c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020fec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d005      	beq.n	8020ffe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8020ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ff4:	685a      	ldr	r2, [r3, #4]
 8020ff6:	4b43      	ldr	r3, [pc, #268]	@ (8021104 <udp_input+0x218>)
 8020ff8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020ffa:	429a      	cmp	r2, r3
 8020ffc:	d10e      	bne.n	802101c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020ffe:	6a3b      	ldr	r3, [r7, #32]
 8021000:	2b00      	cmp	r3, #0
 8021002:	d014      	beq.n	802102e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021006:	68da      	ldr	r2, [r3, #12]
 8021008:	6a3b      	ldr	r3, [r7, #32]
 802100a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802100c:	4b3e      	ldr	r3, [pc, #248]	@ (8021108 <udp_input+0x21c>)
 802100e:	681a      	ldr	r2, [r3, #0]
 8021010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021012:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021014:	4a3c      	ldr	r2, [pc, #240]	@ (8021108 <udp_input+0x21c>)
 8021016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021018:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802101a:	e008      	b.n	802102e <udp_input+0x142>
      }
    }

    prev = pcb;
 802101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802101e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021022:	68db      	ldr	r3, [r3, #12]
 8021024:	627b      	str	r3, [r7, #36]	@ 0x24
 8021026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021028:	2b00      	cmp	r3, #0
 802102a:	d1a7      	bne.n	8020f7c <udp_input+0x90>
 802102c:	e000      	b.n	8021030 <udp_input+0x144>
        break;
 802102e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8021030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021032:	2b00      	cmp	r3, #0
 8021034:	d101      	bne.n	802103a <udp_input+0x14e>
    pcb = uncon_pcb;
 8021036:	69fb      	ldr	r3, [r7, #28]
 8021038:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802103c:	2b00      	cmp	r3, #0
 802103e:	d002      	beq.n	8021046 <udp_input+0x15a>
    for_us = 1;
 8021040:	2301      	movs	r3, #1
 8021042:	76fb      	strb	r3, [r7, #27]
 8021044:	e00a      	b.n	802105c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	3304      	adds	r3, #4
 802104a:	681a      	ldr	r2, [r3, #0]
 802104c:	4b2d      	ldr	r3, [pc, #180]	@ (8021104 <udp_input+0x218>)
 802104e:	695b      	ldr	r3, [r3, #20]
 8021050:	429a      	cmp	r2, r3
 8021052:	bf0c      	ite	eq
 8021054:	2301      	moveq	r3, #1
 8021056:	2300      	movne	r3, #0
 8021058:	b2db      	uxtb	r3, r3
 802105a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 802105c:	7efb      	ldrb	r3, [r7, #27]
 802105e:	2b00      	cmp	r3, #0
 8021060:	d041      	beq.n	80210e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021062:	2108      	movs	r1, #8
 8021064:	6878      	ldr	r0, [r7, #4]
 8021066:	f7f9 f9ff 	bl	801a468 <pbuf_remove_header>
 802106a:	4603      	mov	r3, r0
 802106c:	2b00      	cmp	r3, #0
 802106e:	d00a      	beq.n	8021086 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8021070:	4b20      	ldr	r3, [pc, #128]	@ (80210f4 <udp_input+0x208>)
 8021072:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8021076:	4925      	ldr	r1, [pc, #148]	@ (802110c <udp_input+0x220>)
 8021078:	4820      	ldr	r0, [pc, #128]	@ (80210fc <udp_input+0x210>)
 802107a:	f004 f9fb 	bl	8025474 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 802107e:	6878      	ldr	r0, [r7, #4]
 8021080:	f7f9 faaa 	bl	801a5d8 <pbuf_free>
      goto end;
 8021084:	e032      	b.n	80210ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 8021086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021088:	2b00      	cmp	r3, #0
 802108a:	d012      	beq.n	80210b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802108e:	699b      	ldr	r3, [r3, #24]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d00a      	beq.n	80210aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021096:	699c      	ldr	r4, [r3, #24]
 8021098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802109a:	69d8      	ldr	r0, [r3, #28]
 802109c:	8a3b      	ldrh	r3, [r7, #16]
 802109e:	9300      	str	r3, [sp, #0]
 80210a0:	4b1b      	ldr	r3, [pc, #108]	@ (8021110 <udp_input+0x224>)
 80210a2:	687a      	ldr	r2, [r7, #4]
 80210a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80210a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80210a8:	e021      	b.n	80210ee <udp_input+0x202>
        pbuf_free(p);
 80210aa:	6878      	ldr	r0, [r7, #4]
 80210ac:	f7f9 fa94 	bl	801a5d8 <pbuf_free>
        goto end;
 80210b0:	e01c      	b.n	80210ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80210b2:	7cfb      	ldrb	r3, [r7, #19]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d112      	bne.n	80210de <udp_input+0x1f2>
 80210b8:	4b12      	ldr	r3, [pc, #72]	@ (8021104 <udp_input+0x218>)
 80210ba:	695b      	ldr	r3, [r3, #20]
 80210bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80210c0:	2be0      	cmp	r3, #224	@ 0xe0
 80210c2:	d00c      	beq.n	80210de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80210c4:	4b0f      	ldr	r3, [pc, #60]	@ (8021104 <udp_input+0x218>)
 80210c6:	899b      	ldrh	r3, [r3, #12]
 80210c8:	3308      	adds	r3, #8
 80210ca:	b29b      	uxth	r3, r3
 80210cc:	b21b      	sxth	r3, r3
 80210ce:	4619      	mov	r1, r3
 80210d0:	6878      	ldr	r0, [r7, #4]
 80210d2:	f7f9 fa3c 	bl	801a54e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80210d6:	2103      	movs	r1, #3
 80210d8:	6878      	ldr	r0, [r7, #4]
 80210da:	f001 fbaf 	bl	802283c <icmp_dest_unreach>
      pbuf_free(p);
 80210de:	6878      	ldr	r0, [r7, #4]
 80210e0:	f7f9 fa7a 	bl	801a5d8 <pbuf_free>
  return;
 80210e4:	e003      	b.n	80210ee <udp_input+0x202>
    pbuf_free(p);
 80210e6:	6878      	ldr	r0, [r7, #4]
 80210e8:	f7f9 fa76 	bl	801a5d8 <pbuf_free>
  return;
 80210ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80210ee:	372c      	adds	r7, #44	@ 0x2c
 80210f0:	46bd      	mov	sp, r7
 80210f2:	bd90      	pop	{r4, r7, pc}
 80210f4:	0802c49c 	.word	0x0802c49c
 80210f8:	0802c540 	.word	0x0802c540
 80210fc:	0802c4f0 	.word	0x0802c4f0
 8021100:	0802c558 	.word	0x0802c558
 8021104:	24008d64 	.word	0x24008d64
 8021108:	2400bec0 	.word	0x2400bec0
 802110c:	0802c574 	.word	0x0802c574
 8021110:	24008d74 	.word	0x24008d74

08021114 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8021114:	b580      	push	{r7, lr}
 8021116:	b082      	sub	sp, #8
 8021118:	af00      	add	r7, sp, #0
 802111a:	6078      	str	r0, [r7, #4]
 802111c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d109      	bne.n	8021138 <udp_send+0x24>
 8021124:	4b11      	ldr	r3, [pc, #68]	@ (802116c <udp_send+0x58>)
 8021126:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802112a:	4911      	ldr	r1, [pc, #68]	@ (8021170 <udp_send+0x5c>)
 802112c:	4811      	ldr	r0, [pc, #68]	@ (8021174 <udp_send+0x60>)
 802112e:	f004 f9a1 	bl	8025474 <iprintf>
 8021132:	f06f 030f 	mvn.w	r3, #15
 8021136:	e015      	b.n	8021164 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8021138:	683b      	ldr	r3, [r7, #0]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d109      	bne.n	8021152 <udp_send+0x3e>
 802113e:	4b0b      	ldr	r3, [pc, #44]	@ (802116c <udp_send+0x58>)
 8021140:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8021144:	490c      	ldr	r1, [pc, #48]	@ (8021178 <udp_send+0x64>)
 8021146:	480b      	ldr	r0, [pc, #44]	@ (8021174 <udp_send+0x60>)
 8021148:	f004 f994 	bl	8025474 <iprintf>
 802114c:	f06f 030f 	mvn.w	r3, #15
 8021150:	e008      	b.n	8021164 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	1d1a      	adds	r2, r3, #4
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	8a9b      	ldrh	r3, [r3, #20]
 802115a:	6839      	ldr	r1, [r7, #0]
 802115c:	6878      	ldr	r0, [r7, #4]
 802115e:	f000 f80d 	bl	802117c <udp_sendto>
 8021162:	4603      	mov	r3, r0
}
 8021164:	4618      	mov	r0, r3
 8021166:	3708      	adds	r7, #8
 8021168:	46bd      	mov	sp, r7
 802116a:	bd80      	pop	{r7, pc}
 802116c:	0802c49c 	.word	0x0802c49c
 8021170:	0802c590 	.word	0x0802c590
 8021174:	0802c4f0 	.word	0x0802c4f0
 8021178:	0802c5a8 	.word	0x0802c5a8

0802117c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 802117c:	b580      	push	{r7, lr}
 802117e:	b088      	sub	sp, #32
 8021180:	af02      	add	r7, sp, #8
 8021182:	60f8      	str	r0, [r7, #12]
 8021184:	60b9      	str	r1, [r7, #8]
 8021186:	607a      	str	r2, [r7, #4]
 8021188:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	2b00      	cmp	r3, #0
 802118e:	d109      	bne.n	80211a4 <udp_sendto+0x28>
 8021190:	4b23      	ldr	r3, [pc, #140]	@ (8021220 <udp_sendto+0xa4>)
 8021192:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8021196:	4923      	ldr	r1, [pc, #140]	@ (8021224 <udp_sendto+0xa8>)
 8021198:	4823      	ldr	r0, [pc, #140]	@ (8021228 <udp_sendto+0xac>)
 802119a:	f004 f96b 	bl	8025474 <iprintf>
 802119e:	f06f 030f 	mvn.w	r3, #15
 80211a2:	e038      	b.n	8021216 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80211a4:	68bb      	ldr	r3, [r7, #8]
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d109      	bne.n	80211be <udp_sendto+0x42>
 80211aa:	4b1d      	ldr	r3, [pc, #116]	@ (8021220 <udp_sendto+0xa4>)
 80211ac:	f240 2219 	movw	r2, #537	@ 0x219
 80211b0:	491e      	ldr	r1, [pc, #120]	@ (802122c <udp_sendto+0xb0>)
 80211b2:	481d      	ldr	r0, [pc, #116]	@ (8021228 <udp_sendto+0xac>)
 80211b4:	f004 f95e 	bl	8025474 <iprintf>
 80211b8:	f06f 030f 	mvn.w	r3, #15
 80211bc:	e02b      	b.n	8021216 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d109      	bne.n	80211d8 <udp_sendto+0x5c>
 80211c4:	4b16      	ldr	r3, [pc, #88]	@ (8021220 <udp_sendto+0xa4>)
 80211c6:	f240 221a 	movw	r2, #538	@ 0x21a
 80211ca:	4919      	ldr	r1, [pc, #100]	@ (8021230 <udp_sendto+0xb4>)
 80211cc:	4816      	ldr	r0, [pc, #88]	@ (8021228 <udp_sendto+0xac>)
 80211ce:	f004 f951 	bl	8025474 <iprintf>
 80211d2:	f06f 030f 	mvn.w	r3, #15
 80211d6:	e01e      	b.n	8021216 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80211d8:	68fb      	ldr	r3, [r7, #12]
 80211da:	7a1b      	ldrb	r3, [r3, #8]
 80211dc:	2b00      	cmp	r3, #0
 80211de:	d006      	beq.n	80211ee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80211e0:	68fb      	ldr	r3, [r7, #12]
 80211e2:	7a1b      	ldrb	r3, [r3, #8]
 80211e4:	4618      	mov	r0, r3
 80211e6:	f7f8 fe37 	bl	8019e58 <netif_get_by_index>
 80211ea:	6178      	str	r0, [r7, #20]
 80211ec:	e003      	b.n	80211f6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80211ee:	6878      	ldr	r0, [r7, #4]
 80211f0:	f001 fbb8 	bl	8022964 <ip4_route>
 80211f4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80211f6:	697b      	ldr	r3, [r7, #20]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d102      	bne.n	8021202 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80211fc:	f06f 0303 	mvn.w	r3, #3
 8021200:	e009      	b.n	8021216 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021202:	887a      	ldrh	r2, [r7, #2]
 8021204:	697b      	ldr	r3, [r7, #20]
 8021206:	9300      	str	r3, [sp, #0]
 8021208:	4613      	mov	r3, r2
 802120a:	687a      	ldr	r2, [r7, #4]
 802120c:	68b9      	ldr	r1, [r7, #8]
 802120e:	68f8      	ldr	r0, [r7, #12]
 8021210:	f000 f810 	bl	8021234 <udp_sendto_if>
 8021214:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021216:	4618      	mov	r0, r3
 8021218:	3718      	adds	r7, #24
 802121a:	46bd      	mov	sp, r7
 802121c:	bd80      	pop	{r7, pc}
 802121e:	bf00      	nop
 8021220:	0802c49c 	.word	0x0802c49c
 8021224:	0802c5c0 	.word	0x0802c5c0
 8021228:	0802c4f0 	.word	0x0802c4f0
 802122c:	0802c5d8 	.word	0x0802c5d8
 8021230:	0802c5f4 	.word	0x0802c5f4

08021234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b088      	sub	sp, #32
 8021238:	af02      	add	r7, sp, #8
 802123a:	60f8      	str	r0, [r7, #12]
 802123c:	60b9      	str	r1, [r7, #8]
 802123e:	607a      	str	r2, [r7, #4]
 8021240:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021242:	68fb      	ldr	r3, [r7, #12]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d109      	bne.n	802125c <udp_sendto_if+0x28>
 8021248:	4b2e      	ldr	r3, [pc, #184]	@ (8021304 <udp_sendto_if+0xd0>)
 802124a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802124e:	492e      	ldr	r1, [pc, #184]	@ (8021308 <udp_sendto_if+0xd4>)
 8021250:	482e      	ldr	r0, [pc, #184]	@ (802130c <udp_sendto_if+0xd8>)
 8021252:	f004 f90f 	bl	8025474 <iprintf>
 8021256:	f06f 030f 	mvn.w	r3, #15
 802125a:	e04f      	b.n	80212fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802125c:	68bb      	ldr	r3, [r7, #8]
 802125e:	2b00      	cmp	r3, #0
 8021260:	d109      	bne.n	8021276 <udp_sendto_if+0x42>
 8021262:	4b28      	ldr	r3, [pc, #160]	@ (8021304 <udp_sendto_if+0xd0>)
 8021264:	f240 2281 	movw	r2, #641	@ 0x281
 8021268:	4929      	ldr	r1, [pc, #164]	@ (8021310 <udp_sendto_if+0xdc>)
 802126a:	4828      	ldr	r0, [pc, #160]	@ (802130c <udp_sendto_if+0xd8>)
 802126c:	f004 f902 	bl	8025474 <iprintf>
 8021270:	f06f 030f 	mvn.w	r3, #15
 8021274:	e042      	b.n	80212fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	2b00      	cmp	r3, #0
 802127a:	d109      	bne.n	8021290 <udp_sendto_if+0x5c>
 802127c:	4b21      	ldr	r3, [pc, #132]	@ (8021304 <udp_sendto_if+0xd0>)
 802127e:	f240 2282 	movw	r2, #642	@ 0x282
 8021282:	4924      	ldr	r1, [pc, #144]	@ (8021314 <udp_sendto_if+0xe0>)
 8021284:	4821      	ldr	r0, [pc, #132]	@ (802130c <udp_sendto_if+0xd8>)
 8021286:	f004 f8f5 	bl	8025474 <iprintf>
 802128a:	f06f 030f 	mvn.w	r3, #15
 802128e:	e035      	b.n	80212fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021290:	6a3b      	ldr	r3, [r7, #32]
 8021292:	2b00      	cmp	r3, #0
 8021294:	d109      	bne.n	80212aa <udp_sendto_if+0x76>
 8021296:	4b1b      	ldr	r3, [pc, #108]	@ (8021304 <udp_sendto_if+0xd0>)
 8021298:	f240 2283 	movw	r2, #643	@ 0x283
 802129c:	491e      	ldr	r1, [pc, #120]	@ (8021318 <udp_sendto_if+0xe4>)
 802129e:	481b      	ldr	r0, [pc, #108]	@ (802130c <udp_sendto_if+0xd8>)
 80212a0:	f004 f8e8 	bl	8025474 <iprintf>
 80212a4:	f06f 030f 	mvn.w	r3, #15
 80212a8:	e028      	b.n	80212fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80212aa:	68fb      	ldr	r3, [r7, #12]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d009      	beq.n	80212c4 <udp_sendto_if+0x90>
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d005      	beq.n	80212c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80212b8:	68fb      	ldr	r3, [r7, #12]
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80212c0:	2be0      	cmp	r3, #224	@ 0xe0
 80212c2:	d103      	bne.n	80212cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80212c4:	6a3b      	ldr	r3, [r7, #32]
 80212c6:	3304      	adds	r3, #4
 80212c8:	617b      	str	r3, [r7, #20]
 80212ca:	e00b      	b.n	80212e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80212cc:	68fb      	ldr	r3, [r7, #12]
 80212ce:	681a      	ldr	r2, [r3, #0]
 80212d0:	6a3b      	ldr	r3, [r7, #32]
 80212d2:	3304      	adds	r3, #4
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	429a      	cmp	r2, r3
 80212d8:	d002      	beq.n	80212e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80212da:	f06f 0303 	mvn.w	r3, #3
 80212de:	e00d      	b.n	80212fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80212e4:	887a      	ldrh	r2, [r7, #2]
 80212e6:	697b      	ldr	r3, [r7, #20]
 80212e8:	9301      	str	r3, [sp, #4]
 80212ea:	6a3b      	ldr	r3, [r7, #32]
 80212ec:	9300      	str	r3, [sp, #0]
 80212ee:	4613      	mov	r3, r2
 80212f0:	687a      	ldr	r2, [r7, #4]
 80212f2:	68b9      	ldr	r1, [r7, #8]
 80212f4:	68f8      	ldr	r0, [r7, #12]
 80212f6:	f000 f811 	bl	802131c <udp_sendto_if_src>
 80212fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80212fc:	4618      	mov	r0, r3
 80212fe:	3718      	adds	r7, #24
 8021300:	46bd      	mov	sp, r7
 8021302:	bd80      	pop	{r7, pc}
 8021304:	0802c49c 	.word	0x0802c49c
 8021308:	0802c610 	.word	0x0802c610
 802130c:	0802c4f0 	.word	0x0802c4f0
 8021310:	0802c62c 	.word	0x0802c62c
 8021314:	0802c648 	.word	0x0802c648
 8021318:	0802c668 	.word	0x0802c668

0802131c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802131c:	b580      	push	{r7, lr}
 802131e:	b08c      	sub	sp, #48	@ 0x30
 8021320:	af04      	add	r7, sp, #16
 8021322:	60f8      	str	r0, [r7, #12]
 8021324:	60b9      	str	r1, [r7, #8]
 8021326:	607a      	str	r2, [r7, #4]
 8021328:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	2b00      	cmp	r3, #0
 802132e:	d109      	bne.n	8021344 <udp_sendto_if_src+0x28>
 8021330:	4b65      	ldr	r3, [pc, #404]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 8021332:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8021336:	4965      	ldr	r1, [pc, #404]	@ (80214cc <udp_sendto_if_src+0x1b0>)
 8021338:	4865      	ldr	r0, [pc, #404]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 802133a:	f004 f89b 	bl	8025474 <iprintf>
 802133e:	f06f 030f 	mvn.w	r3, #15
 8021342:	e0bc      	b.n	80214be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021344:	68bb      	ldr	r3, [r7, #8]
 8021346:	2b00      	cmp	r3, #0
 8021348:	d109      	bne.n	802135e <udp_sendto_if_src+0x42>
 802134a:	4b5f      	ldr	r3, [pc, #380]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 802134c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8021350:	4960      	ldr	r1, [pc, #384]	@ (80214d4 <udp_sendto_if_src+0x1b8>)
 8021352:	485f      	ldr	r0, [pc, #380]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 8021354:	f004 f88e 	bl	8025474 <iprintf>
 8021358:	f06f 030f 	mvn.w	r3, #15
 802135c:	e0af      	b.n	80214be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	2b00      	cmp	r3, #0
 8021362:	d109      	bne.n	8021378 <udp_sendto_if_src+0x5c>
 8021364:	4b58      	ldr	r3, [pc, #352]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 8021366:	f240 22d3 	movw	r2, #723	@ 0x2d3
 802136a:	495b      	ldr	r1, [pc, #364]	@ (80214d8 <udp_sendto_if_src+0x1bc>)
 802136c:	4858      	ldr	r0, [pc, #352]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 802136e:	f004 f881 	bl	8025474 <iprintf>
 8021372:	f06f 030f 	mvn.w	r3, #15
 8021376:	e0a2      	b.n	80214be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802137a:	2b00      	cmp	r3, #0
 802137c:	d109      	bne.n	8021392 <udp_sendto_if_src+0x76>
 802137e:	4b52      	ldr	r3, [pc, #328]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 8021380:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8021384:	4955      	ldr	r1, [pc, #340]	@ (80214dc <udp_sendto_if_src+0x1c0>)
 8021386:	4852      	ldr	r0, [pc, #328]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 8021388:	f004 f874 	bl	8025474 <iprintf>
 802138c:	f06f 030f 	mvn.w	r3, #15
 8021390:	e095      	b.n	80214be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021394:	2b00      	cmp	r3, #0
 8021396:	d109      	bne.n	80213ac <udp_sendto_if_src+0x90>
 8021398:	4b4b      	ldr	r3, [pc, #300]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 802139a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 802139e:	4950      	ldr	r1, [pc, #320]	@ (80214e0 <udp_sendto_if_src+0x1c4>)
 80213a0:	484b      	ldr	r0, [pc, #300]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 80213a2:	f004 f867 	bl	8025474 <iprintf>
 80213a6:	f06f 030f 	mvn.w	r3, #15
 80213aa:	e088      	b.n	80214be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	8a5b      	ldrh	r3, [r3, #18]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d10f      	bne.n	80213d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80213b4:	68f9      	ldr	r1, [r7, #12]
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	8a5b      	ldrh	r3, [r3, #18]
 80213ba:	461a      	mov	r2, r3
 80213bc:	68f8      	ldr	r0, [r7, #12]
 80213be:	f000 f893 	bl	80214e8 <udp_bind>
 80213c2:	4603      	mov	r3, r0
 80213c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80213c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d002      	beq.n	80213d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80213ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80213d2:	e074      	b.n	80214be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80213d4:	68bb      	ldr	r3, [r7, #8]
 80213d6:	891b      	ldrh	r3, [r3, #8]
 80213d8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80213dc:	4293      	cmp	r3, r2
 80213de:	d902      	bls.n	80213e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80213e0:	f04f 33ff 	mov.w	r3, #4294967295
 80213e4:	e06b      	b.n	80214be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80213e6:	2108      	movs	r1, #8
 80213e8:	68b8      	ldr	r0, [r7, #8]
 80213ea:	f7f9 f82d 	bl	801a448 <pbuf_add_header>
 80213ee:	4603      	mov	r3, r0
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d015      	beq.n	8021420 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80213f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80213f8:	2108      	movs	r1, #8
 80213fa:	2022      	movs	r0, #34	@ 0x22
 80213fc:	f7f8 fdd6 	bl	8019fac <pbuf_alloc>
 8021400:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021402:	69fb      	ldr	r3, [r7, #28]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d102      	bne.n	802140e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021408:	f04f 33ff 	mov.w	r3, #4294967295
 802140c:	e057      	b.n	80214be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802140e:	68bb      	ldr	r3, [r7, #8]
 8021410:	891b      	ldrh	r3, [r3, #8]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d006      	beq.n	8021424 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021416:	68b9      	ldr	r1, [r7, #8]
 8021418:	69f8      	ldr	r0, [r7, #28]
 802141a:	f7f9 fa01 	bl	801a820 <pbuf_chain>
 802141e:	e001      	b.n	8021424 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021420:	68bb      	ldr	r3, [r7, #8]
 8021422:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021424:	69fb      	ldr	r3, [r7, #28]
 8021426:	895b      	ldrh	r3, [r3, #10]
 8021428:	2b07      	cmp	r3, #7
 802142a:	d806      	bhi.n	802143a <udp_sendto_if_src+0x11e>
 802142c:	4b26      	ldr	r3, [pc, #152]	@ (80214c8 <udp_sendto_if_src+0x1ac>)
 802142e:	f240 320d 	movw	r2, #781	@ 0x30d
 8021432:	492c      	ldr	r1, [pc, #176]	@ (80214e4 <udp_sendto_if_src+0x1c8>)
 8021434:	4826      	ldr	r0, [pc, #152]	@ (80214d0 <udp_sendto_if_src+0x1b4>)
 8021436:	f004 f81d 	bl	8025474 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802143a:	69fb      	ldr	r3, [r7, #28]
 802143c:	685b      	ldr	r3, [r3, #4]
 802143e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021440:	68fb      	ldr	r3, [r7, #12]
 8021442:	8a5b      	ldrh	r3, [r3, #18]
 8021444:	4618      	mov	r0, r3
 8021446:	f7f7 fbeb 	bl	8018c20 <lwip_htons>
 802144a:	4603      	mov	r3, r0
 802144c:	461a      	mov	r2, r3
 802144e:	697b      	ldr	r3, [r7, #20]
 8021450:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021452:	887b      	ldrh	r3, [r7, #2]
 8021454:	4618      	mov	r0, r3
 8021456:	f7f7 fbe3 	bl	8018c20 <lwip_htons>
 802145a:	4603      	mov	r3, r0
 802145c:	461a      	mov	r2, r3
 802145e:	697b      	ldr	r3, [r7, #20]
 8021460:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021462:	697b      	ldr	r3, [r7, #20]
 8021464:	2200      	movs	r2, #0
 8021466:	719a      	strb	r2, [r3, #6]
 8021468:	2200      	movs	r2, #0
 802146a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 802146c:	69fb      	ldr	r3, [r7, #28]
 802146e:	891b      	ldrh	r3, [r3, #8]
 8021470:	4618      	mov	r0, r3
 8021472:	f7f7 fbd5 	bl	8018c20 <lwip_htons>
 8021476:	4603      	mov	r3, r0
 8021478:	461a      	mov	r2, r3
 802147a:	697b      	ldr	r3, [r7, #20]
 802147c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802147e:	2311      	movs	r3, #17
 8021480:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021482:	68fb      	ldr	r3, [r7, #12]
 8021484:	7adb      	ldrb	r3, [r3, #11]
 8021486:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021488:	68fb      	ldr	r3, [r7, #12]
 802148a:	7a9b      	ldrb	r3, [r3, #10]
 802148c:	7cb9      	ldrb	r1, [r7, #18]
 802148e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021490:	9202      	str	r2, [sp, #8]
 8021492:	7cfa      	ldrb	r2, [r7, #19]
 8021494:	9201      	str	r2, [sp, #4]
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	460b      	mov	r3, r1
 802149a:	687a      	ldr	r2, [r7, #4]
 802149c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802149e:	69f8      	ldr	r0, [r7, #28]
 80214a0:	f001 fc48 	bl	8022d34 <ip4_output_if_src>
 80214a4:	4603      	mov	r3, r0
 80214a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80214a8:	69fa      	ldr	r2, [r7, #28]
 80214aa:	68bb      	ldr	r3, [r7, #8]
 80214ac:	429a      	cmp	r2, r3
 80214ae:	d004      	beq.n	80214ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80214b0:	69f8      	ldr	r0, [r7, #28]
 80214b2:	f7f9 f891 	bl	801a5d8 <pbuf_free>
    q = NULL;
 80214b6:	2300      	movs	r3, #0
 80214b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80214ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80214be:	4618      	mov	r0, r3
 80214c0:	3720      	adds	r7, #32
 80214c2:	46bd      	mov	sp, r7
 80214c4:	bd80      	pop	{r7, pc}
 80214c6:	bf00      	nop
 80214c8:	0802c49c 	.word	0x0802c49c
 80214cc:	0802c688 	.word	0x0802c688
 80214d0:	0802c4f0 	.word	0x0802c4f0
 80214d4:	0802c6a8 	.word	0x0802c6a8
 80214d8:	0802c6c8 	.word	0x0802c6c8
 80214dc:	0802c6ec 	.word	0x0802c6ec
 80214e0:	0802c710 	.word	0x0802c710
 80214e4:	0802c734 	.word	0x0802c734

080214e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80214e8:	b580      	push	{r7, lr}
 80214ea:	b086      	sub	sp, #24
 80214ec:	af00      	add	r7, sp, #0
 80214ee:	60f8      	str	r0, [r7, #12]
 80214f0:	60b9      	str	r1, [r7, #8]
 80214f2:	4613      	mov	r3, r2
 80214f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80214f6:	68bb      	ldr	r3, [r7, #8]
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d101      	bne.n	8021500 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80214fc:	4b39      	ldr	r3, [pc, #228]	@ (80215e4 <udp_bind+0xfc>)
 80214fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	2b00      	cmp	r3, #0
 8021504:	d109      	bne.n	802151a <udp_bind+0x32>
 8021506:	4b38      	ldr	r3, [pc, #224]	@ (80215e8 <udp_bind+0x100>)
 8021508:	f240 32b7 	movw	r2, #951	@ 0x3b7
 802150c:	4937      	ldr	r1, [pc, #220]	@ (80215ec <udp_bind+0x104>)
 802150e:	4838      	ldr	r0, [pc, #224]	@ (80215f0 <udp_bind+0x108>)
 8021510:	f003 ffb0 	bl	8025474 <iprintf>
 8021514:	f06f 030f 	mvn.w	r3, #15
 8021518:	e060      	b.n	80215dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802151a:	2300      	movs	r3, #0
 802151c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802151e:	4b35      	ldr	r3, [pc, #212]	@ (80215f4 <udp_bind+0x10c>)
 8021520:	681b      	ldr	r3, [r3, #0]
 8021522:	617b      	str	r3, [r7, #20]
 8021524:	e009      	b.n	802153a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021526:	68fa      	ldr	r2, [r7, #12]
 8021528:	697b      	ldr	r3, [r7, #20]
 802152a:	429a      	cmp	r2, r3
 802152c:	d102      	bne.n	8021534 <udp_bind+0x4c>
      rebind = 1;
 802152e:	2301      	movs	r3, #1
 8021530:	74fb      	strb	r3, [r7, #19]
      break;
 8021532:	e005      	b.n	8021540 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021534:	697b      	ldr	r3, [r7, #20]
 8021536:	68db      	ldr	r3, [r3, #12]
 8021538:	617b      	str	r3, [r7, #20]
 802153a:	697b      	ldr	r3, [r7, #20]
 802153c:	2b00      	cmp	r3, #0
 802153e:	d1f2      	bne.n	8021526 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021540:	88fb      	ldrh	r3, [r7, #6]
 8021542:	2b00      	cmp	r3, #0
 8021544:	d109      	bne.n	802155a <udp_bind+0x72>
    port = udp_new_port();
 8021546:	f7ff fc35 	bl	8020db4 <udp_new_port>
 802154a:	4603      	mov	r3, r0
 802154c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802154e:	88fb      	ldrh	r3, [r7, #6]
 8021550:	2b00      	cmp	r3, #0
 8021552:	d12c      	bne.n	80215ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021554:	f06f 0307 	mvn.w	r3, #7
 8021558:	e040      	b.n	80215dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802155a:	4b26      	ldr	r3, [pc, #152]	@ (80215f4 <udp_bind+0x10c>)
 802155c:	681b      	ldr	r3, [r3, #0]
 802155e:	617b      	str	r3, [r7, #20]
 8021560:	e022      	b.n	80215a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021562:	68fa      	ldr	r2, [r7, #12]
 8021564:	697b      	ldr	r3, [r7, #20]
 8021566:	429a      	cmp	r2, r3
 8021568:	d01b      	beq.n	80215a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802156a:	697b      	ldr	r3, [r7, #20]
 802156c:	8a5b      	ldrh	r3, [r3, #18]
 802156e:	88fa      	ldrh	r2, [r7, #6]
 8021570:	429a      	cmp	r2, r3
 8021572:	d116      	bne.n	80215a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021574:	697b      	ldr	r3, [r7, #20]
 8021576:	681a      	ldr	r2, [r3, #0]
 8021578:	68bb      	ldr	r3, [r7, #8]
 802157a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802157c:	429a      	cmp	r2, r3
 802157e:	d00d      	beq.n	802159c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021580:	68bb      	ldr	r3, [r7, #8]
 8021582:	2b00      	cmp	r3, #0
 8021584:	d00a      	beq.n	802159c <udp_bind+0xb4>
 8021586:	68bb      	ldr	r3, [r7, #8]
 8021588:	681b      	ldr	r3, [r3, #0]
 802158a:	2b00      	cmp	r3, #0
 802158c:	d006      	beq.n	802159c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802158e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021590:	2b00      	cmp	r3, #0
 8021592:	d003      	beq.n	802159c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021594:	697b      	ldr	r3, [r7, #20]
 8021596:	681b      	ldr	r3, [r3, #0]
 8021598:	2b00      	cmp	r3, #0
 802159a:	d102      	bne.n	80215a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802159c:	f06f 0307 	mvn.w	r3, #7
 80215a0:	e01c      	b.n	80215dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80215a2:	697b      	ldr	r3, [r7, #20]
 80215a4:	68db      	ldr	r3, [r3, #12]
 80215a6:	617b      	str	r3, [r7, #20]
 80215a8:	697b      	ldr	r3, [r7, #20]
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d1d9      	bne.n	8021562 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80215ae:	68bb      	ldr	r3, [r7, #8]
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d002      	beq.n	80215ba <udp_bind+0xd2>
 80215b4:	68bb      	ldr	r3, [r7, #8]
 80215b6:	681b      	ldr	r3, [r3, #0]
 80215b8:	e000      	b.n	80215bc <udp_bind+0xd4>
 80215ba:	2300      	movs	r3, #0
 80215bc:	68fa      	ldr	r2, [r7, #12]
 80215be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80215c0:	68fb      	ldr	r3, [r7, #12]
 80215c2:	88fa      	ldrh	r2, [r7, #6]
 80215c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80215c6:	7cfb      	ldrb	r3, [r7, #19]
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d106      	bne.n	80215da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80215cc:	4b09      	ldr	r3, [pc, #36]	@ (80215f4 <udp_bind+0x10c>)
 80215ce:	681a      	ldr	r2, [r3, #0]
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80215d4:	4a07      	ldr	r2, [pc, #28]	@ (80215f4 <udp_bind+0x10c>)
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80215da:	2300      	movs	r3, #0
}
 80215dc:	4618      	mov	r0, r3
 80215de:	3718      	adds	r7, #24
 80215e0:	46bd      	mov	sp, r7
 80215e2:	bd80      	pop	{r7, pc}
 80215e4:	0802d0e4 	.word	0x0802d0e4
 80215e8:	0802c49c 	.word	0x0802c49c
 80215ec:	0802c764 	.word	0x0802c764
 80215f0:	0802c4f0 	.word	0x0802c4f0
 80215f4:	2400bec0 	.word	0x2400bec0

080215f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80215f8:	b580      	push	{r7, lr}
 80215fa:	b084      	sub	sp, #16
 80215fc:	af00      	add	r7, sp, #0
 80215fe:	60f8      	str	r0, [r7, #12]
 8021600:	60b9      	str	r1, [r7, #8]
 8021602:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8021604:	68fb      	ldr	r3, [r7, #12]
 8021606:	2b00      	cmp	r3, #0
 8021608:	d107      	bne.n	802161a <udp_recv+0x22>
 802160a:	4b08      	ldr	r3, [pc, #32]	@ (802162c <udp_recv+0x34>)
 802160c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8021610:	4907      	ldr	r1, [pc, #28]	@ (8021630 <udp_recv+0x38>)
 8021612:	4808      	ldr	r0, [pc, #32]	@ (8021634 <udp_recv+0x3c>)
 8021614:	f003 ff2e 	bl	8025474 <iprintf>
 8021618:	e005      	b.n	8021626 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802161a:	68fb      	ldr	r3, [r7, #12]
 802161c:	68ba      	ldr	r2, [r7, #8]
 802161e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8021620:	68fb      	ldr	r3, [r7, #12]
 8021622:	687a      	ldr	r2, [r7, #4]
 8021624:	61da      	str	r2, [r3, #28]
}
 8021626:	3710      	adds	r7, #16
 8021628:	46bd      	mov	sp, r7
 802162a:	bd80      	pop	{r7, pc}
 802162c:	0802c49c 	.word	0x0802c49c
 8021630:	0802c7d0 	.word	0x0802c7d0
 8021634:	0802c4f0 	.word	0x0802c4f0

08021638 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021638:	b580      	push	{r7, lr}
 802163a:	b084      	sub	sp, #16
 802163c:	af00      	add	r7, sp, #0
 802163e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	2b00      	cmp	r3, #0
 8021644:	d107      	bne.n	8021656 <udp_remove+0x1e>
 8021646:	4b19      	ldr	r3, [pc, #100]	@ (80216ac <udp_remove+0x74>)
 8021648:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 802164c:	4918      	ldr	r1, [pc, #96]	@ (80216b0 <udp_remove+0x78>)
 802164e:	4819      	ldr	r0, [pc, #100]	@ (80216b4 <udp_remove+0x7c>)
 8021650:	f003 ff10 	bl	8025474 <iprintf>
 8021654:	e026      	b.n	80216a4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021656:	4b18      	ldr	r3, [pc, #96]	@ (80216b8 <udp_remove+0x80>)
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	687a      	ldr	r2, [r7, #4]
 802165c:	429a      	cmp	r2, r3
 802165e:	d105      	bne.n	802166c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8021660:	4b15      	ldr	r3, [pc, #84]	@ (80216b8 <udp_remove+0x80>)
 8021662:	681b      	ldr	r3, [r3, #0]
 8021664:	68db      	ldr	r3, [r3, #12]
 8021666:	4a14      	ldr	r2, [pc, #80]	@ (80216b8 <udp_remove+0x80>)
 8021668:	6013      	str	r3, [r2, #0]
 802166a:	e017      	b.n	802169c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802166c:	4b12      	ldr	r3, [pc, #72]	@ (80216b8 <udp_remove+0x80>)
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	60fb      	str	r3, [r7, #12]
 8021672:	e010      	b.n	8021696 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	68db      	ldr	r3, [r3, #12]
 8021678:	2b00      	cmp	r3, #0
 802167a:	d009      	beq.n	8021690 <udp_remove+0x58>
 802167c:	68fb      	ldr	r3, [r7, #12]
 802167e:	68db      	ldr	r3, [r3, #12]
 8021680:	687a      	ldr	r2, [r7, #4]
 8021682:	429a      	cmp	r2, r3
 8021684:	d104      	bne.n	8021690 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	68da      	ldr	r2, [r3, #12]
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	60da      	str	r2, [r3, #12]
        break;
 802168e:	e005      	b.n	802169c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021690:	68fb      	ldr	r3, [r7, #12]
 8021692:	68db      	ldr	r3, [r3, #12]
 8021694:	60fb      	str	r3, [r7, #12]
 8021696:	68fb      	ldr	r3, [r7, #12]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d1eb      	bne.n	8021674 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 802169c:	6879      	ldr	r1, [r7, #4]
 802169e:	2000      	movs	r0, #0
 80216a0:	f7f8 f8c4 	bl	801982c <memp_free>
}
 80216a4:	3710      	adds	r7, #16
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd80      	pop	{r7, pc}
 80216aa:	bf00      	nop
 80216ac:	0802c49c 	.word	0x0802c49c
 80216b0:	0802c7e8 	.word	0x0802c7e8
 80216b4:	0802c4f0 	.word	0x0802c4f0
 80216b8:	2400bec0 	.word	0x2400bec0

080216bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80216bc:	b580      	push	{r7, lr}
 80216be:	b082      	sub	sp, #8
 80216c0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80216c2:	2000      	movs	r0, #0
 80216c4:	f7f8 f83c 	bl	8019740 <memp_malloc>
 80216c8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d007      	beq.n	80216e0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80216d0:	2220      	movs	r2, #32
 80216d2:	2100      	movs	r1, #0
 80216d4:	6878      	ldr	r0, [r7, #4]
 80216d6:	f003 ffb9 	bl	802564c <memset>
    pcb->ttl = UDP_TTL;
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	22ff      	movs	r2, #255	@ 0xff
 80216de:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80216e0:	687b      	ldr	r3, [r7, #4]
}
 80216e2:	4618      	mov	r0, r3
 80216e4:	3708      	adds	r7, #8
 80216e6:	46bd      	mov	sp, r7
 80216e8:	bd80      	pop	{r7, pc}

080216ea <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80216ea:	b580      	push	{r7, lr}
 80216ec:	b084      	sub	sp, #16
 80216ee:	af00      	add	r7, sp, #0
 80216f0:	4603      	mov	r3, r0
 80216f2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80216f4:	f7ff ffe2 	bl	80216bc <udp_new>
 80216f8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80216fa:	68fb      	ldr	r3, [r7, #12]
}
 80216fc:	4618      	mov	r0, r3
 80216fe:	3710      	adds	r7, #16
 8021700:	46bd      	mov	sp, r7
 8021702:	bd80      	pop	{r7, pc}

08021704 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021704:	b480      	push	{r7}
 8021706:	b085      	sub	sp, #20
 8021708:	af00      	add	r7, sp, #0
 802170a:	6078      	str	r0, [r7, #4]
 802170c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	2b00      	cmp	r3, #0
 8021712:	d01e      	beq.n	8021752 <udp_netif_ip_addr_changed+0x4e>
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	681b      	ldr	r3, [r3, #0]
 8021718:	2b00      	cmp	r3, #0
 802171a:	d01a      	beq.n	8021752 <udp_netif_ip_addr_changed+0x4e>
 802171c:	683b      	ldr	r3, [r7, #0]
 802171e:	2b00      	cmp	r3, #0
 8021720:	d017      	beq.n	8021752 <udp_netif_ip_addr_changed+0x4e>
 8021722:	683b      	ldr	r3, [r7, #0]
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	2b00      	cmp	r3, #0
 8021728:	d013      	beq.n	8021752 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802172a:	4b0d      	ldr	r3, [pc, #52]	@ (8021760 <udp_netif_ip_addr_changed+0x5c>)
 802172c:	681b      	ldr	r3, [r3, #0]
 802172e:	60fb      	str	r3, [r7, #12]
 8021730:	e00c      	b.n	802174c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021732:	68fb      	ldr	r3, [r7, #12]
 8021734:	681a      	ldr	r2, [r3, #0]
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	429a      	cmp	r2, r3
 802173c:	d103      	bne.n	8021746 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802173e:	683b      	ldr	r3, [r7, #0]
 8021740:	681a      	ldr	r2, [r3, #0]
 8021742:	68fb      	ldr	r3, [r7, #12]
 8021744:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021746:	68fb      	ldr	r3, [r7, #12]
 8021748:	68db      	ldr	r3, [r3, #12]
 802174a:	60fb      	str	r3, [r7, #12]
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	2b00      	cmp	r3, #0
 8021750:	d1ef      	bne.n	8021732 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021752:	bf00      	nop
 8021754:	3714      	adds	r7, #20
 8021756:	46bd      	mov	sp, r7
 8021758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802175c:	4770      	bx	lr
 802175e:	bf00      	nop
 8021760:	2400bec0 	.word	0x2400bec0

08021764 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021764:	b580      	push	{r7, lr}
 8021766:	b082      	sub	sp, #8
 8021768:	af00      	add	r7, sp, #0
 802176a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802176c:	4915      	ldr	r1, [pc, #84]	@ (80217c4 <etharp_free_entry+0x60>)
 802176e:	687a      	ldr	r2, [r7, #4]
 8021770:	4613      	mov	r3, r2
 8021772:	005b      	lsls	r3, r3, #1
 8021774:	4413      	add	r3, r2
 8021776:	00db      	lsls	r3, r3, #3
 8021778:	440b      	add	r3, r1
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	2b00      	cmp	r3, #0
 802177e:	d013      	beq.n	80217a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8021780:	4910      	ldr	r1, [pc, #64]	@ (80217c4 <etharp_free_entry+0x60>)
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	4613      	mov	r3, r2
 8021786:	005b      	lsls	r3, r3, #1
 8021788:	4413      	add	r3, r2
 802178a:	00db      	lsls	r3, r3, #3
 802178c:	440b      	add	r3, r1
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	4618      	mov	r0, r3
 8021792:	f7f8 ff21 	bl	801a5d8 <pbuf_free>
    arp_table[i].q = NULL;
 8021796:	490b      	ldr	r1, [pc, #44]	@ (80217c4 <etharp_free_entry+0x60>)
 8021798:	687a      	ldr	r2, [r7, #4]
 802179a:	4613      	mov	r3, r2
 802179c:	005b      	lsls	r3, r3, #1
 802179e:	4413      	add	r3, r2
 80217a0:	00db      	lsls	r3, r3, #3
 80217a2:	440b      	add	r3, r1
 80217a4:	2200      	movs	r2, #0
 80217a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80217a8:	4906      	ldr	r1, [pc, #24]	@ (80217c4 <etharp_free_entry+0x60>)
 80217aa:	687a      	ldr	r2, [r7, #4]
 80217ac:	4613      	mov	r3, r2
 80217ae:	005b      	lsls	r3, r3, #1
 80217b0:	4413      	add	r3, r2
 80217b2:	00db      	lsls	r3, r3, #3
 80217b4:	440b      	add	r3, r1
 80217b6:	3314      	adds	r3, #20
 80217b8:	2200      	movs	r2, #0
 80217ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80217bc:	bf00      	nop
 80217be:	3708      	adds	r7, #8
 80217c0:	46bd      	mov	sp, r7
 80217c2:	bd80      	pop	{r7, pc}
 80217c4:	2400bec4 	.word	0x2400bec4

080217c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b082      	sub	sp, #8
 80217cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80217ce:	2300      	movs	r3, #0
 80217d0:	607b      	str	r3, [r7, #4]
 80217d2:	e096      	b.n	8021902 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80217d4:	494f      	ldr	r1, [pc, #316]	@ (8021914 <etharp_tmr+0x14c>)
 80217d6:	687a      	ldr	r2, [r7, #4]
 80217d8:	4613      	mov	r3, r2
 80217da:	005b      	lsls	r3, r3, #1
 80217dc:	4413      	add	r3, r2
 80217de:	00db      	lsls	r3, r3, #3
 80217e0:	440b      	add	r3, r1
 80217e2:	3314      	adds	r3, #20
 80217e4:	781b      	ldrb	r3, [r3, #0]
 80217e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80217e8:	78fb      	ldrb	r3, [r7, #3]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	f000 8086 	beq.w	80218fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80217f0:	4948      	ldr	r1, [pc, #288]	@ (8021914 <etharp_tmr+0x14c>)
 80217f2:	687a      	ldr	r2, [r7, #4]
 80217f4:	4613      	mov	r3, r2
 80217f6:	005b      	lsls	r3, r3, #1
 80217f8:	4413      	add	r3, r2
 80217fa:	00db      	lsls	r3, r3, #3
 80217fc:	440b      	add	r3, r1
 80217fe:	3312      	adds	r3, #18
 8021800:	881b      	ldrh	r3, [r3, #0]
 8021802:	3301      	adds	r3, #1
 8021804:	b298      	uxth	r0, r3
 8021806:	4943      	ldr	r1, [pc, #268]	@ (8021914 <etharp_tmr+0x14c>)
 8021808:	687a      	ldr	r2, [r7, #4]
 802180a:	4613      	mov	r3, r2
 802180c:	005b      	lsls	r3, r3, #1
 802180e:	4413      	add	r3, r2
 8021810:	00db      	lsls	r3, r3, #3
 8021812:	440b      	add	r3, r1
 8021814:	3312      	adds	r3, #18
 8021816:	4602      	mov	r2, r0
 8021818:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802181a:	493e      	ldr	r1, [pc, #248]	@ (8021914 <etharp_tmr+0x14c>)
 802181c:	687a      	ldr	r2, [r7, #4]
 802181e:	4613      	mov	r3, r2
 8021820:	005b      	lsls	r3, r3, #1
 8021822:	4413      	add	r3, r2
 8021824:	00db      	lsls	r3, r3, #3
 8021826:	440b      	add	r3, r1
 8021828:	3312      	adds	r3, #18
 802182a:	881b      	ldrh	r3, [r3, #0]
 802182c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8021830:	d215      	bcs.n	802185e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021832:	4938      	ldr	r1, [pc, #224]	@ (8021914 <etharp_tmr+0x14c>)
 8021834:	687a      	ldr	r2, [r7, #4]
 8021836:	4613      	mov	r3, r2
 8021838:	005b      	lsls	r3, r3, #1
 802183a:	4413      	add	r3, r2
 802183c:	00db      	lsls	r3, r3, #3
 802183e:	440b      	add	r3, r1
 8021840:	3314      	adds	r3, #20
 8021842:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021844:	2b01      	cmp	r3, #1
 8021846:	d10e      	bne.n	8021866 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8021848:	4932      	ldr	r1, [pc, #200]	@ (8021914 <etharp_tmr+0x14c>)
 802184a:	687a      	ldr	r2, [r7, #4]
 802184c:	4613      	mov	r3, r2
 802184e:	005b      	lsls	r3, r3, #1
 8021850:	4413      	add	r3, r2
 8021852:	00db      	lsls	r3, r3, #3
 8021854:	440b      	add	r3, r1
 8021856:	3312      	adds	r3, #18
 8021858:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802185a:	2b04      	cmp	r3, #4
 802185c:	d903      	bls.n	8021866 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802185e:	6878      	ldr	r0, [r7, #4]
 8021860:	f7ff ff80 	bl	8021764 <etharp_free_entry>
 8021864:	e04a      	b.n	80218fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021866:	492b      	ldr	r1, [pc, #172]	@ (8021914 <etharp_tmr+0x14c>)
 8021868:	687a      	ldr	r2, [r7, #4]
 802186a:	4613      	mov	r3, r2
 802186c:	005b      	lsls	r3, r3, #1
 802186e:	4413      	add	r3, r2
 8021870:	00db      	lsls	r3, r3, #3
 8021872:	440b      	add	r3, r1
 8021874:	3314      	adds	r3, #20
 8021876:	781b      	ldrb	r3, [r3, #0]
 8021878:	2b03      	cmp	r3, #3
 802187a:	d10a      	bne.n	8021892 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802187c:	4925      	ldr	r1, [pc, #148]	@ (8021914 <etharp_tmr+0x14c>)
 802187e:	687a      	ldr	r2, [r7, #4]
 8021880:	4613      	mov	r3, r2
 8021882:	005b      	lsls	r3, r3, #1
 8021884:	4413      	add	r3, r2
 8021886:	00db      	lsls	r3, r3, #3
 8021888:	440b      	add	r3, r1
 802188a:	3314      	adds	r3, #20
 802188c:	2204      	movs	r2, #4
 802188e:	701a      	strb	r2, [r3, #0]
 8021890:	e034      	b.n	80218fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021892:	4920      	ldr	r1, [pc, #128]	@ (8021914 <etharp_tmr+0x14c>)
 8021894:	687a      	ldr	r2, [r7, #4]
 8021896:	4613      	mov	r3, r2
 8021898:	005b      	lsls	r3, r3, #1
 802189a:	4413      	add	r3, r2
 802189c:	00db      	lsls	r3, r3, #3
 802189e:	440b      	add	r3, r1
 80218a0:	3314      	adds	r3, #20
 80218a2:	781b      	ldrb	r3, [r3, #0]
 80218a4:	2b04      	cmp	r3, #4
 80218a6:	d10a      	bne.n	80218be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80218a8:	491a      	ldr	r1, [pc, #104]	@ (8021914 <etharp_tmr+0x14c>)
 80218aa:	687a      	ldr	r2, [r7, #4]
 80218ac:	4613      	mov	r3, r2
 80218ae:	005b      	lsls	r3, r3, #1
 80218b0:	4413      	add	r3, r2
 80218b2:	00db      	lsls	r3, r3, #3
 80218b4:	440b      	add	r3, r1
 80218b6:	3314      	adds	r3, #20
 80218b8:	2202      	movs	r2, #2
 80218ba:	701a      	strb	r2, [r3, #0]
 80218bc:	e01e      	b.n	80218fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80218be:	4915      	ldr	r1, [pc, #84]	@ (8021914 <etharp_tmr+0x14c>)
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	4613      	mov	r3, r2
 80218c4:	005b      	lsls	r3, r3, #1
 80218c6:	4413      	add	r3, r2
 80218c8:	00db      	lsls	r3, r3, #3
 80218ca:	440b      	add	r3, r1
 80218cc:	3314      	adds	r3, #20
 80218ce:	781b      	ldrb	r3, [r3, #0]
 80218d0:	2b01      	cmp	r3, #1
 80218d2:	d113      	bne.n	80218fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80218d4:	490f      	ldr	r1, [pc, #60]	@ (8021914 <etharp_tmr+0x14c>)
 80218d6:	687a      	ldr	r2, [r7, #4]
 80218d8:	4613      	mov	r3, r2
 80218da:	005b      	lsls	r3, r3, #1
 80218dc:	4413      	add	r3, r2
 80218de:	00db      	lsls	r3, r3, #3
 80218e0:	440b      	add	r3, r1
 80218e2:	3308      	adds	r3, #8
 80218e4:	6818      	ldr	r0, [r3, #0]
 80218e6:	687a      	ldr	r2, [r7, #4]
 80218e8:	4613      	mov	r3, r2
 80218ea:	005b      	lsls	r3, r3, #1
 80218ec:	4413      	add	r3, r2
 80218ee:	00db      	lsls	r3, r3, #3
 80218f0:	4a08      	ldr	r2, [pc, #32]	@ (8021914 <etharp_tmr+0x14c>)
 80218f2:	4413      	add	r3, r2
 80218f4:	3304      	adds	r3, #4
 80218f6:	4619      	mov	r1, r3
 80218f8:	f000 fe6e 	bl	80225d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	3301      	adds	r3, #1
 8021900:	607b      	str	r3, [r7, #4]
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	2b09      	cmp	r3, #9
 8021906:	f77f af65 	ble.w	80217d4 <etharp_tmr+0xc>
      }
    }
  }
}
 802190a:	bf00      	nop
 802190c:	bf00      	nop
 802190e:	3708      	adds	r7, #8
 8021910:	46bd      	mov	sp, r7
 8021912:	bd80      	pop	{r7, pc}
 8021914:	2400bec4 	.word	0x2400bec4

08021918 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021918:	b580      	push	{r7, lr}
 802191a:	b08a      	sub	sp, #40	@ 0x28
 802191c:	af00      	add	r7, sp, #0
 802191e:	60f8      	str	r0, [r7, #12]
 8021920:	460b      	mov	r3, r1
 8021922:	607a      	str	r2, [r7, #4]
 8021924:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021926:	230a      	movs	r3, #10
 8021928:	84fb      	strh	r3, [r7, #38]	@ 0x26
 802192a:	230a      	movs	r3, #10
 802192c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802192e:	230a      	movs	r3, #10
 8021930:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8021932:	2300      	movs	r3, #0
 8021934:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021936:	230a      	movs	r3, #10
 8021938:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802193a:	2300      	movs	r3, #0
 802193c:	83bb      	strh	r3, [r7, #28]
 802193e:	2300      	movs	r3, #0
 8021940:	837b      	strh	r3, [r7, #26]
 8021942:	2300      	movs	r3, #0
 8021944:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021946:	2300      	movs	r3, #0
 8021948:	843b      	strh	r3, [r7, #32]
 802194a:	e0ae      	b.n	8021aaa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802194c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021950:	49a6      	ldr	r1, [pc, #664]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021952:	4613      	mov	r3, r2
 8021954:	005b      	lsls	r3, r3, #1
 8021956:	4413      	add	r3, r2
 8021958:	00db      	lsls	r3, r3, #3
 802195a:	440b      	add	r3, r1
 802195c:	3314      	adds	r3, #20
 802195e:	781b      	ldrb	r3, [r3, #0]
 8021960:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021962:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021966:	2b0a      	cmp	r3, #10
 8021968:	d105      	bne.n	8021976 <etharp_find_entry+0x5e>
 802196a:	7dfb      	ldrb	r3, [r7, #23]
 802196c:	2b00      	cmp	r3, #0
 802196e:	d102      	bne.n	8021976 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8021970:	8c3b      	ldrh	r3, [r7, #32]
 8021972:	847b      	strh	r3, [r7, #34]	@ 0x22
 8021974:	e095      	b.n	8021aa2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8021976:	7dfb      	ldrb	r3, [r7, #23]
 8021978:	2b00      	cmp	r3, #0
 802197a:	f000 8092 	beq.w	8021aa2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802197e:	7dfb      	ldrb	r3, [r7, #23]
 8021980:	2b01      	cmp	r3, #1
 8021982:	d009      	beq.n	8021998 <etharp_find_entry+0x80>
 8021984:	7dfb      	ldrb	r3, [r7, #23]
 8021986:	2b01      	cmp	r3, #1
 8021988:	d806      	bhi.n	8021998 <etharp_find_entry+0x80>
 802198a:	4b99      	ldr	r3, [pc, #612]	@ (8021bf0 <etharp_find_entry+0x2d8>)
 802198c:	f240 1223 	movw	r2, #291	@ 0x123
 8021990:	4998      	ldr	r1, [pc, #608]	@ (8021bf4 <etharp_find_entry+0x2dc>)
 8021992:	4899      	ldr	r0, [pc, #612]	@ (8021bf8 <etharp_find_entry+0x2e0>)
 8021994:	f003 fd6e 	bl	8025474 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021998:	68fb      	ldr	r3, [r7, #12]
 802199a:	2b00      	cmp	r3, #0
 802199c:	d020      	beq.n	80219e0 <etharp_find_entry+0xc8>
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	6819      	ldr	r1, [r3, #0]
 80219a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219a6:	4891      	ldr	r0, [pc, #580]	@ (8021bec <etharp_find_entry+0x2d4>)
 80219a8:	4613      	mov	r3, r2
 80219aa:	005b      	lsls	r3, r3, #1
 80219ac:	4413      	add	r3, r2
 80219ae:	00db      	lsls	r3, r3, #3
 80219b0:	4403      	add	r3, r0
 80219b2:	3304      	adds	r3, #4
 80219b4:	681b      	ldr	r3, [r3, #0]
 80219b6:	4299      	cmp	r1, r3
 80219b8:	d112      	bne.n	80219e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d00c      	beq.n	80219da <etharp_find_entry+0xc2>
 80219c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219c4:	4989      	ldr	r1, [pc, #548]	@ (8021bec <etharp_find_entry+0x2d4>)
 80219c6:	4613      	mov	r3, r2
 80219c8:	005b      	lsls	r3, r3, #1
 80219ca:	4413      	add	r3, r2
 80219cc:	00db      	lsls	r3, r3, #3
 80219ce:	440b      	add	r3, r1
 80219d0:	3308      	adds	r3, #8
 80219d2:	681b      	ldr	r3, [r3, #0]
 80219d4:	687a      	ldr	r2, [r7, #4]
 80219d6:	429a      	cmp	r2, r3
 80219d8:	d102      	bne.n	80219e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80219da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80219de:	e100      	b.n	8021be2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80219e0:	7dfb      	ldrb	r3, [r7, #23]
 80219e2:	2b01      	cmp	r3, #1
 80219e4:	d140      	bne.n	8021a68 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80219e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80219ea:	4980      	ldr	r1, [pc, #512]	@ (8021bec <etharp_find_entry+0x2d4>)
 80219ec:	4613      	mov	r3, r2
 80219ee:	005b      	lsls	r3, r3, #1
 80219f0:	4413      	add	r3, r2
 80219f2:	00db      	lsls	r3, r3, #3
 80219f4:	440b      	add	r3, r1
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	d01a      	beq.n	8021a32 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80219fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a00:	497a      	ldr	r1, [pc, #488]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a02:	4613      	mov	r3, r2
 8021a04:	005b      	lsls	r3, r3, #1
 8021a06:	4413      	add	r3, r2
 8021a08:	00db      	lsls	r3, r3, #3
 8021a0a:	440b      	add	r3, r1
 8021a0c:	3312      	adds	r3, #18
 8021a0e:	881b      	ldrh	r3, [r3, #0]
 8021a10:	8bba      	ldrh	r2, [r7, #28]
 8021a12:	429a      	cmp	r2, r3
 8021a14:	d845      	bhi.n	8021aa2 <etharp_find_entry+0x18a>
            old_queue = i;
 8021a16:	8c3b      	ldrh	r3, [r7, #32]
 8021a18:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8021a1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a1e:	4973      	ldr	r1, [pc, #460]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a20:	4613      	mov	r3, r2
 8021a22:	005b      	lsls	r3, r3, #1
 8021a24:	4413      	add	r3, r2
 8021a26:	00db      	lsls	r3, r3, #3
 8021a28:	440b      	add	r3, r1
 8021a2a:	3312      	adds	r3, #18
 8021a2c:	881b      	ldrh	r3, [r3, #0]
 8021a2e:	83bb      	strh	r3, [r7, #28]
 8021a30:	e037      	b.n	8021aa2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8021a32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a36:	496d      	ldr	r1, [pc, #436]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a38:	4613      	mov	r3, r2
 8021a3a:	005b      	lsls	r3, r3, #1
 8021a3c:	4413      	add	r3, r2
 8021a3e:	00db      	lsls	r3, r3, #3
 8021a40:	440b      	add	r3, r1
 8021a42:	3312      	adds	r3, #18
 8021a44:	881b      	ldrh	r3, [r3, #0]
 8021a46:	8b7a      	ldrh	r2, [r7, #26]
 8021a48:	429a      	cmp	r2, r3
 8021a4a:	d82a      	bhi.n	8021aa2 <etharp_find_entry+0x18a>
            old_pending = i;
 8021a4c:	8c3b      	ldrh	r3, [r7, #32]
 8021a4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8021a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a54:	4965      	ldr	r1, [pc, #404]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a56:	4613      	mov	r3, r2
 8021a58:	005b      	lsls	r3, r3, #1
 8021a5a:	4413      	add	r3, r2
 8021a5c:	00db      	lsls	r3, r3, #3
 8021a5e:	440b      	add	r3, r1
 8021a60:	3312      	adds	r3, #18
 8021a62:	881b      	ldrh	r3, [r3, #0]
 8021a64:	837b      	strh	r3, [r7, #26]
 8021a66:	e01c      	b.n	8021aa2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8021a68:	7dfb      	ldrb	r3, [r7, #23]
 8021a6a:	2b01      	cmp	r3, #1
 8021a6c:	d919      	bls.n	8021aa2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a72:	495e      	ldr	r1, [pc, #376]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a74:	4613      	mov	r3, r2
 8021a76:	005b      	lsls	r3, r3, #1
 8021a78:	4413      	add	r3, r2
 8021a7a:	00db      	lsls	r3, r3, #3
 8021a7c:	440b      	add	r3, r1
 8021a7e:	3312      	adds	r3, #18
 8021a80:	881b      	ldrh	r3, [r3, #0]
 8021a82:	8b3a      	ldrh	r2, [r7, #24]
 8021a84:	429a      	cmp	r2, r3
 8021a86:	d80c      	bhi.n	8021aa2 <etharp_find_entry+0x18a>
            old_stable = i;
 8021a88:	8c3b      	ldrh	r3, [r7, #32]
 8021a8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8021a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021a90:	4956      	ldr	r1, [pc, #344]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021a92:	4613      	mov	r3, r2
 8021a94:	005b      	lsls	r3, r3, #1
 8021a96:	4413      	add	r3, r2
 8021a98:	00db      	lsls	r3, r3, #3
 8021a9a:	440b      	add	r3, r1
 8021a9c:	3312      	adds	r3, #18
 8021a9e:	881b      	ldrh	r3, [r3, #0]
 8021aa0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021aa2:	8c3b      	ldrh	r3, [r7, #32]
 8021aa4:	3301      	adds	r3, #1
 8021aa6:	b29b      	uxth	r3, r3
 8021aa8:	843b      	strh	r3, [r7, #32]
 8021aaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021aae:	2b09      	cmp	r3, #9
 8021ab0:	f77f af4c 	ble.w	802194c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021ab4:	7afb      	ldrb	r3, [r7, #11]
 8021ab6:	f003 0302 	and.w	r3, r3, #2
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d108      	bne.n	8021ad0 <etharp_find_entry+0x1b8>
 8021abe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021ac2:	2b0a      	cmp	r3, #10
 8021ac4:	d107      	bne.n	8021ad6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8021ac6:	7afb      	ldrb	r3, [r7, #11]
 8021ac8:	f003 0301 	and.w	r3, r3, #1
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d102      	bne.n	8021ad6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8021ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8021ad4:	e085      	b.n	8021be2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8021ad6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8021ada:	2b09      	cmp	r3, #9
 8021adc:	dc02      	bgt.n	8021ae4 <etharp_find_entry+0x1cc>
    i = empty;
 8021ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021ae0:	843b      	strh	r3, [r7, #32]
 8021ae2:	e039      	b.n	8021b58 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8021ae4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8021ae8:	2b09      	cmp	r3, #9
 8021aea:	dc14      	bgt.n	8021b16 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8021aec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8021aee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021af0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021af4:	493d      	ldr	r1, [pc, #244]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021af6:	4613      	mov	r3, r2
 8021af8:	005b      	lsls	r3, r3, #1
 8021afa:	4413      	add	r3, r2
 8021afc:	00db      	lsls	r3, r3, #3
 8021afe:	440b      	add	r3, r1
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d018      	beq.n	8021b38 <etharp_find_entry+0x220>
 8021b06:	4b3a      	ldr	r3, [pc, #232]	@ (8021bf0 <etharp_find_entry+0x2d8>)
 8021b08:	f240 126d 	movw	r2, #365	@ 0x16d
 8021b0c:	493b      	ldr	r1, [pc, #236]	@ (8021bfc <etharp_find_entry+0x2e4>)
 8021b0e:	483a      	ldr	r0, [pc, #232]	@ (8021bf8 <etharp_find_entry+0x2e0>)
 8021b10:	f003 fcb0 	bl	8025474 <iprintf>
 8021b14:	e010      	b.n	8021b38 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021b16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8021b1a:	2b09      	cmp	r3, #9
 8021b1c:	dc02      	bgt.n	8021b24 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8021b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021b20:	843b      	strh	r3, [r7, #32]
 8021b22:	e009      	b.n	8021b38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021b24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021b28:	2b09      	cmp	r3, #9
 8021b2a:	dc02      	bgt.n	8021b32 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8021b2c:	8bfb      	ldrh	r3, [r7, #30]
 8021b2e:	843b      	strh	r3, [r7, #32]
 8021b30:	e002      	b.n	8021b38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8021b32:	f04f 33ff 	mov.w	r3, #4294967295
 8021b36:	e054      	b.n	8021be2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021b38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021b3c:	2b09      	cmp	r3, #9
 8021b3e:	dd06      	ble.n	8021b4e <etharp_find_entry+0x236>
 8021b40:	4b2b      	ldr	r3, [pc, #172]	@ (8021bf0 <etharp_find_entry+0x2d8>)
 8021b42:	f240 127f 	movw	r2, #383	@ 0x17f
 8021b46:	492e      	ldr	r1, [pc, #184]	@ (8021c00 <etharp_find_entry+0x2e8>)
 8021b48:	482b      	ldr	r0, [pc, #172]	@ (8021bf8 <etharp_find_entry+0x2e0>)
 8021b4a:	f003 fc93 	bl	8025474 <iprintf>
    etharp_free_entry(i);
 8021b4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021b52:	4618      	mov	r0, r3
 8021b54:	f7ff fe06 	bl	8021764 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021b58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021b5c:	2b09      	cmp	r3, #9
 8021b5e:	dd06      	ble.n	8021b6e <etharp_find_entry+0x256>
 8021b60:	4b23      	ldr	r3, [pc, #140]	@ (8021bf0 <etharp_find_entry+0x2d8>)
 8021b62:	f240 1283 	movw	r2, #387	@ 0x183
 8021b66:	4926      	ldr	r1, [pc, #152]	@ (8021c00 <etharp_find_entry+0x2e8>)
 8021b68:	4823      	ldr	r0, [pc, #140]	@ (8021bf8 <etharp_find_entry+0x2e0>)
 8021b6a:	f003 fc83 	bl	8025474 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021b6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021b72:	491e      	ldr	r1, [pc, #120]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021b74:	4613      	mov	r3, r2
 8021b76:	005b      	lsls	r3, r3, #1
 8021b78:	4413      	add	r3, r2
 8021b7a:	00db      	lsls	r3, r3, #3
 8021b7c:	440b      	add	r3, r1
 8021b7e:	3314      	adds	r3, #20
 8021b80:	781b      	ldrb	r3, [r3, #0]
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	d006      	beq.n	8021b94 <etharp_find_entry+0x27c>
 8021b86:	4b1a      	ldr	r3, [pc, #104]	@ (8021bf0 <etharp_find_entry+0x2d8>)
 8021b88:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8021b8c:	491d      	ldr	r1, [pc, #116]	@ (8021c04 <etharp_find_entry+0x2ec>)
 8021b8e:	481a      	ldr	r0, [pc, #104]	@ (8021bf8 <etharp_find_entry+0x2e0>)
 8021b90:	f003 fc70 	bl	8025474 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d00b      	beq.n	8021bb2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021b9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	6819      	ldr	r1, [r3, #0]
 8021ba2:	4812      	ldr	r0, [pc, #72]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021ba4:	4613      	mov	r3, r2
 8021ba6:	005b      	lsls	r3, r3, #1
 8021ba8:	4413      	add	r3, r2
 8021baa:	00db      	lsls	r3, r3, #3
 8021bac:	4403      	add	r3, r0
 8021bae:	3304      	adds	r3, #4
 8021bb0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8021bb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021bb6:	490d      	ldr	r1, [pc, #52]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021bb8:	4613      	mov	r3, r2
 8021bba:	005b      	lsls	r3, r3, #1
 8021bbc:	4413      	add	r3, r2
 8021bbe:	00db      	lsls	r3, r3, #3
 8021bc0:	440b      	add	r3, r1
 8021bc2:	3312      	adds	r3, #18
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021bcc:	4907      	ldr	r1, [pc, #28]	@ (8021bec <etharp_find_entry+0x2d4>)
 8021bce:	4613      	mov	r3, r2
 8021bd0:	005b      	lsls	r3, r3, #1
 8021bd2:	4413      	add	r3, r2
 8021bd4:	00db      	lsls	r3, r3, #3
 8021bd6:	440b      	add	r3, r1
 8021bd8:	3308      	adds	r3, #8
 8021bda:	687a      	ldr	r2, [r7, #4]
 8021bdc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8021bde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8021be2:	4618      	mov	r0, r3
 8021be4:	3728      	adds	r7, #40	@ 0x28
 8021be6:	46bd      	mov	sp, r7
 8021be8:	bd80      	pop	{r7, pc}
 8021bea:	bf00      	nop
 8021bec:	2400bec4 	.word	0x2400bec4
 8021bf0:	0802c800 	.word	0x0802c800
 8021bf4:	0802c838 	.word	0x0802c838
 8021bf8:	0802c878 	.word	0x0802c878
 8021bfc:	0802c8a0 	.word	0x0802c8a0
 8021c00:	0802c8b8 	.word	0x0802c8b8
 8021c04:	0802c8cc 	.word	0x0802c8cc

08021c08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8021c08:	b580      	push	{r7, lr}
 8021c0a:	b088      	sub	sp, #32
 8021c0c:	af02      	add	r7, sp, #8
 8021c0e:	60f8      	str	r0, [r7, #12]
 8021c10:	60b9      	str	r1, [r7, #8]
 8021c12:	607a      	str	r2, [r7, #4]
 8021c14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021c16:	68fb      	ldr	r3, [r7, #12]
 8021c18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021c1c:	2b06      	cmp	r3, #6
 8021c1e:	d006      	beq.n	8021c2e <etharp_update_arp_entry+0x26>
 8021c20:	4b48      	ldr	r3, [pc, #288]	@ (8021d44 <etharp_update_arp_entry+0x13c>)
 8021c22:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8021c26:	4948      	ldr	r1, [pc, #288]	@ (8021d48 <etharp_update_arp_entry+0x140>)
 8021c28:	4848      	ldr	r0, [pc, #288]	@ (8021d4c <etharp_update_arp_entry+0x144>)
 8021c2a:	f003 fc23 	bl	8025474 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8021c2e:	68bb      	ldr	r3, [r7, #8]
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d012      	beq.n	8021c5a <etharp_update_arp_entry+0x52>
 8021c34:	68bb      	ldr	r3, [r7, #8]
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	2b00      	cmp	r3, #0
 8021c3a:	d00e      	beq.n	8021c5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021c3c:	68bb      	ldr	r3, [r7, #8]
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	68f9      	ldr	r1, [r7, #12]
 8021c42:	4618      	mov	r0, r3
 8021c44:	f001 f924 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8021c48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d105      	bne.n	8021c5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8021c4e:	68bb      	ldr	r3, [r7, #8]
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021c56:	2be0      	cmp	r3, #224	@ 0xe0
 8021c58:	d102      	bne.n	8021c60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021c5a:	f06f 030f 	mvn.w	r3, #15
 8021c5e:	e06c      	b.n	8021d3a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8021c60:	78fb      	ldrb	r3, [r7, #3]
 8021c62:	68fa      	ldr	r2, [r7, #12]
 8021c64:	4619      	mov	r1, r3
 8021c66:	68b8      	ldr	r0, [r7, #8]
 8021c68:	f7ff fe56 	bl	8021918 <etharp_find_entry>
 8021c6c:	4603      	mov	r3, r0
 8021c6e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8021c70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	da02      	bge.n	8021c7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8021c78:	8afb      	ldrh	r3, [r7, #22]
 8021c7a:	b25b      	sxtb	r3, r3
 8021c7c:	e05d      	b.n	8021d3a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021c7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021c82:	4933      	ldr	r1, [pc, #204]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021c84:	4613      	mov	r3, r2
 8021c86:	005b      	lsls	r3, r3, #1
 8021c88:	4413      	add	r3, r2
 8021c8a:	00db      	lsls	r3, r3, #3
 8021c8c:	440b      	add	r3, r1
 8021c8e:	3314      	adds	r3, #20
 8021c90:	2202      	movs	r2, #2
 8021c92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8021c94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021c98:	492d      	ldr	r1, [pc, #180]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021c9a:	4613      	mov	r3, r2
 8021c9c:	005b      	lsls	r3, r3, #1
 8021c9e:	4413      	add	r3, r2
 8021ca0:	00db      	lsls	r3, r3, #3
 8021ca2:	440b      	add	r3, r1
 8021ca4:	3308      	adds	r3, #8
 8021ca6:	68fa      	ldr	r2, [r7, #12]
 8021ca8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021caa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021cae:	4613      	mov	r3, r2
 8021cb0:	005b      	lsls	r3, r3, #1
 8021cb2:	4413      	add	r3, r2
 8021cb4:	00db      	lsls	r3, r3, #3
 8021cb6:	3308      	adds	r3, #8
 8021cb8:	4a25      	ldr	r2, [pc, #148]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021cba:	4413      	add	r3, r2
 8021cbc:	3304      	adds	r3, #4
 8021cbe:	2206      	movs	r2, #6
 8021cc0:	6879      	ldr	r1, [r7, #4]
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	f003 fd63 	bl	802578e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8021cc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021ccc:	4920      	ldr	r1, [pc, #128]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021cce:	4613      	mov	r3, r2
 8021cd0:	005b      	lsls	r3, r3, #1
 8021cd2:	4413      	add	r3, r2
 8021cd4:	00db      	lsls	r3, r3, #3
 8021cd6:	440b      	add	r3, r1
 8021cd8:	3312      	adds	r3, #18
 8021cda:	2200      	movs	r2, #0
 8021cdc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8021cde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021ce2:	491b      	ldr	r1, [pc, #108]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021ce4:	4613      	mov	r3, r2
 8021ce6:	005b      	lsls	r3, r3, #1
 8021ce8:	4413      	add	r3, r2
 8021cea:	00db      	lsls	r3, r3, #3
 8021cec:	440b      	add	r3, r1
 8021cee:	681b      	ldr	r3, [r3, #0]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d021      	beq.n	8021d38 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8021cf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021cf8:	4915      	ldr	r1, [pc, #84]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021cfa:	4613      	mov	r3, r2
 8021cfc:	005b      	lsls	r3, r3, #1
 8021cfe:	4413      	add	r3, r2
 8021d00:	00db      	lsls	r3, r3, #3
 8021d02:	440b      	add	r3, r1
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8021d08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021d0c:	4910      	ldr	r1, [pc, #64]	@ (8021d50 <etharp_update_arp_entry+0x148>)
 8021d0e:	4613      	mov	r3, r2
 8021d10:	005b      	lsls	r3, r3, #1
 8021d12:	4413      	add	r3, r2
 8021d14:	00db      	lsls	r3, r3, #3
 8021d16:	440b      	add	r3, r1
 8021d18:	2200      	movs	r2, #0
 8021d1a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8021d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021d26:	9300      	str	r3, [sp, #0]
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	6939      	ldr	r1, [r7, #16]
 8021d2c:	68f8      	ldr	r0, [r7, #12]
 8021d2e:	f002 f8fb 	bl	8023f28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8021d32:	6938      	ldr	r0, [r7, #16]
 8021d34:	f7f8 fc50 	bl	801a5d8 <pbuf_free>
  }
  return ERR_OK;
 8021d38:	2300      	movs	r3, #0
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	3718      	adds	r7, #24
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	bd80      	pop	{r7, pc}
 8021d42:	bf00      	nop
 8021d44:	0802c800 	.word	0x0802c800
 8021d48:	0802c8f8 	.word	0x0802c8f8
 8021d4c:	0802c878 	.word	0x0802c878
 8021d50:	2400bec4 	.word	0x2400bec4

08021d54 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8021d54:	b580      	push	{r7, lr}
 8021d56:	b084      	sub	sp, #16
 8021d58:	af00      	add	r7, sp, #0
 8021d5a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d5c:	2300      	movs	r3, #0
 8021d5e:	60fb      	str	r3, [r7, #12]
 8021d60:	e01e      	b.n	8021da0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8021d62:	4913      	ldr	r1, [pc, #76]	@ (8021db0 <etharp_cleanup_netif+0x5c>)
 8021d64:	68fa      	ldr	r2, [r7, #12]
 8021d66:	4613      	mov	r3, r2
 8021d68:	005b      	lsls	r3, r3, #1
 8021d6a:	4413      	add	r3, r2
 8021d6c:	00db      	lsls	r3, r3, #3
 8021d6e:	440b      	add	r3, r1
 8021d70:	3314      	adds	r3, #20
 8021d72:	781b      	ldrb	r3, [r3, #0]
 8021d74:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021d76:	7afb      	ldrb	r3, [r7, #11]
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d00e      	beq.n	8021d9a <etharp_cleanup_netif+0x46>
 8021d7c:	490c      	ldr	r1, [pc, #48]	@ (8021db0 <etharp_cleanup_netif+0x5c>)
 8021d7e:	68fa      	ldr	r2, [r7, #12]
 8021d80:	4613      	mov	r3, r2
 8021d82:	005b      	lsls	r3, r3, #1
 8021d84:	4413      	add	r3, r2
 8021d86:	00db      	lsls	r3, r3, #3
 8021d88:	440b      	add	r3, r1
 8021d8a:	3308      	adds	r3, #8
 8021d8c:	681b      	ldr	r3, [r3, #0]
 8021d8e:	687a      	ldr	r2, [r7, #4]
 8021d90:	429a      	cmp	r2, r3
 8021d92:	d102      	bne.n	8021d9a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8021d94:	68f8      	ldr	r0, [r7, #12]
 8021d96:	f7ff fce5 	bl	8021764 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d9a:	68fb      	ldr	r3, [r7, #12]
 8021d9c:	3301      	adds	r3, #1
 8021d9e:	60fb      	str	r3, [r7, #12]
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	2b09      	cmp	r3, #9
 8021da4:	dddd      	ble.n	8021d62 <etharp_cleanup_netif+0xe>
    }
  }
}
 8021da6:	bf00      	nop
 8021da8:	bf00      	nop
 8021daa:	3710      	adds	r7, #16
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	2400bec4 	.word	0x2400bec4

08021db4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8021db4:	b5b0      	push	{r4, r5, r7, lr}
 8021db6:	b08a      	sub	sp, #40	@ 0x28
 8021db8:	af04      	add	r7, sp, #16
 8021dba:	6078      	str	r0, [r7, #4]
 8021dbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021dbe:	683b      	ldr	r3, [r7, #0]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d107      	bne.n	8021dd4 <etharp_input+0x20>
 8021dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8021ebc <etharp_input+0x108>)
 8021dc6:	f240 228a 	movw	r2, #650	@ 0x28a
 8021dca:	493d      	ldr	r1, [pc, #244]	@ (8021ec0 <etharp_input+0x10c>)
 8021dcc:	483d      	ldr	r0, [pc, #244]	@ (8021ec4 <etharp_input+0x110>)
 8021dce:	f003 fb51 	bl	8025474 <iprintf>
 8021dd2:	e06f      	b.n	8021eb4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	685b      	ldr	r3, [r3, #4]
 8021dd8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021dda:	693b      	ldr	r3, [r7, #16]
 8021ddc:	881b      	ldrh	r3, [r3, #0]
 8021dde:	b29b      	uxth	r3, r3
 8021de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021de4:	d10c      	bne.n	8021e00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021de6:	693b      	ldr	r3, [r7, #16]
 8021de8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021dea:	2b06      	cmp	r3, #6
 8021dec:	d108      	bne.n	8021e00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021dee:	693b      	ldr	r3, [r7, #16]
 8021df0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021df2:	2b04      	cmp	r3, #4
 8021df4:	d104      	bne.n	8021e00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8021df6:	693b      	ldr	r3, [r7, #16]
 8021df8:	885b      	ldrh	r3, [r3, #2]
 8021dfa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021dfc:	2b08      	cmp	r3, #8
 8021dfe:	d003      	beq.n	8021e08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8021e00:	6878      	ldr	r0, [r7, #4]
 8021e02:	f7f8 fbe9 	bl	801a5d8 <pbuf_free>
    return;
 8021e06:	e055      	b.n	8021eb4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021e08:	693b      	ldr	r3, [r7, #16]
 8021e0a:	330e      	adds	r3, #14
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8021e10:	693b      	ldr	r3, [r7, #16]
 8021e12:	3318      	adds	r3, #24
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021e18:	683b      	ldr	r3, [r7, #0]
 8021e1a:	3304      	adds	r3, #4
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d102      	bne.n	8021e28 <etharp_input+0x74>
    for_us = 0;
 8021e22:	2300      	movs	r3, #0
 8021e24:	75fb      	strb	r3, [r7, #23]
 8021e26:	e009      	b.n	8021e3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021e28:	68ba      	ldr	r2, [r7, #8]
 8021e2a:	683b      	ldr	r3, [r7, #0]
 8021e2c:	3304      	adds	r3, #4
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	429a      	cmp	r2, r3
 8021e32:	bf0c      	ite	eq
 8021e34:	2301      	moveq	r3, #1
 8021e36:	2300      	movne	r3, #0
 8021e38:	b2db      	uxtb	r3, r3
 8021e3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021e3c:	693b      	ldr	r3, [r7, #16]
 8021e3e:	f103 0208 	add.w	r2, r3, #8
 8021e42:	7dfb      	ldrb	r3, [r7, #23]
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d001      	beq.n	8021e4c <etharp_input+0x98>
 8021e48:	2301      	movs	r3, #1
 8021e4a:	e000      	b.n	8021e4e <etharp_input+0x9a>
 8021e4c:	2302      	movs	r3, #2
 8021e4e:	f107 010c 	add.w	r1, r7, #12
 8021e52:	6838      	ldr	r0, [r7, #0]
 8021e54:	f7ff fed8 	bl	8021c08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8021e58:	693b      	ldr	r3, [r7, #16]
 8021e5a:	88db      	ldrh	r3, [r3, #6]
 8021e5c:	b29b      	uxth	r3, r3
 8021e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021e62:	d003      	beq.n	8021e6c <etharp_input+0xb8>
 8021e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021e68:	d01e      	beq.n	8021ea8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8021e6a:	e020      	b.n	8021eae <etharp_input+0xfa>
      if (for_us) {
 8021e6c:	7dfb      	ldrb	r3, [r7, #23]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d01c      	beq.n	8021eac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021e72:	683b      	ldr	r3, [r7, #0]
 8021e74:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8021e78:	693b      	ldr	r3, [r7, #16]
 8021e7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021e7e:	683b      	ldr	r3, [r7, #0]
 8021e80:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8021e84:	683b      	ldr	r3, [r7, #0]
 8021e86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8021e88:	693a      	ldr	r2, [r7, #16]
 8021e8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8021e8c:	2102      	movs	r1, #2
 8021e8e:	9103      	str	r1, [sp, #12]
 8021e90:	f107 010c 	add.w	r1, r7, #12
 8021e94:	9102      	str	r1, [sp, #8]
 8021e96:	9201      	str	r2, [sp, #4]
 8021e98:	9300      	str	r3, [sp, #0]
 8021e9a:	462b      	mov	r3, r5
 8021e9c:	4622      	mov	r2, r4
 8021e9e:	4601      	mov	r1, r0
 8021ea0:	6838      	ldr	r0, [r7, #0]
 8021ea2:	f000 faeb 	bl	802247c <etharp_raw>
      break;
 8021ea6:	e001      	b.n	8021eac <etharp_input+0xf8>
      break;
 8021ea8:	bf00      	nop
 8021eaa:	e000      	b.n	8021eae <etharp_input+0xfa>
      break;
 8021eac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8021eae:	6878      	ldr	r0, [r7, #4]
 8021eb0:	f7f8 fb92 	bl	801a5d8 <pbuf_free>
}
 8021eb4:	3718      	adds	r7, #24
 8021eb6:	46bd      	mov	sp, r7
 8021eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8021eba:	bf00      	nop
 8021ebc:	0802c800 	.word	0x0802c800
 8021ec0:	0802c950 	.word	0x0802c950
 8021ec4:	0802c878 	.word	0x0802c878

08021ec8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8021ec8:	b580      	push	{r7, lr}
 8021eca:	b086      	sub	sp, #24
 8021ecc:	af02      	add	r7, sp, #8
 8021ece:	60f8      	str	r0, [r7, #12]
 8021ed0:	60b9      	str	r1, [r7, #8]
 8021ed2:	4613      	mov	r3, r2
 8021ed4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021ed6:	79fa      	ldrb	r2, [r7, #7]
 8021ed8:	4944      	ldr	r1, [pc, #272]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021eda:	4613      	mov	r3, r2
 8021edc:	005b      	lsls	r3, r3, #1
 8021ede:	4413      	add	r3, r2
 8021ee0:	00db      	lsls	r3, r3, #3
 8021ee2:	440b      	add	r3, r1
 8021ee4:	3314      	adds	r3, #20
 8021ee6:	781b      	ldrb	r3, [r3, #0]
 8021ee8:	2b01      	cmp	r3, #1
 8021eea:	d806      	bhi.n	8021efa <etharp_output_to_arp_index+0x32>
 8021eec:	4b40      	ldr	r3, [pc, #256]	@ (8021ff0 <etharp_output_to_arp_index+0x128>)
 8021eee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8021ef2:	4940      	ldr	r1, [pc, #256]	@ (8021ff4 <etharp_output_to_arp_index+0x12c>)
 8021ef4:	4840      	ldr	r0, [pc, #256]	@ (8021ff8 <etharp_output_to_arp_index+0x130>)
 8021ef6:	f003 fabd 	bl	8025474 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021efa:	79fa      	ldrb	r2, [r7, #7]
 8021efc:	493b      	ldr	r1, [pc, #236]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021efe:	4613      	mov	r3, r2
 8021f00:	005b      	lsls	r3, r3, #1
 8021f02:	4413      	add	r3, r2
 8021f04:	00db      	lsls	r3, r3, #3
 8021f06:	440b      	add	r3, r1
 8021f08:	3314      	adds	r3, #20
 8021f0a:	781b      	ldrb	r3, [r3, #0]
 8021f0c:	2b02      	cmp	r3, #2
 8021f0e:	d153      	bne.n	8021fb8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021f10:	79fa      	ldrb	r2, [r7, #7]
 8021f12:	4936      	ldr	r1, [pc, #216]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f14:	4613      	mov	r3, r2
 8021f16:	005b      	lsls	r3, r3, #1
 8021f18:	4413      	add	r3, r2
 8021f1a:	00db      	lsls	r3, r3, #3
 8021f1c:	440b      	add	r3, r1
 8021f1e:	3312      	adds	r3, #18
 8021f20:	881b      	ldrh	r3, [r3, #0]
 8021f22:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8021f26:	d919      	bls.n	8021f5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021f28:	79fa      	ldrb	r2, [r7, #7]
 8021f2a:	4613      	mov	r3, r2
 8021f2c:	005b      	lsls	r3, r3, #1
 8021f2e:	4413      	add	r3, r2
 8021f30:	00db      	lsls	r3, r3, #3
 8021f32:	4a2e      	ldr	r2, [pc, #184]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f34:	4413      	add	r3, r2
 8021f36:	3304      	adds	r3, #4
 8021f38:	4619      	mov	r1, r3
 8021f3a:	68f8      	ldr	r0, [r7, #12]
 8021f3c:	f000 fb4c 	bl	80225d8 <etharp_request>
 8021f40:	4603      	mov	r3, r0
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d138      	bne.n	8021fb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021f46:	79fa      	ldrb	r2, [r7, #7]
 8021f48:	4928      	ldr	r1, [pc, #160]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f4a:	4613      	mov	r3, r2
 8021f4c:	005b      	lsls	r3, r3, #1
 8021f4e:	4413      	add	r3, r2
 8021f50:	00db      	lsls	r3, r3, #3
 8021f52:	440b      	add	r3, r1
 8021f54:	3314      	adds	r3, #20
 8021f56:	2203      	movs	r2, #3
 8021f58:	701a      	strb	r2, [r3, #0]
 8021f5a:	e02d      	b.n	8021fb8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021f5c:	79fa      	ldrb	r2, [r7, #7]
 8021f5e:	4923      	ldr	r1, [pc, #140]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f60:	4613      	mov	r3, r2
 8021f62:	005b      	lsls	r3, r3, #1
 8021f64:	4413      	add	r3, r2
 8021f66:	00db      	lsls	r3, r3, #3
 8021f68:	440b      	add	r3, r1
 8021f6a:	3312      	adds	r3, #18
 8021f6c:	881b      	ldrh	r3, [r3, #0]
 8021f6e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8021f72:	d321      	bcc.n	8021fb8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021f74:	79fa      	ldrb	r2, [r7, #7]
 8021f76:	4613      	mov	r3, r2
 8021f78:	005b      	lsls	r3, r3, #1
 8021f7a:	4413      	add	r3, r2
 8021f7c:	00db      	lsls	r3, r3, #3
 8021f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f80:	4413      	add	r3, r2
 8021f82:	1d19      	adds	r1, r3, #4
 8021f84:	79fa      	ldrb	r2, [r7, #7]
 8021f86:	4613      	mov	r3, r2
 8021f88:	005b      	lsls	r3, r3, #1
 8021f8a:	4413      	add	r3, r2
 8021f8c:	00db      	lsls	r3, r3, #3
 8021f8e:	3308      	adds	r3, #8
 8021f90:	4a16      	ldr	r2, [pc, #88]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021f92:	4413      	add	r3, r2
 8021f94:	3304      	adds	r3, #4
 8021f96:	461a      	mov	r2, r3
 8021f98:	68f8      	ldr	r0, [r7, #12]
 8021f9a:	f000 fafb 	bl	8022594 <etharp_request_dst>
 8021f9e:	4603      	mov	r3, r0
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d109      	bne.n	8021fb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021fa4:	79fa      	ldrb	r2, [r7, #7]
 8021fa6:	4911      	ldr	r1, [pc, #68]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021fa8:	4613      	mov	r3, r2
 8021faa:	005b      	lsls	r3, r3, #1
 8021fac:	4413      	add	r3, r2
 8021fae:	00db      	lsls	r3, r3, #3
 8021fb0:	440b      	add	r3, r1
 8021fb2:	3314      	adds	r3, #20
 8021fb4:	2203      	movs	r2, #3
 8021fb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021fb8:	68fb      	ldr	r3, [r7, #12]
 8021fba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8021fbe:	79fa      	ldrb	r2, [r7, #7]
 8021fc0:	4613      	mov	r3, r2
 8021fc2:	005b      	lsls	r3, r3, #1
 8021fc4:	4413      	add	r3, r2
 8021fc6:	00db      	lsls	r3, r3, #3
 8021fc8:	3308      	adds	r3, #8
 8021fca:	4a08      	ldr	r2, [pc, #32]	@ (8021fec <etharp_output_to_arp_index+0x124>)
 8021fcc:	4413      	add	r3, r2
 8021fce:	3304      	adds	r3, #4
 8021fd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021fd4:	9200      	str	r2, [sp, #0]
 8021fd6:	460a      	mov	r2, r1
 8021fd8:	68b9      	ldr	r1, [r7, #8]
 8021fda:	68f8      	ldr	r0, [r7, #12]
 8021fdc:	f001 ffa4 	bl	8023f28 <ethernet_output>
 8021fe0:	4603      	mov	r3, r0
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3710      	adds	r7, #16
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	2400bec4 	.word	0x2400bec4
 8021ff0:	0802c800 	.word	0x0802c800
 8021ff4:	0802c970 	.word	0x0802c970
 8021ff8:	0802c878 	.word	0x0802c878

08021ffc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b08a      	sub	sp, #40	@ 0x28
 8022000:	af02      	add	r7, sp, #8
 8022002:	60f8      	str	r0, [r7, #12]
 8022004:	60b9      	str	r1, [r7, #8]
 8022006:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	2b00      	cmp	r3, #0
 8022010:	d106      	bne.n	8022020 <etharp_output+0x24>
 8022012:	4b73      	ldr	r3, [pc, #460]	@ (80221e0 <etharp_output+0x1e4>)
 8022014:	f240 321e 	movw	r2, #798	@ 0x31e
 8022018:	4972      	ldr	r1, [pc, #456]	@ (80221e4 <etharp_output+0x1e8>)
 802201a:	4873      	ldr	r0, [pc, #460]	@ (80221e8 <etharp_output+0x1ec>)
 802201c:	f003 fa2a 	bl	8025474 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022020:	68bb      	ldr	r3, [r7, #8]
 8022022:	2b00      	cmp	r3, #0
 8022024:	d106      	bne.n	8022034 <etharp_output+0x38>
 8022026:	4b6e      	ldr	r3, [pc, #440]	@ (80221e0 <etharp_output+0x1e4>)
 8022028:	f240 321f 	movw	r2, #799	@ 0x31f
 802202c:	496f      	ldr	r1, [pc, #444]	@ (80221ec <etharp_output+0x1f0>)
 802202e:	486e      	ldr	r0, [pc, #440]	@ (80221e8 <etharp_output+0x1ec>)
 8022030:	f003 fa20 	bl	8025474 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	2b00      	cmp	r3, #0
 8022038:	d106      	bne.n	8022048 <etharp_output+0x4c>
 802203a:	4b69      	ldr	r3, [pc, #420]	@ (80221e0 <etharp_output+0x1e4>)
 802203c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8022040:	496b      	ldr	r1, [pc, #428]	@ (80221f0 <etharp_output+0x1f4>)
 8022042:	4869      	ldr	r0, [pc, #420]	@ (80221e8 <etharp_output+0x1ec>)
 8022044:	f003 fa16 	bl	8025474 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	681b      	ldr	r3, [r3, #0]
 802204c:	68f9      	ldr	r1, [r7, #12]
 802204e:	4618      	mov	r0, r3
 8022050:	f000 ff1e 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8022054:	4603      	mov	r3, r0
 8022056:	2b00      	cmp	r3, #0
 8022058:	d002      	beq.n	8022060 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802205a:	4b66      	ldr	r3, [pc, #408]	@ (80221f4 <etharp_output+0x1f8>)
 802205c:	61fb      	str	r3, [r7, #28]
 802205e:	e0af      	b.n	80221c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022068:	2be0      	cmp	r3, #224	@ 0xe0
 802206a:	d118      	bne.n	802209e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802206c:	2301      	movs	r3, #1
 802206e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8022070:	2300      	movs	r3, #0
 8022072:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022074:	235e      	movs	r3, #94	@ 0x5e
 8022076:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	3301      	adds	r3, #1
 802207c:	781b      	ldrb	r3, [r3, #0]
 802207e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022082:	b2db      	uxtb	r3, r3
 8022084:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	3302      	adds	r3, #2
 802208a:	781b      	ldrb	r3, [r3, #0]
 802208c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	3303      	adds	r3, #3
 8022092:	781b      	ldrb	r3, [r3, #0]
 8022094:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8022096:	f107 0310 	add.w	r3, r7, #16
 802209a:	61fb      	str	r3, [r7, #28]
 802209c:	e090      	b.n	80221c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	681a      	ldr	r2, [r3, #0]
 80220a2:	68fb      	ldr	r3, [r7, #12]
 80220a4:	3304      	adds	r3, #4
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	405a      	eors	r2, r3
 80220aa:	68fb      	ldr	r3, [r7, #12]
 80220ac:	3308      	adds	r3, #8
 80220ae:	681b      	ldr	r3, [r3, #0]
 80220b0:	4013      	ands	r3, r2
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d012      	beq.n	80220dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80220b6:	687b      	ldr	r3, [r7, #4]
 80220b8:	681b      	ldr	r3, [r3, #0]
 80220ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80220bc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80220c0:	4293      	cmp	r3, r2
 80220c2:	d00b      	beq.n	80220dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	330c      	adds	r3, #12
 80220c8:	681b      	ldr	r3, [r3, #0]
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d003      	beq.n	80220d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80220ce:	68fb      	ldr	r3, [r7, #12]
 80220d0:	330c      	adds	r3, #12
 80220d2:	61bb      	str	r3, [r7, #24]
 80220d4:	e002      	b.n	80220dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80220d6:	f06f 0303 	mvn.w	r3, #3
 80220da:	e07d      	b.n	80221d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80220dc:	4b46      	ldr	r3, [pc, #280]	@ (80221f8 <etharp_output+0x1fc>)
 80220de:	781b      	ldrb	r3, [r3, #0]
 80220e0:	4619      	mov	r1, r3
 80220e2:	4a46      	ldr	r2, [pc, #280]	@ (80221fc <etharp_output+0x200>)
 80220e4:	460b      	mov	r3, r1
 80220e6:	005b      	lsls	r3, r3, #1
 80220e8:	440b      	add	r3, r1
 80220ea:	00db      	lsls	r3, r3, #3
 80220ec:	4413      	add	r3, r2
 80220ee:	3314      	adds	r3, #20
 80220f0:	781b      	ldrb	r3, [r3, #0]
 80220f2:	2b01      	cmp	r3, #1
 80220f4:	d925      	bls.n	8022142 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80220f6:	4b40      	ldr	r3, [pc, #256]	@ (80221f8 <etharp_output+0x1fc>)
 80220f8:	781b      	ldrb	r3, [r3, #0]
 80220fa:	4619      	mov	r1, r3
 80220fc:	4a3f      	ldr	r2, [pc, #252]	@ (80221fc <etharp_output+0x200>)
 80220fe:	460b      	mov	r3, r1
 8022100:	005b      	lsls	r3, r3, #1
 8022102:	440b      	add	r3, r1
 8022104:	00db      	lsls	r3, r3, #3
 8022106:	4413      	add	r3, r2
 8022108:	3308      	adds	r3, #8
 802210a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802210c:	68fa      	ldr	r2, [r7, #12]
 802210e:	429a      	cmp	r2, r3
 8022110:	d117      	bne.n	8022142 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8022112:	69bb      	ldr	r3, [r7, #24]
 8022114:	681a      	ldr	r2, [r3, #0]
 8022116:	4b38      	ldr	r3, [pc, #224]	@ (80221f8 <etharp_output+0x1fc>)
 8022118:	781b      	ldrb	r3, [r3, #0]
 802211a:	4618      	mov	r0, r3
 802211c:	4937      	ldr	r1, [pc, #220]	@ (80221fc <etharp_output+0x200>)
 802211e:	4603      	mov	r3, r0
 8022120:	005b      	lsls	r3, r3, #1
 8022122:	4403      	add	r3, r0
 8022124:	00db      	lsls	r3, r3, #3
 8022126:	440b      	add	r3, r1
 8022128:	3304      	adds	r3, #4
 802212a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802212c:	429a      	cmp	r2, r3
 802212e:	d108      	bne.n	8022142 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8022130:	4b31      	ldr	r3, [pc, #196]	@ (80221f8 <etharp_output+0x1fc>)
 8022132:	781b      	ldrb	r3, [r3, #0]
 8022134:	461a      	mov	r2, r3
 8022136:	68b9      	ldr	r1, [r7, #8]
 8022138:	68f8      	ldr	r0, [r7, #12]
 802213a:	f7ff fec5 	bl	8021ec8 <etharp_output_to_arp_index>
 802213e:	4603      	mov	r3, r0
 8022140:	e04a      	b.n	80221d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022142:	2300      	movs	r3, #0
 8022144:	75fb      	strb	r3, [r7, #23]
 8022146:	e031      	b.n	80221ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022148:	7dfa      	ldrb	r2, [r7, #23]
 802214a:	492c      	ldr	r1, [pc, #176]	@ (80221fc <etharp_output+0x200>)
 802214c:	4613      	mov	r3, r2
 802214e:	005b      	lsls	r3, r3, #1
 8022150:	4413      	add	r3, r2
 8022152:	00db      	lsls	r3, r3, #3
 8022154:	440b      	add	r3, r1
 8022156:	3314      	adds	r3, #20
 8022158:	781b      	ldrb	r3, [r3, #0]
 802215a:	2b01      	cmp	r3, #1
 802215c:	d923      	bls.n	80221a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802215e:	7dfa      	ldrb	r2, [r7, #23]
 8022160:	4926      	ldr	r1, [pc, #152]	@ (80221fc <etharp_output+0x200>)
 8022162:	4613      	mov	r3, r2
 8022164:	005b      	lsls	r3, r3, #1
 8022166:	4413      	add	r3, r2
 8022168:	00db      	lsls	r3, r3, #3
 802216a:	440b      	add	r3, r1
 802216c:	3308      	adds	r3, #8
 802216e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022170:	68fa      	ldr	r2, [r7, #12]
 8022172:	429a      	cmp	r2, r3
 8022174:	d117      	bne.n	80221a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8022176:	69bb      	ldr	r3, [r7, #24]
 8022178:	6819      	ldr	r1, [r3, #0]
 802217a:	7dfa      	ldrb	r2, [r7, #23]
 802217c:	481f      	ldr	r0, [pc, #124]	@ (80221fc <etharp_output+0x200>)
 802217e:	4613      	mov	r3, r2
 8022180:	005b      	lsls	r3, r3, #1
 8022182:	4413      	add	r3, r2
 8022184:	00db      	lsls	r3, r3, #3
 8022186:	4403      	add	r3, r0
 8022188:	3304      	adds	r3, #4
 802218a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802218c:	4299      	cmp	r1, r3
 802218e:	d10a      	bne.n	80221a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022190:	4a19      	ldr	r2, [pc, #100]	@ (80221f8 <etharp_output+0x1fc>)
 8022192:	7dfb      	ldrb	r3, [r7, #23]
 8022194:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8022196:	7dfb      	ldrb	r3, [r7, #23]
 8022198:	461a      	mov	r2, r3
 802219a:	68b9      	ldr	r1, [r7, #8]
 802219c:	68f8      	ldr	r0, [r7, #12]
 802219e:	f7ff fe93 	bl	8021ec8 <etharp_output_to_arp_index>
 80221a2:	4603      	mov	r3, r0
 80221a4:	e018      	b.n	80221d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80221a6:	7dfb      	ldrb	r3, [r7, #23]
 80221a8:	3301      	adds	r3, #1
 80221aa:	75fb      	strb	r3, [r7, #23]
 80221ac:	7dfb      	ldrb	r3, [r7, #23]
 80221ae:	2b09      	cmp	r3, #9
 80221b0:	d9ca      	bls.n	8022148 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80221b2:	68ba      	ldr	r2, [r7, #8]
 80221b4:	69b9      	ldr	r1, [r7, #24]
 80221b6:	68f8      	ldr	r0, [r7, #12]
 80221b8:	f000 f822 	bl	8022200 <etharp_query>
 80221bc:	4603      	mov	r3, r0
 80221be:	e00b      	b.n	80221d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80221c0:	68fb      	ldr	r3, [r7, #12]
 80221c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80221c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80221ca:	9300      	str	r3, [sp, #0]
 80221cc:	69fb      	ldr	r3, [r7, #28]
 80221ce:	68b9      	ldr	r1, [r7, #8]
 80221d0:	68f8      	ldr	r0, [r7, #12]
 80221d2:	f001 fea9 	bl	8023f28 <ethernet_output>
 80221d6:	4603      	mov	r3, r0
}
 80221d8:	4618      	mov	r0, r3
 80221da:	3720      	adds	r7, #32
 80221dc:	46bd      	mov	sp, r7
 80221de:	bd80      	pop	{r7, pc}
 80221e0:	0802c800 	.word	0x0802c800
 80221e4:	0802c950 	.word	0x0802c950
 80221e8:	0802c878 	.word	0x0802c878
 80221ec:	0802c9a0 	.word	0x0802c9a0
 80221f0:	0802c940 	.word	0x0802c940
 80221f4:	0802d0e8 	.word	0x0802d0e8
 80221f8:	2400bfb4 	.word	0x2400bfb4
 80221fc:	2400bec4 	.word	0x2400bec4

08022200 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8022200:	b580      	push	{r7, lr}
 8022202:	b08c      	sub	sp, #48	@ 0x30
 8022204:	af02      	add	r7, sp, #8
 8022206:	60f8      	str	r0, [r7, #12]
 8022208:	60b9      	str	r1, [r7, #8]
 802220a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802220c:	68fb      	ldr	r3, [r7, #12]
 802220e:	3326      	adds	r3, #38	@ 0x26
 8022210:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8022212:	23ff      	movs	r3, #255	@ 0xff
 8022214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8022218:	2300      	movs	r3, #0
 802221a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802221c:	68bb      	ldr	r3, [r7, #8]
 802221e:	681b      	ldr	r3, [r3, #0]
 8022220:	68f9      	ldr	r1, [r7, #12]
 8022222:	4618      	mov	r0, r3
 8022224:	f000 fe34 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8022228:	4603      	mov	r3, r0
 802222a:	2b00      	cmp	r3, #0
 802222c:	d10c      	bne.n	8022248 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802222e:	68bb      	ldr	r3, [r7, #8]
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022236:	2be0      	cmp	r3, #224	@ 0xe0
 8022238:	d006      	beq.n	8022248 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802223a:	68bb      	ldr	r3, [r7, #8]
 802223c:	2b00      	cmp	r3, #0
 802223e:	d003      	beq.n	8022248 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8022240:	68bb      	ldr	r3, [r7, #8]
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	2b00      	cmp	r3, #0
 8022246:	d102      	bne.n	802224e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022248:	f06f 030f 	mvn.w	r3, #15
 802224c:	e101      	b.n	8022452 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802224e:	68fa      	ldr	r2, [r7, #12]
 8022250:	2101      	movs	r1, #1
 8022252:	68b8      	ldr	r0, [r7, #8]
 8022254:	f7ff fb60 	bl	8021918 <etharp_find_entry>
 8022258:	4603      	mov	r3, r0
 802225a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802225c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022260:	2b00      	cmp	r3, #0
 8022262:	da02      	bge.n	802226a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8022264:	8a7b      	ldrh	r3, [r7, #18]
 8022266:	b25b      	sxtb	r3, r3
 8022268:	e0f3      	b.n	8022452 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802226a:	8a7b      	ldrh	r3, [r7, #18]
 802226c:	2b7e      	cmp	r3, #126	@ 0x7e
 802226e:	d906      	bls.n	802227e <etharp_query+0x7e>
 8022270:	4b7a      	ldr	r3, [pc, #488]	@ (802245c <etharp_query+0x25c>)
 8022272:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8022276:	497a      	ldr	r1, [pc, #488]	@ (8022460 <etharp_query+0x260>)
 8022278:	487a      	ldr	r0, [pc, #488]	@ (8022464 <etharp_query+0x264>)
 802227a:	f003 f8fb 	bl	8025474 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802227e:	8a7b      	ldrh	r3, [r7, #18]
 8022280:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022282:	7c7a      	ldrb	r2, [r7, #17]
 8022284:	4978      	ldr	r1, [pc, #480]	@ (8022468 <etharp_query+0x268>)
 8022286:	4613      	mov	r3, r2
 8022288:	005b      	lsls	r3, r3, #1
 802228a:	4413      	add	r3, r2
 802228c:	00db      	lsls	r3, r3, #3
 802228e:	440b      	add	r3, r1
 8022290:	3314      	adds	r3, #20
 8022292:	781b      	ldrb	r3, [r3, #0]
 8022294:	2b00      	cmp	r3, #0
 8022296:	d115      	bne.n	80222c4 <etharp_query+0xc4>
    is_new_entry = 1;
 8022298:	2301      	movs	r3, #1
 802229a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802229c:	7c7a      	ldrb	r2, [r7, #17]
 802229e:	4972      	ldr	r1, [pc, #456]	@ (8022468 <etharp_query+0x268>)
 80222a0:	4613      	mov	r3, r2
 80222a2:	005b      	lsls	r3, r3, #1
 80222a4:	4413      	add	r3, r2
 80222a6:	00db      	lsls	r3, r3, #3
 80222a8:	440b      	add	r3, r1
 80222aa:	3314      	adds	r3, #20
 80222ac:	2201      	movs	r2, #1
 80222ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80222b0:	7c7a      	ldrb	r2, [r7, #17]
 80222b2:	496d      	ldr	r1, [pc, #436]	@ (8022468 <etharp_query+0x268>)
 80222b4:	4613      	mov	r3, r2
 80222b6:	005b      	lsls	r3, r3, #1
 80222b8:	4413      	add	r3, r2
 80222ba:	00db      	lsls	r3, r3, #3
 80222bc:	440b      	add	r3, r1
 80222be:	3308      	adds	r3, #8
 80222c0:	68fa      	ldr	r2, [r7, #12]
 80222c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80222c4:	7c7a      	ldrb	r2, [r7, #17]
 80222c6:	4968      	ldr	r1, [pc, #416]	@ (8022468 <etharp_query+0x268>)
 80222c8:	4613      	mov	r3, r2
 80222ca:	005b      	lsls	r3, r3, #1
 80222cc:	4413      	add	r3, r2
 80222ce:	00db      	lsls	r3, r3, #3
 80222d0:	440b      	add	r3, r1
 80222d2:	3314      	adds	r3, #20
 80222d4:	781b      	ldrb	r3, [r3, #0]
 80222d6:	2b01      	cmp	r3, #1
 80222d8:	d011      	beq.n	80222fe <etharp_query+0xfe>
 80222da:	7c7a      	ldrb	r2, [r7, #17]
 80222dc:	4962      	ldr	r1, [pc, #392]	@ (8022468 <etharp_query+0x268>)
 80222de:	4613      	mov	r3, r2
 80222e0:	005b      	lsls	r3, r3, #1
 80222e2:	4413      	add	r3, r2
 80222e4:	00db      	lsls	r3, r3, #3
 80222e6:	440b      	add	r3, r1
 80222e8:	3314      	adds	r3, #20
 80222ea:	781b      	ldrb	r3, [r3, #0]
 80222ec:	2b01      	cmp	r3, #1
 80222ee:	d806      	bhi.n	80222fe <etharp_query+0xfe>
 80222f0:	4b5a      	ldr	r3, [pc, #360]	@ (802245c <etharp_query+0x25c>)
 80222f2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80222f6:	495d      	ldr	r1, [pc, #372]	@ (802246c <etharp_query+0x26c>)
 80222f8:	485a      	ldr	r0, [pc, #360]	@ (8022464 <etharp_query+0x264>)
 80222fa:	f003 f8bb 	bl	8025474 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80222fe:	6a3b      	ldr	r3, [r7, #32]
 8022300:	2b00      	cmp	r3, #0
 8022302:	d102      	bne.n	802230a <etharp_query+0x10a>
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d10c      	bne.n	8022324 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802230a:	68b9      	ldr	r1, [r7, #8]
 802230c:	68f8      	ldr	r0, [r7, #12]
 802230e:	f000 f963 	bl	80225d8 <etharp_request>
 8022312:	4603      	mov	r3, r0
 8022314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	2b00      	cmp	r3, #0
 802231c:	d102      	bne.n	8022324 <etharp_query+0x124>
      return result;
 802231e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8022322:	e096      	b.n	8022452 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	2b00      	cmp	r3, #0
 8022328:	d106      	bne.n	8022338 <etharp_query+0x138>
 802232a:	4b4c      	ldr	r3, [pc, #304]	@ (802245c <etharp_query+0x25c>)
 802232c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8022330:	494f      	ldr	r1, [pc, #316]	@ (8022470 <etharp_query+0x270>)
 8022332:	484c      	ldr	r0, [pc, #304]	@ (8022464 <etharp_query+0x264>)
 8022334:	f003 f89e 	bl	8025474 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8022338:	7c7a      	ldrb	r2, [r7, #17]
 802233a:	494b      	ldr	r1, [pc, #300]	@ (8022468 <etharp_query+0x268>)
 802233c:	4613      	mov	r3, r2
 802233e:	005b      	lsls	r3, r3, #1
 8022340:	4413      	add	r3, r2
 8022342:	00db      	lsls	r3, r3, #3
 8022344:	440b      	add	r3, r1
 8022346:	3314      	adds	r3, #20
 8022348:	781b      	ldrb	r3, [r3, #0]
 802234a:	2b01      	cmp	r3, #1
 802234c:	d917      	bls.n	802237e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802234e:	4a49      	ldr	r2, [pc, #292]	@ (8022474 <etharp_query+0x274>)
 8022350:	7c7b      	ldrb	r3, [r7, #17]
 8022352:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022354:	7c7a      	ldrb	r2, [r7, #17]
 8022356:	4613      	mov	r3, r2
 8022358:	005b      	lsls	r3, r3, #1
 802235a:	4413      	add	r3, r2
 802235c:	00db      	lsls	r3, r3, #3
 802235e:	3308      	adds	r3, #8
 8022360:	4a41      	ldr	r2, [pc, #260]	@ (8022468 <etharp_query+0x268>)
 8022362:	4413      	add	r3, r2
 8022364:	3304      	adds	r3, #4
 8022366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802236a:	9200      	str	r2, [sp, #0]
 802236c:	697a      	ldr	r2, [r7, #20]
 802236e:	6879      	ldr	r1, [r7, #4]
 8022370:	68f8      	ldr	r0, [r7, #12]
 8022372:	f001 fdd9 	bl	8023f28 <ethernet_output>
 8022376:	4603      	mov	r3, r0
 8022378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802237c:	e067      	b.n	802244e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802237e:	7c7a      	ldrb	r2, [r7, #17]
 8022380:	4939      	ldr	r1, [pc, #228]	@ (8022468 <etharp_query+0x268>)
 8022382:	4613      	mov	r3, r2
 8022384:	005b      	lsls	r3, r3, #1
 8022386:	4413      	add	r3, r2
 8022388:	00db      	lsls	r3, r3, #3
 802238a:	440b      	add	r3, r1
 802238c:	3314      	adds	r3, #20
 802238e:	781b      	ldrb	r3, [r3, #0]
 8022390:	2b01      	cmp	r3, #1
 8022392:	d15c      	bne.n	802244e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8022394:	2300      	movs	r3, #0
 8022396:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802239c:	e01c      	b.n	80223d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802239e:	69fb      	ldr	r3, [r7, #28]
 80223a0:	895a      	ldrh	r2, [r3, #10]
 80223a2:	69fb      	ldr	r3, [r7, #28]
 80223a4:	891b      	ldrh	r3, [r3, #8]
 80223a6:	429a      	cmp	r2, r3
 80223a8:	d10a      	bne.n	80223c0 <etharp_query+0x1c0>
 80223aa:	69fb      	ldr	r3, [r7, #28]
 80223ac:	681b      	ldr	r3, [r3, #0]
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	d006      	beq.n	80223c0 <etharp_query+0x1c0>
 80223b2:	4b2a      	ldr	r3, [pc, #168]	@ (802245c <etharp_query+0x25c>)
 80223b4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80223b8:	492f      	ldr	r1, [pc, #188]	@ (8022478 <etharp_query+0x278>)
 80223ba:	482a      	ldr	r0, [pc, #168]	@ (8022464 <etharp_query+0x264>)
 80223bc:	f003 f85a 	bl	8025474 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80223c0:	69fb      	ldr	r3, [r7, #28]
 80223c2:	7b1b      	ldrb	r3, [r3, #12]
 80223c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	d002      	beq.n	80223d2 <etharp_query+0x1d2>
        copy_needed = 1;
 80223cc:	2301      	movs	r3, #1
 80223ce:	61bb      	str	r3, [r7, #24]
        break;
 80223d0:	e005      	b.n	80223de <etharp_query+0x1de>
      }
      p = p->next;
 80223d2:	69fb      	ldr	r3, [r7, #28]
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80223d8:	69fb      	ldr	r3, [r7, #28]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d1df      	bne.n	802239e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80223de:	69bb      	ldr	r3, [r7, #24]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d007      	beq.n	80223f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80223e4:	687a      	ldr	r2, [r7, #4]
 80223e6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80223ea:	200e      	movs	r0, #14
 80223ec:	f7f8 fb6c 	bl	801aac8 <pbuf_clone>
 80223f0:	61f8      	str	r0, [r7, #28]
 80223f2:	e004      	b.n	80223fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80223f8:	69f8      	ldr	r0, [r7, #28]
 80223fa:	f7f8 f993 	bl	801a724 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80223fe:	69fb      	ldr	r3, [r7, #28]
 8022400:	2b00      	cmp	r3, #0
 8022402:	d021      	beq.n	8022448 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8022404:	7c7a      	ldrb	r2, [r7, #17]
 8022406:	4918      	ldr	r1, [pc, #96]	@ (8022468 <etharp_query+0x268>)
 8022408:	4613      	mov	r3, r2
 802240a:	005b      	lsls	r3, r3, #1
 802240c:	4413      	add	r3, r2
 802240e:	00db      	lsls	r3, r3, #3
 8022410:	440b      	add	r3, r1
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	2b00      	cmp	r3, #0
 8022416:	d00a      	beq.n	802242e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8022418:	7c7a      	ldrb	r2, [r7, #17]
 802241a:	4913      	ldr	r1, [pc, #76]	@ (8022468 <etharp_query+0x268>)
 802241c:	4613      	mov	r3, r2
 802241e:	005b      	lsls	r3, r3, #1
 8022420:	4413      	add	r3, r2
 8022422:	00db      	lsls	r3, r3, #3
 8022424:	440b      	add	r3, r1
 8022426:	681b      	ldr	r3, [r3, #0]
 8022428:	4618      	mov	r0, r3
 802242a:	f7f8 f8d5 	bl	801a5d8 <pbuf_free>
      }
      arp_table[i].q = p;
 802242e:	7c7a      	ldrb	r2, [r7, #17]
 8022430:	490d      	ldr	r1, [pc, #52]	@ (8022468 <etharp_query+0x268>)
 8022432:	4613      	mov	r3, r2
 8022434:	005b      	lsls	r3, r3, #1
 8022436:	4413      	add	r3, r2
 8022438:	00db      	lsls	r3, r3, #3
 802243a:	440b      	add	r3, r1
 802243c:	69fa      	ldr	r2, [r7, #28]
 802243e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8022440:	2300      	movs	r3, #0
 8022442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8022446:	e002      	b.n	802244e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8022448:	23ff      	movs	r3, #255	@ 0xff
 802244a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 802244e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8022452:	4618      	mov	r0, r3
 8022454:	3728      	adds	r7, #40	@ 0x28
 8022456:	46bd      	mov	sp, r7
 8022458:	bd80      	pop	{r7, pc}
 802245a:	bf00      	nop
 802245c:	0802c800 	.word	0x0802c800
 8022460:	0802c9ac 	.word	0x0802c9ac
 8022464:	0802c878 	.word	0x0802c878
 8022468:	2400bec4 	.word	0x2400bec4
 802246c:	0802c9bc 	.word	0x0802c9bc
 8022470:	0802c9a0 	.word	0x0802c9a0
 8022474:	2400bfb4 	.word	0x2400bfb4
 8022478:	0802c9e4 	.word	0x0802c9e4

0802247c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802247c:	b580      	push	{r7, lr}
 802247e:	b08a      	sub	sp, #40	@ 0x28
 8022480:	af02      	add	r7, sp, #8
 8022482:	60f8      	str	r0, [r7, #12]
 8022484:	60b9      	str	r1, [r7, #8]
 8022486:	607a      	str	r2, [r7, #4]
 8022488:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802248a:	2300      	movs	r3, #0
 802248c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802248e:	68fb      	ldr	r3, [r7, #12]
 8022490:	2b00      	cmp	r3, #0
 8022492:	d106      	bne.n	80224a2 <etharp_raw+0x26>
 8022494:	4b3a      	ldr	r3, [pc, #232]	@ (8022580 <etharp_raw+0x104>)
 8022496:	f240 4257 	movw	r2, #1111	@ 0x457
 802249a:	493a      	ldr	r1, [pc, #232]	@ (8022584 <etharp_raw+0x108>)
 802249c:	483a      	ldr	r0, [pc, #232]	@ (8022588 <etharp_raw+0x10c>)
 802249e:	f002 ffe9 	bl	8025474 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80224a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80224a6:	211c      	movs	r1, #28
 80224a8:	200e      	movs	r0, #14
 80224aa:	f7f7 fd7f 	bl	8019fac <pbuf_alloc>
 80224ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80224b0:	69bb      	ldr	r3, [r7, #24]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d102      	bne.n	80224bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80224b6:	f04f 33ff 	mov.w	r3, #4294967295
 80224ba:	e05d      	b.n	8022578 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80224bc:	69bb      	ldr	r3, [r7, #24]
 80224be:	895b      	ldrh	r3, [r3, #10]
 80224c0:	2b1b      	cmp	r3, #27
 80224c2:	d806      	bhi.n	80224d2 <etharp_raw+0x56>
 80224c4:	4b2e      	ldr	r3, [pc, #184]	@ (8022580 <etharp_raw+0x104>)
 80224c6:	f240 4262 	movw	r2, #1122	@ 0x462
 80224ca:	4930      	ldr	r1, [pc, #192]	@ (802258c <etharp_raw+0x110>)
 80224cc:	482e      	ldr	r0, [pc, #184]	@ (8022588 <etharp_raw+0x10c>)
 80224ce:	f002 ffd1 	bl	8025474 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80224d2:	69bb      	ldr	r3, [r7, #24]
 80224d4:	685b      	ldr	r3, [r3, #4]
 80224d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80224d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80224da:	4618      	mov	r0, r3
 80224dc:	f7f6 fba0 	bl	8018c20 <lwip_htons>
 80224e0:	4603      	mov	r3, r0
 80224e2:	461a      	mov	r2, r3
 80224e4:	697b      	ldr	r3, [r7, #20]
 80224e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80224e8:	68fb      	ldr	r3, [r7, #12]
 80224ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80224ee:	2b06      	cmp	r3, #6
 80224f0:	d006      	beq.n	8022500 <etharp_raw+0x84>
 80224f2:	4b23      	ldr	r3, [pc, #140]	@ (8022580 <etharp_raw+0x104>)
 80224f4:	f240 4269 	movw	r2, #1129	@ 0x469
 80224f8:	4925      	ldr	r1, [pc, #148]	@ (8022590 <etharp_raw+0x114>)
 80224fa:	4823      	ldr	r0, [pc, #140]	@ (8022588 <etharp_raw+0x10c>)
 80224fc:	f002 ffba 	bl	8025474 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022500:	697b      	ldr	r3, [r7, #20]
 8022502:	3308      	adds	r3, #8
 8022504:	2206      	movs	r2, #6
 8022506:	6839      	ldr	r1, [r7, #0]
 8022508:	4618      	mov	r0, r3
 802250a:	f003 f940 	bl	802578e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802250e:	697b      	ldr	r3, [r7, #20]
 8022510:	3312      	adds	r3, #18
 8022512:	2206      	movs	r2, #6
 8022514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022516:	4618      	mov	r0, r3
 8022518:	f003 f939 	bl	802578e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802251c:	697b      	ldr	r3, [r7, #20]
 802251e:	330e      	adds	r3, #14
 8022520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022522:	6812      	ldr	r2, [r2, #0]
 8022524:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8022526:	697b      	ldr	r3, [r7, #20]
 8022528:	3318      	adds	r3, #24
 802252a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802252c:	6812      	ldr	r2, [r2, #0]
 802252e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8022530:	697b      	ldr	r3, [r7, #20]
 8022532:	2200      	movs	r2, #0
 8022534:	701a      	strb	r2, [r3, #0]
 8022536:	2200      	movs	r2, #0
 8022538:	f042 0201 	orr.w	r2, r2, #1
 802253c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802253e:	697b      	ldr	r3, [r7, #20]
 8022540:	2200      	movs	r2, #0
 8022542:	f042 0208 	orr.w	r2, r2, #8
 8022546:	709a      	strb	r2, [r3, #2]
 8022548:	2200      	movs	r2, #0
 802254a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802254c:	697b      	ldr	r3, [r7, #20]
 802254e:	2206      	movs	r2, #6
 8022550:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8022552:	697b      	ldr	r3, [r7, #20]
 8022554:	2204      	movs	r2, #4
 8022556:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022558:	f640 0306 	movw	r3, #2054	@ 0x806
 802255c:	9300      	str	r3, [sp, #0]
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	68ba      	ldr	r2, [r7, #8]
 8022562:	69b9      	ldr	r1, [r7, #24]
 8022564:	68f8      	ldr	r0, [r7, #12]
 8022566:	f001 fcdf 	bl	8023f28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802256a:	69b8      	ldr	r0, [r7, #24]
 802256c:	f7f8 f834 	bl	801a5d8 <pbuf_free>
  p = NULL;
 8022570:	2300      	movs	r3, #0
 8022572:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8022574:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022578:	4618      	mov	r0, r3
 802257a:	3720      	adds	r7, #32
 802257c:	46bd      	mov	sp, r7
 802257e:	bd80      	pop	{r7, pc}
 8022580:	0802c800 	.word	0x0802c800
 8022584:	0802c950 	.word	0x0802c950
 8022588:	0802c878 	.word	0x0802c878
 802258c:	0802ca00 	.word	0x0802ca00
 8022590:	0802ca34 	.word	0x0802ca34

08022594 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022594:	b580      	push	{r7, lr}
 8022596:	b088      	sub	sp, #32
 8022598:	af04      	add	r7, sp, #16
 802259a:	60f8      	str	r0, [r7, #12]
 802259c:	60b9      	str	r1, [r7, #8]
 802259e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80225a6:	68fb      	ldr	r3, [r7, #12]
 80225a8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80225ac:	68fb      	ldr	r3, [r7, #12]
 80225ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80225b0:	2201      	movs	r2, #1
 80225b2:	9203      	str	r2, [sp, #12]
 80225b4:	68ba      	ldr	r2, [r7, #8]
 80225b6:	9202      	str	r2, [sp, #8]
 80225b8:	4a06      	ldr	r2, [pc, #24]	@ (80225d4 <etharp_request_dst+0x40>)
 80225ba:	9201      	str	r2, [sp, #4]
 80225bc:	9300      	str	r3, [sp, #0]
 80225be:	4603      	mov	r3, r0
 80225c0:	687a      	ldr	r2, [r7, #4]
 80225c2:	68f8      	ldr	r0, [r7, #12]
 80225c4:	f7ff ff5a 	bl	802247c <etharp_raw>
 80225c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80225ca:	4618      	mov	r0, r3
 80225cc:	3710      	adds	r7, #16
 80225ce:	46bd      	mov	sp, r7
 80225d0:	bd80      	pop	{r7, pc}
 80225d2:	bf00      	nop
 80225d4:	0802d0f0 	.word	0x0802d0f0

080225d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80225d8:	b580      	push	{r7, lr}
 80225da:	b082      	sub	sp, #8
 80225dc:	af00      	add	r7, sp, #0
 80225de:	6078      	str	r0, [r7, #4]
 80225e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80225e2:	4a05      	ldr	r2, [pc, #20]	@ (80225f8 <etharp_request+0x20>)
 80225e4:	6839      	ldr	r1, [r7, #0]
 80225e6:	6878      	ldr	r0, [r7, #4]
 80225e8:	f7ff ffd4 	bl	8022594 <etharp_request_dst>
 80225ec:	4603      	mov	r3, r0
}
 80225ee:	4618      	mov	r0, r3
 80225f0:	3708      	adds	r7, #8
 80225f2:	46bd      	mov	sp, r7
 80225f4:	bd80      	pop	{r7, pc}
 80225f6:	bf00      	nop
 80225f8:	0802d0e8 	.word	0x0802d0e8

080225fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80225fc:	b580      	push	{r7, lr}
 80225fe:	b08e      	sub	sp, #56	@ 0x38
 8022600:	af04      	add	r7, sp, #16
 8022602:	6078      	str	r0, [r7, #4]
 8022604:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8022606:	4b87      	ldr	r3, [pc, #540]	@ (8022824 <icmp_input+0x228>)
 8022608:	689b      	ldr	r3, [r3, #8]
 802260a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802260e:	781b      	ldrb	r3, [r3, #0]
 8022610:	f003 030f 	and.w	r3, r3, #15
 8022614:	b2db      	uxtb	r3, r3
 8022616:	009b      	lsls	r3, r3, #2
 8022618:	b2db      	uxtb	r3, r3
 802261a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 802261c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802261e:	2b13      	cmp	r3, #19
 8022620:	f240 80e8 	bls.w	80227f4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	895b      	ldrh	r3, [r3, #10]
 8022628:	2b03      	cmp	r3, #3
 802262a:	f240 80e5 	bls.w	80227f8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	685b      	ldr	r3, [r3, #4]
 8022632:	781b      	ldrb	r3, [r3, #0]
 8022634:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8022638:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 802263c:	2b00      	cmp	r3, #0
 802263e:	f000 80d2 	beq.w	80227e6 <icmp_input+0x1ea>
 8022642:	2b08      	cmp	r3, #8
 8022644:	f040 80d2 	bne.w	80227ec <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8022648:	4b77      	ldr	r3, [pc, #476]	@ (8022828 <icmp_input+0x22c>)
 802264a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802264c:	4b75      	ldr	r3, [pc, #468]	@ (8022824 <icmp_input+0x228>)
 802264e:	695b      	ldr	r3, [r3, #20]
 8022650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022654:	2be0      	cmp	r3, #224	@ 0xe0
 8022656:	f000 80d6 	beq.w	8022806 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802265a:	4b72      	ldr	r3, [pc, #456]	@ (8022824 <icmp_input+0x228>)
 802265c:	695b      	ldr	r3, [r3, #20]
 802265e:	4a71      	ldr	r2, [pc, #452]	@ (8022824 <icmp_input+0x228>)
 8022660:	6812      	ldr	r2, [r2, #0]
 8022662:	4611      	mov	r1, r2
 8022664:	4618      	mov	r0, r3
 8022666:	f000 fc13 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 802266a:	4603      	mov	r3, r0
 802266c:	2b00      	cmp	r3, #0
 802266e:	f040 80cc 	bne.w	802280a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	891b      	ldrh	r3, [r3, #8]
 8022676:	2b07      	cmp	r3, #7
 8022678:	f240 80c0 	bls.w	80227fc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 802267c:	6878      	ldr	r0, [r7, #4]
 802267e:	f7f6 fb6c 	bl	8018d5a <inet_chksum_pbuf>
 8022682:	4603      	mov	r3, r0
 8022684:	2b00      	cmp	r3, #0
 8022686:	d003      	beq.n	8022690 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8022688:	6878      	ldr	r0, [r7, #4]
 802268a:	f7f7 ffa5 	bl	801a5d8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 802268e:	e0c5      	b.n	802281c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022690:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022692:	330e      	adds	r3, #14
 8022694:	4619      	mov	r1, r3
 8022696:	6878      	ldr	r0, [r7, #4]
 8022698:	f7f7 fed6 	bl	801a448 <pbuf_add_header>
 802269c:	4603      	mov	r3, r0
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d04b      	beq.n	802273a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	891a      	ldrh	r2, [r3, #8]
 80226a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80226a8:	4413      	add	r3, r2
 80226aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	891b      	ldrh	r3, [r3, #8]
 80226b0:	8b7a      	ldrh	r2, [r7, #26]
 80226b2:	429a      	cmp	r2, r3
 80226b4:	f0c0 80ab 	bcc.w	802280e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80226b8:	8b7b      	ldrh	r3, [r7, #26]
 80226ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80226be:	4619      	mov	r1, r3
 80226c0:	200e      	movs	r0, #14
 80226c2:	f7f7 fc73 	bl	8019fac <pbuf_alloc>
 80226c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80226c8:	697b      	ldr	r3, [r7, #20]
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	f000 80a1 	beq.w	8022812 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80226d0:	697b      	ldr	r3, [r7, #20]
 80226d2:	895b      	ldrh	r3, [r3, #10]
 80226d4:	461a      	mov	r2, r3
 80226d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80226d8:	3308      	adds	r3, #8
 80226da:	429a      	cmp	r2, r3
 80226dc:	d203      	bcs.n	80226e6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80226de:	6978      	ldr	r0, [r7, #20]
 80226e0:	f7f7 ff7a 	bl	801a5d8 <pbuf_free>
          goto icmperr;
 80226e4:	e096      	b.n	8022814 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80226e6:	697b      	ldr	r3, [r7, #20]
 80226e8:	685b      	ldr	r3, [r3, #4]
 80226ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80226ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80226ee:	4618      	mov	r0, r3
 80226f0:	f003 f84d 	bl	802578e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80226f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80226f6:	4619      	mov	r1, r3
 80226f8:	6978      	ldr	r0, [r7, #20]
 80226fa:	f7f7 feb5 	bl	801a468 <pbuf_remove_header>
 80226fe:	4603      	mov	r3, r0
 8022700:	2b00      	cmp	r3, #0
 8022702:	d009      	beq.n	8022718 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8022704:	4b49      	ldr	r3, [pc, #292]	@ (802282c <icmp_input+0x230>)
 8022706:	22b6      	movs	r2, #182	@ 0xb6
 8022708:	4949      	ldr	r1, [pc, #292]	@ (8022830 <icmp_input+0x234>)
 802270a:	484a      	ldr	r0, [pc, #296]	@ (8022834 <icmp_input+0x238>)
 802270c:	f002 feb2 	bl	8025474 <iprintf>
          pbuf_free(r);
 8022710:	6978      	ldr	r0, [r7, #20]
 8022712:	f7f7 ff61 	bl	801a5d8 <pbuf_free>
          goto icmperr;
 8022716:	e07d      	b.n	8022814 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8022718:	6879      	ldr	r1, [r7, #4]
 802271a:	6978      	ldr	r0, [r7, #20]
 802271c:	f7f8 f890 	bl	801a840 <pbuf_copy>
 8022720:	4603      	mov	r3, r0
 8022722:	2b00      	cmp	r3, #0
 8022724:	d003      	beq.n	802272e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8022726:	6978      	ldr	r0, [r7, #20]
 8022728:	f7f7 ff56 	bl	801a5d8 <pbuf_free>
          goto icmperr;
 802272c:	e072      	b.n	8022814 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 802272e:	6878      	ldr	r0, [r7, #4]
 8022730:	f7f7 ff52 	bl	801a5d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8022734:	697b      	ldr	r3, [r7, #20]
 8022736:	607b      	str	r3, [r7, #4]
 8022738:	e00f      	b.n	802275a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802273a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802273c:	330e      	adds	r3, #14
 802273e:	4619      	mov	r1, r3
 8022740:	6878      	ldr	r0, [r7, #4]
 8022742:	f7f7 fe91 	bl	801a468 <pbuf_remove_header>
 8022746:	4603      	mov	r3, r0
 8022748:	2b00      	cmp	r3, #0
 802274a:	d006      	beq.n	802275a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 802274c:	4b37      	ldr	r3, [pc, #220]	@ (802282c <icmp_input+0x230>)
 802274e:	22c7      	movs	r2, #199	@ 0xc7
 8022750:	4939      	ldr	r1, [pc, #228]	@ (8022838 <icmp_input+0x23c>)
 8022752:	4838      	ldr	r0, [pc, #224]	@ (8022834 <icmp_input+0x238>)
 8022754:	f002 fe8e 	bl	8025474 <iprintf>
          goto icmperr;
 8022758:	e05c      	b.n	8022814 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	685b      	ldr	r3, [r3, #4]
 802275e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8022760:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022762:	4619      	mov	r1, r3
 8022764:	6878      	ldr	r0, [r7, #4]
 8022766:	f7f7 fe6f 	bl	801a448 <pbuf_add_header>
 802276a:	4603      	mov	r3, r0
 802276c:	2b00      	cmp	r3, #0
 802276e:	d13c      	bne.n	80227ea <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	685b      	ldr	r3, [r3, #4]
 8022774:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8022776:	69fb      	ldr	r3, [r7, #28]
 8022778:	681a      	ldr	r2, [r3, #0]
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802277e:	4b29      	ldr	r3, [pc, #164]	@ (8022824 <icmp_input+0x228>)
 8022780:	691a      	ldr	r2, [r3, #16]
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8022786:	693b      	ldr	r3, [r7, #16]
 8022788:	2200      	movs	r2, #0
 802278a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802278c:	693b      	ldr	r3, [r7, #16]
 802278e:	885b      	ldrh	r3, [r3, #2]
 8022790:	b29b      	uxth	r3, r3
 8022792:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8022796:	4293      	cmp	r3, r2
 8022798:	d907      	bls.n	80227aa <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802279a:	693b      	ldr	r3, [r7, #16]
 802279c:	885b      	ldrh	r3, [r3, #2]
 802279e:	b29b      	uxth	r3, r3
 80227a0:	3309      	adds	r3, #9
 80227a2:	b29a      	uxth	r2, r3
 80227a4:	693b      	ldr	r3, [r7, #16]
 80227a6:	805a      	strh	r2, [r3, #2]
 80227a8:	e006      	b.n	80227b8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80227aa:	693b      	ldr	r3, [r7, #16]
 80227ac:	885b      	ldrh	r3, [r3, #2]
 80227ae:	b29b      	uxth	r3, r3
 80227b0:	3308      	adds	r3, #8
 80227b2:	b29a      	uxth	r2, r3
 80227b4:	693b      	ldr	r3, [r7, #16]
 80227b6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	22ff      	movs	r2, #255	@ 0xff
 80227bc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	2200      	movs	r2, #0
 80227c2:	729a      	strb	r2, [r3, #10]
 80227c4:	2200      	movs	r2, #0
 80227c6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80227c8:	683b      	ldr	r3, [r7, #0]
 80227ca:	9302      	str	r3, [sp, #8]
 80227cc:	2301      	movs	r3, #1
 80227ce:	9301      	str	r3, [sp, #4]
 80227d0:	2300      	movs	r3, #0
 80227d2:	9300      	str	r3, [sp, #0]
 80227d4:	23ff      	movs	r3, #255	@ 0xff
 80227d6:	2200      	movs	r2, #0
 80227d8:	69f9      	ldr	r1, [r7, #28]
 80227da:	6878      	ldr	r0, [r7, #4]
 80227dc:	f000 fa80 	bl	8022ce0 <ip4_output_if>
 80227e0:	4603      	mov	r3, r0
 80227e2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80227e4:	e001      	b.n	80227ea <icmp_input+0x1ee>
      break;
 80227e6:	bf00      	nop
 80227e8:	e000      	b.n	80227ec <icmp_input+0x1f0>
      break;
 80227ea:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80227ec:	6878      	ldr	r0, [r7, #4]
 80227ee:	f7f7 fef3 	bl	801a5d8 <pbuf_free>
  return;
 80227f2:	e013      	b.n	802281c <icmp_input+0x220>
    goto lenerr;
 80227f4:	bf00      	nop
 80227f6:	e002      	b.n	80227fe <icmp_input+0x202>
    goto lenerr;
 80227f8:	bf00      	nop
 80227fa:	e000      	b.n	80227fe <icmp_input+0x202>
        goto lenerr;
 80227fc:	bf00      	nop
lenerr:
  pbuf_free(p);
 80227fe:	6878      	ldr	r0, [r7, #4]
 8022800:	f7f7 feea 	bl	801a5d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8022804:	e00a      	b.n	802281c <icmp_input+0x220>
        goto icmperr;
 8022806:	bf00      	nop
 8022808:	e004      	b.n	8022814 <icmp_input+0x218>
        goto icmperr;
 802280a:	bf00      	nop
 802280c:	e002      	b.n	8022814 <icmp_input+0x218>
          goto icmperr;
 802280e:	bf00      	nop
 8022810:	e000      	b.n	8022814 <icmp_input+0x218>
          goto icmperr;
 8022812:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8022814:	6878      	ldr	r0, [r7, #4]
 8022816:	f7f7 fedf 	bl	801a5d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802281a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802281c:	3728      	adds	r7, #40	@ 0x28
 802281e:	46bd      	mov	sp, r7
 8022820:	bd80      	pop	{r7, pc}
 8022822:	bf00      	nop
 8022824:	24008d64 	.word	0x24008d64
 8022828:	24008d78 	.word	0x24008d78
 802282c:	0802ca78 	.word	0x0802ca78
 8022830:	0802cab0 	.word	0x0802cab0
 8022834:	0802cae8 	.word	0x0802cae8
 8022838:	0802cb10 	.word	0x0802cb10

0802283c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802283c:	b580      	push	{r7, lr}
 802283e:	b082      	sub	sp, #8
 8022840:	af00      	add	r7, sp, #0
 8022842:	6078      	str	r0, [r7, #4]
 8022844:	460b      	mov	r3, r1
 8022846:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8022848:	78fb      	ldrb	r3, [r7, #3]
 802284a:	461a      	mov	r2, r3
 802284c:	2103      	movs	r1, #3
 802284e:	6878      	ldr	r0, [r7, #4]
 8022850:	f000 f814 	bl	802287c <icmp_send_response>
}
 8022854:	bf00      	nop
 8022856:	3708      	adds	r7, #8
 8022858:	46bd      	mov	sp, r7
 802285a:	bd80      	pop	{r7, pc}

0802285c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 802285c:	b580      	push	{r7, lr}
 802285e:	b082      	sub	sp, #8
 8022860:	af00      	add	r7, sp, #0
 8022862:	6078      	str	r0, [r7, #4]
 8022864:	460b      	mov	r3, r1
 8022866:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8022868:	78fb      	ldrb	r3, [r7, #3]
 802286a:	461a      	mov	r2, r3
 802286c:	210b      	movs	r1, #11
 802286e:	6878      	ldr	r0, [r7, #4]
 8022870:	f000 f804 	bl	802287c <icmp_send_response>
}
 8022874:	bf00      	nop
 8022876:	3708      	adds	r7, #8
 8022878:	46bd      	mov	sp, r7
 802287a:	bd80      	pop	{r7, pc}

0802287c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 802287c:	b580      	push	{r7, lr}
 802287e:	b08c      	sub	sp, #48	@ 0x30
 8022880:	af04      	add	r7, sp, #16
 8022882:	6078      	str	r0, [r7, #4]
 8022884:	460b      	mov	r3, r1
 8022886:	70fb      	strb	r3, [r7, #3]
 8022888:	4613      	mov	r3, r2
 802288a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802288c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022890:	2124      	movs	r1, #36	@ 0x24
 8022892:	2022      	movs	r0, #34	@ 0x22
 8022894:	f7f7 fb8a 	bl	8019fac <pbuf_alloc>
 8022898:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802289a:	69fb      	ldr	r3, [r7, #28]
 802289c:	2b00      	cmp	r3, #0
 802289e:	d056      	beq.n	802294e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80228a0:	69fb      	ldr	r3, [r7, #28]
 80228a2:	895b      	ldrh	r3, [r3, #10]
 80228a4:	2b23      	cmp	r3, #35	@ 0x23
 80228a6:	d806      	bhi.n	80228b6 <icmp_send_response+0x3a>
 80228a8:	4b2b      	ldr	r3, [pc, #172]	@ (8022958 <icmp_send_response+0xdc>)
 80228aa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80228ae:	492b      	ldr	r1, [pc, #172]	@ (802295c <icmp_send_response+0xe0>)
 80228b0:	482b      	ldr	r0, [pc, #172]	@ (8022960 <icmp_send_response+0xe4>)
 80228b2:	f002 fddf 	bl	8025474 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	685b      	ldr	r3, [r3, #4]
 80228ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80228bc:	69fb      	ldr	r3, [r7, #28]
 80228be:	685b      	ldr	r3, [r3, #4]
 80228c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80228c2:	697b      	ldr	r3, [r7, #20]
 80228c4:	78fa      	ldrb	r2, [r7, #3]
 80228c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80228c8:	697b      	ldr	r3, [r7, #20]
 80228ca:	78ba      	ldrb	r2, [r7, #2]
 80228cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80228ce:	697b      	ldr	r3, [r7, #20]
 80228d0:	2200      	movs	r2, #0
 80228d2:	711a      	strb	r2, [r3, #4]
 80228d4:	2200      	movs	r2, #0
 80228d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80228d8:	697b      	ldr	r3, [r7, #20]
 80228da:	2200      	movs	r2, #0
 80228dc:	719a      	strb	r2, [r3, #6]
 80228de:	2200      	movs	r2, #0
 80228e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80228e2:	69fb      	ldr	r3, [r7, #28]
 80228e4:	685b      	ldr	r3, [r3, #4]
 80228e6:	f103 0008 	add.w	r0, r3, #8
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	685b      	ldr	r3, [r3, #4]
 80228ee:	221c      	movs	r2, #28
 80228f0:	4619      	mov	r1, r3
 80228f2:	f002 ff4c 	bl	802578e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80228f6:	69bb      	ldr	r3, [r7, #24]
 80228f8:	68db      	ldr	r3, [r3, #12]
 80228fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80228fc:	f107 030c 	add.w	r3, r7, #12
 8022900:	4618      	mov	r0, r3
 8022902:	f000 f82f 	bl	8022964 <ip4_route>
 8022906:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8022908:	693b      	ldr	r3, [r7, #16]
 802290a:	2b00      	cmp	r3, #0
 802290c:	d01b      	beq.n	8022946 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802290e:	697b      	ldr	r3, [r7, #20]
 8022910:	2200      	movs	r2, #0
 8022912:	709a      	strb	r2, [r3, #2]
 8022914:	2200      	movs	r2, #0
 8022916:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022918:	69fb      	ldr	r3, [r7, #28]
 802291a:	895b      	ldrh	r3, [r3, #10]
 802291c:	4619      	mov	r1, r3
 802291e:	6978      	ldr	r0, [r7, #20]
 8022920:	f7f6 fa09 	bl	8018d36 <inet_chksum>
 8022924:	4603      	mov	r3, r0
 8022926:	461a      	mov	r2, r3
 8022928:	697b      	ldr	r3, [r7, #20]
 802292a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802292c:	f107 020c 	add.w	r2, r7, #12
 8022930:	693b      	ldr	r3, [r7, #16]
 8022932:	9302      	str	r3, [sp, #8]
 8022934:	2301      	movs	r3, #1
 8022936:	9301      	str	r3, [sp, #4]
 8022938:	2300      	movs	r3, #0
 802293a:	9300      	str	r3, [sp, #0]
 802293c:	23ff      	movs	r3, #255	@ 0xff
 802293e:	2100      	movs	r1, #0
 8022940:	69f8      	ldr	r0, [r7, #28]
 8022942:	f000 f9cd 	bl	8022ce0 <ip4_output_if>
  }
  pbuf_free(q);
 8022946:	69f8      	ldr	r0, [r7, #28]
 8022948:	f7f7 fe46 	bl	801a5d8 <pbuf_free>
 802294c:	e000      	b.n	8022950 <icmp_send_response+0xd4>
    return;
 802294e:	bf00      	nop
}
 8022950:	3720      	adds	r7, #32
 8022952:	46bd      	mov	sp, r7
 8022954:	bd80      	pop	{r7, pc}
 8022956:	bf00      	nop
 8022958:	0802ca78 	.word	0x0802ca78
 802295c:	0802cb44 	.word	0x0802cb44
 8022960:	0802cae8 	.word	0x0802cae8

08022964 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8022964:	b480      	push	{r7}
 8022966:	b085      	sub	sp, #20
 8022968:	af00      	add	r7, sp, #0
 802296a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802296c:	4b33      	ldr	r3, [pc, #204]	@ (8022a3c <ip4_route+0xd8>)
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	60fb      	str	r3, [r7, #12]
 8022972:	e036      	b.n	80229e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022974:	68fb      	ldr	r3, [r7, #12]
 8022976:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802297a:	f003 0301 	and.w	r3, r3, #1
 802297e:	b2db      	uxtb	r3, r3
 8022980:	2b00      	cmp	r3, #0
 8022982:	d02b      	beq.n	80229dc <ip4_route+0x78>
 8022984:	68fb      	ldr	r3, [r7, #12]
 8022986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802298a:	089b      	lsrs	r3, r3, #2
 802298c:	f003 0301 	and.w	r3, r3, #1
 8022990:	b2db      	uxtb	r3, r3
 8022992:	2b00      	cmp	r3, #0
 8022994:	d022      	beq.n	80229dc <ip4_route+0x78>
 8022996:	68fb      	ldr	r3, [r7, #12]
 8022998:	3304      	adds	r3, #4
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d01d      	beq.n	80229dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	681a      	ldr	r2, [r3, #0]
 80229a4:	68fb      	ldr	r3, [r7, #12]
 80229a6:	3304      	adds	r3, #4
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	405a      	eors	r2, r3
 80229ac:	68fb      	ldr	r3, [r7, #12]
 80229ae:	3308      	adds	r3, #8
 80229b0:	681b      	ldr	r3, [r3, #0]
 80229b2:	4013      	ands	r3, r2
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d101      	bne.n	80229bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	e038      	b.n	8022a2e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80229c2:	f003 0302 	and.w	r3, r3, #2
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d108      	bne.n	80229dc <ip4_route+0x78>
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	681a      	ldr	r2, [r3, #0]
 80229ce:	68fb      	ldr	r3, [r7, #12]
 80229d0:	330c      	adds	r3, #12
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	429a      	cmp	r2, r3
 80229d6:	d101      	bne.n	80229dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	e028      	b.n	8022a2e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80229dc:	68fb      	ldr	r3, [r7, #12]
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	60fb      	str	r3, [r7, #12]
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d1c5      	bne.n	8022974 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80229e8:	4b15      	ldr	r3, [pc, #84]	@ (8022a40 <ip4_route+0xdc>)
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d01a      	beq.n	8022a26 <ip4_route+0xc2>
 80229f0:	4b13      	ldr	r3, [pc, #76]	@ (8022a40 <ip4_route+0xdc>)
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80229f8:	f003 0301 	and.w	r3, r3, #1
 80229fc:	2b00      	cmp	r3, #0
 80229fe:	d012      	beq.n	8022a26 <ip4_route+0xc2>
 8022a00:	4b0f      	ldr	r3, [pc, #60]	@ (8022a40 <ip4_route+0xdc>)
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022a08:	f003 0304 	and.w	r3, r3, #4
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d00a      	beq.n	8022a26 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a10:	4b0b      	ldr	r3, [pc, #44]	@ (8022a40 <ip4_route+0xdc>)
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	3304      	adds	r3, #4
 8022a16:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	d004      	beq.n	8022a26 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	b2db      	uxtb	r3, r3
 8022a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8022a24:	d101      	bne.n	8022a2a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8022a26:	2300      	movs	r3, #0
 8022a28:	e001      	b.n	8022a2e <ip4_route+0xca>
  }

  return netif_default;
 8022a2a:	4b05      	ldr	r3, [pc, #20]	@ (8022a40 <ip4_route+0xdc>)
 8022a2c:	681b      	ldr	r3, [r3, #0]
}
 8022a2e:	4618      	mov	r0, r3
 8022a30:	3714      	adds	r7, #20
 8022a32:	46bd      	mov	sp, r7
 8022a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a38:	4770      	bx	lr
 8022a3a:	bf00      	nop
 8022a3c:	2400be58 	.word	0x2400be58
 8022a40:	2400be5c 	.word	0x2400be5c

08022a44 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8022a44:	b580      	push	{r7, lr}
 8022a46:	b082      	sub	sp, #8
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022a4c:	687b      	ldr	r3, [r7, #4]
 8022a4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022a52:	f003 0301 	and.w	r3, r3, #1
 8022a56:	b2db      	uxtb	r3, r3
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d016      	beq.n	8022a8a <ip4_input_accept+0x46>
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	3304      	adds	r3, #4
 8022a60:	681b      	ldr	r3, [r3, #0]
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d011      	beq.n	8022a8a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022a66:	4b0b      	ldr	r3, [pc, #44]	@ (8022a94 <ip4_input_accept+0x50>)
 8022a68:	695a      	ldr	r2, [r3, #20]
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	3304      	adds	r3, #4
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	429a      	cmp	r2, r3
 8022a72:	d008      	beq.n	8022a86 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022a74:	4b07      	ldr	r3, [pc, #28]	@ (8022a94 <ip4_input_accept+0x50>)
 8022a76:	695b      	ldr	r3, [r3, #20]
 8022a78:	6879      	ldr	r1, [r7, #4]
 8022a7a:	4618      	mov	r0, r3
 8022a7c:	f000 fa08 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8022a80:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	d001      	beq.n	8022a8a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8022a86:	2301      	movs	r3, #1
 8022a88:	e000      	b.n	8022a8c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8022a8a:	2300      	movs	r3, #0
}
 8022a8c:	4618      	mov	r0, r3
 8022a8e:	3708      	adds	r7, #8
 8022a90:	46bd      	mov	sp, r7
 8022a92:	bd80      	pop	{r7, pc}
 8022a94:	24008d64 	.word	0x24008d64

08022a98 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022a98:	b580      	push	{r7, lr}
 8022a9a:	b086      	sub	sp, #24
 8022a9c:	af00      	add	r7, sp, #0
 8022a9e:	6078      	str	r0, [r7, #4]
 8022aa0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	685b      	ldr	r3, [r3, #4]
 8022aa6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8022aa8:	697b      	ldr	r3, [r7, #20]
 8022aaa:	781b      	ldrb	r3, [r3, #0]
 8022aac:	091b      	lsrs	r3, r3, #4
 8022aae:	b2db      	uxtb	r3, r3
 8022ab0:	2b04      	cmp	r3, #4
 8022ab2:	d004      	beq.n	8022abe <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8022ab4:	6878      	ldr	r0, [r7, #4]
 8022ab6:	f7f7 fd8f 	bl	801a5d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8022aba:	2300      	movs	r3, #0
 8022abc:	e107      	b.n	8022cce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022abe:	697b      	ldr	r3, [r7, #20]
 8022ac0:	781b      	ldrb	r3, [r3, #0]
 8022ac2:	f003 030f 	and.w	r3, r3, #15
 8022ac6:	b2db      	uxtb	r3, r3
 8022ac8:	009b      	lsls	r3, r3, #2
 8022aca:	b2db      	uxtb	r3, r3
 8022acc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022ace:	697b      	ldr	r3, [r7, #20]
 8022ad0:	885b      	ldrh	r3, [r3, #2]
 8022ad2:	b29b      	uxth	r3, r3
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	f7f6 f8a3 	bl	8018c20 <lwip_htons>
 8022ada:	4603      	mov	r3, r0
 8022adc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	891b      	ldrh	r3, [r3, #8]
 8022ae2:	89ba      	ldrh	r2, [r7, #12]
 8022ae4:	429a      	cmp	r2, r3
 8022ae6:	d204      	bcs.n	8022af2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8022ae8:	89bb      	ldrh	r3, [r7, #12]
 8022aea:	4619      	mov	r1, r3
 8022aec:	6878      	ldr	r0, [r7, #4]
 8022aee:	f7f7 fbbb 	bl	801a268 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	895b      	ldrh	r3, [r3, #10]
 8022af6:	89fa      	ldrh	r2, [r7, #14]
 8022af8:	429a      	cmp	r2, r3
 8022afa:	d807      	bhi.n	8022b0c <ip4_input+0x74>
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	891b      	ldrh	r3, [r3, #8]
 8022b00:	89ba      	ldrh	r2, [r7, #12]
 8022b02:	429a      	cmp	r2, r3
 8022b04:	d802      	bhi.n	8022b0c <ip4_input+0x74>
 8022b06:	89fb      	ldrh	r3, [r7, #14]
 8022b08:	2b13      	cmp	r3, #19
 8022b0a:	d804      	bhi.n	8022b16 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8022b0c:	6878      	ldr	r0, [r7, #4]
 8022b0e:	f7f7 fd63 	bl	801a5d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8022b12:	2300      	movs	r3, #0
 8022b14:	e0db      	b.n	8022cce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022b16:	697b      	ldr	r3, [r7, #20]
 8022b18:	691b      	ldr	r3, [r3, #16]
 8022b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8022cd8 <ip4_input+0x240>)
 8022b1c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022b1e:	697b      	ldr	r3, [r7, #20]
 8022b20:	68db      	ldr	r3, [r3, #12]
 8022b22:	4a6d      	ldr	r2, [pc, #436]	@ (8022cd8 <ip4_input+0x240>)
 8022b24:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022b26:	4b6c      	ldr	r3, [pc, #432]	@ (8022cd8 <ip4_input+0x240>)
 8022b28:	695b      	ldr	r3, [r3, #20]
 8022b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8022b2e:	2be0      	cmp	r3, #224	@ 0xe0
 8022b30:	d112      	bne.n	8022b58 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022b32:	683b      	ldr	r3, [r7, #0]
 8022b34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022b38:	f003 0301 	and.w	r3, r3, #1
 8022b3c:	b2db      	uxtb	r3, r3
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d007      	beq.n	8022b52 <ip4_input+0xba>
 8022b42:	683b      	ldr	r3, [r7, #0]
 8022b44:	3304      	adds	r3, #4
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	d002      	beq.n	8022b52 <ip4_input+0xba>
      netif = inp;
 8022b4c:	683b      	ldr	r3, [r7, #0]
 8022b4e:	613b      	str	r3, [r7, #16]
 8022b50:	e02a      	b.n	8022ba8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8022b52:	2300      	movs	r3, #0
 8022b54:	613b      	str	r3, [r7, #16]
 8022b56:	e027      	b.n	8022ba8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8022b58:	6838      	ldr	r0, [r7, #0]
 8022b5a:	f7ff ff73 	bl	8022a44 <ip4_input_accept>
 8022b5e:	4603      	mov	r3, r0
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	d002      	beq.n	8022b6a <ip4_input+0xd2>
      netif = inp;
 8022b64:	683b      	ldr	r3, [r7, #0]
 8022b66:	613b      	str	r3, [r7, #16]
 8022b68:	e01e      	b.n	8022ba8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8022cd8 <ip4_input+0x240>)
 8022b70:	695b      	ldr	r3, [r3, #20]
 8022b72:	b2db      	uxtb	r3, r3
 8022b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8022b76:	d017      	beq.n	8022ba8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022b78:	4b58      	ldr	r3, [pc, #352]	@ (8022cdc <ip4_input+0x244>)
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	613b      	str	r3, [r7, #16]
 8022b7e:	e00e      	b.n	8022b9e <ip4_input+0x106>
          if (netif == inp) {
 8022b80:	693a      	ldr	r2, [r7, #16]
 8022b82:	683b      	ldr	r3, [r7, #0]
 8022b84:	429a      	cmp	r2, r3
 8022b86:	d006      	beq.n	8022b96 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8022b88:	6938      	ldr	r0, [r7, #16]
 8022b8a:	f7ff ff5b 	bl	8022a44 <ip4_input_accept>
 8022b8e:	4603      	mov	r3, r0
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d108      	bne.n	8022ba6 <ip4_input+0x10e>
 8022b94:	e000      	b.n	8022b98 <ip4_input+0x100>
            continue;
 8022b96:	bf00      	nop
        NETIF_FOREACH(netif) {
 8022b98:	693b      	ldr	r3, [r7, #16]
 8022b9a:	681b      	ldr	r3, [r3, #0]
 8022b9c:	613b      	str	r3, [r7, #16]
 8022b9e:	693b      	ldr	r3, [r7, #16]
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d1ed      	bne.n	8022b80 <ip4_input+0xe8>
 8022ba4:	e000      	b.n	8022ba8 <ip4_input+0x110>
            break;
 8022ba6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8022cd8 <ip4_input+0x240>)
 8022baa:	691b      	ldr	r3, [r3, #16]
 8022bac:	6839      	ldr	r1, [r7, #0]
 8022bae:	4618      	mov	r0, r3
 8022bb0:	f000 f96e 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8022bb4:	4603      	mov	r3, r0
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d105      	bne.n	8022bc6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8022bba:	4b47      	ldr	r3, [pc, #284]	@ (8022cd8 <ip4_input+0x240>)
 8022bbc:	691b      	ldr	r3, [r3, #16]
 8022bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022bc2:	2be0      	cmp	r3, #224	@ 0xe0
 8022bc4:	d104      	bne.n	8022bd0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8022bc6:	6878      	ldr	r0, [r7, #4]
 8022bc8:	f7f7 fd06 	bl	801a5d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8022bcc:	2300      	movs	r3, #0
 8022bce:	e07e      	b.n	8022cce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8022bd0:	693b      	ldr	r3, [r7, #16]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d104      	bne.n	8022be0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8022bd6:	6878      	ldr	r0, [r7, #4]
 8022bd8:	f7f7 fcfe 	bl	801a5d8 <pbuf_free>
    return ERR_OK;
 8022bdc:	2300      	movs	r3, #0
 8022bde:	e076      	b.n	8022cce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022be0:	697b      	ldr	r3, [r7, #20]
 8022be2:	88db      	ldrh	r3, [r3, #6]
 8022be4:	b29b      	uxth	r3, r3
 8022be6:	461a      	mov	r2, r3
 8022be8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8022bec:	4013      	ands	r3, r2
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d00b      	beq.n	8022c0a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022bf2:	6878      	ldr	r0, [r7, #4]
 8022bf4:	f000 fdd0 	bl	8023798 <ip4_reass>
 8022bf8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	d101      	bne.n	8022c04 <ip4_input+0x16c>
      return ERR_OK;
 8022c00:	2300      	movs	r3, #0
 8022c02:	e064      	b.n	8022cce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	685b      	ldr	r3, [r3, #4]
 8022c08:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8022c0a:	4a33      	ldr	r2, [pc, #204]	@ (8022cd8 <ip4_input+0x240>)
 8022c0c:	693b      	ldr	r3, [r7, #16]
 8022c0e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8022c10:	4a31      	ldr	r2, [pc, #196]	@ (8022cd8 <ip4_input+0x240>)
 8022c12:	683b      	ldr	r3, [r7, #0]
 8022c14:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8022c16:	4a30      	ldr	r2, [pc, #192]	@ (8022cd8 <ip4_input+0x240>)
 8022c18:	697b      	ldr	r3, [r7, #20]
 8022c1a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022c1c:	697b      	ldr	r3, [r7, #20]
 8022c1e:	781b      	ldrb	r3, [r3, #0]
 8022c20:	f003 030f 	and.w	r3, r3, #15
 8022c24:	b2db      	uxtb	r3, r3
 8022c26:	009b      	lsls	r3, r3, #2
 8022c28:	b2db      	uxtb	r3, r3
 8022c2a:	461a      	mov	r2, r3
 8022c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8022cd8 <ip4_input+0x240>)
 8022c2e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022c30:	89fb      	ldrh	r3, [r7, #14]
 8022c32:	4619      	mov	r1, r3
 8022c34:	6878      	ldr	r0, [r7, #4]
 8022c36:	f7f7 fc17 	bl	801a468 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022c3a:	697b      	ldr	r3, [r7, #20]
 8022c3c:	7a5b      	ldrb	r3, [r3, #9]
 8022c3e:	2b11      	cmp	r3, #17
 8022c40:	d006      	beq.n	8022c50 <ip4_input+0x1b8>
 8022c42:	2b11      	cmp	r3, #17
 8022c44:	dc13      	bgt.n	8022c6e <ip4_input+0x1d6>
 8022c46:	2b01      	cmp	r3, #1
 8022c48:	d00c      	beq.n	8022c64 <ip4_input+0x1cc>
 8022c4a:	2b06      	cmp	r3, #6
 8022c4c:	d005      	beq.n	8022c5a <ip4_input+0x1c2>
 8022c4e:	e00e      	b.n	8022c6e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8022c50:	6839      	ldr	r1, [r7, #0]
 8022c52:	6878      	ldr	r0, [r7, #4]
 8022c54:	f7fe f94a 	bl	8020eec <udp_input>
        break;
 8022c58:	e026      	b.n	8022ca8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8022c5a:	6839      	ldr	r1, [r7, #0]
 8022c5c:	6878      	ldr	r0, [r7, #4]
 8022c5e:	f7f9 fd09 	bl	801c674 <tcp_input>
        break;
 8022c62:	e021      	b.n	8022ca8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8022c64:	6839      	ldr	r1, [r7, #0]
 8022c66:	6878      	ldr	r0, [r7, #4]
 8022c68:	f7ff fcc8 	bl	80225fc <icmp_input>
        break;
 8022c6c:	e01c      	b.n	8022ca8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8022cd8 <ip4_input+0x240>)
 8022c70:	695b      	ldr	r3, [r3, #20]
 8022c72:	6939      	ldr	r1, [r7, #16]
 8022c74:	4618      	mov	r0, r3
 8022c76:	f000 f90b 	bl	8022e90 <ip4_addr_isbroadcast_u32>
 8022c7a:	4603      	mov	r3, r0
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	d10f      	bne.n	8022ca0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022c80:	4b15      	ldr	r3, [pc, #84]	@ (8022cd8 <ip4_input+0x240>)
 8022c82:	695b      	ldr	r3, [r3, #20]
 8022c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022c88:	2be0      	cmp	r3, #224	@ 0xe0
 8022c8a:	d009      	beq.n	8022ca0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8022c90:	4619      	mov	r1, r3
 8022c92:	6878      	ldr	r0, [r7, #4]
 8022c94:	f7f7 fc5b 	bl	801a54e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022c98:	2102      	movs	r1, #2
 8022c9a:	6878      	ldr	r0, [r7, #4]
 8022c9c:	f7ff fdce 	bl	802283c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8022ca0:	6878      	ldr	r0, [r7, #4]
 8022ca2:	f7f7 fc99 	bl	801a5d8 <pbuf_free>
        break;
 8022ca6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8022cd8 <ip4_input+0x240>)
 8022caa:	2200      	movs	r2, #0
 8022cac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8022cae:	4b0a      	ldr	r3, [pc, #40]	@ (8022cd8 <ip4_input+0x240>)
 8022cb0:	2200      	movs	r2, #0
 8022cb2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8022cb4:	4b08      	ldr	r3, [pc, #32]	@ (8022cd8 <ip4_input+0x240>)
 8022cb6:	2200      	movs	r2, #0
 8022cb8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022cba:	4b07      	ldr	r3, [pc, #28]	@ (8022cd8 <ip4_input+0x240>)
 8022cbc:	2200      	movs	r2, #0
 8022cbe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8022cc0:	4b05      	ldr	r3, [pc, #20]	@ (8022cd8 <ip4_input+0x240>)
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022cc6:	4b04      	ldr	r3, [pc, #16]	@ (8022cd8 <ip4_input+0x240>)
 8022cc8:	2200      	movs	r2, #0
 8022cca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8022ccc:	2300      	movs	r3, #0
}
 8022cce:	4618      	mov	r0, r3
 8022cd0:	3718      	adds	r7, #24
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	bd80      	pop	{r7, pc}
 8022cd6:	bf00      	nop
 8022cd8:	24008d64 	.word	0x24008d64
 8022cdc:	2400be58 	.word	0x2400be58

08022ce0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8022ce0:	b580      	push	{r7, lr}
 8022ce2:	b08a      	sub	sp, #40	@ 0x28
 8022ce4:	af04      	add	r7, sp, #16
 8022ce6:	60f8      	str	r0, [r7, #12]
 8022ce8:	60b9      	str	r1, [r7, #8]
 8022cea:	607a      	str	r2, [r7, #4]
 8022cec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8022cee:	68bb      	ldr	r3, [r7, #8]
 8022cf0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022cf2:	687b      	ldr	r3, [r7, #4]
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	d009      	beq.n	8022d0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8022cf8:	68bb      	ldr	r3, [r7, #8]
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	d003      	beq.n	8022d06 <ip4_output_if+0x26>
 8022cfe:	68bb      	ldr	r3, [r7, #8]
 8022d00:	681b      	ldr	r3, [r3, #0]
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d102      	bne.n	8022d0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8022d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d08:	3304      	adds	r3, #4
 8022d0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022d0c:	78fa      	ldrb	r2, [r7, #3]
 8022d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d10:	9302      	str	r3, [sp, #8]
 8022d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022d16:	9301      	str	r3, [sp, #4]
 8022d18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8022d1c:	9300      	str	r3, [sp, #0]
 8022d1e:	4613      	mov	r3, r2
 8022d20:	687a      	ldr	r2, [r7, #4]
 8022d22:	6979      	ldr	r1, [r7, #20]
 8022d24:	68f8      	ldr	r0, [r7, #12]
 8022d26:	f000 f805 	bl	8022d34 <ip4_output_if_src>
 8022d2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8022d2c:	4618      	mov	r0, r3
 8022d2e:	3718      	adds	r7, #24
 8022d30:	46bd      	mov	sp, r7
 8022d32:	bd80      	pop	{r7, pc}

08022d34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022d34:	b580      	push	{r7, lr}
 8022d36:	b088      	sub	sp, #32
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	60f8      	str	r0, [r7, #12]
 8022d3c:	60b9      	str	r1, [r7, #8]
 8022d3e:	607a      	str	r2, [r7, #4]
 8022d40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022d42:	68fb      	ldr	r3, [r7, #12]
 8022d44:	7b9b      	ldrb	r3, [r3, #14]
 8022d46:	2b01      	cmp	r3, #1
 8022d48:	d006      	beq.n	8022d58 <ip4_output_if_src+0x24>
 8022d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8022e78 <ip4_output_if_src+0x144>)
 8022d4c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8022d50:	494a      	ldr	r1, [pc, #296]	@ (8022e7c <ip4_output_if_src+0x148>)
 8022d52:	484b      	ldr	r0, [pc, #300]	@ (8022e80 <ip4_output_if_src+0x14c>)
 8022d54:	f002 fb8e 	bl	8025474 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d060      	beq.n	8022e20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8022d5e:	2314      	movs	r3, #20
 8022d60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022d62:	2114      	movs	r1, #20
 8022d64:	68f8      	ldr	r0, [r7, #12]
 8022d66:	f7f7 fb6f 	bl	801a448 <pbuf_add_header>
 8022d6a:	4603      	mov	r3, r0
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d002      	beq.n	8022d76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022d70:	f06f 0301 	mvn.w	r3, #1
 8022d74:	e07c      	b.n	8022e70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8022d76:	68fb      	ldr	r3, [r7, #12]
 8022d78:	685b      	ldr	r3, [r3, #4]
 8022d7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022d7c:	68fb      	ldr	r3, [r7, #12]
 8022d7e:	895b      	ldrh	r3, [r3, #10]
 8022d80:	2b13      	cmp	r3, #19
 8022d82:	d806      	bhi.n	8022d92 <ip4_output_if_src+0x5e>
 8022d84:	4b3c      	ldr	r3, [pc, #240]	@ (8022e78 <ip4_output_if_src+0x144>)
 8022d86:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8022d8a:	493e      	ldr	r1, [pc, #248]	@ (8022e84 <ip4_output_if_src+0x150>)
 8022d8c:	483c      	ldr	r0, [pc, #240]	@ (8022e80 <ip4_output_if_src+0x14c>)
 8022d8e:	f002 fb71 	bl	8025474 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8022d92:	69fb      	ldr	r3, [r7, #28]
 8022d94:	78fa      	ldrb	r2, [r7, #3]
 8022d96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8022d98:	69fb      	ldr	r3, [r7, #28]
 8022d9a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8022d9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	681a      	ldr	r2, [r3, #0]
 8022da4:	69fb      	ldr	r3, [r7, #28]
 8022da6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022da8:	8b7b      	ldrh	r3, [r7, #26]
 8022daa:	089b      	lsrs	r3, r3, #2
 8022dac:	b29b      	uxth	r3, r3
 8022dae:	b2db      	uxtb	r3, r3
 8022db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022db4:	b2da      	uxtb	r2, r3
 8022db6:	69fb      	ldr	r3, [r7, #28]
 8022db8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8022dba:	69fb      	ldr	r3, [r7, #28]
 8022dbc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8022dc0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022dc2:	68fb      	ldr	r3, [r7, #12]
 8022dc4:	891b      	ldrh	r3, [r3, #8]
 8022dc6:	4618      	mov	r0, r3
 8022dc8:	f7f5 ff2a 	bl	8018c20 <lwip_htons>
 8022dcc:	4603      	mov	r3, r0
 8022dce:	461a      	mov	r2, r3
 8022dd0:	69fb      	ldr	r3, [r7, #28]
 8022dd2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8022dd4:	69fb      	ldr	r3, [r7, #28]
 8022dd6:	2200      	movs	r2, #0
 8022dd8:	719a      	strb	r2, [r3, #6]
 8022dda:	2200      	movs	r2, #0
 8022ddc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022dde:	4b2a      	ldr	r3, [pc, #168]	@ (8022e88 <ip4_output_if_src+0x154>)
 8022de0:	881b      	ldrh	r3, [r3, #0]
 8022de2:	4618      	mov	r0, r3
 8022de4:	f7f5 ff1c 	bl	8018c20 <lwip_htons>
 8022de8:	4603      	mov	r3, r0
 8022dea:	461a      	mov	r2, r3
 8022dec:	69fb      	ldr	r3, [r7, #28]
 8022dee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022df0:	4b25      	ldr	r3, [pc, #148]	@ (8022e88 <ip4_output_if_src+0x154>)
 8022df2:	881b      	ldrh	r3, [r3, #0]
 8022df4:	3301      	adds	r3, #1
 8022df6:	b29a      	uxth	r2, r3
 8022df8:	4b23      	ldr	r3, [pc, #140]	@ (8022e88 <ip4_output_if_src+0x154>)
 8022dfa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8022dfc:	68bb      	ldr	r3, [r7, #8]
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d104      	bne.n	8022e0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022e02:	4b22      	ldr	r3, [pc, #136]	@ (8022e8c <ip4_output_if_src+0x158>)
 8022e04:	681a      	ldr	r2, [r3, #0]
 8022e06:	69fb      	ldr	r3, [r7, #28]
 8022e08:	60da      	str	r2, [r3, #12]
 8022e0a:	e003      	b.n	8022e14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022e0c:	68bb      	ldr	r3, [r7, #8]
 8022e0e:	681a      	ldr	r2, [r3, #0]
 8022e10:	69fb      	ldr	r3, [r7, #28]
 8022e12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8022e14:	69fb      	ldr	r3, [r7, #28]
 8022e16:	2200      	movs	r2, #0
 8022e18:	729a      	strb	r2, [r3, #10]
 8022e1a:	2200      	movs	r2, #0
 8022e1c:	72da      	strb	r2, [r3, #11]
 8022e1e:	e00f      	b.n	8022e40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	895b      	ldrh	r3, [r3, #10]
 8022e24:	2b13      	cmp	r3, #19
 8022e26:	d802      	bhi.n	8022e2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8022e28:	f06f 0301 	mvn.w	r3, #1
 8022e2c:	e020      	b.n	8022e70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8022e2e:	68fb      	ldr	r3, [r7, #12]
 8022e30:	685b      	ldr	r3, [r3, #4]
 8022e32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022e34:	69fb      	ldr	r3, [r7, #28]
 8022e36:	691b      	ldr	r3, [r3, #16]
 8022e38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8022e3a:	f107 0314 	add.w	r3, r7, #20
 8022e3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022e42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	d00c      	beq.n	8022e62 <ip4_output_if_src+0x12e>
 8022e48:	68fb      	ldr	r3, [r7, #12]
 8022e4a:	891a      	ldrh	r2, [r3, #8]
 8022e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022e4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8022e50:	429a      	cmp	r2, r3
 8022e52:	d906      	bls.n	8022e62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8022e54:	687a      	ldr	r2, [r7, #4]
 8022e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8022e58:	68f8      	ldr	r0, [r7, #12]
 8022e5a:	f000 fe91 	bl	8023b80 <ip4_frag>
 8022e5e:	4603      	mov	r3, r0
 8022e60:	e006      	b.n	8022e70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022e64:	695b      	ldr	r3, [r3, #20]
 8022e66:	687a      	ldr	r2, [r7, #4]
 8022e68:	68f9      	ldr	r1, [r7, #12]
 8022e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8022e6c:	4798      	blx	r3
 8022e6e:	4603      	mov	r3, r0
}
 8022e70:	4618      	mov	r0, r3
 8022e72:	3720      	adds	r7, #32
 8022e74:	46bd      	mov	sp, r7
 8022e76:	bd80      	pop	{r7, pc}
 8022e78:	0802cb70 	.word	0x0802cb70
 8022e7c:	0802cba4 	.word	0x0802cba4
 8022e80:	0802cbb0 	.word	0x0802cbb0
 8022e84:	0802cbd8 	.word	0x0802cbd8
 8022e88:	2400bfb6 	.word	0x2400bfb6
 8022e8c:	0802d0e4 	.word	0x0802d0e4

08022e90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8022e90:	b480      	push	{r7}
 8022e92:	b085      	sub	sp, #20
 8022e94:	af00      	add	r7, sp, #0
 8022e96:	6078      	str	r0, [r7, #4]
 8022e98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ea4:	d002      	beq.n	8022eac <ip4_addr_isbroadcast_u32+0x1c>
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	2b00      	cmp	r3, #0
 8022eaa:	d101      	bne.n	8022eb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8022eac:	2301      	movs	r3, #1
 8022eae:	e02a      	b.n	8022f06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022eb0:	683b      	ldr	r3, [r7, #0]
 8022eb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8022eb6:	f003 0302 	and.w	r3, r3, #2
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d101      	bne.n	8022ec2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	e021      	b.n	8022f06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022ec2:	683b      	ldr	r3, [r7, #0]
 8022ec4:	3304      	adds	r3, #4
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	687a      	ldr	r2, [r7, #4]
 8022eca:	429a      	cmp	r2, r3
 8022ecc:	d101      	bne.n	8022ed2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8022ece:	2300      	movs	r3, #0
 8022ed0:	e019      	b.n	8022f06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022ed2:	68fa      	ldr	r2, [r7, #12]
 8022ed4:	683b      	ldr	r3, [r7, #0]
 8022ed6:	3304      	adds	r3, #4
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	405a      	eors	r2, r3
 8022edc:	683b      	ldr	r3, [r7, #0]
 8022ede:	3308      	adds	r3, #8
 8022ee0:	681b      	ldr	r3, [r3, #0]
 8022ee2:	4013      	ands	r3, r2
 8022ee4:	2b00      	cmp	r3, #0
 8022ee6:	d10d      	bne.n	8022f04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022ee8:	683b      	ldr	r3, [r7, #0]
 8022eea:	3308      	adds	r3, #8
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	43da      	mvns	r2, r3
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8022ef4:	683b      	ldr	r3, [r7, #0]
 8022ef6:	3308      	adds	r3, #8
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022efc:	429a      	cmp	r2, r3
 8022efe:	d101      	bne.n	8022f04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8022f00:	2301      	movs	r3, #1
 8022f02:	e000      	b.n	8022f06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8022f04:	2300      	movs	r3, #0
  }
}
 8022f06:	4618      	mov	r0, r3
 8022f08:	3714      	adds	r7, #20
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f10:	4770      	bx	lr

08022f12 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8022f12:	b580      	push	{r7, lr}
 8022f14:	b084      	sub	sp, #16
 8022f16:	af00      	add	r7, sp, #0
 8022f18:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8022f1a:	f107 030c 	add.w	r3, r7, #12
 8022f1e:	4619      	mov	r1, r3
 8022f20:	6878      	ldr	r0, [r7, #4]
 8022f22:	f000 f80b 	bl	8022f3c <ip4addr_aton>
 8022f26:	4603      	mov	r3, r0
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d001      	beq.n	8022f30 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	e001      	b.n	8022f34 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8022f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022f34:	4618      	mov	r0, r3
 8022f36:	3710      	adds	r7, #16
 8022f38:	46bd      	mov	sp, r7
 8022f3a:	bd80      	pop	{r7, pc}

08022f3c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022f3c:	b580      	push	{r7, lr}
 8022f3e:	b08a      	sub	sp, #40	@ 0x28
 8022f40:	af00      	add	r7, sp, #0
 8022f42:	6078      	str	r0, [r7, #4]
 8022f44:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8022f46:	f107 030c 	add.w	r3, r7, #12
 8022f4a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	781b      	ldrb	r3, [r3, #0]
 8022f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022f54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022f58:	3301      	adds	r3, #1
 8022f5a:	4a89      	ldr	r2, [pc, #548]	@ (8023180 <ip4addr_aton+0x244>)
 8022f5c:	4413      	add	r3, r2
 8022f5e:	781b      	ldrb	r3, [r3, #0]
 8022f60:	f003 0304 	and.w	r3, r3, #4
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	d101      	bne.n	8022f6c <ip4addr_aton+0x30>
      return 0;
 8022f68:	2300      	movs	r3, #0
 8022f6a:	e105      	b.n	8023178 <ip4addr_aton+0x23c>
    }
    val = 0;
 8022f6c:	2300      	movs	r3, #0
 8022f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8022f70:	230a      	movs	r3, #10
 8022f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8022f76:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022f7a:	2b30      	cmp	r3, #48	@ 0x30
 8022f7c:	d11c      	bne.n	8022fb8 <ip4addr_aton+0x7c>
      c = *++cp;
 8022f7e:	687b      	ldr	r3, [r7, #4]
 8022f80:	3301      	adds	r3, #1
 8022f82:	607b      	str	r3, [r7, #4]
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	781b      	ldrb	r3, [r3, #0]
 8022f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8022f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022f90:	2b78      	cmp	r3, #120	@ 0x78
 8022f92:	d003      	beq.n	8022f9c <ip4addr_aton+0x60>
 8022f94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022f98:	2b58      	cmp	r3, #88	@ 0x58
 8022f9a:	d10a      	bne.n	8022fb2 <ip4addr_aton+0x76>
        base = 16;
 8022f9c:	2310      	movs	r3, #16
 8022f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	3301      	adds	r3, #1
 8022fa6:	607b      	str	r3, [r7, #4]
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	781b      	ldrb	r3, [r3, #0]
 8022fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8022fb0:	e002      	b.n	8022fb8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8022fb2:	2308      	movs	r3, #8
 8022fb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8022fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022fbc:	3301      	adds	r3, #1
 8022fbe:	4a70      	ldr	r2, [pc, #448]	@ (8023180 <ip4addr_aton+0x244>)
 8022fc0:	4413      	add	r3, r2
 8022fc2:	781b      	ldrb	r3, [r3, #0]
 8022fc4:	f003 0304 	and.w	r3, r3, #4
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	d011      	beq.n	8022ff0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8022fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8022fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022fd2:	fb03 f202 	mul.w	r2, r3, r2
 8022fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022fda:	4413      	add	r3, r2
 8022fdc:	3b30      	subs	r3, #48	@ 0x30
 8022fde:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	3301      	adds	r3, #1
 8022fe4:	607b      	str	r3, [r7, #4]
 8022fe6:	687b      	ldr	r3, [r7, #4]
 8022fe8:	781b      	ldrb	r3, [r3, #0]
 8022fea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8022fee:	e7e3      	b.n	8022fb8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8022ff4:	2b10      	cmp	r3, #16
 8022ff6:	d127      	bne.n	8023048 <ip4addr_aton+0x10c>
 8022ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8022ffc:	3301      	adds	r3, #1
 8022ffe:	4a60      	ldr	r2, [pc, #384]	@ (8023180 <ip4addr_aton+0x244>)
 8023000:	4413      	add	r3, r2
 8023002:	781b      	ldrb	r3, [r3, #0]
 8023004:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8023008:	2b00      	cmp	r3, #0
 802300a:	d01d      	beq.n	8023048 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802300e:	011b      	lsls	r3, r3, #4
 8023010:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8023014:	f102 010a 	add.w	r1, r2, #10
 8023018:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 802301c:	3201      	adds	r2, #1
 802301e:	4858      	ldr	r0, [pc, #352]	@ (8023180 <ip4addr_aton+0x244>)
 8023020:	4402      	add	r2, r0
 8023022:	7812      	ldrb	r2, [r2, #0]
 8023024:	f002 0203 	and.w	r2, r2, #3
 8023028:	2a02      	cmp	r2, #2
 802302a:	d101      	bne.n	8023030 <ip4addr_aton+0xf4>
 802302c:	2261      	movs	r2, #97	@ 0x61
 802302e:	e000      	b.n	8023032 <ip4addr_aton+0xf6>
 8023030:	2241      	movs	r2, #65	@ 0x41
 8023032:	1a8a      	subs	r2, r1, r2
 8023034:	4313      	orrs	r3, r2
 8023036:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	3301      	adds	r3, #1
 802303c:	607b      	str	r3, [r7, #4]
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	781b      	ldrb	r3, [r3, #0]
 8023042:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8023046:	e7b7      	b.n	8022fb8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8023048:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802304c:	2b2e      	cmp	r3, #46	@ 0x2e
 802304e:	d114      	bne.n	802307a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8023050:	f107 030c 	add.w	r3, r7, #12
 8023054:	330c      	adds	r3, #12
 8023056:	69fa      	ldr	r2, [r7, #28]
 8023058:	429a      	cmp	r2, r3
 802305a:	d301      	bcc.n	8023060 <ip4addr_aton+0x124>
        return 0;
 802305c:	2300      	movs	r3, #0
 802305e:	e08b      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8023060:	69fb      	ldr	r3, [r7, #28]
 8023062:	1d1a      	adds	r2, r3, #4
 8023064:	61fa      	str	r2, [r7, #28]
 8023066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023068:	601a      	str	r2, [r3, #0]
      c = *++cp;
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	3301      	adds	r3, #1
 802306e:	607b      	str	r3, [r7, #4]
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	781b      	ldrb	r3, [r3, #0]
 8023074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8023078:	e76c      	b.n	8022f54 <ip4addr_aton+0x18>
    } else {
      break;
 802307a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 802307c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8023080:	2b00      	cmp	r3, #0
 8023082:	d00b      	beq.n	802309c <ip4addr_aton+0x160>
 8023084:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8023088:	3301      	adds	r3, #1
 802308a:	4a3d      	ldr	r2, [pc, #244]	@ (8023180 <ip4addr_aton+0x244>)
 802308c:	4413      	add	r3, r2
 802308e:	781b      	ldrb	r3, [r3, #0]
 8023090:	f003 0308 	and.w	r3, r3, #8
 8023094:	2b00      	cmp	r3, #0
 8023096:	d101      	bne.n	802309c <ip4addr_aton+0x160>
    return 0;
 8023098:	2300      	movs	r3, #0
 802309a:	e06d      	b.n	8023178 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 802309c:	f107 030c 	add.w	r3, r7, #12
 80230a0:	69fa      	ldr	r2, [r7, #28]
 80230a2:	1ad3      	subs	r3, r2, r3
 80230a4:	109b      	asrs	r3, r3, #2
 80230a6:	3301      	adds	r3, #1
 80230a8:	2b04      	cmp	r3, #4
 80230aa:	d853      	bhi.n	8023154 <ip4addr_aton+0x218>
 80230ac:	a201      	add	r2, pc, #4	@ (adr r2, 80230b4 <ip4addr_aton+0x178>)
 80230ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80230b2:	bf00      	nop
 80230b4:	080230c9 	.word	0x080230c9
 80230b8:	08023163 	.word	0x08023163
 80230bc:	080230cd 	.word	0x080230cd
 80230c0:	080230ef 	.word	0x080230ef
 80230c4:	0802311d 	.word	0x0802311d

    case 0:
      return 0;       /* initial nondigit */
 80230c8:	2300      	movs	r3, #0
 80230ca:	e055      	b.n	8023178 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80230cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80230d2:	d301      	bcc.n	80230d8 <ip4addr_aton+0x19c>
        return 0;
 80230d4:	2300      	movs	r3, #0
 80230d6:	e04f      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80230d8:	68fb      	ldr	r3, [r7, #12]
 80230da:	2bff      	cmp	r3, #255	@ 0xff
 80230dc:	d901      	bls.n	80230e2 <ip4addr_aton+0x1a6>
        return 0;
 80230de:	2300      	movs	r3, #0
 80230e0:	e04a      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80230e2:	68fb      	ldr	r3, [r7, #12]
 80230e4:	061b      	lsls	r3, r3, #24
 80230e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80230e8:	4313      	orrs	r3, r2
 80230ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80230ec:	e03a      	b.n	8023164 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80230ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80230f4:	d301      	bcc.n	80230fa <ip4addr_aton+0x1be>
        return 0;
 80230f6:	2300      	movs	r3, #0
 80230f8:	e03e      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80230fa:	68fb      	ldr	r3, [r7, #12]
 80230fc:	2bff      	cmp	r3, #255	@ 0xff
 80230fe:	d802      	bhi.n	8023106 <ip4addr_aton+0x1ca>
 8023100:	693b      	ldr	r3, [r7, #16]
 8023102:	2bff      	cmp	r3, #255	@ 0xff
 8023104:	d901      	bls.n	802310a <ip4addr_aton+0x1ce>
        return 0;
 8023106:	2300      	movs	r3, #0
 8023108:	e036      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 802310a:	68fb      	ldr	r3, [r7, #12]
 802310c:	061a      	lsls	r2, r3, #24
 802310e:	693b      	ldr	r3, [r7, #16]
 8023110:	041b      	lsls	r3, r3, #16
 8023112:	4313      	orrs	r3, r2
 8023114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023116:	4313      	orrs	r3, r2
 8023118:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 802311a:	e023      	b.n	8023164 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 802311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802311e:	2bff      	cmp	r3, #255	@ 0xff
 8023120:	d901      	bls.n	8023126 <ip4addr_aton+0x1ea>
        return 0;
 8023122:	2300      	movs	r3, #0
 8023124:	e028      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8023126:	68fb      	ldr	r3, [r7, #12]
 8023128:	2bff      	cmp	r3, #255	@ 0xff
 802312a:	d805      	bhi.n	8023138 <ip4addr_aton+0x1fc>
 802312c:	693b      	ldr	r3, [r7, #16]
 802312e:	2bff      	cmp	r3, #255	@ 0xff
 8023130:	d802      	bhi.n	8023138 <ip4addr_aton+0x1fc>
 8023132:	697b      	ldr	r3, [r7, #20]
 8023134:	2bff      	cmp	r3, #255	@ 0xff
 8023136:	d901      	bls.n	802313c <ip4addr_aton+0x200>
        return 0;
 8023138:	2300      	movs	r3, #0
 802313a:	e01d      	b.n	8023178 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 802313c:	68fb      	ldr	r3, [r7, #12]
 802313e:	061a      	lsls	r2, r3, #24
 8023140:	693b      	ldr	r3, [r7, #16]
 8023142:	041b      	lsls	r3, r3, #16
 8023144:	431a      	orrs	r2, r3
 8023146:	697b      	ldr	r3, [r7, #20]
 8023148:	021b      	lsls	r3, r3, #8
 802314a:	4313      	orrs	r3, r2
 802314c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802314e:	4313      	orrs	r3, r2
 8023150:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8023152:	e007      	b.n	8023164 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8023154:	4b0b      	ldr	r3, [pc, #44]	@ (8023184 <ip4addr_aton+0x248>)
 8023156:	22f9      	movs	r2, #249	@ 0xf9
 8023158:	490b      	ldr	r1, [pc, #44]	@ (8023188 <ip4addr_aton+0x24c>)
 802315a:	480c      	ldr	r0, [pc, #48]	@ (802318c <ip4addr_aton+0x250>)
 802315c:	f002 f98a 	bl	8025474 <iprintf>
      break;
 8023160:	e000      	b.n	8023164 <ip4addr_aton+0x228>
      break;
 8023162:	bf00      	nop
  }
  if (addr) {
 8023164:	683b      	ldr	r3, [r7, #0]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d005      	beq.n	8023176 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802316a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802316c:	f7f5 fd6d 	bl	8018c4a <lwip_htonl>
 8023170:	4602      	mov	r2, r0
 8023172:	683b      	ldr	r3, [r7, #0]
 8023174:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8023176:	2301      	movs	r3, #1
}
 8023178:	4618      	mov	r0, r3
 802317a:	3728      	adds	r7, #40	@ 0x28
 802317c:	46bd      	mov	sp, r7
 802317e:	bd80      	pop	{r7, pc}
 8023180:	0802d16f 	.word	0x0802d16f
 8023184:	0802cc08 	.word	0x0802cc08
 8023188:	0802cc44 	.word	0x0802cc44
 802318c:	0802cc50 	.word	0x0802cc50

08023190 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023190:	b580      	push	{r7, lr}
 8023192:	b084      	sub	sp, #16
 8023194:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8023196:	2300      	movs	r3, #0
 8023198:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802319a:	4b12      	ldr	r3, [pc, #72]	@ (80231e4 <ip_reass_tmr+0x54>)
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80231a0:	e018      	b.n	80231d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	7fdb      	ldrb	r3, [r3, #31]
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d00b      	beq.n	80231c2 <ip_reass_tmr+0x32>
      r->timer--;
 80231aa:	68fb      	ldr	r3, [r7, #12]
 80231ac:	7fdb      	ldrb	r3, [r3, #31]
 80231ae:	3b01      	subs	r3, #1
 80231b0:	b2da      	uxtb	r2, r3
 80231b2:	68fb      	ldr	r3, [r7, #12]
 80231b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80231b6:	68fb      	ldr	r3, [r7, #12]
 80231b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80231ba:	68fb      	ldr	r3, [r7, #12]
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	60fb      	str	r3, [r7, #12]
 80231c0:	e008      	b.n	80231d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80231cc:	68b9      	ldr	r1, [r7, #8]
 80231ce:	6878      	ldr	r0, [r7, #4]
 80231d0:	f000 f80a 	bl	80231e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80231d4:	68fb      	ldr	r3, [r7, #12]
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	d1e3      	bne.n	80231a2 <ip_reass_tmr+0x12>
    }
  }
}
 80231da:	bf00      	nop
 80231dc:	bf00      	nop
 80231de:	3710      	adds	r7, #16
 80231e0:	46bd      	mov	sp, r7
 80231e2:	bd80      	pop	{r7, pc}
 80231e4:	2400bfb8 	.word	0x2400bfb8

080231e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80231e8:	b580      	push	{r7, lr}
 80231ea:	b088      	sub	sp, #32
 80231ec:	af00      	add	r7, sp, #0
 80231ee:	6078      	str	r0, [r7, #4]
 80231f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80231f2:	2300      	movs	r3, #0
 80231f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80231f6:	683a      	ldr	r2, [r7, #0]
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	429a      	cmp	r2, r3
 80231fc:	d105      	bne.n	802320a <ip_reass_free_complete_datagram+0x22>
 80231fe:	4b45      	ldr	r3, [pc, #276]	@ (8023314 <ip_reass_free_complete_datagram+0x12c>)
 8023200:	22ab      	movs	r2, #171	@ 0xab
 8023202:	4945      	ldr	r1, [pc, #276]	@ (8023318 <ip_reass_free_complete_datagram+0x130>)
 8023204:	4845      	ldr	r0, [pc, #276]	@ (802331c <ip_reass_free_complete_datagram+0x134>)
 8023206:	f002 f935 	bl	8025474 <iprintf>
  if (prev != NULL) {
 802320a:	683b      	ldr	r3, [r7, #0]
 802320c:	2b00      	cmp	r3, #0
 802320e:	d00a      	beq.n	8023226 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023210:	683b      	ldr	r3, [r7, #0]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	687a      	ldr	r2, [r7, #4]
 8023216:	429a      	cmp	r2, r3
 8023218:	d005      	beq.n	8023226 <ip_reass_free_complete_datagram+0x3e>
 802321a:	4b3e      	ldr	r3, [pc, #248]	@ (8023314 <ip_reass_free_complete_datagram+0x12c>)
 802321c:	22ad      	movs	r2, #173	@ 0xad
 802321e:	4940      	ldr	r1, [pc, #256]	@ (8023320 <ip_reass_free_complete_datagram+0x138>)
 8023220:	483e      	ldr	r0, [pc, #248]	@ (802331c <ip_reass_free_complete_datagram+0x134>)
 8023222:	f002 f927 	bl	8025474 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	685b      	ldr	r3, [r3, #4]
 802322a:	685b      	ldr	r3, [r3, #4]
 802322c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802322e:	697b      	ldr	r3, [r7, #20]
 8023230:	889b      	ldrh	r3, [r3, #4]
 8023232:	b29b      	uxth	r3, r3
 8023234:	2b00      	cmp	r3, #0
 8023236:	d12a      	bne.n	802328e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	685b      	ldr	r3, [r3, #4]
 802323c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802323e:	697b      	ldr	r3, [r7, #20]
 8023240:	681a      	ldr	r2, [r3, #0]
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023246:	69bb      	ldr	r3, [r7, #24]
 8023248:	6858      	ldr	r0, [r3, #4]
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	3308      	adds	r3, #8
 802324e:	2214      	movs	r2, #20
 8023250:	4619      	mov	r1, r3
 8023252:	f002 fa9c 	bl	802578e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023256:	2101      	movs	r1, #1
 8023258:	69b8      	ldr	r0, [r7, #24]
 802325a:	f7ff faff 	bl	802285c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802325e:	69b8      	ldr	r0, [r7, #24]
 8023260:	f7f7 fa48 	bl	801a6f4 <pbuf_clen>
 8023264:	4603      	mov	r3, r0
 8023266:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023268:	8bfa      	ldrh	r2, [r7, #30]
 802326a:	8a7b      	ldrh	r3, [r7, #18]
 802326c:	4413      	add	r3, r2
 802326e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023272:	db05      	blt.n	8023280 <ip_reass_free_complete_datagram+0x98>
 8023274:	4b27      	ldr	r3, [pc, #156]	@ (8023314 <ip_reass_free_complete_datagram+0x12c>)
 8023276:	22bc      	movs	r2, #188	@ 0xbc
 8023278:	492a      	ldr	r1, [pc, #168]	@ (8023324 <ip_reass_free_complete_datagram+0x13c>)
 802327a:	4828      	ldr	r0, [pc, #160]	@ (802331c <ip_reass_free_complete_datagram+0x134>)
 802327c:	f002 f8fa 	bl	8025474 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023280:	8bfa      	ldrh	r2, [r7, #30]
 8023282:	8a7b      	ldrh	r3, [r7, #18]
 8023284:	4413      	add	r3, r2
 8023286:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8023288:	69b8      	ldr	r0, [r7, #24]
 802328a:	f7f7 f9a5 	bl	801a5d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	685b      	ldr	r3, [r3, #4]
 8023292:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8023294:	e01f      	b.n	80232d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8023296:	69bb      	ldr	r3, [r7, #24]
 8023298:	685b      	ldr	r3, [r3, #4]
 802329a:	617b      	str	r3, [r7, #20]
    pcur = p;
 802329c:	69bb      	ldr	r3, [r7, #24]
 802329e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80232a0:	697b      	ldr	r3, [r7, #20]
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80232a6:	68f8      	ldr	r0, [r7, #12]
 80232a8:	f7f7 fa24 	bl	801a6f4 <pbuf_clen>
 80232ac:	4603      	mov	r3, r0
 80232ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80232b0:	8bfa      	ldrh	r2, [r7, #30]
 80232b2:	8a7b      	ldrh	r3, [r7, #18]
 80232b4:	4413      	add	r3, r2
 80232b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80232ba:	db05      	blt.n	80232c8 <ip_reass_free_complete_datagram+0xe0>
 80232bc:	4b15      	ldr	r3, [pc, #84]	@ (8023314 <ip_reass_free_complete_datagram+0x12c>)
 80232be:	22cc      	movs	r2, #204	@ 0xcc
 80232c0:	4918      	ldr	r1, [pc, #96]	@ (8023324 <ip_reass_free_complete_datagram+0x13c>)
 80232c2:	4816      	ldr	r0, [pc, #88]	@ (802331c <ip_reass_free_complete_datagram+0x134>)
 80232c4:	f002 f8d6 	bl	8025474 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80232c8:	8bfa      	ldrh	r2, [r7, #30]
 80232ca:	8a7b      	ldrh	r3, [r7, #18]
 80232cc:	4413      	add	r3, r2
 80232ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80232d0:	68f8      	ldr	r0, [r7, #12]
 80232d2:	f7f7 f981 	bl	801a5d8 <pbuf_free>
  while (p != NULL) {
 80232d6:	69bb      	ldr	r3, [r7, #24]
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d1dc      	bne.n	8023296 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80232dc:	6839      	ldr	r1, [r7, #0]
 80232de:	6878      	ldr	r0, [r7, #4]
 80232e0:	f000 f8c2 	bl	8023468 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80232e4:	4b10      	ldr	r3, [pc, #64]	@ (8023328 <ip_reass_free_complete_datagram+0x140>)
 80232e6:	881b      	ldrh	r3, [r3, #0]
 80232e8:	8bfa      	ldrh	r2, [r7, #30]
 80232ea:	429a      	cmp	r2, r3
 80232ec:	d905      	bls.n	80232fa <ip_reass_free_complete_datagram+0x112>
 80232ee:	4b09      	ldr	r3, [pc, #36]	@ (8023314 <ip_reass_free_complete_datagram+0x12c>)
 80232f0:	22d2      	movs	r2, #210	@ 0xd2
 80232f2:	490e      	ldr	r1, [pc, #56]	@ (802332c <ip_reass_free_complete_datagram+0x144>)
 80232f4:	4809      	ldr	r0, [pc, #36]	@ (802331c <ip_reass_free_complete_datagram+0x134>)
 80232f6:	f002 f8bd 	bl	8025474 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80232fa:	4b0b      	ldr	r3, [pc, #44]	@ (8023328 <ip_reass_free_complete_datagram+0x140>)
 80232fc:	881a      	ldrh	r2, [r3, #0]
 80232fe:	8bfb      	ldrh	r3, [r7, #30]
 8023300:	1ad3      	subs	r3, r2, r3
 8023302:	b29a      	uxth	r2, r3
 8023304:	4b08      	ldr	r3, [pc, #32]	@ (8023328 <ip_reass_free_complete_datagram+0x140>)
 8023306:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023308:	8bfb      	ldrh	r3, [r7, #30]
}
 802330a:	4618      	mov	r0, r3
 802330c:	3720      	adds	r7, #32
 802330e:	46bd      	mov	sp, r7
 8023310:	bd80      	pop	{r7, pc}
 8023312:	bf00      	nop
 8023314:	0802cc78 	.word	0x0802cc78
 8023318:	0802ccb4 	.word	0x0802ccb4
 802331c:	0802ccc0 	.word	0x0802ccc0
 8023320:	0802cce8 	.word	0x0802cce8
 8023324:	0802ccfc 	.word	0x0802ccfc
 8023328:	2400bfbc 	.word	0x2400bfbc
 802332c:	0802cd1c 	.word	0x0802cd1c

08023330 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8023330:	b580      	push	{r7, lr}
 8023332:	b08a      	sub	sp, #40	@ 0x28
 8023334:	af00      	add	r7, sp, #0
 8023336:	6078      	str	r0, [r7, #4]
 8023338:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802333a:	2300      	movs	r3, #0
 802333c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802333e:	2300      	movs	r3, #0
 8023340:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8023342:	2300      	movs	r3, #0
 8023344:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023346:	2300      	movs	r3, #0
 8023348:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802334a:	2300      	movs	r3, #0
 802334c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802334e:	4b28      	ldr	r3, [pc, #160]	@ (80233f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8023350:	681b      	ldr	r3, [r3, #0]
 8023352:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8023354:	e030      	b.n	80233b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023358:	695a      	ldr	r2, [r3, #20]
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	68db      	ldr	r3, [r3, #12]
 802335e:	429a      	cmp	r2, r3
 8023360:	d10c      	bne.n	802337c <ip_reass_remove_oldest_datagram+0x4c>
 8023362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023364:	699a      	ldr	r2, [r3, #24]
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	691b      	ldr	r3, [r3, #16]
 802336a:	429a      	cmp	r2, r3
 802336c:	d106      	bne.n	802337c <ip_reass_remove_oldest_datagram+0x4c>
 802336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023370:	899a      	ldrh	r2, [r3, #12]
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	889b      	ldrh	r3, [r3, #4]
 8023376:	b29b      	uxth	r3, r3
 8023378:	429a      	cmp	r2, r3
 802337a:	d014      	beq.n	80233a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 802337c:	693b      	ldr	r3, [r7, #16]
 802337e:	3301      	adds	r3, #1
 8023380:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8023382:	6a3b      	ldr	r3, [r7, #32]
 8023384:	2b00      	cmp	r3, #0
 8023386:	d104      	bne.n	8023392 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8023388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802338a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802338c:	69fb      	ldr	r3, [r7, #28]
 802338e:	61bb      	str	r3, [r7, #24]
 8023390:	e009      	b.n	80233a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023394:	7fda      	ldrb	r2, [r3, #31]
 8023396:	6a3b      	ldr	r3, [r7, #32]
 8023398:	7fdb      	ldrb	r3, [r3, #31]
 802339a:	429a      	cmp	r2, r3
 802339c:	d803      	bhi.n	80233a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80233a2:	69fb      	ldr	r3, [r7, #28]
 80233a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80233a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233a8:	681b      	ldr	r3, [r3, #0]
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d001      	beq.n	80233b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80233ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80233b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80233b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	d1cb      	bne.n	8023356 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80233be:	6a3b      	ldr	r3, [r7, #32]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d008      	beq.n	80233d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80233c4:	69b9      	ldr	r1, [r7, #24]
 80233c6:	6a38      	ldr	r0, [r7, #32]
 80233c8:	f7ff ff0e 	bl	80231e8 <ip_reass_free_complete_datagram>
 80233cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80233ce:	697a      	ldr	r2, [r7, #20]
 80233d0:	68fb      	ldr	r3, [r7, #12]
 80233d2:	4413      	add	r3, r2
 80233d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80233d6:	697a      	ldr	r2, [r7, #20]
 80233d8:	683b      	ldr	r3, [r7, #0]
 80233da:	429a      	cmp	r2, r3
 80233dc:	da02      	bge.n	80233e4 <ip_reass_remove_oldest_datagram+0xb4>
 80233de:	693b      	ldr	r3, [r7, #16]
 80233e0:	2b01      	cmp	r3, #1
 80233e2:	dcac      	bgt.n	802333e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80233e4:	697b      	ldr	r3, [r7, #20]
}
 80233e6:	4618      	mov	r0, r3
 80233e8:	3728      	adds	r7, #40	@ 0x28
 80233ea:	46bd      	mov	sp, r7
 80233ec:	bd80      	pop	{r7, pc}
 80233ee:	bf00      	nop
 80233f0:	2400bfb8 	.word	0x2400bfb8

080233f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80233f4:	b580      	push	{r7, lr}
 80233f6:	b084      	sub	sp, #16
 80233f8:	af00      	add	r7, sp, #0
 80233fa:	6078      	str	r0, [r7, #4]
 80233fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80233fe:	2004      	movs	r0, #4
 8023400:	f7f6 f99e 	bl	8019740 <memp_malloc>
 8023404:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023406:	68fb      	ldr	r3, [r7, #12]
 8023408:	2b00      	cmp	r3, #0
 802340a:	d110      	bne.n	802342e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802340c:	6839      	ldr	r1, [r7, #0]
 802340e:	6878      	ldr	r0, [r7, #4]
 8023410:	f7ff ff8e 	bl	8023330 <ip_reass_remove_oldest_datagram>
 8023414:	4602      	mov	r2, r0
 8023416:	683b      	ldr	r3, [r7, #0]
 8023418:	4293      	cmp	r3, r2
 802341a:	dc03      	bgt.n	8023424 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802341c:	2004      	movs	r0, #4
 802341e:	f7f6 f98f 	bl	8019740 <memp_malloc>
 8023422:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023424:	68fb      	ldr	r3, [r7, #12]
 8023426:	2b00      	cmp	r3, #0
 8023428:	d101      	bne.n	802342e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802342a:	2300      	movs	r3, #0
 802342c:	e016      	b.n	802345c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802342e:	2220      	movs	r2, #32
 8023430:	2100      	movs	r1, #0
 8023432:	68f8      	ldr	r0, [r7, #12]
 8023434:	f002 f90a 	bl	802564c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023438:	68fb      	ldr	r3, [r7, #12]
 802343a:	220f      	movs	r2, #15
 802343c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802343e:	4b09      	ldr	r3, [pc, #36]	@ (8023464 <ip_reass_enqueue_new_datagram+0x70>)
 8023440:	681a      	ldr	r2, [r3, #0]
 8023442:	68fb      	ldr	r3, [r7, #12]
 8023444:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023446:	4a07      	ldr	r2, [pc, #28]	@ (8023464 <ip_reass_enqueue_new_datagram+0x70>)
 8023448:	68fb      	ldr	r3, [r7, #12]
 802344a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802344c:	68fb      	ldr	r3, [r7, #12]
 802344e:	3308      	adds	r3, #8
 8023450:	2214      	movs	r2, #20
 8023452:	6879      	ldr	r1, [r7, #4]
 8023454:	4618      	mov	r0, r3
 8023456:	f002 f99a 	bl	802578e <memcpy>
  return ipr;
 802345a:	68fb      	ldr	r3, [r7, #12]
}
 802345c:	4618      	mov	r0, r3
 802345e:	3710      	adds	r7, #16
 8023460:	46bd      	mov	sp, r7
 8023462:	bd80      	pop	{r7, pc}
 8023464:	2400bfb8 	.word	0x2400bfb8

08023468 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023468:	b580      	push	{r7, lr}
 802346a:	b082      	sub	sp, #8
 802346c:	af00      	add	r7, sp, #0
 802346e:	6078      	str	r0, [r7, #4]
 8023470:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8023472:	4b10      	ldr	r3, [pc, #64]	@ (80234b4 <ip_reass_dequeue_datagram+0x4c>)
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	687a      	ldr	r2, [r7, #4]
 8023478:	429a      	cmp	r2, r3
 802347a:	d104      	bne.n	8023486 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	681b      	ldr	r3, [r3, #0]
 8023480:	4a0c      	ldr	r2, [pc, #48]	@ (80234b4 <ip_reass_dequeue_datagram+0x4c>)
 8023482:	6013      	str	r3, [r2, #0]
 8023484:	e00d      	b.n	80234a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023486:	683b      	ldr	r3, [r7, #0]
 8023488:	2b00      	cmp	r3, #0
 802348a:	d106      	bne.n	802349a <ip_reass_dequeue_datagram+0x32>
 802348c:	4b0a      	ldr	r3, [pc, #40]	@ (80234b8 <ip_reass_dequeue_datagram+0x50>)
 802348e:	f240 1245 	movw	r2, #325	@ 0x145
 8023492:	490a      	ldr	r1, [pc, #40]	@ (80234bc <ip_reass_dequeue_datagram+0x54>)
 8023494:	480a      	ldr	r0, [pc, #40]	@ (80234c0 <ip_reass_dequeue_datagram+0x58>)
 8023496:	f001 ffed 	bl	8025474 <iprintf>
    prev->next = ipr->next;
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	681a      	ldr	r2, [r3, #0]
 802349e:	683b      	ldr	r3, [r7, #0]
 80234a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80234a2:	6879      	ldr	r1, [r7, #4]
 80234a4:	2004      	movs	r0, #4
 80234a6:	f7f6 f9c1 	bl	801982c <memp_free>
}
 80234aa:	bf00      	nop
 80234ac:	3708      	adds	r7, #8
 80234ae:	46bd      	mov	sp, r7
 80234b0:	bd80      	pop	{r7, pc}
 80234b2:	bf00      	nop
 80234b4:	2400bfb8 	.word	0x2400bfb8
 80234b8:	0802cc78 	.word	0x0802cc78
 80234bc:	0802cd40 	.word	0x0802cd40
 80234c0:	0802ccc0 	.word	0x0802ccc0

080234c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80234c4:	b580      	push	{r7, lr}
 80234c6:	b08c      	sub	sp, #48	@ 0x30
 80234c8:	af00      	add	r7, sp, #0
 80234ca:	60f8      	str	r0, [r7, #12]
 80234cc:	60b9      	str	r1, [r7, #8]
 80234ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80234d0:	2300      	movs	r3, #0
 80234d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80234d4:	2301      	movs	r3, #1
 80234d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80234d8:	68bb      	ldr	r3, [r7, #8]
 80234da:	685b      	ldr	r3, [r3, #4]
 80234dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80234de:	69fb      	ldr	r3, [r7, #28]
 80234e0:	885b      	ldrh	r3, [r3, #2]
 80234e2:	b29b      	uxth	r3, r3
 80234e4:	4618      	mov	r0, r3
 80234e6:	f7f5 fb9b 	bl	8018c20 <lwip_htons>
 80234ea:	4603      	mov	r3, r0
 80234ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80234ee:	69fb      	ldr	r3, [r7, #28]
 80234f0:	781b      	ldrb	r3, [r3, #0]
 80234f2:	f003 030f 	and.w	r3, r3, #15
 80234f6:	b2db      	uxtb	r3, r3
 80234f8:	009b      	lsls	r3, r3, #2
 80234fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80234fc:	7e7b      	ldrb	r3, [r7, #25]
 80234fe:	b29b      	uxth	r3, r3
 8023500:	8b7a      	ldrh	r2, [r7, #26]
 8023502:	429a      	cmp	r2, r3
 8023504:	d202      	bcs.n	802350c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023506:	f04f 33ff 	mov.w	r3, #4294967295
 802350a:	e135      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802350c:	7e7b      	ldrb	r3, [r7, #25]
 802350e:	b29b      	uxth	r3, r3
 8023510:	8b7a      	ldrh	r2, [r7, #26]
 8023512:	1ad3      	subs	r3, r2, r3
 8023514:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023516:	69fb      	ldr	r3, [r7, #28]
 8023518:	88db      	ldrh	r3, [r3, #6]
 802351a:	b29b      	uxth	r3, r3
 802351c:	4618      	mov	r0, r3
 802351e:	f7f5 fb7f 	bl	8018c20 <lwip_htons>
 8023522:	4603      	mov	r3, r0
 8023524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023528:	b29b      	uxth	r3, r3
 802352a:	00db      	lsls	r3, r3, #3
 802352c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802352e:	68bb      	ldr	r3, [r7, #8]
 8023530:	685b      	ldr	r3, [r3, #4]
 8023532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8023534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023536:	2200      	movs	r2, #0
 8023538:	701a      	strb	r2, [r3, #0]
 802353a:	2200      	movs	r2, #0
 802353c:	705a      	strb	r2, [r3, #1]
 802353e:	2200      	movs	r2, #0
 8023540:	709a      	strb	r2, [r3, #2]
 8023542:	2200      	movs	r2, #0
 8023544:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8023546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023548:	8afa      	ldrh	r2, [r7, #22]
 802354a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 802354c:	8afa      	ldrh	r2, [r7, #22]
 802354e:	8b7b      	ldrh	r3, [r7, #26]
 8023550:	4413      	add	r3, r2
 8023552:	b29a      	uxth	r2, r3
 8023554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023556:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8023558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802355a:	88db      	ldrh	r3, [r3, #6]
 802355c:	b29b      	uxth	r3, r3
 802355e:	8afa      	ldrh	r2, [r7, #22]
 8023560:	429a      	cmp	r2, r3
 8023562:	d902      	bls.n	802356a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023564:	f04f 33ff 	mov.w	r3, #4294967295
 8023568:	e106      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802356a:	68fb      	ldr	r3, [r7, #12]
 802356c:	685b      	ldr	r3, [r3, #4]
 802356e:	627b      	str	r3, [r7, #36]	@ 0x24
 8023570:	e068      	b.n	8023644 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023574:	685b      	ldr	r3, [r3, #4]
 8023576:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8023578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802357a:	889b      	ldrh	r3, [r3, #4]
 802357c:	b29a      	uxth	r2, r3
 802357e:	693b      	ldr	r3, [r7, #16]
 8023580:	889b      	ldrh	r3, [r3, #4]
 8023582:	b29b      	uxth	r3, r3
 8023584:	429a      	cmp	r2, r3
 8023586:	d235      	bcs.n	80235f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8023588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802358a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802358c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023590:	2b00      	cmp	r3, #0
 8023592:	d020      	beq.n	80235d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8023594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023596:	889b      	ldrh	r3, [r3, #4]
 8023598:	b29a      	uxth	r2, r3
 802359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802359c:	88db      	ldrh	r3, [r3, #6]
 802359e:	b29b      	uxth	r3, r3
 80235a0:	429a      	cmp	r2, r3
 80235a2:	d307      	bcc.n	80235b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80235a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235a6:	88db      	ldrh	r3, [r3, #6]
 80235a8:	b29a      	uxth	r2, r3
 80235aa:	693b      	ldr	r3, [r7, #16]
 80235ac:	889b      	ldrh	r3, [r3, #4]
 80235ae:	b29b      	uxth	r3, r3
 80235b0:	429a      	cmp	r2, r3
 80235b2:	d902      	bls.n	80235ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80235b4:	f04f 33ff 	mov.w	r3, #4294967295
 80235b8:	e0de      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80235ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235bc:	68ba      	ldr	r2, [r7, #8]
 80235be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80235c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235c2:	88db      	ldrh	r3, [r3, #6]
 80235c4:	b29a      	uxth	r2, r3
 80235c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235c8:	889b      	ldrh	r3, [r3, #4]
 80235ca:	b29b      	uxth	r3, r3
 80235cc:	429a      	cmp	r2, r3
 80235ce:	d03d      	beq.n	802364c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80235d0:	2300      	movs	r3, #0
 80235d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80235d4:	e03a      	b.n	802364c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80235d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235d8:	88db      	ldrh	r3, [r3, #6]
 80235da:	b29a      	uxth	r2, r3
 80235dc:	693b      	ldr	r3, [r7, #16]
 80235de:	889b      	ldrh	r3, [r3, #4]
 80235e0:	b29b      	uxth	r3, r3
 80235e2:	429a      	cmp	r2, r3
 80235e4:	d902      	bls.n	80235ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80235e6:	f04f 33ff 	mov.w	r3, #4294967295
 80235ea:	e0c5      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	68ba      	ldr	r2, [r7, #8]
 80235f0:	605a      	str	r2, [r3, #4]
      break;
 80235f2:	e02b      	b.n	802364c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80235f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235f6:	889b      	ldrh	r3, [r3, #4]
 80235f8:	b29a      	uxth	r2, r3
 80235fa:	693b      	ldr	r3, [r7, #16]
 80235fc:	889b      	ldrh	r3, [r3, #4]
 80235fe:	b29b      	uxth	r3, r3
 8023600:	429a      	cmp	r2, r3
 8023602:	d102      	bne.n	802360a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023604:	f04f 33ff 	mov.w	r3, #4294967295
 8023608:	e0b6      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802360c:	889b      	ldrh	r3, [r3, #4]
 802360e:	b29a      	uxth	r2, r3
 8023610:	693b      	ldr	r3, [r7, #16]
 8023612:	88db      	ldrh	r3, [r3, #6]
 8023614:	b29b      	uxth	r3, r3
 8023616:	429a      	cmp	r2, r3
 8023618:	d202      	bcs.n	8023620 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802361a:	f04f 33ff 	mov.w	r3, #4294967295
 802361e:	e0ab      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8023620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023622:	2b00      	cmp	r3, #0
 8023624:	d009      	beq.n	802363a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023628:	88db      	ldrh	r3, [r3, #6]
 802362a:	b29a      	uxth	r2, r3
 802362c:	693b      	ldr	r3, [r7, #16]
 802362e:	889b      	ldrh	r3, [r3, #4]
 8023630:	b29b      	uxth	r3, r3
 8023632:	429a      	cmp	r2, r3
 8023634:	d001      	beq.n	802363a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023636:	2300      	movs	r3, #0
 8023638:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802363a:	693b      	ldr	r3, [r7, #16]
 802363c:	681b      	ldr	r3, [r3, #0]
 802363e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8023640:	693b      	ldr	r3, [r7, #16]
 8023642:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8023644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023646:	2b00      	cmp	r3, #0
 8023648:	d193      	bne.n	8023572 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802364a:	e000      	b.n	802364e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 802364c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023650:	2b00      	cmp	r3, #0
 8023652:	d12d      	bne.n	80236b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8023654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023656:	2b00      	cmp	r3, #0
 8023658:	d01c      	beq.n	8023694 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802365c:	88db      	ldrh	r3, [r3, #6]
 802365e:	b29a      	uxth	r2, r3
 8023660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023662:	889b      	ldrh	r3, [r3, #4]
 8023664:	b29b      	uxth	r3, r3
 8023666:	429a      	cmp	r2, r3
 8023668:	d906      	bls.n	8023678 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802366a:	4b45      	ldr	r3, [pc, #276]	@ (8023780 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802366c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8023670:	4944      	ldr	r1, [pc, #272]	@ (8023784 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8023672:	4845      	ldr	r0, [pc, #276]	@ (8023788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023674:	f001 fefe 	bl	8025474 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8023678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802367a:	68ba      	ldr	r2, [r7, #8]
 802367c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023680:	88db      	ldrh	r3, [r3, #6]
 8023682:	b29a      	uxth	r2, r3
 8023684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023686:	889b      	ldrh	r3, [r3, #4]
 8023688:	b29b      	uxth	r3, r3
 802368a:	429a      	cmp	r2, r3
 802368c:	d010      	beq.n	80236b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802368e:	2300      	movs	r3, #0
 8023690:	623b      	str	r3, [r7, #32]
 8023692:	e00d      	b.n	80236b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8023694:	68fb      	ldr	r3, [r7, #12]
 8023696:	685b      	ldr	r3, [r3, #4]
 8023698:	2b00      	cmp	r3, #0
 802369a:	d006      	beq.n	80236aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802369c:	4b38      	ldr	r3, [pc, #224]	@ (8023780 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802369e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80236a2:	493a      	ldr	r1, [pc, #232]	@ (802378c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80236a4:	4838      	ldr	r0, [pc, #224]	@ (8023788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80236a6:	f001 fee5 	bl	8025474 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80236aa:	68fb      	ldr	r3, [r7, #12]
 80236ac:	68ba      	ldr	r2, [r7, #8]
 80236ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	d105      	bne.n	80236c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80236b6:	68fb      	ldr	r3, [r7, #12]
 80236b8:	7f9b      	ldrb	r3, [r3, #30]
 80236ba:	f003 0301 	and.w	r3, r3, #1
 80236be:	2b00      	cmp	r3, #0
 80236c0:	d059      	beq.n	8023776 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80236c2:	6a3b      	ldr	r3, [r7, #32]
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d04f      	beq.n	8023768 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80236c8:	68fb      	ldr	r3, [r7, #12]
 80236ca:	685b      	ldr	r3, [r3, #4]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d006      	beq.n	80236de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80236d0:	68fb      	ldr	r3, [r7, #12]
 80236d2:	685b      	ldr	r3, [r3, #4]
 80236d4:	685b      	ldr	r3, [r3, #4]
 80236d6:	889b      	ldrh	r3, [r3, #4]
 80236d8:	b29b      	uxth	r3, r3
 80236da:	2b00      	cmp	r3, #0
 80236dc:	d002      	beq.n	80236e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80236de:	2300      	movs	r3, #0
 80236e0:	623b      	str	r3, [r7, #32]
 80236e2:	e041      	b.n	8023768 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80236e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80236e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236ea:	681b      	ldr	r3, [r3, #0]
 80236ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80236ee:	e012      	b.n	8023716 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80236f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80236f2:	685b      	ldr	r3, [r3, #4]
 80236f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80236f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236f8:	88db      	ldrh	r3, [r3, #6]
 80236fa:	b29a      	uxth	r2, r3
 80236fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236fe:	889b      	ldrh	r3, [r3, #4]
 8023700:	b29b      	uxth	r3, r3
 8023702:	429a      	cmp	r2, r3
 8023704:	d002      	beq.n	802370c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8023706:	2300      	movs	r3, #0
 8023708:	623b      	str	r3, [r7, #32]
            break;
 802370a:	e007      	b.n	802371c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 802370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802370e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8023710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023712:	681b      	ldr	r3, [r3, #0]
 8023714:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8023716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023718:	2b00      	cmp	r3, #0
 802371a:	d1e9      	bne.n	80236f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802371c:	6a3b      	ldr	r3, [r7, #32]
 802371e:	2b00      	cmp	r3, #0
 8023720:	d022      	beq.n	8023768 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8023722:	68fb      	ldr	r3, [r7, #12]
 8023724:	685b      	ldr	r3, [r3, #4]
 8023726:	2b00      	cmp	r3, #0
 8023728:	d106      	bne.n	8023738 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802372a:	4b15      	ldr	r3, [pc, #84]	@ (8023780 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802372c:	f240 12df 	movw	r2, #479	@ 0x1df
 8023730:	4917      	ldr	r1, [pc, #92]	@ (8023790 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023732:	4815      	ldr	r0, [pc, #84]	@ (8023788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023734:	f001 fe9e 	bl	8025474 <iprintf>
          LWIP_ASSERT("sanity check",
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	685b      	ldr	r3, [r3, #4]
 802373c:	685b      	ldr	r3, [r3, #4]
 802373e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023740:	429a      	cmp	r2, r3
 8023742:	d106      	bne.n	8023752 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8023744:	4b0e      	ldr	r3, [pc, #56]	@ (8023780 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023746:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 802374a:	4911      	ldr	r1, [pc, #68]	@ (8023790 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802374c:	480e      	ldr	r0, [pc, #56]	@ (8023788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802374e:	f001 fe91 	bl	8025474 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8023752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	2b00      	cmp	r3, #0
 8023758:	d006      	beq.n	8023768 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 802375a:	4b09      	ldr	r3, [pc, #36]	@ (8023780 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802375c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8023760:	490c      	ldr	r1, [pc, #48]	@ (8023794 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8023762:	4809      	ldr	r0, [pc, #36]	@ (8023788 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023764:	f001 fe86 	bl	8025474 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8023768:	6a3b      	ldr	r3, [r7, #32]
 802376a:	2b00      	cmp	r3, #0
 802376c:	bf14      	ite	ne
 802376e:	2301      	movne	r3, #1
 8023770:	2300      	moveq	r3, #0
 8023772:	b2db      	uxtb	r3, r3
 8023774:	e000      	b.n	8023778 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8023776:	2300      	movs	r3, #0
}
 8023778:	4618      	mov	r0, r3
 802377a:	3730      	adds	r7, #48	@ 0x30
 802377c:	46bd      	mov	sp, r7
 802377e:	bd80      	pop	{r7, pc}
 8023780:	0802cc78 	.word	0x0802cc78
 8023784:	0802cd5c 	.word	0x0802cd5c
 8023788:	0802ccc0 	.word	0x0802ccc0
 802378c:	0802cd7c 	.word	0x0802cd7c
 8023790:	0802cdb4 	.word	0x0802cdb4
 8023794:	0802cdc4 	.word	0x0802cdc4

08023798 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8023798:	b580      	push	{r7, lr}
 802379a:	b08e      	sub	sp, #56	@ 0x38
 802379c:	af00      	add	r7, sp, #0
 802379e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	685b      	ldr	r3, [r3, #4]
 80237a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80237a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237a8:	781b      	ldrb	r3, [r3, #0]
 80237aa:	f003 030f 	and.w	r3, r3, #15
 80237ae:	b2db      	uxtb	r3, r3
 80237b0:	009b      	lsls	r3, r3, #2
 80237b2:	b2db      	uxtb	r3, r3
 80237b4:	2b14      	cmp	r3, #20
 80237b6:	f040 8171 	bne.w	8023a9c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80237ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237bc:	88db      	ldrh	r3, [r3, #6]
 80237be:	b29b      	uxth	r3, r3
 80237c0:	4618      	mov	r0, r3
 80237c2:	f7f5 fa2d 	bl	8018c20 <lwip_htons>
 80237c6:	4603      	mov	r3, r0
 80237c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80237cc:	b29b      	uxth	r3, r3
 80237ce:	00db      	lsls	r3, r3, #3
 80237d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80237d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237d4:	885b      	ldrh	r3, [r3, #2]
 80237d6:	b29b      	uxth	r3, r3
 80237d8:	4618      	mov	r0, r3
 80237da:	f7f5 fa21 	bl	8018c20 <lwip_htons>
 80237de:	4603      	mov	r3, r0
 80237e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80237e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237e4:	781b      	ldrb	r3, [r3, #0]
 80237e6:	f003 030f 	and.w	r3, r3, #15
 80237ea:	b2db      	uxtb	r3, r3
 80237ec:	009b      	lsls	r3, r3, #2
 80237ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80237f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80237f6:	b29b      	uxth	r3, r3
 80237f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80237fa:	429a      	cmp	r2, r3
 80237fc:	f0c0 8150 	bcc.w	8023aa0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8023804:	b29b      	uxth	r3, r3
 8023806:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8023808:	1ad3      	subs	r3, r2, r3
 802380a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802380c:	6878      	ldr	r0, [r7, #4]
 802380e:	f7f6 ff71 	bl	801a6f4 <pbuf_clen>
 8023812:	4603      	mov	r3, r0
 8023814:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023816:	4b8c      	ldr	r3, [pc, #560]	@ (8023a48 <ip4_reass+0x2b0>)
 8023818:	881b      	ldrh	r3, [r3, #0]
 802381a:	461a      	mov	r2, r3
 802381c:	8c3b      	ldrh	r3, [r7, #32]
 802381e:	4413      	add	r3, r2
 8023820:	2b0a      	cmp	r3, #10
 8023822:	dd10      	ble.n	8023846 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023824:	8c3b      	ldrh	r3, [r7, #32]
 8023826:	4619      	mov	r1, r3
 8023828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802382a:	f7ff fd81 	bl	8023330 <ip_reass_remove_oldest_datagram>
 802382e:	4603      	mov	r3, r0
 8023830:	2b00      	cmp	r3, #0
 8023832:	f000 8137 	beq.w	8023aa4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8023836:	4b84      	ldr	r3, [pc, #528]	@ (8023a48 <ip4_reass+0x2b0>)
 8023838:	881b      	ldrh	r3, [r3, #0]
 802383a:	461a      	mov	r2, r3
 802383c:	8c3b      	ldrh	r3, [r7, #32]
 802383e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023840:	2b0a      	cmp	r3, #10
 8023842:	f300 812f 	bgt.w	8023aa4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023846:	4b81      	ldr	r3, [pc, #516]	@ (8023a4c <ip4_reass+0x2b4>)
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	633b      	str	r3, [r7, #48]	@ 0x30
 802384c:	e015      	b.n	802387a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023850:	695a      	ldr	r2, [r3, #20]
 8023852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023854:	68db      	ldr	r3, [r3, #12]
 8023856:	429a      	cmp	r2, r3
 8023858:	d10c      	bne.n	8023874 <ip4_reass+0xdc>
 802385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802385c:	699a      	ldr	r2, [r3, #24]
 802385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023860:	691b      	ldr	r3, [r3, #16]
 8023862:	429a      	cmp	r2, r3
 8023864:	d106      	bne.n	8023874 <ip4_reass+0xdc>
 8023866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023868:	899a      	ldrh	r2, [r3, #12]
 802386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802386c:	889b      	ldrh	r3, [r3, #4]
 802386e:	b29b      	uxth	r3, r3
 8023870:	429a      	cmp	r2, r3
 8023872:	d006      	beq.n	8023882 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023876:	681b      	ldr	r3, [r3, #0]
 8023878:	633b      	str	r3, [r7, #48]	@ 0x30
 802387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802387c:	2b00      	cmp	r3, #0
 802387e:	d1e6      	bne.n	802384e <ip4_reass+0xb6>
 8023880:	e000      	b.n	8023884 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8023882:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8023884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023886:	2b00      	cmp	r3, #0
 8023888:	d109      	bne.n	802389e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802388a:	8c3b      	ldrh	r3, [r7, #32]
 802388c:	4619      	mov	r1, r3
 802388e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023890:	f7ff fdb0 	bl	80233f4 <ip_reass_enqueue_new_datagram>
 8023894:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8023896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023898:	2b00      	cmp	r3, #0
 802389a:	d11c      	bne.n	80238d6 <ip4_reass+0x13e>
      goto nullreturn;
 802389c:	e105      	b.n	8023aaa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238a0:	88db      	ldrh	r3, [r3, #6]
 80238a2:	b29b      	uxth	r3, r3
 80238a4:	4618      	mov	r0, r3
 80238a6:	f7f5 f9bb 	bl	8018c20 <lwip_htons>
 80238aa:	4603      	mov	r3, r0
 80238ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	d110      	bne.n	80238d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80238b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238b6:	89db      	ldrh	r3, [r3, #14]
 80238b8:	4618      	mov	r0, r3
 80238ba:	f7f5 f9b1 	bl	8018c20 <lwip_htons>
 80238be:	4603      	mov	r3, r0
 80238c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80238c4:	2b00      	cmp	r3, #0
 80238c6:	d006      	beq.n	80238d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80238c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80238ca:	3308      	adds	r3, #8
 80238cc:	2214      	movs	r2, #20
 80238ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80238d0:	4618      	mov	r0, r3
 80238d2:	f001 ff5c 	bl	802578e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80238d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238d8:	88db      	ldrh	r3, [r3, #6]
 80238da:	b29b      	uxth	r3, r3
 80238dc:	f003 0320 	and.w	r3, r3, #32
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	bf0c      	ite	eq
 80238e4:	2301      	moveq	r3, #1
 80238e6:	2300      	movne	r3, #0
 80238e8:	b2db      	uxtb	r3, r3
 80238ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80238ec:	69fb      	ldr	r3, [r7, #28]
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d00e      	beq.n	8023910 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80238f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80238f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80238f6:	4413      	add	r3, r2
 80238f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80238fa:	8b7a      	ldrh	r2, [r7, #26]
 80238fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80238fe:	429a      	cmp	r2, r3
 8023900:	f0c0 80a0 	bcc.w	8023a44 <ip4_reass+0x2ac>
 8023904:	8b7b      	ldrh	r3, [r7, #26]
 8023906:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 802390a:	4293      	cmp	r3, r2
 802390c:	f200 809a 	bhi.w	8023a44 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8023910:	69fa      	ldr	r2, [r7, #28]
 8023912:	6879      	ldr	r1, [r7, #4]
 8023914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023916:	f7ff fdd5 	bl	80234c4 <ip_reass_chain_frag_into_datagram_and_validate>
 802391a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802391c:	697b      	ldr	r3, [r7, #20]
 802391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023922:	f000 809b 	beq.w	8023a5c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023926:	4b48      	ldr	r3, [pc, #288]	@ (8023a48 <ip4_reass+0x2b0>)
 8023928:	881a      	ldrh	r2, [r3, #0]
 802392a:	8c3b      	ldrh	r3, [r7, #32]
 802392c:	4413      	add	r3, r2
 802392e:	b29a      	uxth	r2, r3
 8023930:	4b45      	ldr	r3, [pc, #276]	@ (8023a48 <ip4_reass+0x2b0>)
 8023932:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8023934:	69fb      	ldr	r3, [r7, #28]
 8023936:	2b00      	cmp	r3, #0
 8023938:	d00d      	beq.n	8023956 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802393a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 802393c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802393e:	4413      	add	r3, r2
 8023940:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8023942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023944:	8a7a      	ldrh	r2, [r7, #18]
 8023946:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802394a:	7f9b      	ldrb	r3, [r3, #30]
 802394c:	f043 0301 	orr.w	r3, r3, #1
 8023950:	b2da      	uxtb	r2, r3
 8023952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023954:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8023956:	697b      	ldr	r3, [r7, #20]
 8023958:	2b01      	cmp	r3, #1
 802395a:	d171      	bne.n	8023a40 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802395e:	8b9b      	ldrh	r3, [r3, #28]
 8023960:	3314      	adds	r3, #20
 8023962:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023966:	685b      	ldr	r3, [r3, #4]
 8023968:	685b      	ldr	r3, [r3, #4]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802396e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023970:	685b      	ldr	r3, [r3, #4]
 8023972:	685b      	ldr	r3, [r3, #4]
 8023974:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023978:	3308      	adds	r3, #8
 802397a:	2214      	movs	r2, #20
 802397c:	4619      	mov	r1, r3
 802397e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023980:	f001 ff05 	bl	802578e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023984:	8a3b      	ldrh	r3, [r7, #16]
 8023986:	4618      	mov	r0, r3
 8023988:	f7f5 f94a 	bl	8018c20 <lwip_htons>
 802398c:	4603      	mov	r3, r0
 802398e:	461a      	mov	r2, r3
 8023990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023992:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8023994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023996:	2200      	movs	r2, #0
 8023998:	719a      	strb	r2, [r3, #6]
 802399a:	2200      	movs	r2, #0
 802399c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80239a0:	2200      	movs	r2, #0
 80239a2:	729a      	strb	r2, [r3, #10]
 80239a4:	2200      	movs	r2, #0
 80239a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80239a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239aa:	685b      	ldr	r3, [r3, #4]
 80239ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80239ae:	e00d      	b.n	80239cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80239b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80239b2:	685b      	ldr	r3, [r3, #4]
 80239b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80239b6:	2114      	movs	r1, #20
 80239b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80239ba:	f7f6 fd55 	bl	801a468 <pbuf_remove_header>
      pbuf_cat(p, r);
 80239be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80239c0:	6878      	ldr	r0, [r7, #4]
 80239c2:	f7f6 fed7 	bl	801a774 <pbuf_cat>
      r = iprh->next_pbuf;
 80239c6:	68fb      	ldr	r3, [r7, #12]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80239cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d1ee      	bne.n	80239b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80239d2:	4b1e      	ldr	r3, [pc, #120]	@ (8023a4c <ip4_reass+0x2b4>)
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80239d8:	429a      	cmp	r2, r3
 80239da:	d102      	bne.n	80239e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80239dc:	2300      	movs	r3, #0
 80239de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80239e0:	e010      	b.n	8023a04 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80239e2:	4b1a      	ldr	r3, [pc, #104]	@ (8023a4c <ip4_reass+0x2b4>)
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80239e8:	e007      	b.n	80239fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80239ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80239ec:	681b      	ldr	r3, [r3, #0]
 80239ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80239f0:	429a      	cmp	r2, r3
 80239f2:	d006      	beq.n	8023a02 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80239f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80239fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	d1f4      	bne.n	80239ea <ip4_reass+0x252>
 8023a00:	e000      	b.n	8023a04 <ip4_reass+0x26c>
          break;
 8023a02:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8023a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023a06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023a08:	f7ff fd2e 	bl	8023468 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8023a0c:	6878      	ldr	r0, [r7, #4]
 8023a0e:	f7f6 fe71 	bl	801a6f4 <pbuf_clen>
 8023a12:	4603      	mov	r3, r0
 8023a14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023a16:	4b0c      	ldr	r3, [pc, #48]	@ (8023a48 <ip4_reass+0x2b0>)
 8023a18:	881b      	ldrh	r3, [r3, #0]
 8023a1a:	8c3a      	ldrh	r2, [r7, #32]
 8023a1c:	429a      	cmp	r2, r3
 8023a1e:	d906      	bls.n	8023a2e <ip4_reass+0x296>
 8023a20:	4b0b      	ldr	r3, [pc, #44]	@ (8023a50 <ip4_reass+0x2b8>)
 8023a22:	f240 229b 	movw	r2, #667	@ 0x29b
 8023a26:	490b      	ldr	r1, [pc, #44]	@ (8023a54 <ip4_reass+0x2bc>)
 8023a28:	480b      	ldr	r0, [pc, #44]	@ (8023a58 <ip4_reass+0x2c0>)
 8023a2a:	f001 fd23 	bl	8025474 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023a2e:	4b06      	ldr	r3, [pc, #24]	@ (8023a48 <ip4_reass+0x2b0>)
 8023a30:	881a      	ldrh	r2, [r3, #0]
 8023a32:	8c3b      	ldrh	r3, [r7, #32]
 8023a34:	1ad3      	subs	r3, r2, r3
 8023a36:	b29a      	uxth	r2, r3
 8023a38:	4b03      	ldr	r3, [pc, #12]	@ (8023a48 <ip4_reass+0x2b0>)
 8023a3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	e038      	b.n	8023ab2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8023a40:	2300      	movs	r3, #0
 8023a42:	e036      	b.n	8023ab2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8023a44:	bf00      	nop
 8023a46:	e00a      	b.n	8023a5e <ip4_reass+0x2c6>
 8023a48:	2400bfbc 	.word	0x2400bfbc
 8023a4c:	2400bfb8 	.word	0x2400bfb8
 8023a50:	0802cc78 	.word	0x0802cc78
 8023a54:	0802cde8 	.word	0x0802cde8
 8023a58:	0802ccc0 	.word	0x0802ccc0
    goto nullreturn_ipr;
 8023a5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8023a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	d106      	bne.n	8023a72 <ip4_reass+0x2da>
 8023a64:	4b15      	ldr	r3, [pc, #84]	@ (8023abc <ip4_reass+0x324>)
 8023a66:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8023a6a:	4915      	ldr	r1, [pc, #84]	@ (8023ac0 <ip4_reass+0x328>)
 8023a6c:	4815      	ldr	r0, [pc, #84]	@ (8023ac4 <ip4_reass+0x32c>)
 8023a6e:	f001 fd01 	bl	8025474 <iprintf>
  if (ipr->p == NULL) {
 8023a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a74:	685b      	ldr	r3, [r3, #4]
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	d116      	bne.n	8023aa8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8023a7a:	4b13      	ldr	r3, [pc, #76]	@ (8023ac8 <ip4_reass+0x330>)
 8023a7c:	681b      	ldr	r3, [r3, #0]
 8023a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023a80:	429a      	cmp	r2, r3
 8023a82:	d006      	beq.n	8023a92 <ip4_reass+0x2fa>
 8023a84:	4b0d      	ldr	r3, [pc, #52]	@ (8023abc <ip4_reass+0x324>)
 8023a86:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8023a8a:	4910      	ldr	r1, [pc, #64]	@ (8023acc <ip4_reass+0x334>)
 8023a8c:	480d      	ldr	r0, [pc, #52]	@ (8023ac4 <ip4_reass+0x32c>)
 8023a8e:	f001 fcf1 	bl	8025474 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8023a92:	2100      	movs	r1, #0
 8023a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023a96:	f7ff fce7 	bl	8023468 <ip_reass_dequeue_datagram>
 8023a9a:	e006      	b.n	8023aaa <ip4_reass+0x312>
    goto nullreturn;
 8023a9c:	bf00      	nop
 8023a9e:	e004      	b.n	8023aaa <ip4_reass+0x312>
    goto nullreturn;
 8023aa0:	bf00      	nop
 8023aa2:	e002      	b.n	8023aaa <ip4_reass+0x312>
      goto nullreturn;
 8023aa4:	bf00      	nop
 8023aa6:	e000      	b.n	8023aaa <ip4_reass+0x312>
  }

nullreturn:
 8023aa8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8023aaa:	6878      	ldr	r0, [r7, #4]
 8023aac:	f7f6 fd94 	bl	801a5d8 <pbuf_free>
  return NULL;
 8023ab0:	2300      	movs	r3, #0
}
 8023ab2:	4618      	mov	r0, r3
 8023ab4:	3738      	adds	r7, #56	@ 0x38
 8023ab6:	46bd      	mov	sp, r7
 8023ab8:	bd80      	pop	{r7, pc}
 8023aba:	bf00      	nop
 8023abc:	0802cc78 	.word	0x0802cc78
 8023ac0:	0802ce04 	.word	0x0802ce04
 8023ac4:	0802ccc0 	.word	0x0802ccc0
 8023ac8:	2400bfb8 	.word	0x2400bfb8
 8023acc:	0802ce10 	.word	0x0802ce10

08023ad0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8023ad0:	b580      	push	{r7, lr}
 8023ad2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8023ad4:	2005      	movs	r0, #5
 8023ad6:	f7f5 fe33 	bl	8019740 <memp_malloc>
 8023ada:	4603      	mov	r3, r0
}
 8023adc:	4618      	mov	r0, r3
 8023ade:	bd80      	pop	{r7, pc}

08023ae0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8023ae0:	b580      	push	{r7, lr}
 8023ae2:	b082      	sub	sp, #8
 8023ae4:	af00      	add	r7, sp, #0
 8023ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d106      	bne.n	8023afc <ip_frag_free_pbuf_custom_ref+0x1c>
 8023aee:	4b07      	ldr	r3, [pc, #28]	@ (8023b0c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8023af0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8023af4:	4906      	ldr	r1, [pc, #24]	@ (8023b10 <ip_frag_free_pbuf_custom_ref+0x30>)
 8023af6:	4807      	ldr	r0, [pc, #28]	@ (8023b14 <ip_frag_free_pbuf_custom_ref+0x34>)
 8023af8:	f001 fcbc 	bl	8025474 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8023afc:	6879      	ldr	r1, [r7, #4]
 8023afe:	2005      	movs	r0, #5
 8023b00:	f7f5 fe94 	bl	801982c <memp_free>
}
 8023b04:	bf00      	nop
 8023b06:	3708      	adds	r7, #8
 8023b08:	46bd      	mov	sp, r7
 8023b0a:	bd80      	pop	{r7, pc}
 8023b0c:	0802cc78 	.word	0x0802cc78
 8023b10:	0802ce30 	.word	0x0802ce30
 8023b14:	0802ccc0 	.word	0x0802ccc0

08023b18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8023b18:	b580      	push	{r7, lr}
 8023b1a:	b084      	sub	sp, #16
 8023b1c:	af00      	add	r7, sp, #0
 8023b1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023b24:	68fb      	ldr	r3, [r7, #12]
 8023b26:	2b00      	cmp	r3, #0
 8023b28:	d106      	bne.n	8023b38 <ipfrag_free_pbuf_custom+0x20>
 8023b2a:	4b11      	ldr	r3, [pc, #68]	@ (8023b70 <ipfrag_free_pbuf_custom+0x58>)
 8023b2c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8023b30:	4910      	ldr	r1, [pc, #64]	@ (8023b74 <ipfrag_free_pbuf_custom+0x5c>)
 8023b32:	4811      	ldr	r0, [pc, #68]	@ (8023b78 <ipfrag_free_pbuf_custom+0x60>)
 8023b34:	f001 fc9e 	bl	8025474 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8023b38:	68fa      	ldr	r2, [r7, #12]
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	429a      	cmp	r2, r3
 8023b3e:	d006      	beq.n	8023b4e <ipfrag_free_pbuf_custom+0x36>
 8023b40:	4b0b      	ldr	r3, [pc, #44]	@ (8023b70 <ipfrag_free_pbuf_custom+0x58>)
 8023b42:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8023b46:	490d      	ldr	r1, [pc, #52]	@ (8023b7c <ipfrag_free_pbuf_custom+0x64>)
 8023b48:	480b      	ldr	r0, [pc, #44]	@ (8023b78 <ipfrag_free_pbuf_custom+0x60>)
 8023b4a:	f001 fc93 	bl	8025474 <iprintf>
  if (pcr->original != NULL) {
 8023b4e:	68fb      	ldr	r3, [r7, #12]
 8023b50:	695b      	ldr	r3, [r3, #20]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d004      	beq.n	8023b60 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	695b      	ldr	r3, [r3, #20]
 8023b5a:	4618      	mov	r0, r3
 8023b5c:	f7f6 fd3c 	bl	801a5d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8023b60:	68f8      	ldr	r0, [r7, #12]
 8023b62:	f7ff ffbd 	bl	8023ae0 <ip_frag_free_pbuf_custom_ref>
}
 8023b66:	bf00      	nop
 8023b68:	3710      	adds	r7, #16
 8023b6a:	46bd      	mov	sp, r7
 8023b6c:	bd80      	pop	{r7, pc}
 8023b6e:	bf00      	nop
 8023b70:	0802cc78 	.word	0x0802cc78
 8023b74:	0802ce3c 	.word	0x0802ce3c
 8023b78:	0802ccc0 	.word	0x0802ccc0
 8023b7c:	0802ce48 	.word	0x0802ce48

08023b80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023b80:	b580      	push	{r7, lr}
 8023b82:	b094      	sub	sp, #80	@ 0x50
 8023b84:	af02      	add	r7, sp, #8
 8023b86:	60f8      	str	r0, [r7, #12]
 8023b88:	60b9      	str	r1, [r7, #8]
 8023b8a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8023b8c:	2300      	movs	r3, #0
 8023b8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023b92:	68bb      	ldr	r3, [r7, #8]
 8023b94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023b96:	3b14      	subs	r3, #20
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	da00      	bge.n	8023b9e <ip4_frag+0x1e>
 8023b9c:	3307      	adds	r3, #7
 8023b9e:	10db      	asrs	r3, r3, #3
 8023ba0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8023ba2:	2314      	movs	r3, #20
 8023ba4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	685b      	ldr	r3, [r3, #4]
 8023baa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8023bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023bae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023bb2:	781b      	ldrb	r3, [r3, #0]
 8023bb4:	f003 030f 	and.w	r3, r3, #15
 8023bb8:	b2db      	uxtb	r3, r3
 8023bba:	009b      	lsls	r3, r3, #2
 8023bbc:	b2db      	uxtb	r3, r3
 8023bbe:	2b14      	cmp	r3, #20
 8023bc0:	d002      	beq.n	8023bc8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8023bc2:	f06f 0305 	mvn.w	r3, #5
 8023bc6:	e110      	b.n	8023dea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023bc8:	68fb      	ldr	r3, [r7, #12]
 8023bca:	895b      	ldrh	r3, [r3, #10]
 8023bcc:	2b13      	cmp	r3, #19
 8023bce:	d809      	bhi.n	8023be4 <ip4_frag+0x64>
 8023bd0:	4b88      	ldr	r3, [pc, #544]	@ (8023df4 <ip4_frag+0x274>)
 8023bd2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8023bd6:	4988      	ldr	r1, [pc, #544]	@ (8023df8 <ip4_frag+0x278>)
 8023bd8:	4888      	ldr	r0, [pc, #544]	@ (8023dfc <ip4_frag+0x27c>)
 8023bda:	f001 fc4b 	bl	8025474 <iprintf>
 8023bde:	f06f 0305 	mvn.w	r3, #5
 8023be2:	e102      	b.n	8023dea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8023be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023be6:	88db      	ldrh	r3, [r3, #6]
 8023be8:	b29b      	uxth	r3, r3
 8023bea:	4618      	mov	r0, r3
 8023bec:	f7f5 f818 	bl	8018c20 <lwip_htons>
 8023bf0:	4603      	mov	r3, r0
 8023bf2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8023bf4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8023bfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023c06:	68fb      	ldr	r3, [r7, #12]
 8023c08:	891b      	ldrh	r3, [r3, #8]
 8023c0a:	3b14      	subs	r3, #20
 8023c0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8023c10:	e0e1      	b.n	8023dd6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023c12:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023c14:	00db      	lsls	r3, r3, #3
 8023c16:	b29b      	uxth	r3, r3
 8023c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023c1c:	4293      	cmp	r3, r2
 8023c1e:	bf28      	it	cs
 8023c20:	4613      	movcs	r3, r2
 8023c22:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023c24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8023c28:	2114      	movs	r1, #20
 8023c2a:	200e      	movs	r0, #14
 8023c2c:	f7f6 f9be 	bl	8019fac <pbuf_alloc>
 8023c30:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8023c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c34:	2b00      	cmp	r3, #0
 8023c36:	f000 80d5 	beq.w	8023de4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c3c:	895b      	ldrh	r3, [r3, #10]
 8023c3e:	2b13      	cmp	r3, #19
 8023c40:	d806      	bhi.n	8023c50 <ip4_frag+0xd0>
 8023c42:	4b6c      	ldr	r3, [pc, #432]	@ (8023df4 <ip4_frag+0x274>)
 8023c44:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8023c48:	496d      	ldr	r1, [pc, #436]	@ (8023e00 <ip4_frag+0x280>)
 8023c4a:	486c      	ldr	r0, [pc, #432]	@ (8023dfc <ip4_frag+0x27c>)
 8023c4c:	f001 fc12 	bl	8025474 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8023c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c52:	685b      	ldr	r3, [r3, #4]
 8023c54:	2214      	movs	r2, #20
 8023c56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023c58:	4618      	mov	r0, r3
 8023c5a:	f001 fd98 	bl	802578e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c60:	685b      	ldr	r3, [r3, #4]
 8023c62:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8023c64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023c66:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8023c6a:	e064      	b.n	8023d36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023c6c:	68fb      	ldr	r3, [r7, #12]
 8023c6e:	895a      	ldrh	r2, [r3, #10]
 8023c70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023c72:	1ad3      	subs	r3, r2, r3
 8023c74:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023c76:	68fb      	ldr	r3, [r7, #12]
 8023c78:	895b      	ldrh	r3, [r3, #10]
 8023c7a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023c7c:	429a      	cmp	r2, r3
 8023c7e:	d906      	bls.n	8023c8e <ip4_frag+0x10e>
 8023c80:	4b5c      	ldr	r3, [pc, #368]	@ (8023df4 <ip4_frag+0x274>)
 8023c82:	f240 322d 	movw	r2, #813	@ 0x32d
 8023c86:	495f      	ldr	r1, [pc, #380]	@ (8023e04 <ip4_frag+0x284>)
 8023c88:	485c      	ldr	r0, [pc, #368]	@ (8023dfc <ip4_frag+0x27c>)
 8023c8a:	f001 fbf3 	bl	8025474 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8023c8e:	8bfa      	ldrh	r2, [r7, #30]
 8023c90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023c94:	4293      	cmp	r3, r2
 8023c96:	bf28      	it	cs
 8023c98:	4613      	movcs	r3, r2
 8023c9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8023c9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023ca2:	2b00      	cmp	r3, #0
 8023ca4:	d105      	bne.n	8023cb2 <ip4_frag+0x132>
        poff = 0;
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	60fb      	str	r3, [r7, #12]
        continue;
 8023cb0:	e041      	b.n	8023d36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8023cb2:	f7ff ff0d 	bl	8023ad0 <ip_frag_alloc_pbuf_custom_ref>
 8023cb6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8023cb8:	69bb      	ldr	r3, [r7, #24]
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d103      	bne.n	8023cc6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8023cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023cc0:	f7f6 fc8a 	bl	801a5d8 <pbuf_free>
        goto memerr;
 8023cc4:	e08f      	b.n	8023de6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023cc6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8023cc8:	68fb      	ldr	r3, [r7, #12]
 8023cca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023ccc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8023cce:	4413      	add	r3, r2
 8023cd0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8023cd4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8023cd8:	9201      	str	r2, [sp, #4]
 8023cda:	9300      	str	r3, [sp, #0]
 8023cdc:	4603      	mov	r3, r0
 8023cde:	2241      	movs	r2, #65	@ 0x41
 8023ce0:	2000      	movs	r0, #0
 8023ce2:	f7f6 fa8d 	bl	801a200 <pbuf_alloced_custom>
 8023ce6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8023ce8:	697b      	ldr	r3, [r7, #20]
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d106      	bne.n	8023cfc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8023cee:	69b8      	ldr	r0, [r7, #24]
 8023cf0:	f7ff fef6 	bl	8023ae0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023cf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023cf6:	f7f6 fc6f 	bl	801a5d8 <pbuf_free>
        goto memerr;
 8023cfa:	e074      	b.n	8023de6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8023cfc:	68f8      	ldr	r0, [r7, #12]
 8023cfe:	f7f6 fd11 	bl	801a724 <pbuf_ref>
      pcr->original = p;
 8023d02:	69bb      	ldr	r3, [r7, #24]
 8023d04:	68fa      	ldr	r2, [r7, #12]
 8023d06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023d08:	69bb      	ldr	r3, [r7, #24]
 8023d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8023e08 <ip4_frag+0x288>)
 8023d0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8023d0e:	6979      	ldr	r1, [r7, #20]
 8023d10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023d12:	f7f6 fd2f 	bl	801a774 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023d16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8023d1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023d1e:	1ad3      	subs	r3, r2, r3
 8023d20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8023d24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	d004      	beq.n	8023d36 <ip4_frag+0x1b6>
        poff = 0;
 8023d2c:	2300      	movs	r3, #0
 8023d2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8023d30:	68fb      	ldr	r3, [r7, #12]
 8023d32:	681b      	ldr	r3, [r3, #0]
 8023d34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8023d36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	d196      	bne.n	8023c6c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8023d3e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8023d40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8023d44:	4413      	add	r3, r2
 8023d46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8023d48:	68bb      	ldr	r3, [r7, #8]
 8023d4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8023d4c:	f1a3 0213 	sub.w	r2, r3, #19
 8023d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023d54:	429a      	cmp	r2, r3
 8023d56:	bfcc      	ite	gt
 8023d58:	2301      	movgt	r3, #1
 8023d5a:	2300      	movle	r3, #0
 8023d5c:	b2db      	uxtb	r3, r3
 8023d5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023d60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8023d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023d68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8023d6a:	6a3b      	ldr	r3, [r7, #32]
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	d002      	beq.n	8023d76 <ip4_frag+0x1f6>
 8023d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d003      	beq.n	8023d7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8023d76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023d78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8023d7c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023d7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8023d80:	4618      	mov	r0, r3
 8023d82:	f7f4 ff4d 	bl	8018c20 <lwip_htons>
 8023d86:	4603      	mov	r3, r0
 8023d88:	461a      	mov	r2, r3
 8023d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023d8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023d8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023d90:	3314      	adds	r3, #20
 8023d92:	b29b      	uxth	r3, r3
 8023d94:	4618      	mov	r0, r3
 8023d96:	f7f4 ff43 	bl	8018c20 <lwip_htons>
 8023d9a:	4603      	mov	r3, r0
 8023d9c:	461a      	mov	r2, r3
 8023d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023da0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8023da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023da4:	2200      	movs	r2, #0
 8023da6:	729a      	strb	r2, [r3, #10]
 8023da8:	2200      	movs	r2, #0
 8023daa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8023dac:	68bb      	ldr	r3, [r7, #8]
 8023dae:	695b      	ldr	r3, [r3, #20]
 8023db0:	687a      	ldr	r2, [r7, #4]
 8023db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023db4:	68b8      	ldr	r0, [r7, #8]
 8023db6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023dba:	f7f6 fc0d 	bl	801a5d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023dbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8023dc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023dc4:	1ad3      	subs	r3, r2, r3
 8023dc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8023dca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8023dce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023dd0:	4413      	add	r3, r2
 8023dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8023dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	f47f af19 	bne.w	8023c12 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8023de0:	2300      	movs	r3, #0
 8023de2:	e002      	b.n	8023dea <ip4_frag+0x26a>
      goto memerr;
 8023de4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8023de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023dea:	4618      	mov	r0, r3
 8023dec:	3748      	adds	r7, #72	@ 0x48
 8023dee:	46bd      	mov	sp, r7
 8023df0:	bd80      	pop	{r7, pc}
 8023df2:	bf00      	nop
 8023df4:	0802cc78 	.word	0x0802cc78
 8023df8:	0802ce54 	.word	0x0802ce54
 8023dfc:	0802ccc0 	.word	0x0802ccc0
 8023e00:	0802ce70 	.word	0x0802ce70
 8023e04:	0802ce90 	.word	0x0802ce90
 8023e08:	08023b19 	.word	0x08023b19

08023e0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8023e0c:	b580      	push	{r7, lr}
 8023e0e:	b086      	sub	sp, #24
 8023e10:	af00      	add	r7, sp, #0
 8023e12:	6078      	str	r0, [r7, #4]
 8023e14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8023e16:	230e      	movs	r3, #14
 8023e18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	895b      	ldrh	r3, [r3, #10]
 8023e1e:	2b0e      	cmp	r3, #14
 8023e20:	d96e      	bls.n	8023f00 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	7bdb      	ldrb	r3, [r3, #15]
 8023e26:	2b00      	cmp	r3, #0
 8023e28:	d106      	bne.n	8023e38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8023e2a:	683b      	ldr	r3, [r7, #0]
 8023e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023e30:	3301      	adds	r3, #1
 8023e32:	b2da      	uxtb	r2, r3
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	685b      	ldr	r3, [r3, #4]
 8023e3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8023e3e:	693b      	ldr	r3, [r7, #16]
 8023e40:	7b1a      	ldrb	r2, [r3, #12]
 8023e42:	7b5b      	ldrb	r3, [r3, #13]
 8023e44:	021b      	lsls	r3, r3, #8
 8023e46:	4313      	orrs	r3, r2
 8023e48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023e4a:	693b      	ldr	r3, [r7, #16]
 8023e4c:	781b      	ldrb	r3, [r3, #0]
 8023e4e:	f003 0301 	and.w	r3, r3, #1
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	d023      	beq.n	8023e9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8023e56:	693b      	ldr	r3, [r7, #16]
 8023e58:	781b      	ldrb	r3, [r3, #0]
 8023e5a:	2b01      	cmp	r3, #1
 8023e5c:	d10f      	bne.n	8023e7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023e5e:	693b      	ldr	r3, [r7, #16]
 8023e60:	785b      	ldrb	r3, [r3, #1]
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	d11b      	bne.n	8023e9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8023e66:	693b      	ldr	r3, [r7, #16]
 8023e68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023e6a:	2b5e      	cmp	r3, #94	@ 0x5e
 8023e6c:	d117      	bne.n	8023e9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	7b5b      	ldrb	r3, [r3, #13]
 8023e72:	f043 0310 	orr.w	r3, r3, #16
 8023e76:	b2da      	uxtb	r2, r3
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	735a      	strb	r2, [r3, #13]
 8023e7c:	e00f      	b.n	8023e9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023e7e:	693b      	ldr	r3, [r7, #16]
 8023e80:	2206      	movs	r2, #6
 8023e82:	4928      	ldr	r1, [pc, #160]	@ (8023f24 <ethernet_input+0x118>)
 8023e84:	4618      	mov	r0, r3
 8023e86:	f001 fbb7 	bl	80255f8 <memcmp>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d106      	bne.n	8023e9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	7b5b      	ldrb	r3, [r3, #13]
 8023e94:	f043 0308 	orr.w	r3, r3, #8
 8023e98:	b2da      	uxtb	r2, r3
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8023e9e:	89fb      	ldrh	r3, [r7, #14]
 8023ea0:	2b08      	cmp	r3, #8
 8023ea2:	d003      	beq.n	8023eac <ethernet_input+0xa0>
 8023ea4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8023ea8:	d014      	beq.n	8023ed4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8023eaa:	e032      	b.n	8023f12 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023eac:	683b      	ldr	r3, [r7, #0]
 8023eae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023eb2:	f003 0308 	and.w	r3, r3, #8
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d024      	beq.n	8023f04 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023eba:	8afb      	ldrh	r3, [r7, #22]
 8023ebc:	4619      	mov	r1, r3
 8023ebe:	6878      	ldr	r0, [r7, #4]
 8023ec0:	f7f6 fad2 	bl	801a468 <pbuf_remove_header>
 8023ec4:	4603      	mov	r3, r0
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	d11e      	bne.n	8023f08 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8023eca:	6839      	ldr	r1, [r7, #0]
 8023ecc:	6878      	ldr	r0, [r7, #4]
 8023ece:	f7fe fde3 	bl	8022a98 <ip4_input>
      break;
 8023ed2:	e013      	b.n	8023efc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023ed4:	683b      	ldr	r3, [r7, #0]
 8023ed6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8023eda:	f003 0308 	and.w	r3, r3, #8
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	d014      	beq.n	8023f0c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023ee2:	8afb      	ldrh	r3, [r7, #22]
 8023ee4:	4619      	mov	r1, r3
 8023ee6:	6878      	ldr	r0, [r7, #4]
 8023ee8:	f7f6 fabe 	bl	801a468 <pbuf_remove_header>
 8023eec:	4603      	mov	r3, r0
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	d10e      	bne.n	8023f10 <ethernet_input+0x104>
        etharp_input(p, netif);
 8023ef2:	6839      	ldr	r1, [r7, #0]
 8023ef4:	6878      	ldr	r0, [r7, #4]
 8023ef6:	f7fd ff5d 	bl	8021db4 <etharp_input>
      break;
 8023efa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8023efc:	2300      	movs	r3, #0
 8023efe:	e00c      	b.n	8023f1a <ethernet_input+0x10e>
    goto free_and_return;
 8023f00:	bf00      	nop
 8023f02:	e006      	b.n	8023f12 <ethernet_input+0x106>
        goto free_and_return;
 8023f04:	bf00      	nop
 8023f06:	e004      	b.n	8023f12 <ethernet_input+0x106>
        goto free_and_return;
 8023f08:	bf00      	nop
 8023f0a:	e002      	b.n	8023f12 <ethernet_input+0x106>
        goto free_and_return;
 8023f0c:	bf00      	nop
 8023f0e:	e000      	b.n	8023f12 <ethernet_input+0x106>
        goto free_and_return;
 8023f10:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8023f12:	6878      	ldr	r0, [r7, #4]
 8023f14:	f7f6 fb60 	bl	801a5d8 <pbuf_free>
  return ERR_OK;
 8023f18:	2300      	movs	r3, #0
}
 8023f1a:	4618      	mov	r0, r3
 8023f1c:	3718      	adds	r7, #24
 8023f1e:	46bd      	mov	sp, r7
 8023f20:	bd80      	pop	{r7, pc}
 8023f22:	bf00      	nop
 8023f24:	0802d0e8 	.word	0x0802d0e8

08023f28 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023f28:	b580      	push	{r7, lr}
 8023f2a:	b086      	sub	sp, #24
 8023f2c:	af00      	add	r7, sp, #0
 8023f2e:	60f8      	str	r0, [r7, #12]
 8023f30:	60b9      	str	r1, [r7, #8]
 8023f32:	607a      	str	r2, [r7, #4]
 8023f34:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023f36:	8c3b      	ldrh	r3, [r7, #32]
 8023f38:	4618      	mov	r0, r3
 8023f3a:	f7f4 fe71 	bl	8018c20 <lwip_htons>
 8023f3e:	4603      	mov	r3, r0
 8023f40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023f42:	210e      	movs	r1, #14
 8023f44:	68b8      	ldr	r0, [r7, #8]
 8023f46:	f7f6 fa7f 	bl	801a448 <pbuf_add_header>
 8023f4a:	4603      	mov	r3, r0
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d125      	bne.n	8023f9c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8023f50:	68bb      	ldr	r3, [r7, #8]
 8023f52:	685b      	ldr	r3, [r3, #4]
 8023f54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8023f56:	693b      	ldr	r3, [r7, #16]
 8023f58:	8afa      	ldrh	r2, [r7, #22]
 8023f5a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023f5c:	693b      	ldr	r3, [r7, #16]
 8023f5e:	2206      	movs	r2, #6
 8023f60:	6839      	ldr	r1, [r7, #0]
 8023f62:	4618      	mov	r0, r3
 8023f64:	f001 fc13 	bl	802578e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8023f68:	693b      	ldr	r3, [r7, #16]
 8023f6a:	3306      	adds	r3, #6
 8023f6c:	2206      	movs	r2, #6
 8023f6e:	6879      	ldr	r1, [r7, #4]
 8023f70:	4618      	mov	r0, r3
 8023f72:	f001 fc0c 	bl	802578e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8023f76:	68fb      	ldr	r3, [r7, #12]
 8023f78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8023f7c:	2b06      	cmp	r3, #6
 8023f7e:	d006      	beq.n	8023f8e <ethernet_output+0x66>
 8023f80:	4b0a      	ldr	r3, [pc, #40]	@ (8023fac <ethernet_output+0x84>)
 8023f82:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8023f86:	490a      	ldr	r1, [pc, #40]	@ (8023fb0 <ethernet_output+0x88>)
 8023f88:	480a      	ldr	r0, [pc, #40]	@ (8023fb4 <ethernet_output+0x8c>)
 8023f8a:	f001 fa73 	bl	8025474 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8023f8e:	68fb      	ldr	r3, [r7, #12]
 8023f90:	699b      	ldr	r3, [r3, #24]
 8023f92:	68b9      	ldr	r1, [r7, #8]
 8023f94:	68f8      	ldr	r0, [r7, #12]
 8023f96:	4798      	blx	r3
 8023f98:	4603      	mov	r3, r0
 8023f9a:	e002      	b.n	8023fa2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8023f9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8023f9e:	f06f 0301 	mvn.w	r3, #1
}
 8023fa2:	4618      	mov	r0, r3
 8023fa4:	3718      	adds	r7, #24
 8023fa6:	46bd      	mov	sp, r7
 8023fa8:	bd80      	pop	{r7, pc}
 8023faa:	bf00      	nop
 8023fac:	0802cea0 	.word	0x0802cea0
 8023fb0:	0802ced8 	.word	0x0802ced8
 8023fb4:	0802cf0c 	.word	0x0802cf0c

08023fb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8023fb8:	b580      	push	{r7, lr}
 8023fba:	b086      	sub	sp, #24
 8023fbc:	af00      	add	r7, sp, #0
 8023fbe:	6078      	str	r0, [r7, #4]
 8023fc0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8023fc2:	683b      	ldr	r3, [r7, #0]
 8023fc4:	60bb      	str	r3, [r7, #8]
 8023fc6:	2304      	movs	r3, #4
 8023fc8:	60fb      	str	r3, [r7, #12]
 8023fca:	2300      	movs	r3, #0
 8023fcc:	613b      	str	r3, [r7, #16]
 8023fce:	2300      	movs	r3, #0
 8023fd0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023fd2:	f107 0308 	add.w	r3, r7, #8
 8023fd6:	2100      	movs	r1, #0
 8023fd8:	4618      	mov	r0, r3
 8023fda:	f7ee fd24 	bl	8012a26 <osMessageCreate>
 8023fde:	4602      	mov	r2, r0
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	681b      	ldr	r3, [r3, #0]
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d102      	bne.n	8023ff2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8023fec:	f04f 33ff 	mov.w	r3, #4294967295
 8023ff0:	e000      	b.n	8023ff4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8023ff2:	2300      	movs	r3, #0
}
 8023ff4:	4618      	mov	r0, r3
 8023ff6:	3718      	adds	r7, #24
 8023ff8:	46bd      	mov	sp, r7
 8023ffa:	bd80      	pop	{r7, pc}

08023ffc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8023ffc:	b580      	push	{r7, lr}
 8023ffe:	b082      	sub	sp, #8
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8024004:	687b      	ldr	r3, [r7, #4]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	4618      	mov	r0, r3
 802400a:	f7ee fde9 	bl	8012be0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	4618      	mov	r0, r3
 8024014:	f7ee fdfa 	bl	8012c0c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8024018:	bf00      	nop
 802401a:	3708      	adds	r7, #8
 802401c:	46bd      	mov	sp, r7
 802401e:	bd80      	pop	{r7, pc}

08024020 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8024020:	b580      	push	{r7, lr}
 8024022:	b084      	sub	sp, #16
 8024024:	af00      	add	r7, sp, #0
 8024026:	6078      	str	r0, [r7, #4]
 8024028:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	6839      	ldr	r1, [r7, #0]
 8024030:	2200      	movs	r2, #0
 8024032:	4618      	mov	r0, r3
 8024034:	f7ee fd20 	bl	8012a78 <osMessagePut>
 8024038:	4603      	mov	r3, r0
 802403a:	2b00      	cmp	r3, #0
 802403c:	d102      	bne.n	8024044 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 802403e:	2300      	movs	r3, #0
 8024040:	73fb      	strb	r3, [r7, #15]
 8024042:	e001      	b.n	8024048 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8024044:	23ff      	movs	r3, #255	@ 0xff
 8024046:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8024048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802404c:	4618      	mov	r0, r3
 802404e:	3710      	adds	r7, #16
 8024050:	46bd      	mov	sp, r7
 8024052:	bd80      	pop	{r7, pc}

08024054 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024054:	b580      	push	{r7, lr}
 8024056:	b08c      	sub	sp, #48	@ 0x30
 8024058:	af00      	add	r7, sp, #0
 802405a:	61f8      	str	r0, [r7, #28]
 802405c:	61b9      	str	r1, [r7, #24]
 802405e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024060:	f7ee fb0c 	bl	801267c <osKernelSysTick>
 8024064:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024066:	697b      	ldr	r3, [r7, #20]
 8024068:	2b00      	cmp	r3, #0
 802406a:	d017      	beq.n	802409c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 802406c:	69fb      	ldr	r3, [r7, #28]
 802406e:	6819      	ldr	r1, [r3, #0]
 8024070:	f107 0320 	add.w	r3, r7, #32
 8024074:	697a      	ldr	r2, [r7, #20]
 8024076:	4618      	mov	r0, r3
 8024078:	f7ee fd3e 	bl	8012af8 <osMessageGet>

    if(event.status == osEventMessage)
 802407c:	6a3b      	ldr	r3, [r7, #32]
 802407e:	2b10      	cmp	r3, #16
 8024080:	d109      	bne.n	8024096 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8024082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024084:	461a      	mov	r2, r3
 8024086:	69bb      	ldr	r3, [r7, #24]
 8024088:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 802408a:	f7ee faf7 	bl	801267c <osKernelSysTick>
 802408e:	4602      	mov	r2, r0
 8024090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024092:	1ad3      	subs	r3, r2, r3
 8024094:	e019      	b.n	80240ca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024096:	f04f 33ff 	mov.w	r3, #4294967295
 802409a:	e016      	b.n	80240ca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 802409c:	69fb      	ldr	r3, [r7, #28]
 802409e:	6819      	ldr	r1, [r3, #0]
 80240a0:	463b      	mov	r3, r7
 80240a2:	f04f 32ff 	mov.w	r2, #4294967295
 80240a6:	4618      	mov	r0, r3
 80240a8:	f7ee fd26 	bl	8012af8 <osMessageGet>
 80240ac:	f107 0320 	add.w	r3, r7, #32
 80240b0:	463a      	mov	r2, r7
 80240b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80240b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80240b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80240ba:	461a      	mov	r2, r3
 80240bc:	69bb      	ldr	r3, [r7, #24]
 80240be:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80240c0:	f7ee fadc 	bl	801267c <osKernelSysTick>
 80240c4:	4602      	mov	r2, r0
 80240c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80240c8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80240ca:	4618      	mov	r0, r3
 80240cc:	3730      	adds	r7, #48	@ 0x30
 80240ce:	46bd      	mov	sp, r7
 80240d0:	bd80      	pop	{r7, pc}

080240d2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80240d2:	b580      	push	{r7, lr}
 80240d4:	b086      	sub	sp, #24
 80240d6:	af00      	add	r7, sp, #0
 80240d8:	6078      	str	r0, [r7, #4]
 80240da:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80240dc:	687b      	ldr	r3, [r7, #4]
 80240de:	6819      	ldr	r1, [r3, #0]
 80240e0:	f107 030c 	add.w	r3, r7, #12
 80240e4:	2200      	movs	r2, #0
 80240e6:	4618      	mov	r0, r3
 80240e8:	f7ee fd06 	bl	8012af8 <osMessageGet>

  if(event.status == osEventMessage)
 80240ec:	68fb      	ldr	r3, [r7, #12]
 80240ee:	2b10      	cmp	r3, #16
 80240f0:	d105      	bne.n	80240fe <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80240f2:	693b      	ldr	r3, [r7, #16]
 80240f4:	461a      	mov	r2, r3
 80240f6:	683b      	ldr	r3, [r7, #0]
 80240f8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80240fa:	2300      	movs	r3, #0
 80240fc:	e001      	b.n	8024102 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80240fe:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8024102:	4618      	mov	r0, r3
 8024104:	3718      	adds	r7, #24
 8024106:	46bd      	mov	sp, r7
 8024108:	bd80      	pop	{r7, pc}

0802410a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 802410a:	b480      	push	{r7}
 802410c:	b083      	sub	sp, #12
 802410e:	af00      	add	r7, sp, #0
 8024110:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	2b00      	cmp	r3, #0
 8024118:	d101      	bne.n	802411e <sys_mbox_valid+0x14>
    return 0;
 802411a:	2300      	movs	r3, #0
 802411c:	e000      	b.n	8024120 <sys_mbox_valid+0x16>
  else
    return 1;
 802411e:	2301      	movs	r3, #1
}
 8024120:	4618      	mov	r0, r3
 8024122:	370c      	adds	r7, #12
 8024124:	46bd      	mov	sp, r7
 8024126:	f85d 7b04 	ldr.w	r7, [sp], #4
 802412a:	4770      	bx	lr

0802412c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 802412c:	b480      	push	{r7}
 802412e:	b083      	sub	sp, #12
 8024130:	af00      	add	r7, sp, #0
 8024132:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	2200      	movs	r2, #0
 8024138:	601a      	str	r2, [r3, #0]
}
 802413a:	bf00      	nop
 802413c:	370c      	adds	r7, #12
 802413e:	46bd      	mov	sp, r7
 8024140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024144:	4770      	bx	lr

08024146 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8024146:	b580      	push	{r7, lr}
 8024148:	b084      	sub	sp, #16
 802414a:	af00      	add	r7, sp, #0
 802414c:	6078      	str	r0, [r7, #4]
 802414e:	460b      	mov	r3, r1
 8024150:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8024152:	2300      	movs	r3, #0
 8024154:	60bb      	str	r3, [r7, #8]
 8024156:	2300      	movs	r3, #0
 8024158:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 802415a:	f107 0308 	add.w	r3, r7, #8
 802415e:	2101      	movs	r1, #1
 8024160:	4618      	mov	r0, r3
 8024162:	f7ee fb97 	bl	8012894 <osSemaphoreCreate>
 8024166:	4602      	mov	r2, r0
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 802416c:	687b      	ldr	r3, [r7, #4]
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	2b00      	cmp	r3, #0
 8024172:	d102      	bne.n	802417a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8024174:	f04f 33ff 	mov.w	r3, #4294967295
 8024178:	e009      	b.n	802418e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 802417a:	78fb      	ldrb	r3, [r7, #3]
 802417c:	2b00      	cmp	r3, #0
 802417e:	d105      	bne.n	802418c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8024180:	687b      	ldr	r3, [r7, #4]
 8024182:	681b      	ldr	r3, [r3, #0]
 8024184:	2100      	movs	r1, #0
 8024186:	4618      	mov	r0, r3
 8024188:	f7ee fbb6 	bl	80128f8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 802418c:	2300      	movs	r3, #0
}
 802418e:	4618      	mov	r0, r3
 8024190:	3710      	adds	r7, #16
 8024192:	46bd      	mov	sp, r7
 8024194:	bd80      	pop	{r7, pc}

08024196 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8024196:	b580      	push	{r7, lr}
 8024198:	b084      	sub	sp, #16
 802419a:	af00      	add	r7, sp, #0
 802419c:	6078      	str	r0, [r7, #4]
 802419e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80241a0:	f7ee fa6c 	bl	801267c <osKernelSysTick>
 80241a4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80241a6:	683b      	ldr	r3, [r7, #0]
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d011      	beq.n	80241d0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80241ac:	687b      	ldr	r3, [r7, #4]
 80241ae:	681b      	ldr	r3, [r3, #0]
 80241b0:	6839      	ldr	r1, [r7, #0]
 80241b2:	4618      	mov	r0, r3
 80241b4:	f7ee fba0 	bl	80128f8 <osSemaphoreWait>
 80241b8:	4603      	mov	r3, r0
 80241ba:	2b00      	cmp	r3, #0
 80241bc:	d105      	bne.n	80241ca <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80241be:	f7ee fa5d 	bl	801267c <osKernelSysTick>
 80241c2:	4602      	mov	r2, r0
 80241c4:	68fb      	ldr	r3, [r7, #12]
 80241c6:	1ad3      	subs	r3, r2, r3
 80241c8:	e012      	b.n	80241f0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80241ca:	f04f 33ff 	mov.w	r3, #4294967295
 80241ce:	e00f      	b.n	80241f0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80241d0:	bf00      	nop
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	f04f 31ff 	mov.w	r1, #4294967295
 80241da:	4618      	mov	r0, r3
 80241dc:	f7ee fb8c 	bl	80128f8 <osSemaphoreWait>
 80241e0:	4603      	mov	r3, r0
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d1f5      	bne.n	80241d2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80241e6:	f7ee fa49 	bl	801267c <osKernelSysTick>
 80241ea:	4602      	mov	r2, r0
 80241ec:	68fb      	ldr	r3, [r7, #12]
 80241ee:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80241f0:	4618      	mov	r0, r3
 80241f2:	3710      	adds	r7, #16
 80241f4:	46bd      	mov	sp, r7
 80241f6:	bd80      	pop	{r7, pc}

080241f8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80241f8:	b580      	push	{r7, lr}
 80241fa:	b082      	sub	sp, #8
 80241fc:	af00      	add	r7, sp, #0
 80241fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	681b      	ldr	r3, [r3, #0]
 8024204:	4618      	mov	r0, r3
 8024206:	f7ee fbc5 	bl	8012994 <osSemaphoreRelease>
}
 802420a:	bf00      	nop
 802420c:	3708      	adds	r7, #8
 802420e:	46bd      	mov	sp, r7
 8024210:	bd80      	pop	{r7, pc}

08024212 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8024212:	b580      	push	{r7, lr}
 8024214:	b082      	sub	sp, #8
 8024216:	af00      	add	r7, sp, #0
 8024218:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	681b      	ldr	r3, [r3, #0]
 802421e:	4618      	mov	r0, r3
 8024220:	f7ee fbee 	bl	8012a00 <osSemaphoreDelete>
}
 8024224:	bf00      	nop
 8024226:	3708      	adds	r7, #8
 8024228:	46bd      	mov	sp, r7
 802422a:	bd80      	pop	{r7, pc}

0802422c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 802422c:	b480      	push	{r7}
 802422e:	b083      	sub	sp, #12
 8024230:	af00      	add	r7, sp, #0
 8024232:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	681b      	ldr	r3, [r3, #0]
 8024238:	2b00      	cmp	r3, #0
 802423a:	d101      	bne.n	8024240 <sys_sem_valid+0x14>
    return 0;
 802423c:	2300      	movs	r3, #0
 802423e:	e000      	b.n	8024242 <sys_sem_valid+0x16>
  else
    return 1;
 8024240:	2301      	movs	r3, #1
}
 8024242:	4618      	mov	r0, r3
 8024244:	370c      	adds	r7, #12
 8024246:	46bd      	mov	sp, r7
 8024248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802424c:	4770      	bx	lr

0802424e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 802424e:	b480      	push	{r7}
 8024250:	b083      	sub	sp, #12
 8024252:	af00      	add	r7, sp, #0
 8024254:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	2200      	movs	r2, #0
 802425a:	601a      	str	r2, [r3, #0]
}
 802425c:	bf00      	nop
 802425e:	370c      	adds	r7, #12
 8024260:	46bd      	mov	sp, r7
 8024262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024266:	4770      	bx	lr

08024268 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024268:	b580      	push	{r7, lr}
 802426a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802426c:	4803      	ldr	r0, [pc, #12]	@ (802427c <sys_init+0x14>)
 802426e:	f7ee fa75 	bl	801275c <osMutexCreate>
 8024272:	4603      	mov	r3, r0
 8024274:	4a02      	ldr	r2, [pc, #8]	@ (8024280 <sys_init+0x18>)
 8024276:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024278:	bf00      	nop
 802427a:	bd80      	pop	{r7, pc}
 802427c:	0802d0f8 	.word	0x0802d0f8
 8024280:	2400bfc4 	.word	0x2400bfc4

08024284 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024284:	b580      	push	{r7, lr}
 8024286:	b084      	sub	sp, #16
 8024288:	af00      	add	r7, sp, #0
 802428a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802428c:	2300      	movs	r3, #0
 802428e:	60bb      	str	r3, [r7, #8]
 8024290:	2300      	movs	r3, #0
 8024292:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024294:	f107 0308 	add.w	r3, r7, #8
 8024298:	4618      	mov	r0, r3
 802429a:	f7ee fa5f 	bl	801275c <osMutexCreate>
 802429e:	4602      	mov	r2, r0
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d102      	bne.n	80242b2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80242ac:	f04f 33ff 	mov.w	r3, #4294967295
 80242b0:	e000      	b.n	80242b4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80242b2:	2300      	movs	r3, #0
}
 80242b4:	4618      	mov	r0, r3
 80242b6:	3710      	adds	r7, #16
 80242b8:	46bd      	mov	sp, r7
 80242ba:	bd80      	pop	{r7, pc}

080242bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80242bc:	b580      	push	{r7, lr}
 80242be:	b082      	sub	sp, #8
 80242c0:	af00      	add	r7, sp, #0
 80242c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	681b      	ldr	r3, [r3, #0]
 80242c8:	f04f 31ff 	mov.w	r1, #4294967295
 80242cc:	4618      	mov	r0, r3
 80242ce:	f7ee fa5d 	bl	801278c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80242d2:	bf00      	nop
 80242d4:	3708      	adds	r7, #8
 80242d6:	46bd      	mov	sp, r7
 80242d8:	bd80      	pop	{r7, pc}

080242da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80242da:	b580      	push	{r7, lr}
 80242dc:	b082      	sub	sp, #8
 80242de:	af00      	add	r7, sp, #0
 80242e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80242e2:	687b      	ldr	r3, [r7, #4]
 80242e4:	681b      	ldr	r3, [r3, #0]
 80242e6:	4618      	mov	r0, r3
 80242e8:	f7ee fa9e 	bl	8012828 <osMutexRelease>
}
 80242ec:	bf00      	nop
 80242ee:	3708      	adds	r7, #8
 80242f0:	46bd      	mov	sp, r7
 80242f2:	bd80      	pop	{r7, pc}

080242f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80242f4:	b580      	push	{r7, lr}
 80242f6:	b08c      	sub	sp, #48	@ 0x30
 80242f8:	af00      	add	r7, sp, #0
 80242fa:	60f8      	str	r0, [r7, #12]
 80242fc:	60b9      	str	r1, [r7, #8]
 80242fe:	607a      	str	r2, [r7, #4]
 8024300:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024302:	f107 0314 	add.w	r3, r7, #20
 8024306:	2200      	movs	r2, #0
 8024308:	601a      	str	r2, [r3, #0]
 802430a:	605a      	str	r2, [r3, #4]
 802430c:	609a      	str	r2, [r3, #8]
 802430e:	60da      	str	r2, [r3, #12]
 8024310:	611a      	str	r2, [r3, #16]
 8024312:	615a      	str	r2, [r3, #20]
 8024314:	619a      	str	r2, [r3, #24]
 8024316:	68fb      	ldr	r3, [r7, #12]
 8024318:	617b      	str	r3, [r7, #20]
 802431a:	68bb      	ldr	r3, [r7, #8]
 802431c:	61bb      	str	r3, [r7, #24]
 802431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024320:	b21b      	sxth	r3, r3
 8024322:	83bb      	strh	r3, [r7, #28]
 8024324:	683b      	ldr	r3, [r7, #0]
 8024326:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8024328:	f107 0314 	add.w	r3, r7, #20
 802432c:	6879      	ldr	r1, [r7, #4]
 802432e:	4618      	mov	r0, r3
 8024330:	f7ee f9b4 	bl	801269c <osThreadCreate>
 8024334:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024336:	4618      	mov	r0, r3
 8024338:	3730      	adds	r7, #48	@ 0x30
 802433a:	46bd      	mov	sp, r7
 802433c:	bd80      	pop	{r7, pc}
	...

08024340 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024340:	b580      	push	{r7, lr}
 8024342:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8024344:	4b04      	ldr	r3, [pc, #16]	@ (8024358 <sys_arch_protect+0x18>)
 8024346:	681b      	ldr	r3, [r3, #0]
 8024348:	f04f 31ff 	mov.w	r1, #4294967295
 802434c:	4618      	mov	r0, r3
 802434e:	f7ee fa1d 	bl	801278c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8024352:	2301      	movs	r3, #1
}
 8024354:	4618      	mov	r0, r3
 8024356:	bd80      	pop	{r7, pc}
 8024358:	2400bfc4 	.word	0x2400bfc4

0802435c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 802435c:	b580      	push	{r7, lr}
 802435e:	b082      	sub	sp, #8
 8024360:	af00      	add	r7, sp, #0
 8024362:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8024364:	4b04      	ldr	r3, [pc, #16]	@ (8024378 <sys_arch_unprotect+0x1c>)
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	4618      	mov	r0, r3
 802436a:	f7ee fa5d 	bl	8012828 <osMutexRelease>
}
 802436e:	bf00      	nop
 8024370:	3708      	adds	r7, #8
 8024372:	46bd      	mov	sp, r7
 8024374:	bd80      	pop	{r7, pc}
 8024376:	bf00      	nop
 8024378:	2400bfc4 	.word	0x2400bfc4

0802437c <malloc>:
 802437c:	4b02      	ldr	r3, [pc, #8]	@ (8024388 <malloc+0xc>)
 802437e:	4601      	mov	r1, r0
 8024380:	6818      	ldr	r0, [r3, #0]
 8024382:	f000 b82d 	b.w	80243e0 <_malloc_r>
 8024386:	bf00      	nop
 8024388:	24000224 	.word	0x24000224

0802438c <free>:
 802438c:	4b02      	ldr	r3, [pc, #8]	@ (8024398 <free+0xc>)
 802438e:	4601      	mov	r1, r0
 8024390:	6818      	ldr	r0, [r3, #0]
 8024392:	f002 b80f 	b.w	80263b4 <_free_r>
 8024396:	bf00      	nop
 8024398:	24000224 	.word	0x24000224

0802439c <sbrk_aligned>:
 802439c:	b570      	push	{r4, r5, r6, lr}
 802439e:	4e0f      	ldr	r6, [pc, #60]	@ (80243dc <sbrk_aligned+0x40>)
 80243a0:	460c      	mov	r4, r1
 80243a2:	6831      	ldr	r1, [r6, #0]
 80243a4:	4605      	mov	r5, r0
 80243a6:	b911      	cbnz	r1, 80243ae <sbrk_aligned+0x12>
 80243a8:	f001 f9a2 	bl	80256f0 <_sbrk_r>
 80243ac:	6030      	str	r0, [r6, #0]
 80243ae:	4621      	mov	r1, r4
 80243b0:	4628      	mov	r0, r5
 80243b2:	f001 f99d 	bl	80256f0 <_sbrk_r>
 80243b6:	1c43      	adds	r3, r0, #1
 80243b8:	d103      	bne.n	80243c2 <sbrk_aligned+0x26>
 80243ba:	f04f 34ff 	mov.w	r4, #4294967295
 80243be:	4620      	mov	r0, r4
 80243c0:	bd70      	pop	{r4, r5, r6, pc}
 80243c2:	1cc4      	adds	r4, r0, #3
 80243c4:	f024 0403 	bic.w	r4, r4, #3
 80243c8:	42a0      	cmp	r0, r4
 80243ca:	d0f8      	beq.n	80243be <sbrk_aligned+0x22>
 80243cc:	1a21      	subs	r1, r4, r0
 80243ce:	4628      	mov	r0, r5
 80243d0:	f001 f98e 	bl	80256f0 <_sbrk_r>
 80243d4:	3001      	adds	r0, #1
 80243d6:	d1f2      	bne.n	80243be <sbrk_aligned+0x22>
 80243d8:	e7ef      	b.n	80243ba <sbrk_aligned+0x1e>
 80243da:	bf00      	nop
 80243dc:	2400bfc8 	.word	0x2400bfc8

080243e0 <_malloc_r>:
 80243e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80243e4:	1ccd      	adds	r5, r1, #3
 80243e6:	f025 0503 	bic.w	r5, r5, #3
 80243ea:	3508      	adds	r5, #8
 80243ec:	2d0c      	cmp	r5, #12
 80243ee:	bf38      	it	cc
 80243f0:	250c      	movcc	r5, #12
 80243f2:	2d00      	cmp	r5, #0
 80243f4:	4606      	mov	r6, r0
 80243f6:	db01      	blt.n	80243fc <_malloc_r+0x1c>
 80243f8:	42a9      	cmp	r1, r5
 80243fa:	d904      	bls.n	8024406 <_malloc_r+0x26>
 80243fc:	230c      	movs	r3, #12
 80243fe:	6033      	str	r3, [r6, #0]
 8024400:	2000      	movs	r0, #0
 8024402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80244dc <_malloc_r+0xfc>
 802440a:	f000 f869 	bl	80244e0 <__malloc_lock>
 802440e:	f8d8 3000 	ldr.w	r3, [r8]
 8024412:	461c      	mov	r4, r3
 8024414:	bb44      	cbnz	r4, 8024468 <_malloc_r+0x88>
 8024416:	4629      	mov	r1, r5
 8024418:	4630      	mov	r0, r6
 802441a:	f7ff ffbf 	bl	802439c <sbrk_aligned>
 802441e:	1c43      	adds	r3, r0, #1
 8024420:	4604      	mov	r4, r0
 8024422:	d158      	bne.n	80244d6 <_malloc_r+0xf6>
 8024424:	f8d8 4000 	ldr.w	r4, [r8]
 8024428:	4627      	mov	r7, r4
 802442a:	2f00      	cmp	r7, #0
 802442c:	d143      	bne.n	80244b6 <_malloc_r+0xd6>
 802442e:	2c00      	cmp	r4, #0
 8024430:	d04b      	beq.n	80244ca <_malloc_r+0xea>
 8024432:	6823      	ldr	r3, [r4, #0]
 8024434:	4639      	mov	r1, r7
 8024436:	4630      	mov	r0, r6
 8024438:	eb04 0903 	add.w	r9, r4, r3
 802443c:	f001 f958 	bl	80256f0 <_sbrk_r>
 8024440:	4581      	cmp	r9, r0
 8024442:	d142      	bne.n	80244ca <_malloc_r+0xea>
 8024444:	6821      	ldr	r1, [r4, #0]
 8024446:	1a6d      	subs	r5, r5, r1
 8024448:	4629      	mov	r1, r5
 802444a:	4630      	mov	r0, r6
 802444c:	f7ff ffa6 	bl	802439c <sbrk_aligned>
 8024450:	3001      	adds	r0, #1
 8024452:	d03a      	beq.n	80244ca <_malloc_r+0xea>
 8024454:	6823      	ldr	r3, [r4, #0]
 8024456:	442b      	add	r3, r5
 8024458:	6023      	str	r3, [r4, #0]
 802445a:	f8d8 3000 	ldr.w	r3, [r8]
 802445e:	685a      	ldr	r2, [r3, #4]
 8024460:	bb62      	cbnz	r2, 80244bc <_malloc_r+0xdc>
 8024462:	f8c8 7000 	str.w	r7, [r8]
 8024466:	e00f      	b.n	8024488 <_malloc_r+0xa8>
 8024468:	6822      	ldr	r2, [r4, #0]
 802446a:	1b52      	subs	r2, r2, r5
 802446c:	d420      	bmi.n	80244b0 <_malloc_r+0xd0>
 802446e:	2a0b      	cmp	r2, #11
 8024470:	d917      	bls.n	80244a2 <_malloc_r+0xc2>
 8024472:	1961      	adds	r1, r4, r5
 8024474:	42a3      	cmp	r3, r4
 8024476:	6025      	str	r5, [r4, #0]
 8024478:	bf18      	it	ne
 802447a:	6059      	strne	r1, [r3, #4]
 802447c:	6863      	ldr	r3, [r4, #4]
 802447e:	bf08      	it	eq
 8024480:	f8c8 1000 	streq.w	r1, [r8]
 8024484:	5162      	str	r2, [r4, r5]
 8024486:	604b      	str	r3, [r1, #4]
 8024488:	4630      	mov	r0, r6
 802448a:	f000 f82f 	bl	80244ec <__malloc_unlock>
 802448e:	f104 000b 	add.w	r0, r4, #11
 8024492:	1d23      	adds	r3, r4, #4
 8024494:	f020 0007 	bic.w	r0, r0, #7
 8024498:	1ac2      	subs	r2, r0, r3
 802449a:	bf1c      	itt	ne
 802449c:	1a1b      	subne	r3, r3, r0
 802449e:	50a3      	strne	r3, [r4, r2]
 80244a0:	e7af      	b.n	8024402 <_malloc_r+0x22>
 80244a2:	6862      	ldr	r2, [r4, #4]
 80244a4:	42a3      	cmp	r3, r4
 80244a6:	bf0c      	ite	eq
 80244a8:	f8c8 2000 	streq.w	r2, [r8]
 80244ac:	605a      	strne	r2, [r3, #4]
 80244ae:	e7eb      	b.n	8024488 <_malloc_r+0xa8>
 80244b0:	4623      	mov	r3, r4
 80244b2:	6864      	ldr	r4, [r4, #4]
 80244b4:	e7ae      	b.n	8024414 <_malloc_r+0x34>
 80244b6:	463c      	mov	r4, r7
 80244b8:	687f      	ldr	r7, [r7, #4]
 80244ba:	e7b6      	b.n	802442a <_malloc_r+0x4a>
 80244bc:	461a      	mov	r2, r3
 80244be:	685b      	ldr	r3, [r3, #4]
 80244c0:	42a3      	cmp	r3, r4
 80244c2:	d1fb      	bne.n	80244bc <_malloc_r+0xdc>
 80244c4:	2300      	movs	r3, #0
 80244c6:	6053      	str	r3, [r2, #4]
 80244c8:	e7de      	b.n	8024488 <_malloc_r+0xa8>
 80244ca:	230c      	movs	r3, #12
 80244cc:	6033      	str	r3, [r6, #0]
 80244ce:	4630      	mov	r0, r6
 80244d0:	f000 f80c 	bl	80244ec <__malloc_unlock>
 80244d4:	e794      	b.n	8024400 <_malloc_r+0x20>
 80244d6:	6005      	str	r5, [r0, #0]
 80244d8:	e7d6      	b.n	8024488 <_malloc_r+0xa8>
 80244da:	bf00      	nop
 80244dc:	2400bfcc 	.word	0x2400bfcc

080244e0 <__malloc_lock>:
 80244e0:	4801      	ldr	r0, [pc, #4]	@ (80244e8 <__malloc_lock+0x8>)
 80244e2:	f001 b952 	b.w	802578a <__retarget_lock_acquire_recursive>
 80244e6:	bf00      	nop
 80244e8:	2400c10c 	.word	0x2400c10c

080244ec <__malloc_unlock>:
 80244ec:	4801      	ldr	r0, [pc, #4]	@ (80244f4 <__malloc_unlock+0x8>)
 80244ee:	f001 b94d 	b.w	802578c <__retarget_lock_release_recursive>
 80244f2:	bf00      	nop
 80244f4:	2400c10c 	.word	0x2400c10c

080244f8 <rand>:
 80244f8:	4b16      	ldr	r3, [pc, #88]	@ (8024554 <rand+0x5c>)
 80244fa:	b510      	push	{r4, lr}
 80244fc:	681c      	ldr	r4, [r3, #0]
 80244fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024500:	b9b3      	cbnz	r3, 8024530 <rand+0x38>
 8024502:	2018      	movs	r0, #24
 8024504:	f7ff ff3a 	bl	802437c <malloc>
 8024508:	4602      	mov	r2, r0
 802450a:	6320      	str	r0, [r4, #48]	@ 0x30
 802450c:	b920      	cbnz	r0, 8024518 <rand+0x20>
 802450e:	4b12      	ldr	r3, [pc, #72]	@ (8024558 <rand+0x60>)
 8024510:	4812      	ldr	r0, [pc, #72]	@ (802455c <rand+0x64>)
 8024512:	2152      	movs	r1, #82	@ 0x52
 8024514:	f001 f950 	bl	80257b8 <__assert_func>
 8024518:	4911      	ldr	r1, [pc, #68]	@ (8024560 <rand+0x68>)
 802451a:	4b12      	ldr	r3, [pc, #72]	@ (8024564 <rand+0x6c>)
 802451c:	e9c0 1300 	strd	r1, r3, [r0]
 8024520:	4b11      	ldr	r3, [pc, #68]	@ (8024568 <rand+0x70>)
 8024522:	6083      	str	r3, [r0, #8]
 8024524:	230b      	movs	r3, #11
 8024526:	8183      	strh	r3, [r0, #12]
 8024528:	2100      	movs	r1, #0
 802452a:	2001      	movs	r0, #1
 802452c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8024530:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024532:	480e      	ldr	r0, [pc, #56]	@ (802456c <rand+0x74>)
 8024534:	690b      	ldr	r3, [r1, #16]
 8024536:	694c      	ldr	r4, [r1, #20]
 8024538:	4a0d      	ldr	r2, [pc, #52]	@ (8024570 <rand+0x78>)
 802453a:	4358      	muls	r0, r3
 802453c:	fb02 0004 	mla	r0, r2, r4, r0
 8024540:	fba3 3202 	umull	r3, r2, r3, r2
 8024544:	3301      	adds	r3, #1
 8024546:	eb40 0002 	adc.w	r0, r0, r2
 802454a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802454e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8024552:	bd10      	pop	{r4, pc}
 8024554:	24000224 	.word	0x24000224
 8024558:	0802d100 	.word	0x0802d100
 802455c:	0802d117 	.word	0x0802d117
 8024560:	abcd330e 	.word	0xabcd330e
 8024564:	e66d1234 	.word	0xe66d1234
 8024568:	0005deec 	.word	0x0005deec
 802456c:	5851f42d 	.word	0x5851f42d
 8024570:	4c957f2d 	.word	0x4c957f2d

08024574 <_strtol_l.constprop.0>:
 8024574:	2b24      	cmp	r3, #36	@ 0x24
 8024576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802457a:	4686      	mov	lr, r0
 802457c:	4690      	mov	r8, r2
 802457e:	d801      	bhi.n	8024584 <_strtol_l.constprop.0+0x10>
 8024580:	2b01      	cmp	r3, #1
 8024582:	d106      	bne.n	8024592 <_strtol_l.constprop.0+0x1e>
 8024584:	f001 f8d6 	bl	8025734 <__errno>
 8024588:	2316      	movs	r3, #22
 802458a:	6003      	str	r3, [r0, #0]
 802458c:	2000      	movs	r0, #0
 802458e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024592:	4834      	ldr	r0, [pc, #208]	@ (8024664 <_strtol_l.constprop.0+0xf0>)
 8024594:	460d      	mov	r5, r1
 8024596:	462a      	mov	r2, r5
 8024598:	f815 4b01 	ldrb.w	r4, [r5], #1
 802459c:	5d06      	ldrb	r6, [r0, r4]
 802459e:	f016 0608 	ands.w	r6, r6, #8
 80245a2:	d1f8      	bne.n	8024596 <_strtol_l.constprop.0+0x22>
 80245a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80245a6:	d12d      	bne.n	8024604 <_strtol_l.constprop.0+0x90>
 80245a8:	782c      	ldrb	r4, [r5, #0]
 80245aa:	2601      	movs	r6, #1
 80245ac:	1c95      	adds	r5, r2, #2
 80245ae:	f033 0210 	bics.w	r2, r3, #16
 80245b2:	d109      	bne.n	80245c8 <_strtol_l.constprop.0+0x54>
 80245b4:	2c30      	cmp	r4, #48	@ 0x30
 80245b6:	d12a      	bne.n	802460e <_strtol_l.constprop.0+0x9a>
 80245b8:	782a      	ldrb	r2, [r5, #0]
 80245ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80245be:	2a58      	cmp	r2, #88	@ 0x58
 80245c0:	d125      	bne.n	802460e <_strtol_l.constprop.0+0x9a>
 80245c2:	786c      	ldrb	r4, [r5, #1]
 80245c4:	2310      	movs	r3, #16
 80245c6:	3502      	adds	r5, #2
 80245c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80245cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80245d0:	2200      	movs	r2, #0
 80245d2:	fbbc f9f3 	udiv	r9, ip, r3
 80245d6:	4610      	mov	r0, r2
 80245d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80245dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80245e0:	2f09      	cmp	r7, #9
 80245e2:	d81b      	bhi.n	802461c <_strtol_l.constprop.0+0xa8>
 80245e4:	463c      	mov	r4, r7
 80245e6:	42a3      	cmp	r3, r4
 80245e8:	dd27      	ble.n	802463a <_strtol_l.constprop.0+0xc6>
 80245ea:	1c57      	adds	r7, r2, #1
 80245ec:	d007      	beq.n	80245fe <_strtol_l.constprop.0+0x8a>
 80245ee:	4581      	cmp	r9, r0
 80245f0:	d320      	bcc.n	8024634 <_strtol_l.constprop.0+0xc0>
 80245f2:	d101      	bne.n	80245f8 <_strtol_l.constprop.0+0x84>
 80245f4:	45a2      	cmp	sl, r4
 80245f6:	db1d      	blt.n	8024634 <_strtol_l.constprop.0+0xc0>
 80245f8:	fb00 4003 	mla	r0, r0, r3, r4
 80245fc:	2201      	movs	r2, #1
 80245fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024602:	e7eb      	b.n	80245dc <_strtol_l.constprop.0+0x68>
 8024604:	2c2b      	cmp	r4, #43	@ 0x2b
 8024606:	bf04      	itt	eq
 8024608:	782c      	ldrbeq	r4, [r5, #0]
 802460a:	1c95      	addeq	r5, r2, #2
 802460c:	e7cf      	b.n	80245ae <_strtol_l.constprop.0+0x3a>
 802460e:	2b00      	cmp	r3, #0
 8024610:	d1da      	bne.n	80245c8 <_strtol_l.constprop.0+0x54>
 8024612:	2c30      	cmp	r4, #48	@ 0x30
 8024614:	bf0c      	ite	eq
 8024616:	2308      	moveq	r3, #8
 8024618:	230a      	movne	r3, #10
 802461a:	e7d5      	b.n	80245c8 <_strtol_l.constprop.0+0x54>
 802461c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8024620:	2f19      	cmp	r7, #25
 8024622:	d801      	bhi.n	8024628 <_strtol_l.constprop.0+0xb4>
 8024624:	3c37      	subs	r4, #55	@ 0x37
 8024626:	e7de      	b.n	80245e6 <_strtol_l.constprop.0+0x72>
 8024628:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802462c:	2f19      	cmp	r7, #25
 802462e:	d804      	bhi.n	802463a <_strtol_l.constprop.0+0xc6>
 8024630:	3c57      	subs	r4, #87	@ 0x57
 8024632:	e7d8      	b.n	80245e6 <_strtol_l.constprop.0+0x72>
 8024634:	f04f 32ff 	mov.w	r2, #4294967295
 8024638:	e7e1      	b.n	80245fe <_strtol_l.constprop.0+0x8a>
 802463a:	1c53      	adds	r3, r2, #1
 802463c:	d108      	bne.n	8024650 <_strtol_l.constprop.0+0xdc>
 802463e:	2322      	movs	r3, #34	@ 0x22
 8024640:	f8ce 3000 	str.w	r3, [lr]
 8024644:	4660      	mov	r0, ip
 8024646:	f1b8 0f00 	cmp.w	r8, #0
 802464a:	d0a0      	beq.n	802458e <_strtol_l.constprop.0+0x1a>
 802464c:	1e69      	subs	r1, r5, #1
 802464e:	e006      	b.n	802465e <_strtol_l.constprop.0+0xea>
 8024650:	b106      	cbz	r6, 8024654 <_strtol_l.constprop.0+0xe0>
 8024652:	4240      	negs	r0, r0
 8024654:	f1b8 0f00 	cmp.w	r8, #0
 8024658:	d099      	beq.n	802458e <_strtol_l.constprop.0+0x1a>
 802465a:	2a00      	cmp	r2, #0
 802465c:	d1f6      	bne.n	802464c <_strtol_l.constprop.0+0xd8>
 802465e:	f8c8 1000 	str.w	r1, [r8]
 8024662:	e794      	b.n	802458e <_strtol_l.constprop.0+0x1a>
 8024664:	0802d170 	.word	0x0802d170

08024668 <_strtol_r>:
 8024668:	f7ff bf84 	b.w	8024574 <_strtol_l.constprop.0>

0802466c <__cvt>:
 802466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802466e:	ed2d 8b02 	vpush	{d8}
 8024672:	eeb0 8b40 	vmov.f64	d8, d0
 8024676:	b085      	sub	sp, #20
 8024678:	4617      	mov	r7, r2
 802467a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802467c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802467e:	ee18 2a90 	vmov	r2, s17
 8024682:	f025 0520 	bic.w	r5, r5, #32
 8024686:	2a00      	cmp	r2, #0
 8024688:	bfb6      	itet	lt
 802468a:	222d      	movlt	r2, #45	@ 0x2d
 802468c:	2200      	movge	r2, #0
 802468e:	eeb1 8b40 	vneglt.f64	d8, d0
 8024692:	2d46      	cmp	r5, #70	@ 0x46
 8024694:	460c      	mov	r4, r1
 8024696:	701a      	strb	r2, [r3, #0]
 8024698:	d004      	beq.n	80246a4 <__cvt+0x38>
 802469a:	2d45      	cmp	r5, #69	@ 0x45
 802469c:	d100      	bne.n	80246a0 <__cvt+0x34>
 802469e:	3401      	adds	r4, #1
 80246a0:	2102      	movs	r1, #2
 80246a2:	e000      	b.n	80246a6 <__cvt+0x3a>
 80246a4:	2103      	movs	r1, #3
 80246a6:	ab03      	add	r3, sp, #12
 80246a8:	9301      	str	r3, [sp, #4]
 80246aa:	ab02      	add	r3, sp, #8
 80246ac:	9300      	str	r3, [sp, #0]
 80246ae:	4622      	mov	r2, r4
 80246b0:	4633      	mov	r3, r6
 80246b2:	eeb0 0b48 	vmov.f64	d0, d8
 80246b6:	f001 f927 	bl	8025908 <_dtoa_r>
 80246ba:	2d47      	cmp	r5, #71	@ 0x47
 80246bc:	d114      	bne.n	80246e8 <__cvt+0x7c>
 80246be:	07fb      	lsls	r3, r7, #31
 80246c0:	d50a      	bpl.n	80246d8 <__cvt+0x6c>
 80246c2:	1902      	adds	r2, r0, r4
 80246c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80246c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246cc:	bf08      	it	eq
 80246ce:	9203      	streq	r2, [sp, #12]
 80246d0:	2130      	movs	r1, #48	@ 0x30
 80246d2:	9b03      	ldr	r3, [sp, #12]
 80246d4:	4293      	cmp	r3, r2
 80246d6:	d319      	bcc.n	802470c <__cvt+0xa0>
 80246d8:	9b03      	ldr	r3, [sp, #12]
 80246da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246dc:	1a1b      	subs	r3, r3, r0
 80246de:	6013      	str	r3, [r2, #0]
 80246e0:	b005      	add	sp, #20
 80246e2:	ecbd 8b02 	vpop	{d8}
 80246e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80246e8:	2d46      	cmp	r5, #70	@ 0x46
 80246ea:	eb00 0204 	add.w	r2, r0, r4
 80246ee:	d1e9      	bne.n	80246c4 <__cvt+0x58>
 80246f0:	7803      	ldrb	r3, [r0, #0]
 80246f2:	2b30      	cmp	r3, #48	@ 0x30
 80246f4:	d107      	bne.n	8024706 <__cvt+0x9a>
 80246f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80246fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246fe:	bf1c      	itt	ne
 8024700:	f1c4 0401 	rsbne	r4, r4, #1
 8024704:	6034      	strne	r4, [r6, #0]
 8024706:	6833      	ldr	r3, [r6, #0]
 8024708:	441a      	add	r2, r3
 802470a:	e7db      	b.n	80246c4 <__cvt+0x58>
 802470c:	1c5c      	adds	r4, r3, #1
 802470e:	9403      	str	r4, [sp, #12]
 8024710:	7019      	strb	r1, [r3, #0]
 8024712:	e7de      	b.n	80246d2 <__cvt+0x66>

08024714 <__exponent>:
 8024714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024716:	2900      	cmp	r1, #0
 8024718:	bfba      	itte	lt
 802471a:	4249      	neglt	r1, r1
 802471c:	232d      	movlt	r3, #45	@ 0x2d
 802471e:	232b      	movge	r3, #43	@ 0x2b
 8024720:	2909      	cmp	r1, #9
 8024722:	7002      	strb	r2, [r0, #0]
 8024724:	7043      	strb	r3, [r0, #1]
 8024726:	dd29      	ble.n	802477c <__exponent+0x68>
 8024728:	f10d 0307 	add.w	r3, sp, #7
 802472c:	461d      	mov	r5, r3
 802472e:	270a      	movs	r7, #10
 8024730:	461a      	mov	r2, r3
 8024732:	fbb1 f6f7 	udiv	r6, r1, r7
 8024736:	fb07 1416 	mls	r4, r7, r6, r1
 802473a:	3430      	adds	r4, #48	@ 0x30
 802473c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8024740:	460c      	mov	r4, r1
 8024742:	2c63      	cmp	r4, #99	@ 0x63
 8024744:	f103 33ff 	add.w	r3, r3, #4294967295
 8024748:	4631      	mov	r1, r6
 802474a:	dcf1      	bgt.n	8024730 <__exponent+0x1c>
 802474c:	3130      	adds	r1, #48	@ 0x30
 802474e:	1e94      	subs	r4, r2, #2
 8024750:	f803 1c01 	strb.w	r1, [r3, #-1]
 8024754:	1c41      	adds	r1, r0, #1
 8024756:	4623      	mov	r3, r4
 8024758:	42ab      	cmp	r3, r5
 802475a:	d30a      	bcc.n	8024772 <__exponent+0x5e>
 802475c:	f10d 0309 	add.w	r3, sp, #9
 8024760:	1a9b      	subs	r3, r3, r2
 8024762:	42ac      	cmp	r4, r5
 8024764:	bf88      	it	hi
 8024766:	2300      	movhi	r3, #0
 8024768:	3302      	adds	r3, #2
 802476a:	4403      	add	r3, r0
 802476c:	1a18      	subs	r0, r3, r0
 802476e:	b003      	add	sp, #12
 8024770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024772:	f813 6b01 	ldrb.w	r6, [r3], #1
 8024776:	f801 6f01 	strb.w	r6, [r1, #1]!
 802477a:	e7ed      	b.n	8024758 <__exponent+0x44>
 802477c:	2330      	movs	r3, #48	@ 0x30
 802477e:	3130      	adds	r1, #48	@ 0x30
 8024780:	7083      	strb	r3, [r0, #2]
 8024782:	70c1      	strb	r1, [r0, #3]
 8024784:	1d03      	adds	r3, r0, #4
 8024786:	e7f1      	b.n	802476c <__exponent+0x58>

08024788 <_printf_float>:
 8024788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802478c:	b08d      	sub	sp, #52	@ 0x34
 802478e:	460c      	mov	r4, r1
 8024790:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8024794:	4616      	mov	r6, r2
 8024796:	461f      	mov	r7, r3
 8024798:	4605      	mov	r5, r0
 802479a:	f000 ff71 	bl	8025680 <_localeconv_r>
 802479e:	f8d0 b000 	ldr.w	fp, [r0]
 80247a2:	4658      	mov	r0, fp
 80247a4:	f7db fdec 	bl	8000380 <strlen>
 80247a8:	2300      	movs	r3, #0
 80247aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80247ac:	f8d8 3000 	ldr.w	r3, [r8]
 80247b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80247b4:	6822      	ldr	r2, [r4, #0]
 80247b6:	9005      	str	r0, [sp, #20]
 80247b8:	3307      	adds	r3, #7
 80247ba:	f023 0307 	bic.w	r3, r3, #7
 80247be:	f103 0108 	add.w	r1, r3, #8
 80247c2:	f8c8 1000 	str.w	r1, [r8]
 80247c6:	ed93 0b00 	vldr	d0, [r3]
 80247ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8024a28 <_printf_float+0x2a0>
 80247ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80247d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80247d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80247de:	dd24      	ble.n	802482a <_printf_float+0xa2>
 80247e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80247e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247e8:	d502      	bpl.n	80247f0 <_printf_float+0x68>
 80247ea:	232d      	movs	r3, #45	@ 0x2d
 80247ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80247f0:	498f      	ldr	r1, [pc, #572]	@ (8024a30 <_printf_float+0x2a8>)
 80247f2:	4b90      	ldr	r3, [pc, #576]	@ (8024a34 <_printf_float+0x2ac>)
 80247f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80247f8:	bf94      	ite	ls
 80247fa:	4688      	movls	r8, r1
 80247fc:	4698      	movhi	r8, r3
 80247fe:	f022 0204 	bic.w	r2, r2, #4
 8024802:	2303      	movs	r3, #3
 8024804:	6123      	str	r3, [r4, #16]
 8024806:	6022      	str	r2, [r4, #0]
 8024808:	f04f 0a00 	mov.w	sl, #0
 802480c:	9700      	str	r7, [sp, #0]
 802480e:	4633      	mov	r3, r6
 8024810:	aa0b      	add	r2, sp, #44	@ 0x2c
 8024812:	4621      	mov	r1, r4
 8024814:	4628      	mov	r0, r5
 8024816:	f000 f9d1 	bl	8024bbc <_printf_common>
 802481a:	3001      	adds	r0, #1
 802481c:	f040 8089 	bne.w	8024932 <_printf_float+0x1aa>
 8024820:	f04f 30ff 	mov.w	r0, #4294967295
 8024824:	b00d      	add	sp, #52	@ 0x34
 8024826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802482a:	eeb4 0b40 	vcmp.f64	d0, d0
 802482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024832:	d709      	bvc.n	8024848 <_printf_float+0xc0>
 8024834:	ee10 3a90 	vmov	r3, s1
 8024838:	2b00      	cmp	r3, #0
 802483a:	bfbc      	itt	lt
 802483c:	232d      	movlt	r3, #45	@ 0x2d
 802483e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8024842:	497d      	ldr	r1, [pc, #500]	@ (8024a38 <_printf_float+0x2b0>)
 8024844:	4b7d      	ldr	r3, [pc, #500]	@ (8024a3c <_printf_float+0x2b4>)
 8024846:	e7d5      	b.n	80247f4 <_printf_float+0x6c>
 8024848:	6863      	ldr	r3, [r4, #4]
 802484a:	1c59      	adds	r1, r3, #1
 802484c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8024850:	d139      	bne.n	80248c6 <_printf_float+0x13e>
 8024852:	2306      	movs	r3, #6
 8024854:	6063      	str	r3, [r4, #4]
 8024856:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802485a:	2300      	movs	r3, #0
 802485c:	6022      	str	r2, [r4, #0]
 802485e:	9303      	str	r3, [sp, #12]
 8024860:	ab0a      	add	r3, sp, #40	@ 0x28
 8024862:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024866:	ab09      	add	r3, sp, #36	@ 0x24
 8024868:	9300      	str	r3, [sp, #0]
 802486a:	6861      	ldr	r1, [r4, #4]
 802486c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8024870:	4628      	mov	r0, r5
 8024872:	f7ff fefb 	bl	802466c <__cvt>
 8024876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802487a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802487c:	4680      	mov	r8, r0
 802487e:	d129      	bne.n	80248d4 <_printf_float+0x14c>
 8024880:	1cc8      	adds	r0, r1, #3
 8024882:	db02      	blt.n	802488a <_printf_float+0x102>
 8024884:	6863      	ldr	r3, [r4, #4]
 8024886:	4299      	cmp	r1, r3
 8024888:	dd41      	ble.n	802490e <_printf_float+0x186>
 802488a:	f1a9 0902 	sub.w	r9, r9, #2
 802488e:	fa5f f989 	uxtb.w	r9, r9
 8024892:	3901      	subs	r1, #1
 8024894:	464a      	mov	r2, r9
 8024896:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802489a:	9109      	str	r1, [sp, #36]	@ 0x24
 802489c:	f7ff ff3a 	bl	8024714 <__exponent>
 80248a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80248a2:	1813      	adds	r3, r2, r0
 80248a4:	2a01      	cmp	r2, #1
 80248a6:	4682      	mov	sl, r0
 80248a8:	6123      	str	r3, [r4, #16]
 80248aa:	dc02      	bgt.n	80248b2 <_printf_float+0x12a>
 80248ac:	6822      	ldr	r2, [r4, #0]
 80248ae:	07d2      	lsls	r2, r2, #31
 80248b0:	d501      	bpl.n	80248b6 <_printf_float+0x12e>
 80248b2:	3301      	adds	r3, #1
 80248b4:	6123      	str	r3, [r4, #16]
 80248b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	d0a6      	beq.n	802480c <_printf_float+0x84>
 80248be:	232d      	movs	r3, #45	@ 0x2d
 80248c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80248c4:	e7a2      	b.n	802480c <_printf_float+0x84>
 80248c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80248ca:	d1c4      	bne.n	8024856 <_printf_float+0xce>
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d1c2      	bne.n	8024856 <_printf_float+0xce>
 80248d0:	2301      	movs	r3, #1
 80248d2:	e7bf      	b.n	8024854 <_printf_float+0xcc>
 80248d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80248d8:	d9db      	bls.n	8024892 <_printf_float+0x10a>
 80248da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80248de:	d118      	bne.n	8024912 <_printf_float+0x18a>
 80248e0:	2900      	cmp	r1, #0
 80248e2:	6863      	ldr	r3, [r4, #4]
 80248e4:	dd0b      	ble.n	80248fe <_printf_float+0x176>
 80248e6:	6121      	str	r1, [r4, #16]
 80248e8:	b913      	cbnz	r3, 80248f0 <_printf_float+0x168>
 80248ea:	6822      	ldr	r2, [r4, #0]
 80248ec:	07d0      	lsls	r0, r2, #31
 80248ee:	d502      	bpl.n	80248f6 <_printf_float+0x16e>
 80248f0:	3301      	adds	r3, #1
 80248f2:	440b      	add	r3, r1
 80248f4:	6123      	str	r3, [r4, #16]
 80248f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80248f8:	f04f 0a00 	mov.w	sl, #0
 80248fc:	e7db      	b.n	80248b6 <_printf_float+0x12e>
 80248fe:	b913      	cbnz	r3, 8024906 <_printf_float+0x17e>
 8024900:	6822      	ldr	r2, [r4, #0]
 8024902:	07d2      	lsls	r2, r2, #31
 8024904:	d501      	bpl.n	802490a <_printf_float+0x182>
 8024906:	3302      	adds	r3, #2
 8024908:	e7f4      	b.n	80248f4 <_printf_float+0x16c>
 802490a:	2301      	movs	r3, #1
 802490c:	e7f2      	b.n	80248f4 <_printf_float+0x16c>
 802490e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8024912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024914:	4299      	cmp	r1, r3
 8024916:	db05      	blt.n	8024924 <_printf_float+0x19c>
 8024918:	6823      	ldr	r3, [r4, #0]
 802491a:	6121      	str	r1, [r4, #16]
 802491c:	07d8      	lsls	r0, r3, #31
 802491e:	d5ea      	bpl.n	80248f6 <_printf_float+0x16e>
 8024920:	1c4b      	adds	r3, r1, #1
 8024922:	e7e7      	b.n	80248f4 <_printf_float+0x16c>
 8024924:	2900      	cmp	r1, #0
 8024926:	bfd4      	ite	le
 8024928:	f1c1 0202 	rsble	r2, r1, #2
 802492c:	2201      	movgt	r2, #1
 802492e:	4413      	add	r3, r2
 8024930:	e7e0      	b.n	80248f4 <_printf_float+0x16c>
 8024932:	6823      	ldr	r3, [r4, #0]
 8024934:	055a      	lsls	r2, r3, #21
 8024936:	d407      	bmi.n	8024948 <_printf_float+0x1c0>
 8024938:	6923      	ldr	r3, [r4, #16]
 802493a:	4642      	mov	r2, r8
 802493c:	4631      	mov	r1, r6
 802493e:	4628      	mov	r0, r5
 8024940:	47b8      	blx	r7
 8024942:	3001      	adds	r0, #1
 8024944:	d12a      	bne.n	802499c <_printf_float+0x214>
 8024946:	e76b      	b.n	8024820 <_printf_float+0x98>
 8024948:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802494c:	f240 80e0 	bls.w	8024b10 <_printf_float+0x388>
 8024950:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8024954:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802495c:	d133      	bne.n	80249c6 <_printf_float+0x23e>
 802495e:	4a38      	ldr	r2, [pc, #224]	@ (8024a40 <_printf_float+0x2b8>)
 8024960:	2301      	movs	r3, #1
 8024962:	4631      	mov	r1, r6
 8024964:	4628      	mov	r0, r5
 8024966:	47b8      	blx	r7
 8024968:	3001      	adds	r0, #1
 802496a:	f43f af59 	beq.w	8024820 <_printf_float+0x98>
 802496e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8024972:	4543      	cmp	r3, r8
 8024974:	db02      	blt.n	802497c <_printf_float+0x1f4>
 8024976:	6823      	ldr	r3, [r4, #0]
 8024978:	07d8      	lsls	r0, r3, #31
 802497a:	d50f      	bpl.n	802499c <_printf_float+0x214>
 802497c:	9b05      	ldr	r3, [sp, #20]
 802497e:	465a      	mov	r2, fp
 8024980:	4631      	mov	r1, r6
 8024982:	4628      	mov	r0, r5
 8024984:	47b8      	blx	r7
 8024986:	3001      	adds	r0, #1
 8024988:	f43f af4a 	beq.w	8024820 <_printf_float+0x98>
 802498c:	f04f 0900 	mov.w	r9, #0
 8024990:	f108 38ff 	add.w	r8, r8, #4294967295
 8024994:	f104 0a1a 	add.w	sl, r4, #26
 8024998:	45c8      	cmp	r8, r9
 802499a:	dc09      	bgt.n	80249b0 <_printf_float+0x228>
 802499c:	6823      	ldr	r3, [r4, #0]
 802499e:	079b      	lsls	r3, r3, #30
 80249a0:	f100 8107 	bmi.w	8024bb2 <_printf_float+0x42a>
 80249a4:	68e0      	ldr	r0, [r4, #12]
 80249a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249a8:	4298      	cmp	r0, r3
 80249aa:	bfb8      	it	lt
 80249ac:	4618      	movlt	r0, r3
 80249ae:	e739      	b.n	8024824 <_printf_float+0x9c>
 80249b0:	2301      	movs	r3, #1
 80249b2:	4652      	mov	r2, sl
 80249b4:	4631      	mov	r1, r6
 80249b6:	4628      	mov	r0, r5
 80249b8:	47b8      	blx	r7
 80249ba:	3001      	adds	r0, #1
 80249bc:	f43f af30 	beq.w	8024820 <_printf_float+0x98>
 80249c0:	f109 0901 	add.w	r9, r9, #1
 80249c4:	e7e8      	b.n	8024998 <_printf_float+0x210>
 80249c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	dc3b      	bgt.n	8024a44 <_printf_float+0x2bc>
 80249cc:	4a1c      	ldr	r2, [pc, #112]	@ (8024a40 <_printf_float+0x2b8>)
 80249ce:	2301      	movs	r3, #1
 80249d0:	4631      	mov	r1, r6
 80249d2:	4628      	mov	r0, r5
 80249d4:	47b8      	blx	r7
 80249d6:	3001      	adds	r0, #1
 80249d8:	f43f af22 	beq.w	8024820 <_printf_float+0x98>
 80249dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80249e0:	ea59 0303 	orrs.w	r3, r9, r3
 80249e4:	d102      	bne.n	80249ec <_printf_float+0x264>
 80249e6:	6823      	ldr	r3, [r4, #0]
 80249e8:	07d9      	lsls	r1, r3, #31
 80249ea:	d5d7      	bpl.n	802499c <_printf_float+0x214>
 80249ec:	9b05      	ldr	r3, [sp, #20]
 80249ee:	465a      	mov	r2, fp
 80249f0:	4631      	mov	r1, r6
 80249f2:	4628      	mov	r0, r5
 80249f4:	47b8      	blx	r7
 80249f6:	3001      	adds	r0, #1
 80249f8:	f43f af12 	beq.w	8024820 <_printf_float+0x98>
 80249fc:	f04f 0a00 	mov.w	sl, #0
 8024a00:	f104 0b1a 	add.w	fp, r4, #26
 8024a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a06:	425b      	negs	r3, r3
 8024a08:	4553      	cmp	r3, sl
 8024a0a:	dc01      	bgt.n	8024a10 <_printf_float+0x288>
 8024a0c:	464b      	mov	r3, r9
 8024a0e:	e794      	b.n	802493a <_printf_float+0x1b2>
 8024a10:	2301      	movs	r3, #1
 8024a12:	465a      	mov	r2, fp
 8024a14:	4631      	mov	r1, r6
 8024a16:	4628      	mov	r0, r5
 8024a18:	47b8      	blx	r7
 8024a1a:	3001      	adds	r0, #1
 8024a1c:	f43f af00 	beq.w	8024820 <_printf_float+0x98>
 8024a20:	f10a 0a01 	add.w	sl, sl, #1
 8024a24:	e7ee      	b.n	8024a04 <_printf_float+0x27c>
 8024a26:	bf00      	nop
 8024a28:	ffffffff 	.word	0xffffffff
 8024a2c:	7fefffff 	.word	0x7fefffff
 8024a30:	0802d270 	.word	0x0802d270
 8024a34:	0802d274 	.word	0x0802d274
 8024a38:	0802d278 	.word	0x0802d278
 8024a3c:	0802d27c 	.word	0x0802d27c
 8024a40:	0802d52f 	.word	0x0802d52f
 8024a44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024a46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024a4a:	4553      	cmp	r3, sl
 8024a4c:	bfa8      	it	ge
 8024a4e:	4653      	movge	r3, sl
 8024a50:	2b00      	cmp	r3, #0
 8024a52:	4699      	mov	r9, r3
 8024a54:	dc37      	bgt.n	8024ac6 <_printf_float+0x33e>
 8024a56:	2300      	movs	r3, #0
 8024a58:	9307      	str	r3, [sp, #28]
 8024a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024a5e:	f104 021a 	add.w	r2, r4, #26
 8024a62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024a64:	9907      	ldr	r1, [sp, #28]
 8024a66:	9306      	str	r3, [sp, #24]
 8024a68:	eba3 0309 	sub.w	r3, r3, r9
 8024a6c:	428b      	cmp	r3, r1
 8024a6e:	dc31      	bgt.n	8024ad4 <_printf_float+0x34c>
 8024a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a72:	459a      	cmp	sl, r3
 8024a74:	dc3b      	bgt.n	8024aee <_printf_float+0x366>
 8024a76:	6823      	ldr	r3, [r4, #0]
 8024a78:	07da      	lsls	r2, r3, #31
 8024a7a:	d438      	bmi.n	8024aee <_printf_float+0x366>
 8024a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a7e:	ebaa 0903 	sub.w	r9, sl, r3
 8024a82:	9b06      	ldr	r3, [sp, #24]
 8024a84:	ebaa 0303 	sub.w	r3, sl, r3
 8024a88:	4599      	cmp	r9, r3
 8024a8a:	bfa8      	it	ge
 8024a8c:	4699      	movge	r9, r3
 8024a8e:	f1b9 0f00 	cmp.w	r9, #0
 8024a92:	dc34      	bgt.n	8024afe <_printf_float+0x376>
 8024a94:	f04f 0800 	mov.w	r8, #0
 8024a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024a9c:	f104 0b1a 	add.w	fp, r4, #26
 8024aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024aa2:	ebaa 0303 	sub.w	r3, sl, r3
 8024aa6:	eba3 0309 	sub.w	r3, r3, r9
 8024aaa:	4543      	cmp	r3, r8
 8024aac:	f77f af76 	ble.w	802499c <_printf_float+0x214>
 8024ab0:	2301      	movs	r3, #1
 8024ab2:	465a      	mov	r2, fp
 8024ab4:	4631      	mov	r1, r6
 8024ab6:	4628      	mov	r0, r5
 8024ab8:	47b8      	blx	r7
 8024aba:	3001      	adds	r0, #1
 8024abc:	f43f aeb0 	beq.w	8024820 <_printf_float+0x98>
 8024ac0:	f108 0801 	add.w	r8, r8, #1
 8024ac4:	e7ec      	b.n	8024aa0 <_printf_float+0x318>
 8024ac6:	4642      	mov	r2, r8
 8024ac8:	4631      	mov	r1, r6
 8024aca:	4628      	mov	r0, r5
 8024acc:	47b8      	blx	r7
 8024ace:	3001      	adds	r0, #1
 8024ad0:	d1c1      	bne.n	8024a56 <_printf_float+0x2ce>
 8024ad2:	e6a5      	b.n	8024820 <_printf_float+0x98>
 8024ad4:	2301      	movs	r3, #1
 8024ad6:	4631      	mov	r1, r6
 8024ad8:	4628      	mov	r0, r5
 8024ada:	9206      	str	r2, [sp, #24]
 8024adc:	47b8      	blx	r7
 8024ade:	3001      	adds	r0, #1
 8024ae0:	f43f ae9e 	beq.w	8024820 <_printf_float+0x98>
 8024ae4:	9b07      	ldr	r3, [sp, #28]
 8024ae6:	9a06      	ldr	r2, [sp, #24]
 8024ae8:	3301      	adds	r3, #1
 8024aea:	9307      	str	r3, [sp, #28]
 8024aec:	e7b9      	b.n	8024a62 <_printf_float+0x2da>
 8024aee:	9b05      	ldr	r3, [sp, #20]
 8024af0:	465a      	mov	r2, fp
 8024af2:	4631      	mov	r1, r6
 8024af4:	4628      	mov	r0, r5
 8024af6:	47b8      	blx	r7
 8024af8:	3001      	adds	r0, #1
 8024afa:	d1bf      	bne.n	8024a7c <_printf_float+0x2f4>
 8024afc:	e690      	b.n	8024820 <_printf_float+0x98>
 8024afe:	9a06      	ldr	r2, [sp, #24]
 8024b00:	464b      	mov	r3, r9
 8024b02:	4442      	add	r2, r8
 8024b04:	4631      	mov	r1, r6
 8024b06:	4628      	mov	r0, r5
 8024b08:	47b8      	blx	r7
 8024b0a:	3001      	adds	r0, #1
 8024b0c:	d1c2      	bne.n	8024a94 <_printf_float+0x30c>
 8024b0e:	e687      	b.n	8024820 <_printf_float+0x98>
 8024b10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8024b14:	f1b9 0f01 	cmp.w	r9, #1
 8024b18:	dc01      	bgt.n	8024b1e <_printf_float+0x396>
 8024b1a:	07db      	lsls	r3, r3, #31
 8024b1c:	d536      	bpl.n	8024b8c <_printf_float+0x404>
 8024b1e:	2301      	movs	r3, #1
 8024b20:	4642      	mov	r2, r8
 8024b22:	4631      	mov	r1, r6
 8024b24:	4628      	mov	r0, r5
 8024b26:	47b8      	blx	r7
 8024b28:	3001      	adds	r0, #1
 8024b2a:	f43f ae79 	beq.w	8024820 <_printf_float+0x98>
 8024b2e:	9b05      	ldr	r3, [sp, #20]
 8024b30:	465a      	mov	r2, fp
 8024b32:	4631      	mov	r1, r6
 8024b34:	4628      	mov	r0, r5
 8024b36:	47b8      	blx	r7
 8024b38:	3001      	adds	r0, #1
 8024b3a:	f43f ae71 	beq.w	8024820 <_printf_float+0x98>
 8024b3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8024b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8024b4e:	d018      	beq.n	8024b82 <_printf_float+0x3fa>
 8024b50:	464b      	mov	r3, r9
 8024b52:	f108 0201 	add.w	r2, r8, #1
 8024b56:	4631      	mov	r1, r6
 8024b58:	4628      	mov	r0, r5
 8024b5a:	47b8      	blx	r7
 8024b5c:	3001      	adds	r0, #1
 8024b5e:	d10c      	bne.n	8024b7a <_printf_float+0x3f2>
 8024b60:	e65e      	b.n	8024820 <_printf_float+0x98>
 8024b62:	2301      	movs	r3, #1
 8024b64:	465a      	mov	r2, fp
 8024b66:	4631      	mov	r1, r6
 8024b68:	4628      	mov	r0, r5
 8024b6a:	47b8      	blx	r7
 8024b6c:	3001      	adds	r0, #1
 8024b6e:	f43f ae57 	beq.w	8024820 <_printf_float+0x98>
 8024b72:	f108 0801 	add.w	r8, r8, #1
 8024b76:	45c8      	cmp	r8, r9
 8024b78:	dbf3      	blt.n	8024b62 <_printf_float+0x3da>
 8024b7a:	4653      	mov	r3, sl
 8024b7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8024b80:	e6dc      	b.n	802493c <_printf_float+0x1b4>
 8024b82:	f04f 0800 	mov.w	r8, #0
 8024b86:	f104 0b1a 	add.w	fp, r4, #26
 8024b8a:	e7f4      	b.n	8024b76 <_printf_float+0x3ee>
 8024b8c:	2301      	movs	r3, #1
 8024b8e:	4642      	mov	r2, r8
 8024b90:	e7e1      	b.n	8024b56 <_printf_float+0x3ce>
 8024b92:	2301      	movs	r3, #1
 8024b94:	464a      	mov	r2, r9
 8024b96:	4631      	mov	r1, r6
 8024b98:	4628      	mov	r0, r5
 8024b9a:	47b8      	blx	r7
 8024b9c:	3001      	adds	r0, #1
 8024b9e:	f43f ae3f 	beq.w	8024820 <_printf_float+0x98>
 8024ba2:	f108 0801 	add.w	r8, r8, #1
 8024ba6:	68e3      	ldr	r3, [r4, #12]
 8024ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024baa:	1a5b      	subs	r3, r3, r1
 8024bac:	4543      	cmp	r3, r8
 8024bae:	dcf0      	bgt.n	8024b92 <_printf_float+0x40a>
 8024bb0:	e6f8      	b.n	80249a4 <_printf_float+0x21c>
 8024bb2:	f04f 0800 	mov.w	r8, #0
 8024bb6:	f104 0919 	add.w	r9, r4, #25
 8024bba:	e7f4      	b.n	8024ba6 <_printf_float+0x41e>

08024bbc <_printf_common>:
 8024bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bc0:	4616      	mov	r6, r2
 8024bc2:	4698      	mov	r8, r3
 8024bc4:	688a      	ldr	r2, [r1, #8]
 8024bc6:	690b      	ldr	r3, [r1, #16]
 8024bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024bcc:	4293      	cmp	r3, r2
 8024bce:	bfb8      	it	lt
 8024bd0:	4613      	movlt	r3, r2
 8024bd2:	6033      	str	r3, [r6, #0]
 8024bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024bd8:	4607      	mov	r7, r0
 8024bda:	460c      	mov	r4, r1
 8024bdc:	b10a      	cbz	r2, 8024be2 <_printf_common+0x26>
 8024bde:	3301      	adds	r3, #1
 8024be0:	6033      	str	r3, [r6, #0]
 8024be2:	6823      	ldr	r3, [r4, #0]
 8024be4:	0699      	lsls	r1, r3, #26
 8024be6:	bf42      	ittt	mi
 8024be8:	6833      	ldrmi	r3, [r6, #0]
 8024bea:	3302      	addmi	r3, #2
 8024bec:	6033      	strmi	r3, [r6, #0]
 8024bee:	6825      	ldr	r5, [r4, #0]
 8024bf0:	f015 0506 	ands.w	r5, r5, #6
 8024bf4:	d106      	bne.n	8024c04 <_printf_common+0x48>
 8024bf6:	f104 0a19 	add.w	sl, r4, #25
 8024bfa:	68e3      	ldr	r3, [r4, #12]
 8024bfc:	6832      	ldr	r2, [r6, #0]
 8024bfe:	1a9b      	subs	r3, r3, r2
 8024c00:	42ab      	cmp	r3, r5
 8024c02:	dc26      	bgt.n	8024c52 <_printf_common+0x96>
 8024c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024c08:	6822      	ldr	r2, [r4, #0]
 8024c0a:	3b00      	subs	r3, #0
 8024c0c:	bf18      	it	ne
 8024c0e:	2301      	movne	r3, #1
 8024c10:	0692      	lsls	r2, r2, #26
 8024c12:	d42b      	bmi.n	8024c6c <_printf_common+0xb0>
 8024c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024c18:	4641      	mov	r1, r8
 8024c1a:	4638      	mov	r0, r7
 8024c1c:	47c8      	blx	r9
 8024c1e:	3001      	adds	r0, #1
 8024c20:	d01e      	beq.n	8024c60 <_printf_common+0xa4>
 8024c22:	6823      	ldr	r3, [r4, #0]
 8024c24:	6922      	ldr	r2, [r4, #16]
 8024c26:	f003 0306 	and.w	r3, r3, #6
 8024c2a:	2b04      	cmp	r3, #4
 8024c2c:	bf02      	ittt	eq
 8024c2e:	68e5      	ldreq	r5, [r4, #12]
 8024c30:	6833      	ldreq	r3, [r6, #0]
 8024c32:	1aed      	subeq	r5, r5, r3
 8024c34:	68a3      	ldr	r3, [r4, #8]
 8024c36:	bf0c      	ite	eq
 8024c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024c3c:	2500      	movne	r5, #0
 8024c3e:	4293      	cmp	r3, r2
 8024c40:	bfc4      	itt	gt
 8024c42:	1a9b      	subgt	r3, r3, r2
 8024c44:	18ed      	addgt	r5, r5, r3
 8024c46:	2600      	movs	r6, #0
 8024c48:	341a      	adds	r4, #26
 8024c4a:	42b5      	cmp	r5, r6
 8024c4c:	d11a      	bne.n	8024c84 <_printf_common+0xc8>
 8024c4e:	2000      	movs	r0, #0
 8024c50:	e008      	b.n	8024c64 <_printf_common+0xa8>
 8024c52:	2301      	movs	r3, #1
 8024c54:	4652      	mov	r2, sl
 8024c56:	4641      	mov	r1, r8
 8024c58:	4638      	mov	r0, r7
 8024c5a:	47c8      	blx	r9
 8024c5c:	3001      	adds	r0, #1
 8024c5e:	d103      	bne.n	8024c68 <_printf_common+0xac>
 8024c60:	f04f 30ff 	mov.w	r0, #4294967295
 8024c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c68:	3501      	adds	r5, #1
 8024c6a:	e7c6      	b.n	8024bfa <_printf_common+0x3e>
 8024c6c:	18e1      	adds	r1, r4, r3
 8024c6e:	1c5a      	adds	r2, r3, #1
 8024c70:	2030      	movs	r0, #48	@ 0x30
 8024c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024c76:	4422      	add	r2, r4
 8024c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024c80:	3302      	adds	r3, #2
 8024c82:	e7c7      	b.n	8024c14 <_printf_common+0x58>
 8024c84:	2301      	movs	r3, #1
 8024c86:	4622      	mov	r2, r4
 8024c88:	4641      	mov	r1, r8
 8024c8a:	4638      	mov	r0, r7
 8024c8c:	47c8      	blx	r9
 8024c8e:	3001      	adds	r0, #1
 8024c90:	d0e6      	beq.n	8024c60 <_printf_common+0xa4>
 8024c92:	3601      	adds	r6, #1
 8024c94:	e7d9      	b.n	8024c4a <_printf_common+0x8e>
	...

08024c98 <_printf_i>:
 8024c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024c9c:	7e0f      	ldrb	r7, [r1, #24]
 8024c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024ca0:	2f78      	cmp	r7, #120	@ 0x78
 8024ca2:	4691      	mov	r9, r2
 8024ca4:	4680      	mov	r8, r0
 8024ca6:	460c      	mov	r4, r1
 8024ca8:	469a      	mov	sl, r3
 8024caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024cae:	d807      	bhi.n	8024cc0 <_printf_i+0x28>
 8024cb0:	2f62      	cmp	r7, #98	@ 0x62
 8024cb2:	d80a      	bhi.n	8024cca <_printf_i+0x32>
 8024cb4:	2f00      	cmp	r7, #0
 8024cb6:	f000 80d2 	beq.w	8024e5e <_printf_i+0x1c6>
 8024cba:	2f58      	cmp	r7, #88	@ 0x58
 8024cbc:	f000 80b9 	beq.w	8024e32 <_printf_i+0x19a>
 8024cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024cc8:	e03a      	b.n	8024d40 <_printf_i+0xa8>
 8024cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024cce:	2b15      	cmp	r3, #21
 8024cd0:	d8f6      	bhi.n	8024cc0 <_printf_i+0x28>
 8024cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8024cd8 <_printf_i+0x40>)
 8024cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024cd8:	08024d31 	.word	0x08024d31
 8024cdc:	08024d45 	.word	0x08024d45
 8024ce0:	08024cc1 	.word	0x08024cc1
 8024ce4:	08024cc1 	.word	0x08024cc1
 8024ce8:	08024cc1 	.word	0x08024cc1
 8024cec:	08024cc1 	.word	0x08024cc1
 8024cf0:	08024d45 	.word	0x08024d45
 8024cf4:	08024cc1 	.word	0x08024cc1
 8024cf8:	08024cc1 	.word	0x08024cc1
 8024cfc:	08024cc1 	.word	0x08024cc1
 8024d00:	08024cc1 	.word	0x08024cc1
 8024d04:	08024e45 	.word	0x08024e45
 8024d08:	08024d6f 	.word	0x08024d6f
 8024d0c:	08024dff 	.word	0x08024dff
 8024d10:	08024cc1 	.word	0x08024cc1
 8024d14:	08024cc1 	.word	0x08024cc1
 8024d18:	08024e67 	.word	0x08024e67
 8024d1c:	08024cc1 	.word	0x08024cc1
 8024d20:	08024d6f 	.word	0x08024d6f
 8024d24:	08024cc1 	.word	0x08024cc1
 8024d28:	08024cc1 	.word	0x08024cc1
 8024d2c:	08024e07 	.word	0x08024e07
 8024d30:	6833      	ldr	r3, [r6, #0]
 8024d32:	1d1a      	adds	r2, r3, #4
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	6032      	str	r2, [r6, #0]
 8024d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024d40:	2301      	movs	r3, #1
 8024d42:	e09d      	b.n	8024e80 <_printf_i+0x1e8>
 8024d44:	6833      	ldr	r3, [r6, #0]
 8024d46:	6820      	ldr	r0, [r4, #0]
 8024d48:	1d19      	adds	r1, r3, #4
 8024d4a:	6031      	str	r1, [r6, #0]
 8024d4c:	0606      	lsls	r6, r0, #24
 8024d4e:	d501      	bpl.n	8024d54 <_printf_i+0xbc>
 8024d50:	681d      	ldr	r5, [r3, #0]
 8024d52:	e003      	b.n	8024d5c <_printf_i+0xc4>
 8024d54:	0645      	lsls	r5, r0, #25
 8024d56:	d5fb      	bpl.n	8024d50 <_printf_i+0xb8>
 8024d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024d5c:	2d00      	cmp	r5, #0
 8024d5e:	da03      	bge.n	8024d68 <_printf_i+0xd0>
 8024d60:	232d      	movs	r3, #45	@ 0x2d
 8024d62:	426d      	negs	r5, r5
 8024d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024d68:	4859      	ldr	r0, [pc, #356]	@ (8024ed0 <_printf_i+0x238>)
 8024d6a:	230a      	movs	r3, #10
 8024d6c:	e011      	b.n	8024d92 <_printf_i+0xfa>
 8024d6e:	6821      	ldr	r1, [r4, #0]
 8024d70:	6833      	ldr	r3, [r6, #0]
 8024d72:	0608      	lsls	r0, r1, #24
 8024d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8024d78:	d402      	bmi.n	8024d80 <_printf_i+0xe8>
 8024d7a:	0649      	lsls	r1, r1, #25
 8024d7c:	bf48      	it	mi
 8024d7e:	b2ad      	uxthmi	r5, r5
 8024d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8024d82:	4853      	ldr	r0, [pc, #332]	@ (8024ed0 <_printf_i+0x238>)
 8024d84:	6033      	str	r3, [r6, #0]
 8024d86:	bf14      	ite	ne
 8024d88:	230a      	movne	r3, #10
 8024d8a:	2308      	moveq	r3, #8
 8024d8c:	2100      	movs	r1, #0
 8024d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024d92:	6866      	ldr	r6, [r4, #4]
 8024d94:	60a6      	str	r6, [r4, #8]
 8024d96:	2e00      	cmp	r6, #0
 8024d98:	bfa2      	ittt	ge
 8024d9a:	6821      	ldrge	r1, [r4, #0]
 8024d9c:	f021 0104 	bicge.w	r1, r1, #4
 8024da0:	6021      	strge	r1, [r4, #0]
 8024da2:	b90d      	cbnz	r5, 8024da8 <_printf_i+0x110>
 8024da4:	2e00      	cmp	r6, #0
 8024da6:	d04b      	beq.n	8024e40 <_printf_i+0x1a8>
 8024da8:	4616      	mov	r6, r2
 8024daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8024dae:	fb03 5711 	mls	r7, r3, r1, r5
 8024db2:	5dc7      	ldrb	r7, [r0, r7]
 8024db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024db8:	462f      	mov	r7, r5
 8024dba:	42bb      	cmp	r3, r7
 8024dbc:	460d      	mov	r5, r1
 8024dbe:	d9f4      	bls.n	8024daa <_printf_i+0x112>
 8024dc0:	2b08      	cmp	r3, #8
 8024dc2:	d10b      	bne.n	8024ddc <_printf_i+0x144>
 8024dc4:	6823      	ldr	r3, [r4, #0]
 8024dc6:	07df      	lsls	r7, r3, #31
 8024dc8:	d508      	bpl.n	8024ddc <_printf_i+0x144>
 8024dca:	6923      	ldr	r3, [r4, #16]
 8024dcc:	6861      	ldr	r1, [r4, #4]
 8024dce:	4299      	cmp	r1, r3
 8024dd0:	bfde      	ittt	le
 8024dd2:	2330      	movle	r3, #48	@ 0x30
 8024dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024dd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024ddc:	1b92      	subs	r2, r2, r6
 8024dde:	6122      	str	r2, [r4, #16]
 8024de0:	f8cd a000 	str.w	sl, [sp]
 8024de4:	464b      	mov	r3, r9
 8024de6:	aa03      	add	r2, sp, #12
 8024de8:	4621      	mov	r1, r4
 8024dea:	4640      	mov	r0, r8
 8024dec:	f7ff fee6 	bl	8024bbc <_printf_common>
 8024df0:	3001      	adds	r0, #1
 8024df2:	d14a      	bne.n	8024e8a <_printf_i+0x1f2>
 8024df4:	f04f 30ff 	mov.w	r0, #4294967295
 8024df8:	b004      	add	sp, #16
 8024dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024dfe:	6823      	ldr	r3, [r4, #0]
 8024e00:	f043 0320 	orr.w	r3, r3, #32
 8024e04:	6023      	str	r3, [r4, #0]
 8024e06:	4833      	ldr	r0, [pc, #204]	@ (8024ed4 <_printf_i+0x23c>)
 8024e08:	2778      	movs	r7, #120	@ 0x78
 8024e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024e0e:	6823      	ldr	r3, [r4, #0]
 8024e10:	6831      	ldr	r1, [r6, #0]
 8024e12:	061f      	lsls	r7, r3, #24
 8024e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8024e18:	d402      	bmi.n	8024e20 <_printf_i+0x188>
 8024e1a:	065f      	lsls	r7, r3, #25
 8024e1c:	bf48      	it	mi
 8024e1e:	b2ad      	uxthmi	r5, r5
 8024e20:	6031      	str	r1, [r6, #0]
 8024e22:	07d9      	lsls	r1, r3, #31
 8024e24:	bf44      	itt	mi
 8024e26:	f043 0320 	orrmi.w	r3, r3, #32
 8024e2a:	6023      	strmi	r3, [r4, #0]
 8024e2c:	b11d      	cbz	r5, 8024e36 <_printf_i+0x19e>
 8024e2e:	2310      	movs	r3, #16
 8024e30:	e7ac      	b.n	8024d8c <_printf_i+0xf4>
 8024e32:	4827      	ldr	r0, [pc, #156]	@ (8024ed0 <_printf_i+0x238>)
 8024e34:	e7e9      	b.n	8024e0a <_printf_i+0x172>
 8024e36:	6823      	ldr	r3, [r4, #0]
 8024e38:	f023 0320 	bic.w	r3, r3, #32
 8024e3c:	6023      	str	r3, [r4, #0]
 8024e3e:	e7f6      	b.n	8024e2e <_printf_i+0x196>
 8024e40:	4616      	mov	r6, r2
 8024e42:	e7bd      	b.n	8024dc0 <_printf_i+0x128>
 8024e44:	6833      	ldr	r3, [r6, #0]
 8024e46:	6825      	ldr	r5, [r4, #0]
 8024e48:	6961      	ldr	r1, [r4, #20]
 8024e4a:	1d18      	adds	r0, r3, #4
 8024e4c:	6030      	str	r0, [r6, #0]
 8024e4e:	062e      	lsls	r6, r5, #24
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	d501      	bpl.n	8024e58 <_printf_i+0x1c0>
 8024e54:	6019      	str	r1, [r3, #0]
 8024e56:	e002      	b.n	8024e5e <_printf_i+0x1c6>
 8024e58:	0668      	lsls	r0, r5, #25
 8024e5a:	d5fb      	bpl.n	8024e54 <_printf_i+0x1bc>
 8024e5c:	8019      	strh	r1, [r3, #0]
 8024e5e:	2300      	movs	r3, #0
 8024e60:	6123      	str	r3, [r4, #16]
 8024e62:	4616      	mov	r6, r2
 8024e64:	e7bc      	b.n	8024de0 <_printf_i+0x148>
 8024e66:	6833      	ldr	r3, [r6, #0]
 8024e68:	1d1a      	adds	r2, r3, #4
 8024e6a:	6032      	str	r2, [r6, #0]
 8024e6c:	681e      	ldr	r6, [r3, #0]
 8024e6e:	6862      	ldr	r2, [r4, #4]
 8024e70:	2100      	movs	r1, #0
 8024e72:	4630      	mov	r0, r6
 8024e74:	f7db fa34 	bl	80002e0 <memchr>
 8024e78:	b108      	cbz	r0, 8024e7e <_printf_i+0x1e6>
 8024e7a:	1b80      	subs	r0, r0, r6
 8024e7c:	6060      	str	r0, [r4, #4]
 8024e7e:	6863      	ldr	r3, [r4, #4]
 8024e80:	6123      	str	r3, [r4, #16]
 8024e82:	2300      	movs	r3, #0
 8024e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024e88:	e7aa      	b.n	8024de0 <_printf_i+0x148>
 8024e8a:	6923      	ldr	r3, [r4, #16]
 8024e8c:	4632      	mov	r2, r6
 8024e8e:	4649      	mov	r1, r9
 8024e90:	4640      	mov	r0, r8
 8024e92:	47d0      	blx	sl
 8024e94:	3001      	adds	r0, #1
 8024e96:	d0ad      	beq.n	8024df4 <_printf_i+0x15c>
 8024e98:	6823      	ldr	r3, [r4, #0]
 8024e9a:	079b      	lsls	r3, r3, #30
 8024e9c:	d413      	bmi.n	8024ec6 <_printf_i+0x22e>
 8024e9e:	68e0      	ldr	r0, [r4, #12]
 8024ea0:	9b03      	ldr	r3, [sp, #12]
 8024ea2:	4298      	cmp	r0, r3
 8024ea4:	bfb8      	it	lt
 8024ea6:	4618      	movlt	r0, r3
 8024ea8:	e7a6      	b.n	8024df8 <_printf_i+0x160>
 8024eaa:	2301      	movs	r3, #1
 8024eac:	4632      	mov	r2, r6
 8024eae:	4649      	mov	r1, r9
 8024eb0:	4640      	mov	r0, r8
 8024eb2:	47d0      	blx	sl
 8024eb4:	3001      	adds	r0, #1
 8024eb6:	d09d      	beq.n	8024df4 <_printf_i+0x15c>
 8024eb8:	3501      	adds	r5, #1
 8024eba:	68e3      	ldr	r3, [r4, #12]
 8024ebc:	9903      	ldr	r1, [sp, #12]
 8024ebe:	1a5b      	subs	r3, r3, r1
 8024ec0:	42ab      	cmp	r3, r5
 8024ec2:	dcf2      	bgt.n	8024eaa <_printf_i+0x212>
 8024ec4:	e7eb      	b.n	8024e9e <_printf_i+0x206>
 8024ec6:	2500      	movs	r5, #0
 8024ec8:	f104 0619 	add.w	r6, r4, #25
 8024ecc:	e7f5      	b.n	8024eba <_printf_i+0x222>
 8024ece:	bf00      	nop
 8024ed0:	0802d280 	.word	0x0802d280
 8024ed4:	0802d291 	.word	0x0802d291

08024ed8 <_scanf_float>:
 8024ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024edc:	b087      	sub	sp, #28
 8024ede:	4617      	mov	r7, r2
 8024ee0:	9303      	str	r3, [sp, #12]
 8024ee2:	688b      	ldr	r3, [r1, #8]
 8024ee4:	1e5a      	subs	r2, r3, #1
 8024ee6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024eea:	bf81      	itttt	hi
 8024eec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024ef0:	eb03 0b05 	addhi.w	fp, r3, r5
 8024ef4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024ef8:	608b      	strhi	r3, [r1, #8]
 8024efa:	680b      	ldr	r3, [r1, #0]
 8024efc:	460a      	mov	r2, r1
 8024efe:	f04f 0500 	mov.w	r5, #0
 8024f02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8024f06:	f842 3b1c 	str.w	r3, [r2], #28
 8024f0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8024f0e:	4680      	mov	r8, r0
 8024f10:	460c      	mov	r4, r1
 8024f12:	bf98      	it	ls
 8024f14:	f04f 0b00 	movls.w	fp, #0
 8024f18:	9201      	str	r2, [sp, #4]
 8024f1a:	4616      	mov	r6, r2
 8024f1c:	46aa      	mov	sl, r5
 8024f1e:	46a9      	mov	r9, r5
 8024f20:	9502      	str	r5, [sp, #8]
 8024f22:	68a2      	ldr	r2, [r4, #8]
 8024f24:	b152      	cbz	r2, 8024f3c <_scanf_float+0x64>
 8024f26:	683b      	ldr	r3, [r7, #0]
 8024f28:	781b      	ldrb	r3, [r3, #0]
 8024f2a:	2b4e      	cmp	r3, #78	@ 0x4e
 8024f2c:	d864      	bhi.n	8024ff8 <_scanf_float+0x120>
 8024f2e:	2b40      	cmp	r3, #64	@ 0x40
 8024f30:	d83c      	bhi.n	8024fac <_scanf_float+0xd4>
 8024f32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8024f36:	b2c8      	uxtb	r0, r1
 8024f38:	280e      	cmp	r0, #14
 8024f3a:	d93a      	bls.n	8024fb2 <_scanf_float+0xda>
 8024f3c:	f1b9 0f00 	cmp.w	r9, #0
 8024f40:	d003      	beq.n	8024f4a <_scanf_float+0x72>
 8024f42:	6823      	ldr	r3, [r4, #0]
 8024f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024f48:	6023      	str	r3, [r4, #0]
 8024f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024f4e:	f1ba 0f01 	cmp.w	sl, #1
 8024f52:	f200 8117 	bhi.w	8025184 <_scanf_float+0x2ac>
 8024f56:	9b01      	ldr	r3, [sp, #4]
 8024f58:	429e      	cmp	r6, r3
 8024f5a:	f200 8108 	bhi.w	802516e <_scanf_float+0x296>
 8024f5e:	2001      	movs	r0, #1
 8024f60:	b007      	add	sp, #28
 8024f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8024f6a:	2a0d      	cmp	r2, #13
 8024f6c:	d8e6      	bhi.n	8024f3c <_scanf_float+0x64>
 8024f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8024f74 <_scanf_float+0x9c>)
 8024f70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024f74:	080250bb 	.word	0x080250bb
 8024f78:	08024f3d 	.word	0x08024f3d
 8024f7c:	08024f3d 	.word	0x08024f3d
 8024f80:	08024f3d 	.word	0x08024f3d
 8024f84:	0802511b 	.word	0x0802511b
 8024f88:	080250f3 	.word	0x080250f3
 8024f8c:	08024f3d 	.word	0x08024f3d
 8024f90:	08024f3d 	.word	0x08024f3d
 8024f94:	080250c9 	.word	0x080250c9
 8024f98:	08024f3d 	.word	0x08024f3d
 8024f9c:	08024f3d 	.word	0x08024f3d
 8024fa0:	08024f3d 	.word	0x08024f3d
 8024fa4:	08024f3d 	.word	0x08024f3d
 8024fa8:	08025081 	.word	0x08025081
 8024fac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8024fb0:	e7db      	b.n	8024f6a <_scanf_float+0x92>
 8024fb2:	290e      	cmp	r1, #14
 8024fb4:	d8c2      	bhi.n	8024f3c <_scanf_float+0x64>
 8024fb6:	a001      	add	r0, pc, #4	@ (adr r0, 8024fbc <_scanf_float+0xe4>)
 8024fb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024fbc:	08025071 	.word	0x08025071
 8024fc0:	08024f3d 	.word	0x08024f3d
 8024fc4:	08025071 	.word	0x08025071
 8024fc8:	08025107 	.word	0x08025107
 8024fcc:	08024f3d 	.word	0x08024f3d
 8024fd0:	08025019 	.word	0x08025019
 8024fd4:	08025057 	.word	0x08025057
 8024fd8:	08025057 	.word	0x08025057
 8024fdc:	08025057 	.word	0x08025057
 8024fe0:	08025057 	.word	0x08025057
 8024fe4:	08025057 	.word	0x08025057
 8024fe8:	08025057 	.word	0x08025057
 8024fec:	08025057 	.word	0x08025057
 8024ff0:	08025057 	.word	0x08025057
 8024ff4:	08025057 	.word	0x08025057
 8024ff8:	2b6e      	cmp	r3, #110	@ 0x6e
 8024ffa:	d809      	bhi.n	8025010 <_scanf_float+0x138>
 8024ffc:	2b60      	cmp	r3, #96	@ 0x60
 8024ffe:	d8b2      	bhi.n	8024f66 <_scanf_float+0x8e>
 8025000:	2b54      	cmp	r3, #84	@ 0x54
 8025002:	d07b      	beq.n	80250fc <_scanf_float+0x224>
 8025004:	2b59      	cmp	r3, #89	@ 0x59
 8025006:	d199      	bne.n	8024f3c <_scanf_float+0x64>
 8025008:	2d07      	cmp	r5, #7
 802500a:	d197      	bne.n	8024f3c <_scanf_float+0x64>
 802500c:	2508      	movs	r5, #8
 802500e:	e02c      	b.n	802506a <_scanf_float+0x192>
 8025010:	2b74      	cmp	r3, #116	@ 0x74
 8025012:	d073      	beq.n	80250fc <_scanf_float+0x224>
 8025014:	2b79      	cmp	r3, #121	@ 0x79
 8025016:	e7f6      	b.n	8025006 <_scanf_float+0x12e>
 8025018:	6821      	ldr	r1, [r4, #0]
 802501a:	05c8      	lsls	r0, r1, #23
 802501c:	d51b      	bpl.n	8025056 <_scanf_float+0x17e>
 802501e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8025022:	6021      	str	r1, [r4, #0]
 8025024:	f109 0901 	add.w	r9, r9, #1
 8025028:	f1bb 0f00 	cmp.w	fp, #0
 802502c:	d003      	beq.n	8025036 <_scanf_float+0x15e>
 802502e:	3201      	adds	r2, #1
 8025030:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025034:	60a2      	str	r2, [r4, #8]
 8025036:	68a3      	ldr	r3, [r4, #8]
 8025038:	3b01      	subs	r3, #1
 802503a:	60a3      	str	r3, [r4, #8]
 802503c:	6923      	ldr	r3, [r4, #16]
 802503e:	3301      	adds	r3, #1
 8025040:	6123      	str	r3, [r4, #16]
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	3b01      	subs	r3, #1
 8025046:	2b00      	cmp	r3, #0
 8025048:	607b      	str	r3, [r7, #4]
 802504a:	f340 8087 	ble.w	802515c <_scanf_float+0x284>
 802504e:	683b      	ldr	r3, [r7, #0]
 8025050:	3301      	adds	r3, #1
 8025052:	603b      	str	r3, [r7, #0]
 8025054:	e765      	b.n	8024f22 <_scanf_float+0x4a>
 8025056:	eb1a 0105 	adds.w	r1, sl, r5
 802505a:	f47f af6f 	bne.w	8024f3c <_scanf_float+0x64>
 802505e:	6822      	ldr	r2, [r4, #0]
 8025060:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8025064:	6022      	str	r2, [r4, #0]
 8025066:	460d      	mov	r5, r1
 8025068:	468a      	mov	sl, r1
 802506a:	f806 3b01 	strb.w	r3, [r6], #1
 802506e:	e7e2      	b.n	8025036 <_scanf_float+0x15e>
 8025070:	6822      	ldr	r2, [r4, #0]
 8025072:	0610      	lsls	r0, r2, #24
 8025074:	f57f af62 	bpl.w	8024f3c <_scanf_float+0x64>
 8025078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802507c:	6022      	str	r2, [r4, #0]
 802507e:	e7f4      	b.n	802506a <_scanf_float+0x192>
 8025080:	f1ba 0f00 	cmp.w	sl, #0
 8025084:	d10e      	bne.n	80250a4 <_scanf_float+0x1cc>
 8025086:	f1b9 0f00 	cmp.w	r9, #0
 802508a:	d10e      	bne.n	80250aa <_scanf_float+0x1d2>
 802508c:	6822      	ldr	r2, [r4, #0]
 802508e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8025092:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8025096:	d108      	bne.n	80250aa <_scanf_float+0x1d2>
 8025098:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802509c:	6022      	str	r2, [r4, #0]
 802509e:	f04f 0a01 	mov.w	sl, #1
 80250a2:	e7e2      	b.n	802506a <_scanf_float+0x192>
 80250a4:	f1ba 0f02 	cmp.w	sl, #2
 80250a8:	d055      	beq.n	8025156 <_scanf_float+0x27e>
 80250aa:	2d01      	cmp	r5, #1
 80250ac:	d002      	beq.n	80250b4 <_scanf_float+0x1dc>
 80250ae:	2d04      	cmp	r5, #4
 80250b0:	f47f af44 	bne.w	8024f3c <_scanf_float+0x64>
 80250b4:	3501      	adds	r5, #1
 80250b6:	b2ed      	uxtb	r5, r5
 80250b8:	e7d7      	b.n	802506a <_scanf_float+0x192>
 80250ba:	f1ba 0f01 	cmp.w	sl, #1
 80250be:	f47f af3d 	bne.w	8024f3c <_scanf_float+0x64>
 80250c2:	f04f 0a02 	mov.w	sl, #2
 80250c6:	e7d0      	b.n	802506a <_scanf_float+0x192>
 80250c8:	b97d      	cbnz	r5, 80250ea <_scanf_float+0x212>
 80250ca:	f1b9 0f00 	cmp.w	r9, #0
 80250ce:	f47f af38 	bne.w	8024f42 <_scanf_float+0x6a>
 80250d2:	6822      	ldr	r2, [r4, #0]
 80250d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80250d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80250dc:	f040 8101 	bne.w	80252e2 <_scanf_float+0x40a>
 80250e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80250e4:	6022      	str	r2, [r4, #0]
 80250e6:	2501      	movs	r5, #1
 80250e8:	e7bf      	b.n	802506a <_scanf_float+0x192>
 80250ea:	2d03      	cmp	r5, #3
 80250ec:	d0e2      	beq.n	80250b4 <_scanf_float+0x1dc>
 80250ee:	2d05      	cmp	r5, #5
 80250f0:	e7de      	b.n	80250b0 <_scanf_float+0x1d8>
 80250f2:	2d02      	cmp	r5, #2
 80250f4:	f47f af22 	bne.w	8024f3c <_scanf_float+0x64>
 80250f8:	2503      	movs	r5, #3
 80250fa:	e7b6      	b.n	802506a <_scanf_float+0x192>
 80250fc:	2d06      	cmp	r5, #6
 80250fe:	f47f af1d 	bne.w	8024f3c <_scanf_float+0x64>
 8025102:	2507      	movs	r5, #7
 8025104:	e7b1      	b.n	802506a <_scanf_float+0x192>
 8025106:	6822      	ldr	r2, [r4, #0]
 8025108:	0591      	lsls	r1, r2, #22
 802510a:	f57f af17 	bpl.w	8024f3c <_scanf_float+0x64>
 802510e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8025112:	6022      	str	r2, [r4, #0]
 8025114:	f8cd 9008 	str.w	r9, [sp, #8]
 8025118:	e7a7      	b.n	802506a <_scanf_float+0x192>
 802511a:	6822      	ldr	r2, [r4, #0]
 802511c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8025120:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8025124:	d006      	beq.n	8025134 <_scanf_float+0x25c>
 8025126:	0550      	lsls	r0, r2, #21
 8025128:	f57f af08 	bpl.w	8024f3c <_scanf_float+0x64>
 802512c:	f1b9 0f00 	cmp.w	r9, #0
 8025130:	f000 80d7 	beq.w	80252e2 <_scanf_float+0x40a>
 8025134:	0591      	lsls	r1, r2, #22
 8025136:	bf58      	it	pl
 8025138:	9902      	ldrpl	r1, [sp, #8]
 802513a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802513e:	bf58      	it	pl
 8025140:	eba9 0101 	subpl.w	r1, r9, r1
 8025144:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8025148:	bf58      	it	pl
 802514a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802514e:	6022      	str	r2, [r4, #0]
 8025150:	f04f 0900 	mov.w	r9, #0
 8025154:	e789      	b.n	802506a <_scanf_float+0x192>
 8025156:	f04f 0a03 	mov.w	sl, #3
 802515a:	e786      	b.n	802506a <_scanf_float+0x192>
 802515c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8025160:	4639      	mov	r1, r7
 8025162:	4640      	mov	r0, r8
 8025164:	4798      	blx	r3
 8025166:	2800      	cmp	r0, #0
 8025168:	f43f aedb 	beq.w	8024f22 <_scanf_float+0x4a>
 802516c:	e6e6      	b.n	8024f3c <_scanf_float+0x64>
 802516e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025176:	463a      	mov	r2, r7
 8025178:	4640      	mov	r0, r8
 802517a:	4798      	blx	r3
 802517c:	6923      	ldr	r3, [r4, #16]
 802517e:	3b01      	subs	r3, #1
 8025180:	6123      	str	r3, [r4, #16]
 8025182:	e6e8      	b.n	8024f56 <_scanf_float+0x7e>
 8025184:	1e6b      	subs	r3, r5, #1
 8025186:	2b06      	cmp	r3, #6
 8025188:	d824      	bhi.n	80251d4 <_scanf_float+0x2fc>
 802518a:	2d02      	cmp	r5, #2
 802518c:	d836      	bhi.n	80251fc <_scanf_float+0x324>
 802518e:	9b01      	ldr	r3, [sp, #4]
 8025190:	429e      	cmp	r6, r3
 8025192:	f67f aee4 	bls.w	8024f5e <_scanf_float+0x86>
 8025196:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802519a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802519e:	463a      	mov	r2, r7
 80251a0:	4640      	mov	r0, r8
 80251a2:	4798      	blx	r3
 80251a4:	6923      	ldr	r3, [r4, #16]
 80251a6:	3b01      	subs	r3, #1
 80251a8:	6123      	str	r3, [r4, #16]
 80251aa:	e7f0      	b.n	802518e <_scanf_float+0x2b6>
 80251ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80251b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80251b4:	463a      	mov	r2, r7
 80251b6:	4640      	mov	r0, r8
 80251b8:	4798      	blx	r3
 80251ba:	6923      	ldr	r3, [r4, #16]
 80251bc:	3b01      	subs	r3, #1
 80251be:	6123      	str	r3, [r4, #16]
 80251c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80251c4:	fa5f fa8a 	uxtb.w	sl, sl
 80251c8:	f1ba 0f02 	cmp.w	sl, #2
 80251cc:	d1ee      	bne.n	80251ac <_scanf_float+0x2d4>
 80251ce:	3d03      	subs	r5, #3
 80251d0:	b2ed      	uxtb	r5, r5
 80251d2:	1b76      	subs	r6, r6, r5
 80251d4:	6823      	ldr	r3, [r4, #0]
 80251d6:	05da      	lsls	r2, r3, #23
 80251d8:	d530      	bpl.n	802523c <_scanf_float+0x364>
 80251da:	055b      	lsls	r3, r3, #21
 80251dc:	d511      	bpl.n	8025202 <_scanf_float+0x32a>
 80251de:	9b01      	ldr	r3, [sp, #4]
 80251e0:	429e      	cmp	r6, r3
 80251e2:	f67f aebc 	bls.w	8024f5e <_scanf_float+0x86>
 80251e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80251ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80251ee:	463a      	mov	r2, r7
 80251f0:	4640      	mov	r0, r8
 80251f2:	4798      	blx	r3
 80251f4:	6923      	ldr	r3, [r4, #16]
 80251f6:	3b01      	subs	r3, #1
 80251f8:	6123      	str	r3, [r4, #16]
 80251fa:	e7f0      	b.n	80251de <_scanf_float+0x306>
 80251fc:	46aa      	mov	sl, r5
 80251fe:	46b3      	mov	fp, r6
 8025200:	e7de      	b.n	80251c0 <_scanf_float+0x2e8>
 8025202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025206:	6923      	ldr	r3, [r4, #16]
 8025208:	2965      	cmp	r1, #101	@ 0x65
 802520a:	f103 33ff 	add.w	r3, r3, #4294967295
 802520e:	f106 35ff 	add.w	r5, r6, #4294967295
 8025212:	6123      	str	r3, [r4, #16]
 8025214:	d00c      	beq.n	8025230 <_scanf_float+0x358>
 8025216:	2945      	cmp	r1, #69	@ 0x45
 8025218:	d00a      	beq.n	8025230 <_scanf_float+0x358>
 802521a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802521e:	463a      	mov	r2, r7
 8025220:	4640      	mov	r0, r8
 8025222:	4798      	blx	r3
 8025224:	6923      	ldr	r3, [r4, #16]
 8025226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802522a:	3b01      	subs	r3, #1
 802522c:	1eb5      	subs	r5, r6, #2
 802522e:	6123      	str	r3, [r4, #16]
 8025230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025234:	463a      	mov	r2, r7
 8025236:	4640      	mov	r0, r8
 8025238:	4798      	blx	r3
 802523a:	462e      	mov	r6, r5
 802523c:	6822      	ldr	r2, [r4, #0]
 802523e:	f012 0210 	ands.w	r2, r2, #16
 8025242:	d001      	beq.n	8025248 <_scanf_float+0x370>
 8025244:	2000      	movs	r0, #0
 8025246:	e68b      	b.n	8024f60 <_scanf_float+0x88>
 8025248:	7032      	strb	r2, [r6, #0]
 802524a:	6823      	ldr	r3, [r4, #0]
 802524c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8025250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025254:	d11a      	bne.n	802528c <_scanf_float+0x3b4>
 8025256:	9b02      	ldr	r3, [sp, #8]
 8025258:	454b      	cmp	r3, r9
 802525a:	eba3 0209 	sub.w	r2, r3, r9
 802525e:	d121      	bne.n	80252a4 <_scanf_float+0x3cc>
 8025260:	9901      	ldr	r1, [sp, #4]
 8025262:	2200      	movs	r2, #0
 8025264:	4640      	mov	r0, r8
 8025266:	f002 fb51 	bl	802790c <_strtod_r>
 802526a:	9b03      	ldr	r3, [sp, #12]
 802526c:	6821      	ldr	r1, [r4, #0]
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	f011 0f02 	tst.w	r1, #2
 8025274:	f103 0204 	add.w	r2, r3, #4
 8025278:	d01f      	beq.n	80252ba <_scanf_float+0x3e2>
 802527a:	9903      	ldr	r1, [sp, #12]
 802527c:	600a      	str	r2, [r1, #0]
 802527e:	681b      	ldr	r3, [r3, #0]
 8025280:	ed83 0b00 	vstr	d0, [r3]
 8025284:	68e3      	ldr	r3, [r4, #12]
 8025286:	3301      	adds	r3, #1
 8025288:	60e3      	str	r3, [r4, #12]
 802528a:	e7db      	b.n	8025244 <_scanf_float+0x36c>
 802528c:	9b04      	ldr	r3, [sp, #16]
 802528e:	2b00      	cmp	r3, #0
 8025290:	d0e6      	beq.n	8025260 <_scanf_float+0x388>
 8025292:	9905      	ldr	r1, [sp, #20]
 8025294:	230a      	movs	r3, #10
 8025296:	3101      	adds	r1, #1
 8025298:	4640      	mov	r0, r8
 802529a:	f7ff f9e5 	bl	8024668 <_strtol_r>
 802529e:	9b04      	ldr	r3, [sp, #16]
 80252a0:	9e05      	ldr	r6, [sp, #20]
 80252a2:	1ac2      	subs	r2, r0, r3
 80252a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80252a8:	429e      	cmp	r6, r3
 80252aa:	bf28      	it	cs
 80252ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80252b0:	490d      	ldr	r1, [pc, #52]	@ (80252e8 <_scanf_float+0x410>)
 80252b2:	4630      	mov	r0, r6
 80252b4:	f000 f8f0 	bl	8025498 <siprintf>
 80252b8:	e7d2      	b.n	8025260 <_scanf_float+0x388>
 80252ba:	f011 0f04 	tst.w	r1, #4
 80252be:	9903      	ldr	r1, [sp, #12]
 80252c0:	600a      	str	r2, [r1, #0]
 80252c2:	d1dc      	bne.n	802527e <_scanf_float+0x3a6>
 80252c4:	eeb4 0b40 	vcmp.f64	d0, d0
 80252c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252cc:	681d      	ldr	r5, [r3, #0]
 80252ce:	d705      	bvc.n	80252dc <_scanf_float+0x404>
 80252d0:	4806      	ldr	r0, [pc, #24]	@ (80252ec <_scanf_float+0x414>)
 80252d2:	f000 fa6b 	bl	80257ac <nanf>
 80252d6:	ed85 0a00 	vstr	s0, [r5]
 80252da:	e7d3      	b.n	8025284 <_scanf_float+0x3ac>
 80252dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80252e0:	e7f9      	b.n	80252d6 <_scanf_float+0x3fe>
 80252e2:	f04f 0900 	mov.w	r9, #0
 80252e6:	e630      	b.n	8024f4a <_scanf_float+0x72>
 80252e8:	0802d2a2 	.word	0x0802d2a2
 80252ec:	0802d2e2 	.word	0x0802d2e2

080252f0 <std>:
 80252f0:	2300      	movs	r3, #0
 80252f2:	b510      	push	{r4, lr}
 80252f4:	4604      	mov	r4, r0
 80252f6:	e9c0 3300 	strd	r3, r3, [r0]
 80252fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80252fe:	6083      	str	r3, [r0, #8]
 8025300:	8181      	strh	r1, [r0, #12]
 8025302:	6643      	str	r3, [r0, #100]	@ 0x64
 8025304:	81c2      	strh	r2, [r0, #14]
 8025306:	6183      	str	r3, [r0, #24]
 8025308:	4619      	mov	r1, r3
 802530a:	2208      	movs	r2, #8
 802530c:	305c      	adds	r0, #92	@ 0x5c
 802530e:	f000 f99d 	bl	802564c <memset>
 8025312:	4b0d      	ldr	r3, [pc, #52]	@ (8025348 <std+0x58>)
 8025314:	6263      	str	r3, [r4, #36]	@ 0x24
 8025316:	4b0d      	ldr	r3, [pc, #52]	@ (802534c <std+0x5c>)
 8025318:	62a3      	str	r3, [r4, #40]	@ 0x28
 802531a:	4b0d      	ldr	r3, [pc, #52]	@ (8025350 <std+0x60>)
 802531c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802531e:	4b0d      	ldr	r3, [pc, #52]	@ (8025354 <std+0x64>)
 8025320:	6323      	str	r3, [r4, #48]	@ 0x30
 8025322:	4b0d      	ldr	r3, [pc, #52]	@ (8025358 <std+0x68>)
 8025324:	6224      	str	r4, [r4, #32]
 8025326:	429c      	cmp	r4, r3
 8025328:	d006      	beq.n	8025338 <std+0x48>
 802532a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802532e:	4294      	cmp	r4, r2
 8025330:	d002      	beq.n	8025338 <std+0x48>
 8025332:	33d0      	adds	r3, #208	@ 0xd0
 8025334:	429c      	cmp	r4, r3
 8025336:	d105      	bne.n	8025344 <std+0x54>
 8025338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025340:	f000 ba22 	b.w	8025788 <__retarget_lock_init_recursive>
 8025344:	bd10      	pop	{r4, pc}
 8025346:	bf00      	nop
 8025348:	0802552d 	.word	0x0802552d
 802534c:	08025553 	.word	0x08025553
 8025350:	0802558b 	.word	0x0802558b
 8025354:	080255af 	.word	0x080255af
 8025358:	2400bfd0 	.word	0x2400bfd0

0802535c <stdio_exit_handler>:
 802535c:	4a02      	ldr	r2, [pc, #8]	@ (8025368 <stdio_exit_handler+0xc>)
 802535e:	4903      	ldr	r1, [pc, #12]	@ (802536c <stdio_exit_handler+0x10>)
 8025360:	4803      	ldr	r0, [pc, #12]	@ (8025370 <stdio_exit_handler+0x14>)
 8025362:	f000 b869 	b.w	8025438 <_fwalk_sglue>
 8025366:	bf00      	nop
 8025368:	24000218 	.word	0x24000218
 802536c:	08028589 	.word	0x08028589
 8025370:	24000228 	.word	0x24000228

08025374 <cleanup_stdio>:
 8025374:	6841      	ldr	r1, [r0, #4]
 8025376:	4b0c      	ldr	r3, [pc, #48]	@ (80253a8 <cleanup_stdio+0x34>)
 8025378:	4299      	cmp	r1, r3
 802537a:	b510      	push	{r4, lr}
 802537c:	4604      	mov	r4, r0
 802537e:	d001      	beq.n	8025384 <cleanup_stdio+0x10>
 8025380:	f003 f902 	bl	8028588 <_fflush_r>
 8025384:	68a1      	ldr	r1, [r4, #8]
 8025386:	4b09      	ldr	r3, [pc, #36]	@ (80253ac <cleanup_stdio+0x38>)
 8025388:	4299      	cmp	r1, r3
 802538a:	d002      	beq.n	8025392 <cleanup_stdio+0x1e>
 802538c:	4620      	mov	r0, r4
 802538e:	f003 f8fb 	bl	8028588 <_fflush_r>
 8025392:	68e1      	ldr	r1, [r4, #12]
 8025394:	4b06      	ldr	r3, [pc, #24]	@ (80253b0 <cleanup_stdio+0x3c>)
 8025396:	4299      	cmp	r1, r3
 8025398:	d004      	beq.n	80253a4 <cleanup_stdio+0x30>
 802539a:	4620      	mov	r0, r4
 802539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253a0:	f003 b8f2 	b.w	8028588 <_fflush_r>
 80253a4:	bd10      	pop	{r4, pc}
 80253a6:	bf00      	nop
 80253a8:	2400bfd0 	.word	0x2400bfd0
 80253ac:	2400c038 	.word	0x2400c038
 80253b0:	2400c0a0 	.word	0x2400c0a0

080253b4 <global_stdio_init.part.0>:
 80253b4:	b510      	push	{r4, lr}
 80253b6:	4b0b      	ldr	r3, [pc, #44]	@ (80253e4 <global_stdio_init.part.0+0x30>)
 80253b8:	4c0b      	ldr	r4, [pc, #44]	@ (80253e8 <global_stdio_init.part.0+0x34>)
 80253ba:	4a0c      	ldr	r2, [pc, #48]	@ (80253ec <global_stdio_init.part.0+0x38>)
 80253bc:	601a      	str	r2, [r3, #0]
 80253be:	4620      	mov	r0, r4
 80253c0:	2200      	movs	r2, #0
 80253c2:	2104      	movs	r1, #4
 80253c4:	f7ff ff94 	bl	80252f0 <std>
 80253c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80253cc:	2201      	movs	r2, #1
 80253ce:	2109      	movs	r1, #9
 80253d0:	f7ff ff8e 	bl	80252f0 <std>
 80253d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80253d8:	2202      	movs	r2, #2
 80253da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253de:	2112      	movs	r1, #18
 80253e0:	f7ff bf86 	b.w	80252f0 <std>
 80253e4:	2400c108 	.word	0x2400c108
 80253e8:	2400bfd0 	.word	0x2400bfd0
 80253ec:	0802535d 	.word	0x0802535d

080253f0 <__sfp_lock_acquire>:
 80253f0:	4801      	ldr	r0, [pc, #4]	@ (80253f8 <__sfp_lock_acquire+0x8>)
 80253f2:	f000 b9ca 	b.w	802578a <__retarget_lock_acquire_recursive>
 80253f6:	bf00      	nop
 80253f8:	2400c10d 	.word	0x2400c10d

080253fc <__sfp_lock_release>:
 80253fc:	4801      	ldr	r0, [pc, #4]	@ (8025404 <__sfp_lock_release+0x8>)
 80253fe:	f000 b9c5 	b.w	802578c <__retarget_lock_release_recursive>
 8025402:	bf00      	nop
 8025404:	2400c10d 	.word	0x2400c10d

08025408 <__sinit>:
 8025408:	b510      	push	{r4, lr}
 802540a:	4604      	mov	r4, r0
 802540c:	f7ff fff0 	bl	80253f0 <__sfp_lock_acquire>
 8025410:	6a23      	ldr	r3, [r4, #32]
 8025412:	b11b      	cbz	r3, 802541c <__sinit+0x14>
 8025414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025418:	f7ff bff0 	b.w	80253fc <__sfp_lock_release>
 802541c:	4b04      	ldr	r3, [pc, #16]	@ (8025430 <__sinit+0x28>)
 802541e:	6223      	str	r3, [r4, #32]
 8025420:	4b04      	ldr	r3, [pc, #16]	@ (8025434 <__sinit+0x2c>)
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d1f5      	bne.n	8025414 <__sinit+0xc>
 8025428:	f7ff ffc4 	bl	80253b4 <global_stdio_init.part.0>
 802542c:	e7f2      	b.n	8025414 <__sinit+0xc>
 802542e:	bf00      	nop
 8025430:	08025375 	.word	0x08025375
 8025434:	2400c108 	.word	0x2400c108

08025438 <_fwalk_sglue>:
 8025438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802543c:	4607      	mov	r7, r0
 802543e:	4688      	mov	r8, r1
 8025440:	4614      	mov	r4, r2
 8025442:	2600      	movs	r6, #0
 8025444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025448:	f1b9 0901 	subs.w	r9, r9, #1
 802544c:	d505      	bpl.n	802545a <_fwalk_sglue+0x22>
 802544e:	6824      	ldr	r4, [r4, #0]
 8025450:	2c00      	cmp	r4, #0
 8025452:	d1f7      	bne.n	8025444 <_fwalk_sglue+0xc>
 8025454:	4630      	mov	r0, r6
 8025456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802545a:	89ab      	ldrh	r3, [r5, #12]
 802545c:	2b01      	cmp	r3, #1
 802545e:	d907      	bls.n	8025470 <_fwalk_sglue+0x38>
 8025460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025464:	3301      	adds	r3, #1
 8025466:	d003      	beq.n	8025470 <_fwalk_sglue+0x38>
 8025468:	4629      	mov	r1, r5
 802546a:	4638      	mov	r0, r7
 802546c:	47c0      	blx	r8
 802546e:	4306      	orrs	r6, r0
 8025470:	3568      	adds	r5, #104	@ 0x68
 8025472:	e7e9      	b.n	8025448 <_fwalk_sglue+0x10>

08025474 <iprintf>:
 8025474:	b40f      	push	{r0, r1, r2, r3}
 8025476:	b507      	push	{r0, r1, r2, lr}
 8025478:	4906      	ldr	r1, [pc, #24]	@ (8025494 <iprintf+0x20>)
 802547a:	ab04      	add	r3, sp, #16
 802547c:	6808      	ldr	r0, [r1, #0]
 802547e:	f853 2b04 	ldr.w	r2, [r3], #4
 8025482:	6881      	ldr	r1, [r0, #8]
 8025484:	9301      	str	r3, [sp, #4]
 8025486:	f002 fd95 	bl	8027fb4 <_vfiprintf_r>
 802548a:	b003      	add	sp, #12
 802548c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025490:	b004      	add	sp, #16
 8025492:	4770      	bx	lr
 8025494:	24000224 	.word	0x24000224

08025498 <siprintf>:
 8025498:	b40e      	push	{r1, r2, r3}
 802549a:	b500      	push	{lr}
 802549c:	b09c      	sub	sp, #112	@ 0x70
 802549e:	ab1d      	add	r3, sp, #116	@ 0x74
 80254a0:	9002      	str	r0, [sp, #8]
 80254a2:	9006      	str	r0, [sp, #24]
 80254a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80254a8:	4809      	ldr	r0, [pc, #36]	@ (80254d0 <siprintf+0x38>)
 80254aa:	9107      	str	r1, [sp, #28]
 80254ac:	9104      	str	r1, [sp, #16]
 80254ae:	4909      	ldr	r1, [pc, #36]	@ (80254d4 <siprintf+0x3c>)
 80254b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80254b4:	9105      	str	r1, [sp, #20]
 80254b6:	6800      	ldr	r0, [r0, #0]
 80254b8:	9301      	str	r3, [sp, #4]
 80254ba:	a902      	add	r1, sp, #8
 80254bc:	f002 fa88 	bl	80279d0 <_svfiprintf_r>
 80254c0:	9b02      	ldr	r3, [sp, #8]
 80254c2:	2200      	movs	r2, #0
 80254c4:	701a      	strb	r2, [r3, #0]
 80254c6:	b01c      	add	sp, #112	@ 0x70
 80254c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80254cc:	b003      	add	sp, #12
 80254ce:	4770      	bx	lr
 80254d0:	24000224 	.word	0x24000224
 80254d4:	ffff0208 	.word	0xffff0208

080254d8 <siscanf>:
 80254d8:	b40e      	push	{r1, r2, r3}
 80254da:	b530      	push	{r4, r5, lr}
 80254dc:	b09c      	sub	sp, #112	@ 0x70
 80254de:	ac1f      	add	r4, sp, #124	@ 0x7c
 80254e0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80254e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80254e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80254ec:	9002      	str	r0, [sp, #8]
 80254ee:	9006      	str	r0, [sp, #24]
 80254f0:	f7da ff46 	bl	8000380 <strlen>
 80254f4:	4b0b      	ldr	r3, [pc, #44]	@ (8025524 <siscanf+0x4c>)
 80254f6:	9003      	str	r0, [sp, #12]
 80254f8:	9007      	str	r0, [sp, #28]
 80254fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80254fc:	480a      	ldr	r0, [pc, #40]	@ (8025528 <siscanf+0x50>)
 80254fe:	9401      	str	r4, [sp, #4]
 8025500:	2300      	movs	r3, #0
 8025502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025504:	9314      	str	r3, [sp, #80]	@ 0x50
 8025506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802550a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802550e:	462a      	mov	r2, r5
 8025510:	4623      	mov	r3, r4
 8025512:	a902      	add	r1, sp, #8
 8025514:	6800      	ldr	r0, [r0, #0]
 8025516:	f002 fbaf 	bl	8027c78 <__ssvfiscanf_r>
 802551a:	b01c      	add	sp, #112	@ 0x70
 802551c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025520:	b003      	add	sp, #12
 8025522:	4770      	bx	lr
 8025524:	0802554f 	.word	0x0802554f
 8025528:	24000224 	.word	0x24000224

0802552c <__sread>:
 802552c:	b510      	push	{r4, lr}
 802552e:	460c      	mov	r4, r1
 8025530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025534:	f000 f8ca 	bl	80256cc <_read_r>
 8025538:	2800      	cmp	r0, #0
 802553a:	bfab      	itete	ge
 802553c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802553e:	89a3      	ldrhlt	r3, [r4, #12]
 8025540:	181b      	addge	r3, r3, r0
 8025542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025546:	bfac      	ite	ge
 8025548:	6563      	strge	r3, [r4, #84]	@ 0x54
 802554a:	81a3      	strhlt	r3, [r4, #12]
 802554c:	bd10      	pop	{r4, pc}

0802554e <__seofread>:
 802554e:	2000      	movs	r0, #0
 8025550:	4770      	bx	lr

08025552 <__swrite>:
 8025552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025556:	461f      	mov	r7, r3
 8025558:	898b      	ldrh	r3, [r1, #12]
 802555a:	05db      	lsls	r3, r3, #23
 802555c:	4605      	mov	r5, r0
 802555e:	460c      	mov	r4, r1
 8025560:	4616      	mov	r6, r2
 8025562:	d505      	bpl.n	8025570 <__swrite+0x1e>
 8025564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025568:	2302      	movs	r3, #2
 802556a:	2200      	movs	r2, #0
 802556c:	f000 f89c 	bl	80256a8 <_lseek_r>
 8025570:	89a3      	ldrh	r3, [r4, #12]
 8025572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802557a:	81a3      	strh	r3, [r4, #12]
 802557c:	4632      	mov	r2, r6
 802557e:	463b      	mov	r3, r7
 8025580:	4628      	mov	r0, r5
 8025582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025586:	f000 b8c3 	b.w	8025710 <_write_r>

0802558a <__sseek>:
 802558a:	b510      	push	{r4, lr}
 802558c:	460c      	mov	r4, r1
 802558e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025592:	f000 f889 	bl	80256a8 <_lseek_r>
 8025596:	1c43      	adds	r3, r0, #1
 8025598:	89a3      	ldrh	r3, [r4, #12]
 802559a:	bf15      	itete	ne
 802559c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802559e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80255a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80255a6:	81a3      	strheq	r3, [r4, #12]
 80255a8:	bf18      	it	ne
 80255aa:	81a3      	strhne	r3, [r4, #12]
 80255ac:	bd10      	pop	{r4, pc}

080255ae <__sclose>:
 80255ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255b2:	f000 b869 	b.w	8025688 <_close_r>
	...

080255b8 <_vsiprintf_r>:
 80255b8:	b500      	push	{lr}
 80255ba:	b09b      	sub	sp, #108	@ 0x6c
 80255bc:	9100      	str	r1, [sp, #0]
 80255be:	9104      	str	r1, [sp, #16]
 80255c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80255c4:	9105      	str	r1, [sp, #20]
 80255c6:	9102      	str	r1, [sp, #8]
 80255c8:	4905      	ldr	r1, [pc, #20]	@ (80255e0 <_vsiprintf_r+0x28>)
 80255ca:	9103      	str	r1, [sp, #12]
 80255cc:	4669      	mov	r1, sp
 80255ce:	f002 f9ff 	bl	80279d0 <_svfiprintf_r>
 80255d2:	9b00      	ldr	r3, [sp, #0]
 80255d4:	2200      	movs	r2, #0
 80255d6:	701a      	strb	r2, [r3, #0]
 80255d8:	b01b      	add	sp, #108	@ 0x6c
 80255da:	f85d fb04 	ldr.w	pc, [sp], #4
 80255de:	bf00      	nop
 80255e0:	ffff0208 	.word	0xffff0208

080255e4 <vsiprintf>:
 80255e4:	4613      	mov	r3, r2
 80255e6:	460a      	mov	r2, r1
 80255e8:	4601      	mov	r1, r0
 80255ea:	4802      	ldr	r0, [pc, #8]	@ (80255f4 <vsiprintf+0x10>)
 80255ec:	6800      	ldr	r0, [r0, #0]
 80255ee:	f7ff bfe3 	b.w	80255b8 <_vsiprintf_r>
 80255f2:	bf00      	nop
 80255f4:	24000224 	.word	0x24000224

080255f8 <memcmp>:
 80255f8:	b510      	push	{r4, lr}
 80255fa:	3901      	subs	r1, #1
 80255fc:	4402      	add	r2, r0
 80255fe:	4290      	cmp	r0, r2
 8025600:	d101      	bne.n	8025606 <memcmp+0xe>
 8025602:	2000      	movs	r0, #0
 8025604:	e005      	b.n	8025612 <memcmp+0x1a>
 8025606:	7803      	ldrb	r3, [r0, #0]
 8025608:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802560c:	42a3      	cmp	r3, r4
 802560e:	d001      	beq.n	8025614 <memcmp+0x1c>
 8025610:	1b18      	subs	r0, r3, r4
 8025612:	bd10      	pop	{r4, pc}
 8025614:	3001      	adds	r0, #1
 8025616:	e7f2      	b.n	80255fe <memcmp+0x6>

08025618 <memmove>:
 8025618:	4288      	cmp	r0, r1
 802561a:	b510      	push	{r4, lr}
 802561c:	eb01 0402 	add.w	r4, r1, r2
 8025620:	d902      	bls.n	8025628 <memmove+0x10>
 8025622:	4284      	cmp	r4, r0
 8025624:	4623      	mov	r3, r4
 8025626:	d807      	bhi.n	8025638 <memmove+0x20>
 8025628:	1e43      	subs	r3, r0, #1
 802562a:	42a1      	cmp	r1, r4
 802562c:	d008      	beq.n	8025640 <memmove+0x28>
 802562e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025636:	e7f8      	b.n	802562a <memmove+0x12>
 8025638:	4402      	add	r2, r0
 802563a:	4601      	mov	r1, r0
 802563c:	428a      	cmp	r2, r1
 802563e:	d100      	bne.n	8025642 <memmove+0x2a>
 8025640:	bd10      	pop	{r4, pc}
 8025642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802564a:	e7f7      	b.n	802563c <memmove+0x24>

0802564c <memset>:
 802564c:	4402      	add	r2, r0
 802564e:	4603      	mov	r3, r0
 8025650:	4293      	cmp	r3, r2
 8025652:	d100      	bne.n	8025656 <memset+0xa>
 8025654:	4770      	bx	lr
 8025656:	f803 1b01 	strb.w	r1, [r3], #1
 802565a:	e7f9      	b.n	8025650 <memset+0x4>

0802565c <strncmp>:
 802565c:	b510      	push	{r4, lr}
 802565e:	b16a      	cbz	r2, 802567c <strncmp+0x20>
 8025660:	3901      	subs	r1, #1
 8025662:	1884      	adds	r4, r0, r2
 8025664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025668:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802566c:	429a      	cmp	r2, r3
 802566e:	d103      	bne.n	8025678 <strncmp+0x1c>
 8025670:	42a0      	cmp	r0, r4
 8025672:	d001      	beq.n	8025678 <strncmp+0x1c>
 8025674:	2a00      	cmp	r2, #0
 8025676:	d1f5      	bne.n	8025664 <strncmp+0x8>
 8025678:	1ad0      	subs	r0, r2, r3
 802567a:	bd10      	pop	{r4, pc}
 802567c:	4610      	mov	r0, r2
 802567e:	e7fc      	b.n	802567a <strncmp+0x1e>

08025680 <_localeconv_r>:
 8025680:	4800      	ldr	r0, [pc, #0]	@ (8025684 <_localeconv_r+0x4>)
 8025682:	4770      	bx	lr
 8025684:	24000364 	.word	0x24000364

08025688 <_close_r>:
 8025688:	b538      	push	{r3, r4, r5, lr}
 802568a:	4d06      	ldr	r5, [pc, #24]	@ (80256a4 <_close_r+0x1c>)
 802568c:	2300      	movs	r3, #0
 802568e:	4604      	mov	r4, r0
 8025690:	4608      	mov	r0, r1
 8025692:	602b      	str	r3, [r5, #0]
 8025694:	f7df ffd0 	bl	8005638 <_close>
 8025698:	1c43      	adds	r3, r0, #1
 802569a:	d102      	bne.n	80256a2 <_close_r+0x1a>
 802569c:	682b      	ldr	r3, [r5, #0]
 802569e:	b103      	cbz	r3, 80256a2 <_close_r+0x1a>
 80256a0:	6023      	str	r3, [r4, #0]
 80256a2:	bd38      	pop	{r3, r4, r5, pc}
 80256a4:	2400bfc0 	.word	0x2400bfc0

080256a8 <_lseek_r>:
 80256a8:	b538      	push	{r3, r4, r5, lr}
 80256aa:	4d07      	ldr	r5, [pc, #28]	@ (80256c8 <_lseek_r+0x20>)
 80256ac:	4604      	mov	r4, r0
 80256ae:	4608      	mov	r0, r1
 80256b0:	4611      	mov	r1, r2
 80256b2:	2200      	movs	r2, #0
 80256b4:	602a      	str	r2, [r5, #0]
 80256b6:	461a      	mov	r2, r3
 80256b8:	f7df ffe5 	bl	8005686 <_lseek>
 80256bc:	1c43      	adds	r3, r0, #1
 80256be:	d102      	bne.n	80256c6 <_lseek_r+0x1e>
 80256c0:	682b      	ldr	r3, [r5, #0]
 80256c2:	b103      	cbz	r3, 80256c6 <_lseek_r+0x1e>
 80256c4:	6023      	str	r3, [r4, #0]
 80256c6:	bd38      	pop	{r3, r4, r5, pc}
 80256c8:	2400bfc0 	.word	0x2400bfc0

080256cc <_read_r>:
 80256cc:	b538      	push	{r3, r4, r5, lr}
 80256ce:	4d07      	ldr	r5, [pc, #28]	@ (80256ec <_read_r+0x20>)
 80256d0:	4604      	mov	r4, r0
 80256d2:	4608      	mov	r0, r1
 80256d4:	4611      	mov	r1, r2
 80256d6:	2200      	movs	r2, #0
 80256d8:	602a      	str	r2, [r5, #0]
 80256da:	461a      	mov	r2, r3
 80256dc:	f7df ff73 	bl	80055c6 <_read>
 80256e0:	1c43      	adds	r3, r0, #1
 80256e2:	d102      	bne.n	80256ea <_read_r+0x1e>
 80256e4:	682b      	ldr	r3, [r5, #0]
 80256e6:	b103      	cbz	r3, 80256ea <_read_r+0x1e>
 80256e8:	6023      	str	r3, [r4, #0]
 80256ea:	bd38      	pop	{r3, r4, r5, pc}
 80256ec:	2400bfc0 	.word	0x2400bfc0

080256f0 <_sbrk_r>:
 80256f0:	b538      	push	{r3, r4, r5, lr}
 80256f2:	4d06      	ldr	r5, [pc, #24]	@ (802570c <_sbrk_r+0x1c>)
 80256f4:	2300      	movs	r3, #0
 80256f6:	4604      	mov	r4, r0
 80256f8:	4608      	mov	r0, r1
 80256fa:	602b      	str	r3, [r5, #0]
 80256fc:	f7df ffd0 	bl	80056a0 <_sbrk>
 8025700:	1c43      	adds	r3, r0, #1
 8025702:	d102      	bne.n	802570a <_sbrk_r+0x1a>
 8025704:	682b      	ldr	r3, [r5, #0]
 8025706:	b103      	cbz	r3, 802570a <_sbrk_r+0x1a>
 8025708:	6023      	str	r3, [r4, #0]
 802570a:	bd38      	pop	{r3, r4, r5, pc}
 802570c:	2400bfc0 	.word	0x2400bfc0

08025710 <_write_r>:
 8025710:	b538      	push	{r3, r4, r5, lr}
 8025712:	4d07      	ldr	r5, [pc, #28]	@ (8025730 <_write_r+0x20>)
 8025714:	4604      	mov	r4, r0
 8025716:	4608      	mov	r0, r1
 8025718:	4611      	mov	r1, r2
 802571a:	2200      	movs	r2, #0
 802571c:	602a      	str	r2, [r5, #0]
 802571e:	461a      	mov	r2, r3
 8025720:	f7df ff6e 	bl	8005600 <_write>
 8025724:	1c43      	adds	r3, r0, #1
 8025726:	d102      	bne.n	802572e <_write_r+0x1e>
 8025728:	682b      	ldr	r3, [r5, #0]
 802572a:	b103      	cbz	r3, 802572e <_write_r+0x1e>
 802572c:	6023      	str	r3, [r4, #0]
 802572e:	bd38      	pop	{r3, r4, r5, pc}
 8025730:	2400bfc0 	.word	0x2400bfc0

08025734 <__errno>:
 8025734:	4b01      	ldr	r3, [pc, #4]	@ (802573c <__errno+0x8>)
 8025736:	6818      	ldr	r0, [r3, #0]
 8025738:	4770      	bx	lr
 802573a:	bf00      	nop
 802573c:	24000224 	.word	0x24000224

08025740 <__libc_init_array>:
 8025740:	b570      	push	{r4, r5, r6, lr}
 8025742:	4d0d      	ldr	r5, [pc, #52]	@ (8025778 <__libc_init_array+0x38>)
 8025744:	4c0d      	ldr	r4, [pc, #52]	@ (802577c <__libc_init_array+0x3c>)
 8025746:	1b64      	subs	r4, r4, r5
 8025748:	10a4      	asrs	r4, r4, #2
 802574a:	2600      	movs	r6, #0
 802574c:	42a6      	cmp	r6, r4
 802574e:	d109      	bne.n	8025764 <__libc_init_array+0x24>
 8025750:	4d0b      	ldr	r5, [pc, #44]	@ (8025780 <__libc_init_array+0x40>)
 8025752:	4c0c      	ldr	r4, [pc, #48]	@ (8025784 <__libc_init_array+0x44>)
 8025754:	f003 fd46 	bl	80291e4 <_init>
 8025758:	1b64      	subs	r4, r4, r5
 802575a:	10a4      	asrs	r4, r4, #2
 802575c:	2600      	movs	r6, #0
 802575e:	42a6      	cmp	r6, r4
 8025760:	d105      	bne.n	802576e <__libc_init_array+0x2e>
 8025762:	bd70      	pop	{r4, r5, r6, pc}
 8025764:	f855 3b04 	ldr.w	r3, [r5], #4
 8025768:	4798      	blx	r3
 802576a:	3601      	adds	r6, #1
 802576c:	e7ee      	b.n	802574c <__libc_init_array+0xc>
 802576e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025772:	4798      	blx	r3
 8025774:	3601      	adds	r6, #1
 8025776:	e7f2      	b.n	802575e <__libc_init_array+0x1e>
 8025778:	0802d5a4 	.word	0x0802d5a4
 802577c:	0802d5a4 	.word	0x0802d5a4
 8025780:	0802d5a4 	.word	0x0802d5a4
 8025784:	0802d5a8 	.word	0x0802d5a8

08025788 <__retarget_lock_init_recursive>:
 8025788:	4770      	bx	lr

0802578a <__retarget_lock_acquire_recursive>:
 802578a:	4770      	bx	lr

0802578c <__retarget_lock_release_recursive>:
 802578c:	4770      	bx	lr

0802578e <memcpy>:
 802578e:	440a      	add	r2, r1
 8025790:	4291      	cmp	r1, r2
 8025792:	f100 33ff 	add.w	r3, r0, #4294967295
 8025796:	d100      	bne.n	802579a <memcpy+0xc>
 8025798:	4770      	bx	lr
 802579a:	b510      	push	{r4, lr}
 802579c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80257a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80257a4:	4291      	cmp	r1, r2
 80257a6:	d1f9      	bne.n	802579c <memcpy+0xe>
 80257a8:	bd10      	pop	{r4, pc}
	...

080257ac <nanf>:
 80257ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80257b4 <nanf+0x8>
 80257b0:	4770      	bx	lr
 80257b2:	bf00      	nop
 80257b4:	7fc00000 	.word	0x7fc00000

080257b8 <__assert_func>:
 80257b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80257ba:	4614      	mov	r4, r2
 80257bc:	461a      	mov	r2, r3
 80257be:	4b09      	ldr	r3, [pc, #36]	@ (80257e4 <__assert_func+0x2c>)
 80257c0:	681b      	ldr	r3, [r3, #0]
 80257c2:	4605      	mov	r5, r0
 80257c4:	68d8      	ldr	r0, [r3, #12]
 80257c6:	b954      	cbnz	r4, 80257de <__assert_func+0x26>
 80257c8:	4b07      	ldr	r3, [pc, #28]	@ (80257e8 <__assert_func+0x30>)
 80257ca:	461c      	mov	r4, r3
 80257cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80257d0:	9100      	str	r1, [sp, #0]
 80257d2:	462b      	mov	r3, r5
 80257d4:	4905      	ldr	r1, [pc, #20]	@ (80257ec <__assert_func+0x34>)
 80257d6:	f002 feff 	bl	80285d8 <fiprintf>
 80257da:	f003 f821 	bl	8028820 <abort>
 80257de:	4b04      	ldr	r3, [pc, #16]	@ (80257f0 <__assert_func+0x38>)
 80257e0:	e7f4      	b.n	80257cc <__assert_func+0x14>
 80257e2:	bf00      	nop
 80257e4:	24000224 	.word	0x24000224
 80257e8:	0802d2e2 	.word	0x0802d2e2
 80257ec:	0802d2b4 	.word	0x0802d2b4
 80257f0:	0802d2a7 	.word	0x0802d2a7

080257f4 <quorem>:
 80257f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257f8:	6903      	ldr	r3, [r0, #16]
 80257fa:	690c      	ldr	r4, [r1, #16]
 80257fc:	42a3      	cmp	r3, r4
 80257fe:	4607      	mov	r7, r0
 8025800:	db7e      	blt.n	8025900 <quorem+0x10c>
 8025802:	3c01      	subs	r4, #1
 8025804:	f101 0814 	add.w	r8, r1, #20
 8025808:	00a3      	lsls	r3, r4, #2
 802580a:	f100 0514 	add.w	r5, r0, #20
 802580e:	9300      	str	r3, [sp, #0]
 8025810:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025814:	9301      	str	r3, [sp, #4]
 8025816:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802581a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802581e:	3301      	adds	r3, #1
 8025820:	429a      	cmp	r2, r3
 8025822:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025826:	fbb2 f6f3 	udiv	r6, r2, r3
 802582a:	d32e      	bcc.n	802588a <quorem+0x96>
 802582c:	f04f 0a00 	mov.w	sl, #0
 8025830:	46c4      	mov	ip, r8
 8025832:	46ae      	mov	lr, r5
 8025834:	46d3      	mov	fp, sl
 8025836:	f85c 3b04 	ldr.w	r3, [ip], #4
 802583a:	b298      	uxth	r0, r3
 802583c:	fb06 a000 	mla	r0, r6, r0, sl
 8025840:	0c02      	lsrs	r2, r0, #16
 8025842:	0c1b      	lsrs	r3, r3, #16
 8025844:	fb06 2303 	mla	r3, r6, r3, r2
 8025848:	f8de 2000 	ldr.w	r2, [lr]
 802584c:	b280      	uxth	r0, r0
 802584e:	b292      	uxth	r2, r2
 8025850:	1a12      	subs	r2, r2, r0
 8025852:	445a      	add	r2, fp
 8025854:	f8de 0000 	ldr.w	r0, [lr]
 8025858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802585c:	b29b      	uxth	r3, r3
 802585e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8025862:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8025866:	b292      	uxth	r2, r2
 8025868:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802586c:	45e1      	cmp	r9, ip
 802586e:	f84e 2b04 	str.w	r2, [lr], #4
 8025872:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8025876:	d2de      	bcs.n	8025836 <quorem+0x42>
 8025878:	9b00      	ldr	r3, [sp, #0]
 802587a:	58eb      	ldr	r3, [r5, r3]
 802587c:	b92b      	cbnz	r3, 802588a <quorem+0x96>
 802587e:	9b01      	ldr	r3, [sp, #4]
 8025880:	3b04      	subs	r3, #4
 8025882:	429d      	cmp	r5, r3
 8025884:	461a      	mov	r2, r3
 8025886:	d32f      	bcc.n	80258e8 <quorem+0xf4>
 8025888:	613c      	str	r4, [r7, #16]
 802588a:	4638      	mov	r0, r7
 802588c:	f001 f8a0 	bl	80269d0 <__mcmp>
 8025890:	2800      	cmp	r0, #0
 8025892:	db25      	blt.n	80258e0 <quorem+0xec>
 8025894:	4629      	mov	r1, r5
 8025896:	2000      	movs	r0, #0
 8025898:	f858 2b04 	ldr.w	r2, [r8], #4
 802589c:	f8d1 c000 	ldr.w	ip, [r1]
 80258a0:	fa1f fe82 	uxth.w	lr, r2
 80258a4:	fa1f f38c 	uxth.w	r3, ip
 80258a8:	eba3 030e 	sub.w	r3, r3, lr
 80258ac:	4403      	add	r3, r0
 80258ae:	0c12      	lsrs	r2, r2, #16
 80258b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80258b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80258b8:	b29b      	uxth	r3, r3
 80258ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80258be:	45c1      	cmp	r9, r8
 80258c0:	f841 3b04 	str.w	r3, [r1], #4
 80258c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80258c8:	d2e6      	bcs.n	8025898 <quorem+0xa4>
 80258ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80258ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80258d2:	b922      	cbnz	r2, 80258de <quorem+0xea>
 80258d4:	3b04      	subs	r3, #4
 80258d6:	429d      	cmp	r5, r3
 80258d8:	461a      	mov	r2, r3
 80258da:	d30b      	bcc.n	80258f4 <quorem+0x100>
 80258dc:	613c      	str	r4, [r7, #16]
 80258de:	3601      	adds	r6, #1
 80258e0:	4630      	mov	r0, r6
 80258e2:	b003      	add	sp, #12
 80258e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258e8:	6812      	ldr	r2, [r2, #0]
 80258ea:	3b04      	subs	r3, #4
 80258ec:	2a00      	cmp	r2, #0
 80258ee:	d1cb      	bne.n	8025888 <quorem+0x94>
 80258f0:	3c01      	subs	r4, #1
 80258f2:	e7c6      	b.n	8025882 <quorem+0x8e>
 80258f4:	6812      	ldr	r2, [r2, #0]
 80258f6:	3b04      	subs	r3, #4
 80258f8:	2a00      	cmp	r2, #0
 80258fa:	d1ef      	bne.n	80258dc <quorem+0xe8>
 80258fc:	3c01      	subs	r4, #1
 80258fe:	e7ea      	b.n	80258d6 <quorem+0xe2>
 8025900:	2000      	movs	r0, #0
 8025902:	e7ee      	b.n	80258e2 <quorem+0xee>
 8025904:	0000      	movs	r0, r0
	...

08025908 <_dtoa_r>:
 8025908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802590c:	ed2d 8b02 	vpush	{d8}
 8025910:	69c7      	ldr	r7, [r0, #28]
 8025912:	b091      	sub	sp, #68	@ 0x44
 8025914:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025918:	ec55 4b10 	vmov	r4, r5, d0
 802591c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802591e:	9107      	str	r1, [sp, #28]
 8025920:	4681      	mov	r9, r0
 8025922:	9209      	str	r2, [sp, #36]	@ 0x24
 8025924:	930d      	str	r3, [sp, #52]	@ 0x34
 8025926:	b97f      	cbnz	r7, 8025948 <_dtoa_r+0x40>
 8025928:	2010      	movs	r0, #16
 802592a:	f7fe fd27 	bl	802437c <malloc>
 802592e:	4602      	mov	r2, r0
 8025930:	f8c9 001c 	str.w	r0, [r9, #28]
 8025934:	b920      	cbnz	r0, 8025940 <_dtoa_r+0x38>
 8025936:	4ba0      	ldr	r3, [pc, #640]	@ (8025bb8 <_dtoa_r+0x2b0>)
 8025938:	21ef      	movs	r1, #239	@ 0xef
 802593a:	48a0      	ldr	r0, [pc, #640]	@ (8025bbc <_dtoa_r+0x2b4>)
 802593c:	f7ff ff3c 	bl	80257b8 <__assert_func>
 8025940:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8025944:	6007      	str	r7, [r0, #0]
 8025946:	60c7      	str	r7, [r0, #12]
 8025948:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802594c:	6819      	ldr	r1, [r3, #0]
 802594e:	b159      	cbz	r1, 8025968 <_dtoa_r+0x60>
 8025950:	685a      	ldr	r2, [r3, #4]
 8025952:	604a      	str	r2, [r1, #4]
 8025954:	2301      	movs	r3, #1
 8025956:	4093      	lsls	r3, r2
 8025958:	608b      	str	r3, [r1, #8]
 802595a:	4648      	mov	r0, r9
 802595c:	f000 fdb4 	bl	80264c8 <_Bfree>
 8025960:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8025964:	2200      	movs	r2, #0
 8025966:	601a      	str	r2, [r3, #0]
 8025968:	1e2b      	subs	r3, r5, #0
 802596a:	bfbb      	ittet	lt
 802596c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8025970:	9303      	strlt	r3, [sp, #12]
 8025972:	2300      	movge	r3, #0
 8025974:	2201      	movlt	r2, #1
 8025976:	bfac      	ite	ge
 8025978:	6033      	strge	r3, [r6, #0]
 802597a:	6032      	strlt	r2, [r6, #0]
 802597c:	4b90      	ldr	r3, [pc, #576]	@ (8025bc0 <_dtoa_r+0x2b8>)
 802597e:	9e03      	ldr	r6, [sp, #12]
 8025980:	43b3      	bics	r3, r6
 8025982:	d110      	bne.n	80259a6 <_dtoa_r+0x9e>
 8025984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025986:	f242 730f 	movw	r3, #9999	@ 0x270f
 802598a:	6013      	str	r3, [r2, #0]
 802598c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8025990:	4323      	orrs	r3, r4
 8025992:	f000 84de 	beq.w	8026352 <_dtoa_r+0xa4a>
 8025996:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025998:	4f8a      	ldr	r7, [pc, #552]	@ (8025bc4 <_dtoa_r+0x2bc>)
 802599a:	2b00      	cmp	r3, #0
 802599c:	f000 84e0 	beq.w	8026360 <_dtoa_r+0xa58>
 80259a0:	1cfb      	adds	r3, r7, #3
 80259a2:	f000 bcdb 	b.w	802635c <_dtoa_r+0xa54>
 80259a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80259aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80259ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259b2:	d10a      	bne.n	80259ca <_dtoa_r+0xc2>
 80259b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80259b6:	2301      	movs	r3, #1
 80259b8:	6013      	str	r3, [r2, #0]
 80259ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80259bc:	b113      	cbz	r3, 80259c4 <_dtoa_r+0xbc>
 80259be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80259c0:	4b81      	ldr	r3, [pc, #516]	@ (8025bc8 <_dtoa_r+0x2c0>)
 80259c2:	6013      	str	r3, [r2, #0]
 80259c4:	4f81      	ldr	r7, [pc, #516]	@ (8025bcc <_dtoa_r+0x2c4>)
 80259c6:	f000 bccb 	b.w	8026360 <_dtoa_r+0xa58>
 80259ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80259cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80259ce:	4648      	mov	r0, r9
 80259d0:	eeb0 0b48 	vmov.f64	d0, d8
 80259d4:	f001 f91c 	bl	8026c10 <__d2b>
 80259d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80259dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80259de:	9001      	str	r0, [sp, #4]
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d045      	beq.n	8025a70 <_dtoa_r+0x168>
 80259e4:	eeb0 7b48 	vmov.f64	d7, d8
 80259e8:	ee18 1a90 	vmov	r1, s17
 80259ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80259f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80259f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80259f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80259fc:	2500      	movs	r5, #0
 80259fe:	ee07 1a90 	vmov	s15, r1
 8025a02:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8025a06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8025ba0 <_dtoa_r+0x298>
 8025a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8025a0e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8025ba8 <_dtoa_r+0x2a0>
 8025a12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025a16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8025bb0 <_dtoa_r+0x2a8>
 8025a1a:	ee07 3a90 	vmov	s15, r3
 8025a1e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8025a22:	eeb0 7b46 	vmov.f64	d7, d6
 8025a26:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025a2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025a2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a36:	ee16 8a90 	vmov	r8, s13
 8025a3a:	d508      	bpl.n	8025a4e <_dtoa_r+0x146>
 8025a3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025a40:	eeb4 6b47 	vcmp.f64	d6, d7
 8025a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a48:	bf18      	it	ne
 8025a4a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8025a4e:	f1b8 0f16 	cmp.w	r8, #22
 8025a52:	d82b      	bhi.n	8025aac <_dtoa_r+0x1a4>
 8025a54:	495e      	ldr	r1, [pc, #376]	@ (8025bd0 <_dtoa_r+0x2c8>)
 8025a56:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8025a5a:	ed91 7b00 	vldr	d7, [r1]
 8025a5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025a66:	d501      	bpl.n	8025a6c <_dtoa_r+0x164>
 8025a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8025a6c:	2100      	movs	r1, #0
 8025a6e:	e01e      	b.n	8025aae <_dtoa_r+0x1a6>
 8025a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a72:	4413      	add	r3, r2
 8025a74:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8025a78:	2920      	cmp	r1, #32
 8025a7a:	bfc1      	itttt	gt
 8025a7c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8025a80:	408e      	lslgt	r6, r1
 8025a82:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8025a86:	fa24 f101 	lsrgt.w	r1, r4, r1
 8025a8a:	bfd6      	itet	le
 8025a8c:	f1c1 0120 	rsble	r1, r1, #32
 8025a90:	4331      	orrgt	r1, r6
 8025a92:	fa04 f101 	lslle.w	r1, r4, r1
 8025a96:	ee07 1a90 	vmov	s15, r1
 8025a9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025a9e:	3b01      	subs	r3, #1
 8025aa0:	ee17 1a90 	vmov	r1, s15
 8025aa4:	2501      	movs	r5, #1
 8025aa6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8025aaa:	e7a8      	b.n	80259fe <_dtoa_r+0xf6>
 8025aac:	2101      	movs	r1, #1
 8025aae:	1ad2      	subs	r2, r2, r3
 8025ab0:	1e53      	subs	r3, r2, #1
 8025ab2:	9306      	str	r3, [sp, #24]
 8025ab4:	bf45      	ittet	mi
 8025ab6:	f1c2 0301 	rsbmi	r3, r2, #1
 8025aba:	9305      	strmi	r3, [sp, #20]
 8025abc:	2300      	movpl	r3, #0
 8025abe:	2300      	movmi	r3, #0
 8025ac0:	bf4c      	ite	mi
 8025ac2:	9306      	strmi	r3, [sp, #24]
 8025ac4:	9305      	strpl	r3, [sp, #20]
 8025ac6:	f1b8 0f00 	cmp.w	r8, #0
 8025aca:	910c      	str	r1, [sp, #48]	@ 0x30
 8025acc:	db18      	blt.n	8025b00 <_dtoa_r+0x1f8>
 8025ace:	9b06      	ldr	r3, [sp, #24]
 8025ad0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8025ad4:	4443      	add	r3, r8
 8025ad6:	9306      	str	r3, [sp, #24]
 8025ad8:	2300      	movs	r3, #0
 8025ada:	9a07      	ldr	r2, [sp, #28]
 8025adc:	2a09      	cmp	r2, #9
 8025ade:	d849      	bhi.n	8025b74 <_dtoa_r+0x26c>
 8025ae0:	2a05      	cmp	r2, #5
 8025ae2:	bfc4      	itt	gt
 8025ae4:	3a04      	subgt	r2, #4
 8025ae6:	9207      	strgt	r2, [sp, #28]
 8025ae8:	9a07      	ldr	r2, [sp, #28]
 8025aea:	f1a2 0202 	sub.w	r2, r2, #2
 8025aee:	bfcc      	ite	gt
 8025af0:	2400      	movgt	r4, #0
 8025af2:	2401      	movle	r4, #1
 8025af4:	2a03      	cmp	r2, #3
 8025af6:	d848      	bhi.n	8025b8a <_dtoa_r+0x282>
 8025af8:	e8df f002 	tbb	[pc, r2]
 8025afc:	3a2c2e0b 	.word	0x3a2c2e0b
 8025b00:	9b05      	ldr	r3, [sp, #20]
 8025b02:	2200      	movs	r2, #0
 8025b04:	eba3 0308 	sub.w	r3, r3, r8
 8025b08:	9305      	str	r3, [sp, #20]
 8025b0a:	920a      	str	r2, [sp, #40]	@ 0x28
 8025b0c:	f1c8 0300 	rsb	r3, r8, #0
 8025b10:	e7e3      	b.n	8025ada <_dtoa_r+0x1d2>
 8025b12:	2200      	movs	r2, #0
 8025b14:	9208      	str	r2, [sp, #32]
 8025b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b18:	2a00      	cmp	r2, #0
 8025b1a:	dc39      	bgt.n	8025b90 <_dtoa_r+0x288>
 8025b1c:	f04f 0b01 	mov.w	fp, #1
 8025b20:	46da      	mov	sl, fp
 8025b22:	465a      	mov	r2, fp
 8025b24:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8025b28:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8025b2c:	2100      	movs	r1, #0
 8025b2e:	2004      	movs	r0, #4
 8025b30:	f100 0614 	add.w	r6, r0, #20
 8025b34:	4296      	cmp	r6, r2
 8025b36:	d930      	bls.n	8025b9a <_dtoa_r+0x292>
 8025b38:	6079      	str	r1, [r7, #4]
 8025b3a:	4648      	mov	r0, r9
 8025b3c:	9304      	str	r3, [sp, #16]
 8025b3e:	f000 fc83 	bl	8026448 <_Balloc>
 8025b42:	9b04      	ldr	r3, [sp, #16]
 8025b44:	4607      	mov	r7, r0
 8025b46:	2800      	cmp	r0, #0
 8025b48:	d146      	bne.n	8025bd8 <_dtoa_r+0x2d0>
 8025b4a:	4b22      	ldr	r3, [pc, #136]	@ (8025bd4 <_dtoa_r+0x2cc>)
 8025b4c:	4602      	mov	r2, r0
 8025b4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8025b52:	e6f2      	b.n	802593a <_dtoa_r+0x32>
 8025b54:	2201      	movs	r2, #1
 8025b56:	e7dd      	b.n	8025b14 <_dtoa_r+0x20c>
 8025b58:	2200      	movs	r2, #0
 8025b5a:	9208      	str	r2, [sp, #32]
 8025b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b5e:	eb08 0b02 	add.w	fp, r8, r2
 8025b62:	f10b 0a01 	add.w	sl, fp, #1
 8025b66:	4652      	mov	r2, sl
 8025b68:	2a01      	cmp	r2, #1
 8025b6a:	bfb8      	it	lt
 8025b6c:	2201      	movlt	r2, #1
 8025b6e:	e7db      	b.n	8025b28 <_dtoa_r+0x220>
 8025b70:	2201      	movs	r2, #1
 8025b72:	e7f2      	b.n	8025b5a <_dtoa_r+0x252>
 8025b74:	2401      	movs	r4, #1
 8025b76:	2200      	movs	r2, #0
 8025b78:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8025b7c:	f04f 3bff 	mov.w	fp, #4294967295
 8025b80:	2100      	movs	r1, #0
 8025b82:	46da      	mov	sl, fp
 8025b84:	2212      	movs	r2, #18
 8025b86:	9109      	str	r1, [sp, #36]	@ 0x24
 8025b88:	e7ce      	b.n	8025b28 <_dtoa_r+0x220>
 8025b8a:	2201      	movs	r2, #1
 8025b8c:	9208      	str	r2, [sp, #32]
 8025b8e:	e7f5      	b.n	8025b7c <_dtoa_r+0x274>
 8025b90:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025b94:	46da      	mov	sl, fp
 8025b96:	465a      	mov	r2, fp
 8025b98:	e7c6      	b.n	8025b28 <_dtoa_r+0x220>
 8025b9a:	3101      	adds	r1, #1
 8025b9c:	0040      	lsls	r0, r0, #1
 8025b9e:	e7c7      	b.n	8025b30 <_dtoa_r+0x228>
 8025ba0:	636f4361 	.word	0x636f4361
 8025ba4:	3fd287a7 	.word	0x3fd287a7
 8025ba8:	8b60c8b3 	.word	0x8b60c8b3
 8025bac:	3fc68a28 	.word	0x3fc68a28
 8025bb0:	509f79fb 	.word	0x509f79fb
 8025bb4:	3fd34413 	.word	0x3fd34413
 8025bb8:	0802d100 	.word	0x0802d100
 8025bbc:	0802d2f0 	.word	0x0802d2f0
 8025bc0:	7ff00000 	.word	0x7ff00000
 8025bc4:	0802d2ec 	.word	0x0802d2ec
 8025bc8:	0802d530 	.word	0x0802d530
 8025bcc:	0802d52f 	.word	0x0802d52f
 8025bd0:	0802d3e8 	.word	0x0802d3e8
 8025bd4:	0802d348 	.word	0x0802d348
 8025bd8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8025bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8025be0:	6010      	str	r0, [r2, #0]
 8025be2:	d86f      	bhi.n	8025cc4 <_dtoa_r+0x3bc>
 8025be4:	2c00      	cmp	r4, #0
 8025be6:	d06d      	beq.n	8025cc4 <_dtoa_r+0x3bc>
 8025be8:	f1b8 0f00 	cmp.w	r8, #0
 8025bec:	f340 80c2 	ble.w	8025d74 <_dtoa_r+0x46c>
 8025bf0:	4aca      	ldr	r2, [pc, #808]	@ (8025f1c <_dtoa_r+0x614>)
 8025bf2:	f008 010f 	and.w	r1, r8, #15
 8025bf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8025bfa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8025bfe:	ed92 7b00 	vldr	d7, [r2]
 8025c02:	ea4f 1128 	mov.w	r1, r8, asr #4
 8025c06:	f000 80a9 	beq.w	8025d5c <_dtoa_r+0x454>
 8025c0a:	4ac5      	ldr	r2, [pc, #788]	@ (8025f20 <_dtoa_r+0x618>)
 8025c0c:	ed92 6b08 	vldr	d6, [r2, #32]
 8025c10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8025c14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025c18:	f001 010f 	and.w	r1, r1, #15
 8025c1c:	2203      	movs	r2, #3
 8025c1e:	48c0      	ldr	r0, [pc, #768]	@ (8025f20 <_dtoa_r+0x618>)
 8025c20:	2900      	cmp	r1, #0
 8025c22:	f040 809d 	bne.w	8025d60 <_dtoa_r+0x458>
 8025c26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025c2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025c2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025c32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025c38:	2900      	cmp	r1, #0
 8025c3a:	f000 80c1 	beq.w	8025dc0 <_dtoa_r+0x4b8>
 8025c3e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8025c42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c4a:	f140 80b9 	bpl.w	8025dc0 <_dtoa_r+0x4b8>
 8025c4e:	f1ba 0f00 	cmp.w	sl, #0
 8025c52:	f000 80b5 	beq.w	8025dc0 <_dtoa_r+0x4b8>
 8025c56:	f1bb 0f00 	cmp.w	fp, #0
 8025c5a:	dd31      	ble.n	8025cc0 <_dtoa_r+0x3b8>
 8025c5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8025c60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025c64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025c68:	f108 31ff 	add.w	r1, r8, #4294967295
 8025c6c:	9104      	str	r1, [sp, #16]
 8025c6e:	3201      	adds	r2, #1
 8025c70:	465c      	mov	r4, fp
 8025c72:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025c76:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8025c7a:	ee07 2a90 	vmov	s15, r2
 8025c7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025c82:	eea7 5b06 	vfma.f64	d5, d7, d6
 8025c86:	ee15 2a90 	vmov	r2, s11
 8025c8a:	ec51 0b15 	vmov	r0, r1, d5
 8025c8e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8025c92:	2c00      	cmp	r4, #0
 8025c94:	f040 8098 	bne.w	8025dc8 <_dtoa_r+0x4c0>
 8025c98:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025c9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8025ca0:	ec41 0b17 	vmov	d7, r0, r1
 8025ca4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cac:	f300 8261 	bgt.w	8026172 <_dtoa_r+0x86a>
 8025cb0:	eeb1 7b47 	vneg.f64	d7, d7
 8025cb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cbc:	f100 80f5 	bmi.w	8025eaa <_dtoa_r+0x5a2>
 8025cc0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025cc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025cc6:	2a00      	cmp	r2, #0
 8025cc8:	f2c0 812c 	blt.w	8025f24 <_dtoa_r+0x61c>
 8025ccc:	f1b8 0f0e 	cmp.w	r8, #14
 8025cd0:	f300 8128 	bgt.w	8025f24 <_dtoa_r+0x61c>
 8025cd4:	4b91      	ldr	r3, [pc, #580]	@ (8025f1c <_dtoa_r+0x614>)
 8025cd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025cda:	ed93 6b00 	vldr	d6, [r3]
 8025cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ce0:	2b00      	cmp	r3, #0
 8025ce2:	da03      	bge.n	8025cec <_dtoa_r+0x3e4>
 8025ce4:	f1ba 0f00 	cmp.w	sl, #0
 8025ce8:	f340 80d2 	ble.w	8025e90 <_dtoa_r+0x588>
 8025cec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8025cf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025cf4:	463e      	mov	r6, r7
 8025cf6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025cfa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025cfe:	ee15 3a10 	vmov	r3, s10
 8025d02:	3330      	adds	r3, #48	@ 0x30
 8025d04:	f806 3b01 	strb.w	r3, [r6], #1
 8025d08:	1bf3      	subs	r3, r6, r7
 8025d0a:	459a      	cmp	sl, r3
 8025d0c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025d10:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025d14:	f040 80f8 	bne.w	8025f08 <_dtoa_r+0x600>
 8025d18:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025d1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d24:	f300 80dd 	bgt.w	8025ee2 <_dtoa_r+0x5da>
 8025d28:	eeb4 7b46 	vcmp.f64	d7, d6
 8025d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d30:	d104      	bne.n	8025d3c <_dtoa_r+0x434>
 8025d32:	ee15 3a10 	vmov	r3, s10
 8025d36:	07db      	lsls	r3, r3, #31
 8025d38:	f100 80d3 	bmi.w	8025ee2 <_dtoa_r+0x5da>
 8025d3c:	9901      	ldr	r1, [sp, #4]
 8025d3e:	4648      	mov	r0, r9
 8025d40:	f000 fbc2 	bl	80264c8 <_Bfree>
 8025d44:	2300      	movs	r3, #0
 8025d46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025d48:	7033      	strb	r3, [r6, #0]
 8025d4a:	f108 0301 	add.w	r3, r8, #1
 8025d4e:	6013      	str	r3, [r2, #0]
 8025d50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025d52:	2b00      	cmp	r3, #0
 8025d54:	f000 8304 	beq.w	8026360 <_dtoa_r+0xa58>
 8025d58:	601e      	str	r6, [r3, #0]
 8025d5a:	e301      	b.n	8026360 <_dtoa_r+0xa58>
 8025d5c:	2202      	movs	r2, #2
 8025d5e:	e75e      	b.n	8025c1e <_dtoa_r+0x316>
 8025d60:	07cc      	lsls	r4, r1, #31
 8025d62:	d504      	bpl.n	8025d6e <_dtoa_r+0x466>
 8025d64:	ed90 6b00 	vldr	d6, [r0]
 8025d68:	3201      	adds	r2, #1
 8025d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025d6e:	1049      	asrs	r1, r1, #1
 8025d70:	3008      	adds	r0, #8
 8025d72:	e755      	b.n	8025c20 <_dtoa_r+0x318>
 8025d74:	d022      	beq.n	8025dbc <_dtoa_r+0x4b4>
 8025d76:	f1c8 0100 	rsb	r1, r8, #0
 8025d7a:	4a68      	ldr	r2, [pc, #416]	@ (8025f1c <_dtoa_r+0x614>)
 8025d7c:	f001 000f 	and.w	r0, r1, #15
 8025d80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025d84:	ed92 7b00 	vldr	d7, [r2]
 8025d88:	ee28 7b07 	vmul.f64	d7, d8, d7
 8025d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025d90:	4863      	ldr	r0, [pc, #396]	@ (8025f20 <_dtoa_r+0x618>)
 8025d92:	1109      	asrs	r1, r1, #4
 8025d94:	2400      	movs	r4, #0
 8025d96:	2202      	movs	r2, #2
 8025d98:	b929      	cbnz	r1, 8025da6 <_dtoa_r+0x49e>
 8025d9a:	2c00      	cmp	r4, #0
 8025d9c:	f43f af49 	beq.w	8025c32 <_dtoa_r+0x32a>
 8025da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025da4:	e745      	b.n	8025c32 <_dtoa_r+0x32a>
 8025da6:	07ce      	lsls	r6, r1, #31
 8025da8:	d505      	bpl.n	8025db6 <_dtoa_r+0x4ae>
 8025daa:	ed90 6b00 	vldr	d6, [r0]
 8025dae:	3201      	adds	r2, #1
 8025db0:	2401      	movs	r4, #1
 8025db2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025db6:	1049      	asrs	r1, r1, #1
 8025db8:	3008      	adds	r0, #8
 8025dba:	e7ed      	b.n	8025d98 <_dtoa_r+0x490>
 8025dbc:	2202      	movs	r2, #2
 8025dbe:	e738      	b.n	8025c32 <_dtoa_r+0x32a>
 8025dc0:	f8cd 8010 	str.w	r8, [sp, #16]
 8025dc4:	4654      	mov	r4, sl
 8025dc6:	e754      	b.n	8025c72 <_dtoa_r+0x36a>
 8025dc8:	4a54      	ldr	r2, [pc, #336]	@ (8025f1c <_dtoa_r+0x614>)
 8025dca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025dce:	ed12 4b02 	vldr	d4, [r2, #-8]
 8025dd2:	9a08      	ldr	r2, [sp, #32]
 8025dd4:	ec41 0b17 	vmov	d7, r0, r1
 8025dd8:	443c      	add	r4, r7
 8025dda:	b34a      	cbz	r2, 8025e30 <_dtoa_r+0x528>
 8025ddc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8025de0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8025de4:	463e      	mov	r6, r7
 8025de6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025dea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025dee:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025df2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025df6:	ee14 2a90 	vmov	r2, s9
 8025dfa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025dfe:	3230      	adds	r2, #48	@ 0x30
 8025e00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025e04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e0c:	f806 2b01 	strb.w	r2, [r6], #1
 8025e10:	d438      	bmi.n	8025e84 <_dtoa_r+0x57c>
 8025e12:	ee32 5b46 	vsub.f64	d5, d2, d6
 8025e16:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e1e:	d462      	bmi.n	8025ee6 <_dtoa_r+0x5de>
 8025e20:	42a6      	cmp	r6, r4
 8025e22:	f43f af4d 	beq.w	8025cc0 <_dtoa_r+0x3b8>
 8025e26:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025e2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025e2e:	e7e0      	b.n	8025df2 <_dtoa_r+0x4ea>
 8025e30:	4621      	mov	r1, r4
 8025e32:	463e      	mov	r6, r7
 8025e34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025e38:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8025e3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025e40:	ee14 2a90 	vmov	r2, s9
 8025e44:	3230      	adds	r2, #48	@ 0x30
 8025e46:	f806 2b01 	strb.w	r2, [r6], #1
 8025e4a:	42a6      	cmp	r6, r4
 8025e4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025e50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025e54:	d119      	bne.n	8025e8a <_dtoa_r+0x582>
 8025e56:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8025e5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025e5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e66:	dc3e      	bgt.n	8025ee6 <_dtoa_r+0x5de>
 8025e68:	ee35 5b47 	vsub.f64	d5, d5, d7
 8025e6c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8025e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e74:	f57f af24 	bpl.w	8025cc0 <_dtoa_r+0x3b8>
 8025e78:	460e      	mov	r6, r1
 8025e7a:	3901      	subs	r1, #1
 8025e7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025e80:	2b30      	cmp	r3, #48	@ 0x30
 8025e82:	d0f9      	beq.n	8025e78 <_dtoa_r+0x570>
 8025e84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8025e88:	e758      	b.n	8025d3c <_dtoa_r+0x434>
 8025e8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025e8e:	e7d5      	b.n	8025e3c <_dtoa_r+0x534>
 8025e90:	d10b      	bne.n	8025eaa <_dtoa_r+0x5a2>
 8025e92:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8025e96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8025e9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025e9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ea6:	f2c0 8161 	blt.w	802616c <_dtoa_r+0x864>
 8025eaa:	2400      	movs	r4, #0
 8025eac:	4625      	mov	r5, r4
 8025eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025eb0:	43db      	mvns	r3, r3
 8025eb2:	9304      	str	r3, [sp, #16]
 8025eb4:	463e      	mov	r6, r7
 8025eb6:	f04f 0800 	mov.w	r8, #0
 8025eba:	4621      	mov	r1, r4
 8025ebc:	4648      	mov	r0, r9
 8025ebe:	f000 fb03 	bl	80264c8 <_Bfree>
 8025ec2:	2d00      	cmp	r5, #0
 8025ec4:	d0de      	beq.n	8025e84 <_dtoa_r+0x57c>
 8025ec6:	f1b8 0f00 	cmp.w	r8, #0
 8025eca:	d005      	beq.n	8025ed8 <_dtoa_r+0x5d0>
 8025ecc:	45a8      	cmp	r8, r5
 8025ece:	d003      	beq.n	8025ed8 <_dtoa_r+0x5d0>
 8025ed0:	4641      	mov	r1, r8
 8025ed2:	4648      	mov	r0, r9
 8025ed4:	f000 faf8 	bl	80264c8 <_Bfree>
 8025ed8:	4629      	mov	r1, r5
 8025eda:	4648      	mov	r0, r9
 8025edc:	f000 faf4 	bl	80264c8 <_Bfree>
 8025ee0:	e7d0      	b.n	8025e84 <_dtoa_r+0x57c>
 8025ee2:	f8cd 8010 	str.w	r8, [sp, #16]
 8025ee6:	4633      	mov	r3, r6
 8025ee8:	461e      	mov	r6, r3
 8025eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025eee:	2a39      	cmp	r2, #57	@ 0x39
 8025ef0:	d106      	bne.n	8025f00 <_dtoa_r+0x5f8>
 8025ef2:	429f      	cmp	r7, r3
 8025ef4:	d1f8      	bne.n	8025ee8 <_dtoa_r+0x5e0>
 8025ef6:	9a04      	ldr	r2, [sp, #16]
 8025ef8:	3201      	adds	r2, #1
 8025efa:	9204      	str	r2, [sp, #16]
 8025efc:	2230      	movs	r2, #48	@ 0x30
 8025efe:	703a      	strb	r2, [r7, #0]
 8025f00:	781a      	ldrb	r2, [r3, #0]
 8025f02:	3201      	adds	r2, #1
 8025f04:	701a      	strb	r2, [r3, #0]
 8025f06:	e7bd      	b.n	8025e84 <_dtoa_r+0x57c>
 8025f08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025f0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f14:	f47f aeef 	bne.w	8025cf6 <_dtoa_r+0x3ee>
 8025f18:	e710      	b.n	8025d3c <_dtoa_r+0x434>
 8025f1a:	bf00      	nop
 8025f1c:	0802d3e8 	.word	0x0802d3e8
 8025f20:	0802d3c0 	.word	0x0802d3c0
 8025f24:	9908      	ldr	r1, [sp, #32]
 8025f26:	2900      	cmp	r1, #0
 8025f28:	f000 80e3 	beq.w	80260f2 <_dtoa_r+0x7ea>
 8025f2c:	9907      	ldr	r1, [sp, #28]
 8025f2e:	2901      	cmp	r1, #1
 8025f30:	f300 80c8 	bgt.w	80260c4 <_dtoa_r+0x7bc>
 8025f34:	2d00      	cmp	r5, #0
 8025f36:	f000 80c1 	beq.w	80260bc <_dtoa_r+0x7b4>
 8025f3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025f3e:	9e05      	ldr	r6, [sp, #20]
 8025f40:	461c      	mov	r4, r3
 8025f42:	9304      	str	r3, [sp, #16]
 8025f44:	9b05      	ldr	r3, [sp, #20]
 8025f46:	4413      	add	r3, r2
 8025f48:	9305      	str	r3, [sp, #20]
 8025f4a:	9b06      	ldr	r3, [sp, #24]
 8025f4c:	2101      	movs	r1, #1
 8025f4e:	4413      	add	r3, r2
 8025f50:	4648      	mov	r0, r9
 8025f52:	9306      	str	r3, [sp, #24]
 8025f54:	f000 fbb6 	bl	80266c4 <__i2b>
 8025f58:	9b04      	ldr	r3, [sp, #16]
 8025f5a:	4605      	mov	r5, r0
 8025f5c:	b166      	cbz	r6, 8025f78 <_dtoa_r+0x670>
 8025f5e:	9a06      	ldr	r2, [sp, #24]
 8025f60:	2a00      	cmp	r2, #0
 8025f62:	dd09      	ble.n	8025f78 <_dtoa_r+0x670>
 8025f64:	42b2      	cmp	r2, r6
 8025f66:	9905      	ldr	r1, [sp, #20]
 8025f68:	bfa8      	it	ge
 8025f6a:	4632      	movge	r2, r6
 8025f6c:	1a89      	subs	r1, r1, r2
 8025f6e:	9105      	str	r1, [sp, #20]
 8025f70:	9906      	ldr	r1, [sp, #24]
 8025f72:	1ab6      	subs	r6, r6, r2
 8025f74:	1a8a      	subs	r2, r1, r2
 8025f76:	9206      	str	r2, [sp, #24]
 8025f78:	b1fb      	cbz	r3, 8025fba <_dtoa_r+0x6b2>
 8025f7a:	9a08      	ldr	r2, [sp, #32]
 8025f7c:	2a00      	cmp	r2, #0
 8025f7e:	f000 80bc 	beq.w	80260fa <_dtoa_r+0x7f2>
 8025f82:	b19c      	cbz	r4, 8025fac <_dtoa_r+0x6a4>
 8025f84:	4629      	mov	r1, r5
 8025f86:	4622      	mov	r2, r4
 8025f88:	4648      	mov	r0, r9
 8025f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025f8c:	f000 fc5a 	bl	8026844 <__pow5mult>
 8025f90:	9a01      	ldr	r2, [sp, #4]
 8025f92:	4601      	mov	r1, r0
 8025f94:	4605      	mov	r5, r0
 8025f96:	4648      	mov	r0, r9
 8025f98:	f000 fbaa 	bl	80266f0 <__multiply>
 8025f9c:	9901      	ldr	r1, [sp, #4]
 8025f9e:	9004      	str	r0, [sp, #16]
 8025fa0:	4648      	mov	r0, r9
 8025fa2:	f000 fa91 	bl	80264c8 <_Bfree>
 8025fa6:	9a04      	ldr	r2, [sp, #16]
 8025fa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025faa:	9201      	str	r2, [sp, #4]
 8025fac:	1b1a      	subs	r2, r3, r4
 8025fae:	d004      	beq.n	8025fba <_dtoa_r+0x6b2>
 8025fb0:	9901      	ldr	r1, [sp, #4]
 8025fb2:	4648      	mov	r0, r9
 8025fb4:	f000 fc46 	bl	8026844 <__pow5mult>
 8025fb8:	9001      	str	r0, [sp, #4]
 8025fba:	2101      	movs	r1, #1
 8025fbc:	4648      	mov	r0, r9
 8025fbe:	f000 fb81 	bl	80266c4 <__i2b>
 8025fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025fc4:	4604      	mov	r4, r0
 8025fc6:	2b00      	cmp	r3, #0
 8025fc8:	f000 81d0 	beq.w	802636c <_dtoa_r+0xa64>
 8025fcc:	461a      	mov	r2, r3
 8025fce:	4601      	mov	r1, r0
 8025fd0:	4648      	mov	r0, r9
 8025fd2:	f000 fc37 	bl	8026844 <__pow5mult>
 8025fd6:	9b07      	ldr	r3, [sp, #28]
 8025fd8:	2b01      	cmp	r3, #1
 8025fda:	4604      	mov	r4, r0
 8025fdc:	f300 8095 	bgt.w	802610a <_dtoa_r+0x802>
 8025fe0:	9b02      	ldr	r3, [sp, #8]
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	f040 808b 	bne.w	80260fe <_dtoa_r+0x7f6>
 8025fe8:	9b03      	ldr	r3, [sp, #12]
 8025fea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8025fee:	2a00      	cmp	r2, #0
 8025ff0:	f040 8087 	bne.w	8026102 <_dtoa_r+0x7fa>
 8025ff4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8025ff8:	0d12      	lsrs	r2, r2, #20
 8025ffa:	0512      	lsls	r2, r2, #20
 8025ffc:	2a00      	cmp	r2, #0
 8025ffe:	f000 8082 	beq.w	8026106 <_dtoa_r+0x7fe>
 8026002:	9b05      	ldr	r3, [sp, #20]
 8026004:	3301      	adds	r3, #1
 8026006:	9305      	str	r3, [sp, #20]
 8026008:	9b06      	ldr	r3, [sp, #24]
 802600a:	3301      	adds	r3, #1
 802600c:	9306      	str	r3, [sp, #24]
 802600e:	2301      	movs	r3, #1
 8026010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026014:	2b00      	cmp	r3, #0
 8026016:	f000 81af 	beq.w	8026378 <_dtoa_r+0xa70>
 802601a:	6922      	ldr	r2, [r4, #16]
 802601c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026020:	6910      	ldr	r0, [r2, #16]
 8026022:	f000 fb03 	bl	802662c <__hi0bits>
 8026026:	f1c0 0020 	rsb	r0, r0, #32
 802602a:	9b06      	ldr	r3, [sp, #24]
 802602c:	4418      	add	r0, r3
 802602e:	f010 001f 	ands.w	r0, r0, #31
 8026032:	d076      	beq.n	8026122 <_dtoa_r+0x81a>
 8026034:	f1c0 0220 	rsb	r2, r0, #32
 8026038:	2a04      	cmp	r2, #4
 802603a:	dd69      	ble.n	8026110 <_dtoa_r+0x808>
 802603c:	9b05      	ldr	r3, [sp, #20]
 802603e:	f1c0 001c 	rsb	r0, r0, #28
 8026042:	4403      	add	r3, r0
 8026044:	9305      	str	r3, [sp, #20]
 8026046:	9b06      	ldr	r3, [sp, #24]
 8026048:	4406      	add	r6, r0
 802604a:	4403      	add	r3, r0
 802604c:	9306      	str	r3, [sp, #24]
 802604e:	9b05      	ldr	r3, [sp, #20]
 8026050:	2b00      	cmp	r3, #0
 8026052:	dd05      	ble.n	8026060 <_dtoa_r+0x758>
 8026054:	9901      	ldr	r1, [sp, #4]
 8026056:	461a      	mov	r2, r3
 8026058:	4648      	mov	r0, r9
 802605a:	f000 fc4d 	bl	80268f8 <__lshift>
 802605e:	9001      	str	r0, [sp, #4]
 8026060:	9b06      	ldr	r3, [sp, #24]
 8026062:	2b00      	cmp	r3, #0
 8026064:	dd05      	ble.n	8026072 <_dtoa_r+0x76a>
 8026066:	4621      	mov	r1, r4
 8026068:	461a      	mov	r2, r3
 802606a:	4648      	mov	r0, r9
 802606c:	f000 fc44 	bl	80268f8 <__lshift>
 8026070:	4604      	mov	r4, r0
 8026072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026074:	2b00      	cmp	r3, #0
 8026076:	d056      	beq.n	8026126 <_dtoa_r+0x81e>
 8026078:	9801      	ldr	r0, [sp, #4]
 802607a:	4621      	mov	r1, r4
 802607c:	f000 fca8 	bl	80269d0 <__mcmp>
 8026080:	2800      	cmp	r0, #0
 8026082:	da50      	bge.n	8026126 <_dtoa_r+0x81e>
 8026084:	f108 33ff 	add.w	r3, r8, #4294967295
 8026088:	9304      	str	r3, [sp, #16]
 802608a:	9901      	ldr	r1, [sp, #4]
 802608c:	2300      	movs	r3, #0
 802608e:	220a      	movs	r2, #10
 8026090:	4648      	mov	r0, r9
 8026092:	f000 fa3b 	bl	802650c <__multadd>
 8026096:	9b08      	ldr	r3, [sp, #32]
 8026098:	9001      	str	r0, [sp, #4]
 802609a:	2b00      	cmp	r3, #0
 802609c:	f000 816e 	beq.w	802637c <_dtoa_r+0xa74>
 80260a0:	4629      	mov	r1, r5
 80260a2:	2300      	movs	r3, #0
 80260a4:	220a      	movs	r2, #10
 80260a6:	4648      	mov	r0, r9
 80260a8:	f000 fa30 	bl	802650c <__multadd>
 80260ac:	f1bb 0f00 	cmp.w	fp, #0
 80260b0:	4605      	mov	r5, r0
 80260b2:	dc64      	bgt.n	802617e <_dtoa_r+0x876>
 80260b4:	9b07      	ldr	r3, [sp, #28]
 80260b6:	2b02      	cmp	r3, #2
 80260b8:	dc3e      	bgt.n	8026138 <_dtoa_r+0x830>
 80260ba:	e060      	b.n	802617e <_dtoa_r+0x876>
 80260bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80260be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80260c2:	e73c      	b.n	8025f3e <_dtoa_r+0x636>
 80260c4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80260c8:	42a3      	cmp	r3, r4
 80260ca:	bfbf      	itttt	lt
 80260cc:	1ae2      	sublt	r2, r4, r3
 80260ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80260d0:	189b      	addlt	r3, r3, r2
 80260d2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80260d4:	bfae      	itee	ge
 80260d6:	1b1c      	subge	r4, r3, r4
 80260d8:	4623      	movlt	r3, r4
 80260da:	2400      	movlt	r4, #0
 80260dc:	f1ba 0f00 	cmp.w	sl, #0
 80260e0:	bfb5      	itete	lt
 80260e2:	9a05      	ldrlt	r2, [sp, #20]
 80260e4:	9e05      	ldrge	r6, [sp, #20]
 80260e6:	eba2 060a 	sublt.w	r6, r2, sl
 80260ea:	4652      	movge	r2, sl
 80260ec:	bfb8      	it	lt
 80260ee:	2200      	movlt	r2, #0
 80260f0:	e727      	b.n	8025f42 <_dtoa_r+0x63a>
 80260f2:	9e05      	ldr	r6, [sp, #20]
 80260f4:	9d08      	ldr	r5, [sp, #32]
 80260f6:	461c      	mov	r4, r3
 80260f8:	e730      	b.n	8025f5c <_dtoa_r+0x654>
 80260fa:	461a      	mov	r2, r3
 80260fc:	e758      	b.n	8025fb0 <_dtoa_r+0x6a8>
 80260fe:	2300      	movs	r3, #0
 8026100:	e786      	b.n	8026010 <_dtoa_r+0x708>
 8026102:	9b02      	ldr	r3, [sp, #8]
 8026104:	e784      	b.n	8026010 <_dtoa_r+0x708>
 8026106:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026108:	e783      	b.n	8026012 <_dtoa_r+0x70a>
 802610a:	2300      	movs	r3, #0
 802610c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802610e:	e784      	b.n	802601a <_dtoa_r+0x712>
 8026110:	d09d      	beq.n	802604e <_dtoa_r+0x746>
 8026112:	9b05      	ldr	r3, [sp, #20]
 8026114:	321c      	adds	r2, #28
 8026116:	4413      	add	r3, r2
 8026118:	9305      	str	r3, [sp, #20]
 802611a:	9b06      	ldr	r3, [sp, #24]
 802611c:	4416      	add	r6, r2
 802611e:	4413      	add	r3, r2
 8026120:	e794      	b.n	802604c <_dtoa_r+0x744>
 8026122:	4602      	mov	r2, r0
 8026124:	e7f5      	b.n	8026112 <_dtoa_r+0x80a>
 8026126:	f1ba 0f00 	cmp.w	sl, #0
 802612a:	f8cd 8010 	str.w	r8, [sp, #16]
 802612e:	46d3      	mov	fp, sl
 8026130:	dc21      	bgt.n	8026176 <_dtoa_r+0x86e>
 8026132:	9b07      	ldr	r3, [sp, #28]
 8026134:	2b02      	cmp	r3, #2
 8026136:	dd1e      	ble.n	8026176 <_dtoa_r+0x86e>
 8026138:	f1bb 0f00 	cmp.w	fp, #0
 802613c:	f47f aeb7 	bne.w	8025eae <_dtoa_r+0x5a6>
 8026140:	4621      	mov	r1, r4
 8026142:	465b      	mov	r3, fp
 8026144:	2205      	movs	r2, #5
 8026146:	4648      	mov	r0, r9
 8026148:	f000 f9e0 	bl	802650c <__multadd>
 802614c:	4601      	mov	r1, r0
 802614e:	4604      	mov	r4, r0
 8026150:	9801      	ldr	r0, [sp, #4]
 8026152:	f000 fc3d 	bl	80269d0 <__mcmp>
 8026156:	2800      	cmp	r0, #0
 8026158:	f77f aea9 	ble.w	8025eae <_dtoa_r+0x5a6>
 802615c:	463e      	mov	r6, r7
 802615e:	2331      	movs	r3, #49	@ 0x31
 8026160:	f806 3b01 	strb.w	r3, [r6], #1
 8026164:	9b04      	ldr	r3, [sp, #16]
 8026166:	3301      	adds	r3, #1
 8026168:	9304      	str	r3, [sp, #16]
 802616a:	e6a4      	b.n	8025eb6 <_dtoa_r+0x5ae>
 802616c:	f8cd 8010 	str.w	r8, [sp, #16]
 8026170:	4654      	mov	r4, sl
 8026172:	4625      	mov	r5, r4
 8026174:	e7f2      	b.n	802615c <_dtoa_r+0x854>
 8026176:	9b08      	ldr	r3, [sp, #32]
 8026178:	2b00      	cmp	r3, #0
 802617a:	f000 8103 	beq.w	8026384 <_dtoa_r+0xa7c>
 802617e:	2e00      	cmp	r6, #0
 8026180:	dd05      	ble.n	802618e <_dtoa_r+0x886>
 8026182:	4629      	mov	r1, r5
 8026184:	4632      	mov	r2, r6
 8026186:	4648      	mov	r0, r9
 8026188:	f000 fbb6 	bl	80268f8 <__lshift>
 802618c:	4605      	mov	r5, r0
 802618e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026190:	2b00      	cmp	r3, #0
 8026192:	d058      	beq.n	8026246 <_dtoa_r+0x93e>
 8026194:	6869      	ldr	r1, [r5, #4]
 8026196:	4648      	mov	r0, r9
 8026198:	f000 f956 	bl	8026448 <_Balloc>
 802619c:	4606      	mov	r6, r0
 802619e:	b928      	cbnz	r0, 80261ac <_dtoa_r+0x8a4>
 80261a0:	4b82      	ldr	r3, [pc, #520]	@ (80263ac <_dtoa_r+0xaa4>)
 80261a2:	4602      	mov	r2, r0
 80261a4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80261a8:	f7ff bbc7 	b.w	802593a <_dtoa_r+0x32>
 80261ac:	692a      	ldr	r2, [r5, #16]
 80261ae:	3202      	adds	r2, #2
 80261b0:	0092      	lsls	r2, r2, #2
 80261b2:	f105 010c 	add.w	r1, r5, #12
 80261b6:	300c      	adds	r0, #12
 80261b8:	f7ff fae9 	bl	802578e <memcpy>
 80261bc:	2201      	movs	r2, #1
 80261be:	4631      	mov	r1, r6
 80261c0:	4648      	mov	r0, r9
 80261c2:	f000 fb99 	bl	80268f8 <__lshift>
 80261c6:	1c7b      	adds	r3, r7, #1
 80261c8:	9305      	str	r3, [sp, #20]
 80261ca:	eb07 030b 	add.w	r3, r7, fp
 80261ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80261d0:	9b02      	ldr	r3, [sp, #8]
 80261d2:	f003 0301 	and.w	r3, r3, #1
 80261d6:	46a8      	mov	r8, r5
 80261d8:	9308      	str	r3, [sp, #32]
 80261da:	4605      	mov	r5, r0
 80261dc:	9b05      	ldr	r3, [sp, #20]
 80261de:	9801      	ldr	r0, [sp, #4]
 80261e0:	4621      	mov	r1, r4
 80261e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80261e6:	f7ff fb05 	bl	80257f4 <quorem>
 80261ea:	4641      	mov	r1, r8
 80261ec:	9002      	str	r0, [sp, #8]
 80261ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80261f2:	9801      	ldr	r0, [sp, #4]
 80261f4:	f000 fbec 	bl	80269d0 <__mcmp>
 80261f8:	462a      	mov	r2, r5
 80261fa:	9006      	str	r0, [sp, #24]
 80261fc:	4621      	mov	r1, r4
 80261fe:	4648      	mov	r0, r9
 8026200:	f000 fc02 	bl	8026a08 <__mdiff>
 8026204:	68c2      	ldr	r2, [r0, #12]
 8026206:	4606      	mov	r6, r0
 8026208:	b9fa      	cbnz	r2, 802624a <_dtoa_r+0x942>
 802620a:	4601      	mov	r1, r0
 802620c:	9801      	ldr	r0, [sp, #4]
 802620e:	f000 fbdf 	bl	80269d0 <__mcmp>
 8026212:	4602      	mov	r2, r0
 8026214:	4631      	mov	r1, r6
 8026216:	4648      	mov	r0, r9
 8026218:	920a      	str	r2, [sp, #40]	@ 0x28
 802621a:	f000 f955 	bl	80264c8 <_Bfree>
 802621e:	9b07      	ldr	r3, [sp, #28]
 8026220:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026222:	9e05      	ldr	r6, [sp, #20]
 8026224:	ea43 0102 	orr.w	r1, r3, r2
 8026228:	9b08      	ldr	r3, [sp, #32]
 802622a:	4319      	orrs	r1, r3
 802622c:	d10f      	bne.n	802624e <_dtoa_r+0x946>
 802622e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026232:	d028      	beq.n	8026286 <_dtoa_r+0x97e>
 8026234:	9b06      	ldr	r3, [sp, #24]
 8026236:	2b00      	cmp	r3, #0
 8026238:	dd02      	ble.n	8026240 <_dtoa_r+0x938>
 802623a:	9b02      	ldr	r3, [sp, #8]
 802623c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8026240:	f88b a000 	strb.w	sl, [fp]
 8026244:	e639      	b.n	8025eba <_dtoa_r+0x5b2>
 8026246:	4628      	mov	r0, r5
 8026248:	e7bd      	b.n	80261c6 <_dtoa_r+0x8be>
 802624a:	2201      	movs	r2, #1
 802624c:	e7e2      	b.n	8026214 <_dtoa_r+0x90c>
 802624e:	9b06      	ldr	r3, [sp, #24]
 8026250:	2b00      	cmp	r3, #0
 8026252:	db04      	blt.n	802625e <_dtoa_r+0x956>
 8026254:	9907      	ldr	r1, [sp, #28]
 8026256:	430b      	orrs	r3, r1
 8026258:	9908      	ldr	r1, [sp, #32]
 802625a:	430b      	orrs	r3, r1
 802625c:	d120      	bne.n	80262a0 <_dtoa_r+0x998>
 802625e:	2a00      	cmp	r2, #0
 8026260:	ddee      	ble.n	8026240 <_dtoa_r+0x938>
 8026262:	9901      	ldr	r1, [sp, #4]
 8026264:	2201      	movs	r2, #1
 8026266:	4648      	mov	r0, r9
 8026268:	f000 fb46 	bl	80268f8 <__lshift>
 802626c:	4621      	mov	r1, r4
 802626e:	9001      	str	r0, [sp, #4]
 8026270:	f000 fbae 	bl	80269d0 <__mcmp>
 8026274:	2800      	cmp	r0, #0
 8026276:	dc03      	bgt.n	8026280 <_dtoa_r+0x978>
 8026278:	d1e2      	bne.n	8026240 <_dtoa_r+0x938>
 802627a:	f01a 0f01 	tst.w	sl, #1
 802627e:	d0df      	beq.n	8026240 <_dtoa_r+0x938>
 8026280:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026284:	d1d9      	bne.n	802623a <_dtoa_r+0x932>
 8026286:	2339      	movs	r3, #57	@ 0x39
 8026288:	f88b 3000 	strb.w	r3, [fp]
 802628c:	4633      	mov	r3, r6
 802628e:	461e      	mov	r6, r3
 8026290:	3b01      	subs	r3, #1
 8026292:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8026296:	2a39      	cmp	r2, #57	@ 0x39
 8026298:	d053      	beq.n	8026342 <_dtoa_r+0xa3a>
 802629a:	3201      	adds	r2, #1
 802629c:	701a      	strb	r2, [r3, #0]
 802629e:	e60c      	b.n	8025eba <_dtoa_r+0x5b2>
 80262a0:	2a00      	cmp	r2, #0
 80262a2:	dd07      	ble.n	80262b4 <_dtoa_r+0x9ac>
 80262a4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80262a8:	d0ed      	beq.n	8026286 <_dtoa_r+0x97e>
 80262aa:	f10a 0301 	add.w	r3, sl, #1
 80262ae:	f88b 3000 	strb.w	r3, [fp]
 80262b2:	e602      	b.n	8025eba <_dtoa_r+0x5b2>
 80262b4:	9b05      	ldr	r3, [sp, #20]
 80262b6:	9a05      	ldr	r2, [sp, #20]
 80262b8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80262bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262be:	4293      	cmp	r3, r2
 80262c0:	d029      	beq.n	8026316 <_dtoa_r+0xa0e>
 80262c2:	9901      	ldr	r1, [sp, #4]
 80262c4:	2300      	movs	r3, #0
 80262c6:	220a      	movs	r2, #10
 80262c8:	4648      	mov	r0, r9
 80262ca:	f000 f91f 	bl	802650c <__multadd>
 80262ce:	45a8      	cmp	r8, r5
 80262d0:	9001      	str	r0, [sp, #4]
 80262d2:	f04f 0300 	mov.w	r3, #0
 80262d6:	f04f 020a 	mov.w	r2, #10
 80262da:	4641      	mov	r1, r8
 80262dc:	4648      	mov	r0, r9
 80262de:	d107      	bne.n	80262f0 <_dtoa_r+0x9e8>
 80262e0:	f000 f914 	bl	802650c <__multadd>
 80262e4:	4680      	mov	r8, r0
 80262e6:	4605      	mov	r5, r0
 80262e8:	9b05      	ldr	r3, [sp, #20]
 80262ea:	3301      	adds	r3, #1
 80262ec:	9305      	str	r3, [sp, #20]
 80262ee:	e775      	b.n	80261dc <_dtoa_r+0x8d4>
 80262f0:	f000 f90c 	bl	802650c <__multadd>
 80262f4:	4629      	mov	r1, r5
 80262f6:	4680      	mov	r8, r0
 80262f8:	2300      	movs	r3, #0
 80262fa:	220a      	movs	r2, #10
 80262fc:	4648      	mov	r0, r9
 80262fe:	f000 f905 	bl	802650c <__multadd>
 8026302:	4605      	mov	r5, r0
 8026304:	e7f0      	b.n	80262e8 <_dtoa_r+0x9e0>
 8026306:	f1bb 0f00 	cmp.w	fp, #0
 802630a:	bfcc      	ite	gt
 802630c:	465e      	movgt	r6, fp
 802630e:	2601      	movle	r6, #1
 8026310:	443e      	add	r6, r7
 8026312:	f04f 0800 	mov.w	r8, #0
 8026316:	9901      	ldr	r1, [sp, #4]
 8026318:	2201      	movs	r2, #1
 802631a:	4648      	mov	r0, r9
 802631c:	f000 faec 	bl	80268f8 <__lshift>
 8026320:	4621      	mov	r1, r4
 8026322:	9001      	str	r0, [sp, #4]
 8026324:	f000 fb54 	bl	80269d0 <__mcmp>
 8026328:	2800      	cmp	r0, #0
 802632a:	dcaf      	bgt.n	802628c <_dtoa_r+0x984>
 802632c:	d102      	bne.n	8026334 <_dtoa_r+0xa2c>
 802632e:	f01a 0f01 	tst.w	sl, #1
 8026332:	d1ab      	bne.n	802628c <_dtoa_r+0x984>
 8026334:	4633      	mov	r3, r6
 8026336:	461e      	mov	r6, r3
 8026338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802633c:	2a30      	cmp	r2, #48	@ 0x30
 802633e:	d0fa      	beq.n	8026336 <_dtoa_r+0xa2e>
 8026340:	e5bb      	b.n	8025eba <_dtoa_r+0x5b2>
 8026342:	429f      	cmp	r7, r3
 8026344:	d1a3      	bne.n	802628e <_dtoa_r+0x986>
 8026346:	9b04      	ldr	r3, [sp, #16]
 8026348:	3301      	adds	r3, #1
 802634a:	9304      	str	r3, [sp, #16]
 802634c:	2331      	movs	r3, #49	@ 0x31
 802634e:	703b      	strb	r3, [r7, #0]
 8026350:	e5b3      	b.n	8025eba <_dtoa_r+0x5b2>
 8026352:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026354:	4f16      	ldr	r7, [pc, #88]	@ (80263b0 <_dtoa_r+0xaa8>)
 8026356:	b11b      	cbz	r3, 8026360 <_dtoa_r+0xa58>
 8026358:	f107 0308 	add.w	r3, r7, #8
 802635c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802635e:	6013      	str	r3, [r2, #0]
 8026360:	4638      	mov	r0, r7
 8026362:	b011      	add	sp, #68	@ 0x44
 8026364:	ecbd 8b02 	vpop	{d8}
 8026368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802636c:	9b07      	ldr	r3, [sp, #28]
 802636e:	2b01      	cmp	r3, #1
 8026370:	f77f ae36 	ble.w	8025fe0 <_dtoa_r+0x6d8>
 8026374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026378:	2001      	movs	r0, #1
 802637a:	e656      	b.n	802602a <_dtoa_r+0x722>
 802637c:	f1bb 0f00 	cmp.w	fp, #0
 8026380:	f77f aed7 	ble.w	8026132 <_dtoa_r+0x82a>
 8026384:	463e      	mov	r6, r7
 8026386:	9801      	ldr	r0, [sp, #4]
 8026388:	4621      	mov	r1, r4
 802638a:	f7ff fa33 	bl	80257f4 <quorem>
 802638e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026392:	f806 ab01 	strb.w	sl, [r6], #1
 8026396:	1bf2      	subs	r2, r6, r7
 8026398:	4593      	cmp	fp, r2
 802639a:	ddb4      	ble.n	8026306 <_dtoa_r+0x9fe>
 802639c:	9901      	ldr	r1, [sp, #4]
 802639e:	2300      	movs	r3, #0
 80263a0:	220a      	movs	r2, #10
 80263a2:	4648      	mov	r0, r9
 80263a4:	f000 f8b2 	bl	802650c <__multadd>
 80263a8:	9001      	str	r0, [sp, #4]
 80263aa:	e7ec      	b.n	8026386 <_dtoa_r+0xa7e>
 80263ac:	0802d348 	.word	0x0802d348
 80263b0:	0802d2e3 	.word	0x0802d2e3

080263b4 <_free_r>:
 80263b4:	b538      	push	{r3, r4, r5, lr}
 80263b6:	4605      	mov	r5, r0
 80263b8:	2900      	cmp	r1, #0
 80263ba:	d041      	beq.n	8026440 <_free_r+0x8c>
 80263bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80263c0:	1f0c      	subs	r4, r1, #4
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	bfb8      	it	lt
 80263c6:	18e4      	addlt	r4, r4, r3
 80263c8:	f7fe f88a 	bl	80244e0 <__malloc_lock>
 80263cc:	4a1d      	ldr	r2, [pc, #116]	@ (8026444 <_free_r+0x90>)
 80263ce:	6813      	ldr	r3, [r2, #0]
 80263d0:	b933      	cbnz	r3, 80263e0 <_free_r+0x2c>
 80263d2:	6063      	str	r3, [r4, #4]
 80263d4:	6014      	str	r4, [r2, #0]
 80263d6:	4628      	mov	r0, r5
 80263d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80263dc:	f7fe b886 	b.w	80244ec <__malloc_unlock>
 80263e0:	42a3      	cmp	r3, r4
 80263e2:	d908      	bls.n	80263f6 <_free_r+0x42>
 80263e4:	6820      	ldr	r0, [r4, #0]
 80263e6:	1821      	adds	r1, r4, r0
 80263e8:	428b      	cmp	r3, r1
 80263ea:	bf01      	itttt	eq
 80263ec:	6819      	ldreq	r1, [r3, #0]
 80263ee:	685b      	ldreq	r3, [r3, #4]
 80263f0:	1809      	addeq	r1, r1, r0
 80263f2:	6021      	streq	r1, [r4, #0]
 80263f4:	e7ed      	b.n	80263d2 <_free_r+0x1e>
 80263f6:	461a      	mov	r2, r3
 80263f8:	685b      	ldr	r3, [r3, #4]
 80263fa:	b10b      	cbz	r3, 8026400 <_free_r+0x4c>
 80263fc:	42a3      	cmp	r3, r4
 80263fe:	d9fa      	bls.n	80263f6 <_free_r+0x42>
 8026400:	6811      	ldr	r1, [r2, #0]
 8026402:	1850      	adds	r0, r2, r1
 8026404:	42a0      	cmp	r0, r4
 8026406:	d10b      	bne.n	8026420 <_free_r+0x6c>
 8026408:	6820      	ldr	r0, [r4, #0]
 802640a:	4401      	add	r1, r0
 802640c:	1850      	adds	r0, r2, r1
 802640e:	4283      	cmp	r3, r0
 8026410:	6011      	str	r1, [r2, #0]
 8026412:	d1e0      	bne.n	80263d6 <_free_r+0x22>
 8026414:	6818      	ldr	r0, [r3, #0]
 8026416:	685b      	ldr	r3, [r3, #4]
 8026418:	6053      	str	r3, [r2, #4]
 802641a:	4408      	add	r0, r1
 802641c:	6010      	str	r0, [r2, #0]
 802641e:	e7da      	b.n	80263d6 <_free_r+0x22>
 8026420:	d902      	bls.n	8026428 <_free_r+0x74>
 8026422:	230c      	movs	r3, #12
 8026424:	602b      	str	r3, [r5, #0]
 8026426:	e7d6      	b.n	80263d6 <_free_r+0x22>
 8026428:	6820      	ldr	r0, [r4, #0]
 802642a:	1821      	adds	r1, r4, r0
 802642c:	428b      	cmp	r3, r1
 802642e:	bf04      	itt	eq
 8026430:	6819      	ldreq	r1, [r3, #0]
 8026432:	685b      	ldreq	r3, [r3, #4]
 8026434:	6063      	str	r3, [r4, #4]
 8026436:	bf04      	itt	eq
 8026438:	1809      	addeq	r1, r1, r0
 802643a:	6021      	streq	r1, [r4, #0]
 802643c:	6054      	str	r4, [r2, #4]
 802643e:	e7ca      	b.n	80263d6 <_free_r+0x22>
 8026440:	bd38      	pop	{r3, r4, r5, pc}
 8026442:	bf00      	nop
 8026444:	2400bfcc 	.word	0x2400bfcc

08026448 <_Balloc>:
 8026448:	b570      	push	{r4, r5, r6, lr}
 802644a:	69c6      	ldr	r6, [r0, #28]
 802644c:	4604      	mov	r4, r0
 802644e:	460d      	mov	r5, r1
 8026450:	b976      	cbnz	r6, 8026470 <_Balloc+0x28>
 8026452:	2010      	movs	r0, #16
 8026454:	f7fd ff92 	bl	802437c <malloc>
 8026458:	4602      	mov	r2, r0
 802645a:	61e0      	str	r0, [r4, #28]
 802645c:	b920      	cbnz	r0, 8026468 <_Balloc+0x20>
 802645e:	4b18      	ldr	r3, [pc, #96]	@ (80264c0 <_Balloc+0x78>)
 8026460:	4818      	ldr	r0, [pc, #96]	@ (80264c4 <_Balloc+0x7c>)
 8026462:	216b      	movs	r1, #107	@ 0x6b
 8026464:	f7ff f9a8 	bl	80257b8 <__assert_func>
 8026468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802646c:	6006      	str	r6, [r0, #0]
 802646e:	60c6      	str	r6, [r0, #12]
 8026470:	69e6      	ldr	r6, [r4, #28]
 8026472:	68f3      	ldr	r3, [r6, #12]
 8026474:	b183      	cbz	r3, 8026498 <_Balloc+0x50>
 8026476:	69e3      	ldr	r3, [r4, #28]
 8026478:	68db      	ldr	r3, [r3, #12]
 802647a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802647e:	b9b8      	cbnz	r0, 80264b0 <_Balloc+0x68>
 8026480:	2101      	movs	r1, #1
 8026482:	fa01 f605 	lsl.w	r6, r1, r5
 8026486:	1d72      	adds	r2, r6, #5
 8026488:	0092      	lsls	r2, r2, #2
 802648a:	4620      	mov	r0, r4
 802648c:	f002 f9cf 	bl	802882e <_calloc_r>
 8026490:	b160      	cbz	r0, 80264ac <_Balloc+0x64>
 8026492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026496:	e00e      	b.n	80264b6 <_Balloc+0x6e>
 8026498:	2221      	movs	r2, #33	@ 0x21
 802649a:	2104      	movs	r1, #4
 802649c:	4620      	mov	r0, r4
 802649e:	f002 f9c6 	bl	802882e <_calloc_r>
 80264a2:	69e3      	ldr	r3, [r4, #28]
 80264a4:	60f0      	str	r0, [r6, #12]
 80264a6:	68db      	ldr	r3, [r3, #12]
 80264a8:	2b00      	cmp	r3, #0
 80264aa:	d1e4      	bne.n	8026476 <_Balloc+0x2e>
 80264ac:	2000      	movs	r0, #0
 80264ae:	bd70      	pop	{r4, r5, r6, pc}
 80264b0:	6802      	ldr	r2, [r0, #0]
 80264b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80264b6:	2300      	movs	r3, #0
 80264b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80264bc:	e7f7      	b.n	80264ae <_Balloc+0x66>
 80264be:	bf00      	nop
 80264c0:	0802d100 	.word	0x0802d100
 80264c4:	0802d359 	.word	0x0802d359

080264c8 <_Bfree>:
 80264c8:	b570      	push	{r4, r5, r6, lr}
 80264ca:	69c6      	ldr	r6, [r0, #28]
 80264cc:	4605      	mov	r5, r0
 80264ce:	460c      	mov	r4, r1
 80264d0:	b976      	cbnz	r6, 80264f0 <_Bfree+0x28>
 80264d2:	2010      	movs	r0, #16
 80264d4:	f7fd ff52 	bl	802437c <malloc>
 80264d8:	4602      	mov	r2, r0
 80264da:	61e8      	str	r0, [r5, #28]
 80264dc:	b920      	cbnz	r0, 80264e8 <_Bfree+0x20>
 80264de:	4b09      	ldr	r3, [pc, #36]	@ (8026504 <_Bfree+0x3c>)
 80264e0:	4809      	ldr	r0, [pc, #36]	@ (8026508 <_Bfree+0x40>)
 80264e2:	218f      	movs	r1, #143	@ 0x8f
 80264e4:	f7ff f968 	bl	80257b8 <__assert_func>
 80264e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80264ec:	6006      	str	r6, [r0, #0]
 80264ee:	60c6      	str	r6, [r0, #12]
 80264f0:	b13c      	cbz	r4, 8026502 <_Bfree+0x3a>
 80264f2:	69eb      	ldr	r3, [r5, #28]
 80264f4:	6862      	ldr	r2, [r4, #4]
 80264f6:	68db      	ldr	r3, [r3, #12]
 80264f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80264fc:	6021      	str	r1, [r4, #0]
 80264fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026502:	bd70      	pop	{r4, r5, r6, pc}
 8026504:	0802d100 	.word	0x0802d100
 8026508:	0802d359 	.word	0x0802d359

0802650c <__multadd>:
 802650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026510:	690d      	ldr	r5, [r1, #16]
 8026512:	4607      	mov	r7, r0
 8026514:	460c      	mov	r4, r1
 8026516:	461e      	mov	r6, r3
 8026518:	f101 0c14 	add.w	ip, r1, #20
 802651c:	2000      	movs	r0, #0
 802651e:	f8dc 3000 	ldr.w	r3, [ip]
 8026522:	b299      	uxth	r1, r3
 8026524:	fb02 6101 	mla	r1, r2, r1, r6
 8026528:	0c1e      	lsrs	r6, r3, #16
 802652a:	0c0b      	lsrs	r3, r1, #16
 802652c:	fb02 3306 	mla	r3, r2, r6, r3
 8026530:	b289      	uxth	r1, r1
 8026532:	3001      	adds	r0, #1
 8026534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026538:	4285      	cmp	r5, r0
 802653a:	f84c 1b04 	str.w	r1, [ip], #4
 802653e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026542:	dcec      	bgt.n	802651e <__multadd+0x12>
 8026544:	b30e      	cbz	r6, 802658a <__multadd+0x7e>
 8026546:	68a3      	ldr	r3, [r4, #8]
 8026548:	42ab      	cmp	r3, r5
 802654a:	dc19      	bgt.n	8026580 <__multadd+0x74>
 802654c:	6861      	ldr	r1, [r4, #4]
 802654e:	4638      	mov	r0, r7
 8026550:	3101      	adds	r1, #1
 8026552:	f7ff ff79 	bl	8026448 <_Balloc>
 8026556:	4680      	mov	r8, r0
 8026558:	b928      	cbnz	r0, 8026566 <__multadd+0x5a>
 802655a:	4602      	mov	r2, r0
 802655c:	4b0c      	ldr	r3, [pc, #48]	@ (8026590 <__multadd+0x84>)
 802655e:	480d      	ldr	r0, [pc, #52]	@ (8026594 <__multadd+0x88>)
 8026560:	21ba      	movs	r1, #186	@ 0xba
 8026562:	f7ff f929 	bl	80257b8 <__assert_func>
 8026566:	6922      	ldr	r2, [r4, #16]
 8026568:	3202      	adds	r2, #2
 802656a:	f104 010c 	add.w	r1, r4, #12
 802656e:	0092      	lsls	r2, r2, #2
 8026570:	300c      	adds	r0, #12
 8026572:	f7ff f90c 	bl	802578e <memcpy>
 8026576:	4621      	mov	r1, r4
 8026578:	4638      	mov	r0, r7
 802657a:	f7ff ffa5 	bl	80264c8 <_Bfree>
 802657e:	4644      	mov	r4, r8
 8026580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026584:	3501      	adds	r5, #1
 8026586:	615e      	str	r6, [r3, #20]
 8026588:	6125      	str	r5, [r4, #16]
 802658a:	4620      	mov	r0, r4
 802658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026590:	0802d348 	.word	0x0802d348
 8026594:	0802d359 	.word	0x0802d359

08026598 <__s2b>:
 8026598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802659c:	460c      	mov	r4, r1
 802659e:	4615      	mov	r5, r2
 80265a0:	461f      	mov	r7, r3
 80265a2:	2209      	movs	r2, #9
 80265a4:	3308      	adds	r3, #8
 80265a6:	4606      	mov	r6, r0
 80265a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80265ac:	2100      	movs	r1, #0
 80265ae:	2201      	movs	r2, #1
 80265b0:	429a      	cmp	r2, r3
 80265b2:	db09      	blt.n	80265c8 <__s2b+0x30>
 80265b4:	4630      	mov	r0, r6
 80265b6:	f7ff ff47 	bl	8026448 <_Balloc>
 80265ba:	b940      	cbnz	r0, 80265ce <__s2b+0x36>
 80265bc:	4602      	mov	r2, r0
 80265be:	4b19      	ldr	r3, [pc, #100]	@ (8026624 <__s2b+0x8c>)
 80265c0:	4819      	ldr	r0, [pc, #100]	@ (8026628 <__s2b+0x90>)
 80265c2:	21d3      	movs	r1, #211	@ 0xd3
 80265c4:	f7ff f8f8 	bl	80257b8 <__assert_func>
 80265c8:	0052      	lsls	r2, r2, #1
 80265ca:	3101      	adds	r1, #1
 80265cc:	e7f0      	b.n	80265b0 <__s2b+0x18>
 80265ce:	9b08      	ldr	r3, [sp, #32]
 80265d0:	6143      	str	r3, [r0, #20]
 80265d2:	2d09      	cmp	r5, #9
 80265d4:	f04f 0301 	mov.w	r3, #1
 80265d8:	6103      	str	r3, [r0, #16]
 80265da:	dd16      	ble.n	802660a <__s2b+0x72>
 80265dc:	f104 0909 	add.w	r9, r4, #9
 80265e0:	46c8      	mov	r8, r9
 80265e2:	442c      	add	r4, r5
 80265e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80265e8:	4601      	mov	r1, r0
 80265ea:	3b30      	subs	r3, #48	@ 0x30
 80265ec:	220a      	movs	r2, #10
 80265ee:	4630      	mov	r0, r6
 80265f0:	f7ff ff8c 	bl	802650c <__multadd>
 80265f4:	45a0      	cmp	r8, r4
 80265f6:	d1f5      	bne.n	80265e4 <__s2b+0x4c>
 80265f8:	f1a5 0408 	sub.w	r4, r5, #8
 80265fc:	444c      	add	r4, r9
 80265fe:	1b2d      	subs	r5, r5, r4
 8026600:	1963      	adds	r3, r4, r5
 8026602:	42bb      	cmp	r3, r7
 8026604:	db04      	blt.n	8026610 <__s2b+0x78>
 8026606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802660a:	340a      	adds	r4, #10
 802660c:	2509      	movs	r5, #9
 802660e:	e7f6      	b.n	80265fe <__s2b+0x66>
 8026610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026614:	4601      	mov	r1, r0
 8026616:	3b30      	subs	r3, #48	@ 0x30
 8026618:	220a      	movs	r2, #10
 802661a:	4630      	mov	r0, r6
 802661c:	f7ff ff76 	bl	802650c <__multadd>
 8026620:	e7ee      	b.n	8026600 <__s2b+0x68>
 8026622:	bf00      	nop
 8026624:	0802d348 	.word	0x0802d348
 8026628:	0802d359 	.word	0x0802d359

0802662c <__hi0bits>:
 802662c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8026630:	4603      	mov	r3, r0
 8026632:	bf36      	itet	cc
 8026634:	0403      	lslcc	r3, r0, #16
 8026636:	2000      	movcs	r0, #0
 8026638:	2010      	movcc	r0, #16
 802663a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802663e:	bf3c      	itt	cc
 8026640:	021b      	lslcc	r3, r3, #8
 8026642:	3008      	addcc	r0, #8
 8026644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8026648:	bf3c      	itt	cc
 802664a:	011b      	lslcc	r3, r3, #4
 802664c:	3004      	addcc	r0, #4
 802664e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8026652:	bf3c      	itt	cc
 8026654:	009b      	lslcc	r3, r3, #2
 8026656:	3002      	addcc	r0, #2
 8026658:	2b00      	cmp	r3, #0
 802665a:	db05      	blt.n	8026668 <__hi0bits+0x3c>
 802665c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8026660:	f100 0001 	add.w	r0, r0, #1
 8026664:	bf08      	it	eq
 8026666:	2020      	moveq	r0, #32
 8026668:	4770      	bx	lr

0802666a <__lo0bits>:
 802666a:	6803      	ldr	r3, [r0, #0]
 802666c:	4602      	mov	r2, r0
 802666e:	f013 0007 	ands.w	r0, r3, #7
 8026672:	d00b      	beq.n	802668c <__lo0bits+0x22>
 8026674:	07d9      	lsls	r1, r3, #31
 8026676:	d421      	bmi.n	80266bc <__lo0bits+0x52>
 8026678:	0798      	lsls	r0, r3, #30
 802667a:	bf49      	itett	mi
 802667c:	085b      	lsrmi	r3, r3, #1
 802667e:	089b      	lsrpl	r3, r3, #2
 8026680:	2001      	movmi	r0, #1
 8026682:	6013      	strmi	r3, [r2, #0]
 8026684:	bf5c      	itt	pl
 8026686:	6013      	strpl	r3, [r2, #0]
 8026688:	2002      	movpl	r0, #2
 802668a:	4770      	bx	lr
 802668c:	b299      	uxth	r1, r3
 802668e:	b909      	cbnz	r1, 8026694 <__lo0bits+0x2a>
 8026690:	0c1b      	lsrs	r3, r3, #16
 8026692:	2010      	movs	r0, #16
 8026694:	b2d9      	uxtb	r1, r3
 8026696:	b909      	cbnz	r1, 802669c <__lo0bits+0x32>
 8026698:	3008      	adds	r0, #8
 802669a:	0a1b      	lsrs	r3, r3, #8
 802669c:	0719      	lsls	r1, r3, #28
 802669e:	bf04      	itt	eq
 80266a0:	091b      	lsreq	r3, r3, #4
 80266a2:	3004      	addeq	r0, #4
 80266a4:	0799      	lsls	r1, r3, #30
 80266a6:	bf04      	itt	eq
 80266a8:	089b      	lsreq	r3, r3, #2
 80266aa:	3002      	addeq	r0, #2
 80266ac:	07d9      	lsls	r1, r3, #31
 80266ae:	d403      	bmi.n	80266b8 <__lo0bits+0x4e>
 80266b0:	085b      	lsrs	r3, r3, #1
 80266b2:	f100 0001 	add.w	r0, r0, #1
 80266b6:	d003      	beq.n	80266c0 <__lo0bits+0x56>
 80266b8:	6013      	str	r3, [r2, #0]
 80266ba:	4770      	bx	lr
 80266bc:	2000      	movs	r0, #0
 80266be:	4770      	bx	lr
 80266c0:	2020      	movs	r0, #32
 80266c2:	4770      	bx	lr

080266c4 <__i2b>:
 80266c4:	b510      	push	{r4, lr}
 80266c6:	460c      	mov	r4, r1
 80266c8:	2101      	movs	r1, #1
 80266ca:	f7ff febd 	bl	8026448 <_Balloc>
 80266ce:	4602      	mov	r2, r0
 80266d0:	b928      	cbnz	r0, 80266de <__i2b+0x1a>
 80266d2:	4b05      	ldr	r3, [pc, #20]	@ (80266e8 <__i2b+0x24>)
 80266d4:	4805      	ldr	r0, [pc, #20]	@ (80266ec <__i2b+0x28>)
 80266d6:	f240 1145 	movw	r1, #325	@ 0x145
 80266da:	f7ff f86d 	bl	80257b8 <__assert_func>
 80266de:	2301      	movs	r3, #1
 80266e0:	6144      	str	r4, [r0, #20]
 80266e2:	6103      	str	r3, [r0, #16]
 80266e4:	bd10      	pop	{r4, pc}
 80266e6:	bf00      	nop
 80266e8:	0802d348 	.word	0x0802d348
 80266ec:	0802d359 	.word	0x0802d359

080266f0 <__multiply>:
 80266f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266f4:	4614      	mov	r4, r2
 80266f6:	690a      	ldr	r2, [r1, #16]
 80266f8:	6923      	ldr	r3, [r4, #16]
 80266fa:	429a      	cmp	r2, r3
 80266fc:	bfa8      	it	ge
 80266fe:	4623      	movge	r3, r4
 8026700:	460f      	mov	r7, r1
 8026702:	bfa4      	itt	ge
 8026704:	460c      	movge	r4, r1
 8026706:	461f      	movge	r7, r3
 8026708:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802670c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026710:	68a3      	ldr	r3, [r4, #8]
 8026712:	6861      	ldr	r1, [r4, #4]
 8026714:	eb0a 0609 	add.w	r6, sl, r9
 8026718:	42b3      	cmp	r3, r6
 802671a:	b085      	sub	sp, #20
 802671c:	bfb8      	it	lt
 802671e:	3101      	addlt	r1, #1
 8026720:	f7ff fe92 	bl	8026448 <_Balloc>
 8026724:	b930      	cbnz	r0, 8026734 <__multiply+0x44>
 8026726:	4602      	mov	r2, r0
 8026728:	4b44      	ldr	r3, [pc, #272]	@ (802683c <__multiply+0x14c>)
 802672a:	4845      	ldr	r0, [pc, #276]	@ (8026840 <__multiply+0x150>)
 802672c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026730:	f7ff f842 	bl	80257b8 <__assert_func>
 8026734:	f100 0514 	add.w	r5, r0, #20
 8026738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802673c:	462b      	mov	r3, r5
 802673e:	2200      	movs	r2, #0
 8026740:	4543      	cmp	r3, r8
 8026742:	d321      	bcc.n	8026788 <__multiply+0x98>
 8026744:	f107 0114 	add.w	r1, r7, #20
 8026748:	f104 0214 	add.w	r2, r4, #20
 802674c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026750:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026754:	9302      	str	r3, [sp, #8]
 8026756:	1b13      	subs	r3, r2, r4
 8026758:	3b15      	subs	r3, #21
 802675a:	f023 0303 	bic.w	r3, r3, #3
 802675e:	3304      	adds	r3, #4
 8026760:	f104 0715 	add.w	r7, r4, #21
 8026764:	42ba      	cmp	r2, r7
 8026766:	bf38      	it	cc
 8026768:	2304      	movcc	r3, #4
 802676a:	9301      	str	r3, [sp, #4]
 802676c:	9b02      	ldr	r3, [sp, #8]
 802676e:	9103      	str	r1, [sp, #12]
 8026770:	428b      	cmp	r3, r1
 8026772:	d80c      	bhi.n	802678e <__multiply+0x9e>
 8026774:	2e00      	cmp	r6, #0
 8026776:	dd03      	ble.n	8026780 <__multiply+0x90>
 8026778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802677c:	2b00      	cmp	r3, #0
 802677e:	d05b      	beq.n	8026838 <__multiply+0x148>
 8026780:	6106      	str	r6, [r0, #16]
 8026782:	b005      	add	sp, #20
 8026784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026788:	f843 2b04 	str.w	r2, [r3], #4
 802678c:	e7d8      	b.n	8026740 <__multiply+0x50>
 802678e:	f8b1 a000 	ldrh.w	sl, [r1]
 8026792:	f1ba 0f00 	cmp.w	sl, #0
 8026796:	d024      	beq.n	80267e2 <__multiply+0xf2>
 8026798:	f104 0e14 	add.w	lr, r4, #20
 802679c:	46a9      	mov	r9, r5
 802679e:	f04f 0c00 	mov.w	ip, #0
 80267a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80267a6:	f8d9 3000 	ldr.w	r3, [r9]
 80267aa:	fa1f fb87 	uxth.w	fp, r7
 80267ae:	b29b      	uxth	r3, r3
 80267b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80267b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80267b8:	f8d9 7000 	ldr.w	r7, [r9]
 80267bc:	4463      	add	r3, ip
 80267be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80267c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80267c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80267ca:	b29b      	uxth	r3, r3
 80267cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80267d0:	4572      	cmp	r2, lr
 80267d2:	f849 3b04 	str.w	r3, [r9], #4
 80267d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80267da:	d8e2      	bhi.n	80267a2 <__multiply+0xb2>
 80267dc:	9b01      	ldr	r3, [sp, #4]
 80267de:	f845 c003 	str.w	ip, [r5, r3]
 80267e2:	9b03      	ldr	r3, [sp, #12]
 80267e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80267e8:	3104      	adds	r1, #4
 80267ea:	f1b9 0f00 	cmp.w	r9, #0
 80267ee:	d021      	beq.n	8026834 <__multiply+0x144>
 80267f0:	682b      	ldr	r3, [r5, #0]
 80267f2:	f104 0c14 	add.w	ip, r4, #20
 80267f6:	46ae      	mov	lr, r5
 80267f8:	f04f 0a00 	mov.w	sl, #0
 80267fc:	f8bc b000 	ldrh.w	fp, [ip]
 8026800:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026804:	fb09 770b 	mla	r7, r9, fp, r7
 8026808:	4457      	add	r7, sl
 802680a:	b29b      	uxth	r3, r3
 802680c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026810:	f84e 3b04 	str.w	r3, [lr], #4
 8026814:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802681c:	f8be 3000 	ldrh.w	r3, [lr]
 8026820:	fb09 330a 	mla	r3, r9, sl, r3
 8026824:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8026828:	4562      	cmp	r2, ip
 802682a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802682e:	d8e5      	bhi.n	80267fc <__multiply+0x10c>
 8026830:	9f01      	ldr	r7, [sp, #4]
 8026832:	51eb      	str	r3, [r5, r7]
 8026834:	3504      	adds	r5, #4
 8026836:	e799      	b.n	802676c <__multiply+0x7c>
 8026838:	3e01      	subs	r6, #1
 802683a:	e79b      	b.n	8026774 <__multiply+0x84>
 802683c:	0802d348 	.word	0x0802d348
 8026840:	0802d359 	.word	0x0802d359

08026844 <__pow5mult>:
 8026844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026848:	4615      	mov	r5, r2
 802684a:	f012 0203 	ands.w	r2, r2, #3
 802684e:	4607      	mov	r7, r0
 8026850:	460e      	mov	r6, r1
 8026852:	d007      	beq.n	8026864 <__pow5mult+0x20>
 8026854:	4c25      	ldr	r4, [pc, #148]	@ (80268ec <__pow5mult+0xa8>)
 8026856:	3a01      	subs	r2, #1
 8026858:	2300      	movs	r3, #0
 802685a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802685e:	f7ff fe55 	bl	802650c <__multadd>
 8026862:	4606      	mov	r6, r0
 8026864:	10ad      	asrs	r5, r5, #2
 8026866:	d03d      	beq.n	80268e4 <__pow5mult+0xa0>
 8026868:	69fc      	ldr	r4, [r7, #28]
 802686a:	b97c      	cbnz	r4, 802688c <__pow5mult+0x48>
 802686c:	2010      	movs	r0, #16
 802686e:	f7fd fd85 	bl	802437c <malloc>
 8026872:	4602      	mov	r2, r0
 8026874:	61f8      	str	r0, [r7, #28]
 8026876:	b928      	cbnz	r0, 8026884 <__pow5mult+0x40>
 8026878:	4b1d      	ldr	r3, [pc, #116]	@ (80268f0 <__pow5mult+0xac>)
 802687a:	481e      	ldr	r0, [pc, #120]	@ (80268f4 <__pow5mult+0xb0>)
 802687c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026880:	f7fe ff9a 	bl	80257b8 <__assert_func>
 8026884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026888:	6004      	str	r4, [r0, #0]
 802688a:	60c4      	str	r4, [r0, #12]
 802688c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026894:	b94c      	cbnz	r4, 80268aa <__pow5mult+0x66>
 8026896:	f240 2171 	movw	r1, #625	@ 0x271
 802689a:	4638      	mov	r0, r7
 802689c:	f7ff ff12 	bl	80266c4 <__i2b>
 80268a0:	2300      	movs	r3, #0
 80268a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80268a6:	4604      	mov	r4, r0
 80268a8:	6003      	str	r3, [r0, #0]
 80268aa:	f04f 0900 	mov.w	r9, #0
 80268ae:	07eb      	lsls	r3, r5, #31
 80268b0:	d50a      	bpl.n	80268c8 <__pow5mult+0x84>
 80268b2:	4631      	mov	r1, r6
 80268b4:	4622      	mov	r2, r4
 80268b6:	4638      	mov	r0, r7
 80268b8:	f7ff ff1a 	bl	80266f0 <__multiply>
 80268bc:	4631      	mov	r1, r6
 80268be:	4680      	mov	r8, r0
 80268c0:	4638      	mov	r0, r7
 80268c2:	f7ff fe01 	bl	80264c8 <_Bfree>
 80268c6:	4646      	mov	r6, r8
 80268c8:	106d      	asrs	r5, r5, #1
 80268ca:	d00b      	beq.n	80268e4 <__pow5mult+0xa0>
 80268cc:	6820      	ldr	r0, [r4, #0]
 80268ce:	b938      	cbnz	r0, 80268e0 <__pow5mult+0x9c>
 80268d0:	4622      	mov	r2, r4
 80268d2:	4621      	mov	r1, r4
 80268d4:	4638      	mov	r0, r7
 80268d6:	f7ff ff0b 	bl	80266f0 <__multiply>
 80268da:	6020      	str	r0, [r4, #0]
 80268dc:	f8c0 9000 	str.w	r9, [r0]
 80268e0:	4604      	mov	r4, r0
 80268e2:	e7e4      	b.n	80268ae <__pow5mult+0x6a>
 80268e4:	4630      	mov	r0, r6
 80268e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268ea:	bf00      	nop
 80268ec:	0802d3b4 	.word	0x0802d3b4
 80268f0:	0802d100 	.word	0x0802d100
 80268f4:	0802d359 	.word	0x0802d359

080268f8 <__lshift>:
 80268f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268fc:	460c      	mov	r4, r1
 80268fe:	6849      	ldr	r1, [r1, #4]
 8026900:	6923      	ldr	r3, [r4, #16]
 8026902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026906:	68a3      	ldr	r3, [r4, #8]
 8026908:	4607      	mov	r7, r0
 802690a:	4691      	mov	r9, r2
 802690c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026910:	f108 0601 	add.w	r6, r8, #1
 8026914:	42b3      	cmp	r3, r6
 8026916:	db0b      	blt.n	8026930 <__lshift+0x38>
 8026918:	4638      	mov	r0, r7
 802691a:	f7ff fd95 	bl	8026448 <_Balloc>
 802691e:	4605      	mov	r5, r0
 8026920:	b948      	cbnz	r0, 8026936 <__lshift+0x3e>
 8026922:	4602      	mov	r2, r0
 8026924:	4b28      	ldr	r3, [pc, #160]	@ (80269c8 <__lshift+0xd0>)
 8026926:	4829      	ldr	r0, [pc, #164]	@ (80269cc <__lshift+0xd4>)
 8026928:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802692c:	f7fe ff44 	bl	80257b8 <__assert_func>
 8026930:	3101      	adds	r1, #1
 8026932:	005b      	lsls	r3, r3, #1
 8026934:	e7ee      	b.n	8026914 <__lshift+0x1c>
 8026936:	2300      	movs	r3, #0
 8026938:	f100 0114 	add.w	r1, r0, #20
 802693c:	f100 0210 	add.w	r2, r0, #16
 8026940:	4618      	mov	r0, r3
 8026942:	4553      	cmp	r3, sl
 8026944:	db33      	blt.n	80269ae <__lshift+0xb6>
 8026946:	6920      	ldr	r0, [r4, #16]
 8026948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802694c:	f104 0314 	add.w	r3, r4, #20
 8026950:	f019 091f 	ands.w	r9, r9, #31
 8026954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802695c:	d02b      	beq.n	80269b6 <__lshift+0xbe>
 802695e:	f1c9 0e20 	rsb	lr, r9, #32
 8026962:	468a      	mov	sl, r1
 8026964:	2200      	movs	r2, #0
 8026966:	6818      	ldr	r0, [r3, #0]
 8026968:	fa00 f009 	lsl.w	r0, r0, r9
 802696c:	4310      	orrs	r0, r2
 802696e:	f84a 0b04 	str.w	r0, [sl], #4
 8026972:	f853 2b04 	ldr.w	r2, [r3], #4
 8026976:	459c      	cmp	ip, r3
 8026978:	fa22 f20e 	lsr.w	r2, r2, lr
 802697c:	d8f3      	bhi.n	8026966 <__lshift+0x6e>
 802697e:	ebac 0304 	sub.w	r3, ip, r4
 8026982:	3b15      	subs	r3, #21
 8026984:	f023 0303 	bic.w	r3, r3, #3
 8026988:	3304      	adds	r3, #4
 802698a:	f104 0015 	add.w	r0, r4, #21
 802698e:	4584      	cmp	ip, r0
 8026990:	bf38      	it	cc
 8026992:	2304      	movcc	r3, #4
 8026994:	50ca      	str	r2, [r1, r3]
 8026996:	b10a      	cbz	r2, 802699c <__lshift+0xa4>
 8026998:	f108 0602 	add.w	r6, r8, #2
 802699c:	3e01      	subs	r6, #1
 802699e:	4638      	mov	r0, r7
 80269a0:	612e      	str	r6, [r5, #16]
 80269a2:	4621      	mov	r1, r4
 80269a4:	f7ff fd90 	bl	80264c8 <_Bfree>
 80269a8:	4628      	mov	r0, r5
 80269aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80269ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80269b2:	3301      	adds	r3, #1
 80269b4:	e7c5      	b.n	8026942 <__lshift+0x4a>
 80269b6:	3904      	subs	r1, #4
 80269b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80269bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80269c0:	459c      	cmp	ip, r3
 80269c2:	d8f9      	bhi.n	80269b8 <__lshift+0xc0>
 80269c4:	e7ea      	b.n	802699c <__lshift+0xa4>
 80269c6:	bf00      	nop
 80269c8:	0802d348 	.word	0x0802d348
 80269cc:	0802d359 	.word	0x0802d359

080269d0 <__mcmp>:
 80269d0:	690a      	ldr	r2, [r1, #16]
 80269d2:	4603      	mov	r3, r0
 80269d4:	6900      	ldr	r0, [r0, #16]
 80269d6:	1a80      	subs	r0, r0, r2
 80269d8:	b530      	push	{r4, r5, lr}
 80269da:	d10e      	bne.n	80269fa <__mcmp+0x2a>
 80269dc:	3314      	adds	r3, #20
 80269de:	3114      	adds	r1, #20
 80269e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80269e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80269e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80269ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80269f0:	4295      	cmp	r5, r2
 80269f2:	d003      	beq.n	80269fc <__mcmp+0x2c>
 80269f4:	d205      	bcs.n	8026a02 <__mcmp+0x32>
 80269f6:	f04f 30ff 	mov.w	r0, #4294967295
 80269fa:	bd30      	pop	{r4, r5, pc}
 80269fc:	42a3      	cmp	r3, r4
 80269fe:	d3f3      	bcc.n	80269e8 <__mcmp+0x18>
 8026a00:	e7fb      	b.n	80269fa <__mcmp+0x2a>
 8026a02:	2001      	movs	r0, #1
 8026a04:	e7f9      	b.n	80269fa <__mcmp+0x2a>
	...

08026a08 <__mdiff>:
 8026a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a0c:	4689      	mov	r9, r1
 8026a0e:	4606      	mov	r6, r0
 8026a10:	4611      	mov	r1, r2
 8026a12:	4648      	mov	r0, r9
 8026a14:	4614      	mov	r4, r2
 8026a16:	f7ff ffdb 	bl	80269d0 <__mcmp>
 8026a1a:	1e05      	subs	r5, r0, #0
 8026a1c:	d112      	bne.n	8026a44 <__mdiff+0x3c>
 8026a1e:	4629      	mov	r1, r5
 8026a20:	4630      	mov	r0, r6
 8026a22:	f7ff fd11 	bl	8026448 <_Balloc>
 8026a26:	4602      	mov	r2, r0
 8026a28:	b928      	cbnz	r0, 8026a36 <__mdiff+0x2e>
 8026a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8026b28 <__mdiff+0x120>)
 8026a2c:	f240 2137 	movw	r1, #567	@ 0x237
 8026a30:	483e      	ldr	r0, [pc, #248]	@ (8026b2c <__mdiff+0x124>)
 8026a32:	f7fe fec1 	bl	80257b8 <__assert_func>
 8026a36:	2301      	movs	r3, #1
 8026a38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026a3c:	4610      	mov	r0, r2
 8026a3e:	b003      	add	sp, #12
 8026a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a44:	bfbc      	itt	lt
 8026a46:	464b      	movlt	r3, r9
 8026a48:	46a1      	movlt	r9, r4
 8026a4a:	4630      	mov	r0, r6
 8026a4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026a50:	bfba      	itte	lt
 8026a52:	461c      	movlt	r4, r3
 8026a54:	2501      	movlt	r5, #1
 8026a56:	2500      	movge	r5, #0
 8026a58:	f7ff fcf6 	bl	8026448 <_Balloc>
 8026a5c:	4602      	mov	r2, r0
 8026a5e:	b918      	cbnz	r0, 8026a68 <__mdiff+0x60>
 8026a60:	4b31      	ldr	r3, [pc, #196]	@ (8026b28 <__mdiff+0x120>)
 8026a62:	f240 2145 	movw	r1, #581	@ 0x245
 8026a66:	e7e3      	b.n	8026a30 <__mdiff+0x28>
 8026a68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026a6c:	6926      	ldr	r6, [r4, #16]
 8026a6e:	60c5      	str	r5, [r0, #12]
 8026a70:	f109 0310 	add.w	r3, r9, #16
 8026a74:	f109 0514 	add.w	r5, r9, #20
 8026a78:	f104 0e14 	add.w	lr, r4, #20
 8026a7c:	f100 0b14 	add.w	fp, r0, #20
 8026a80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026a84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026a88:	9301      	str	r3, [sp, #4]
 8026a8a:	46d9      	mov	r9, fp
 8026a8c:	f04f 0c00 	mov.w	ip, #0
 8026a90:	9b01      	ldr	r3, [sp, #4]
 8026a92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026a96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8026a9a:	9301      	str	r3, [sp, #4]
 8026a9c:	fa1f f38a 	uxth.w	r3, sl
 8026aa0:	4619      	mov	r1, r3
 8026aa2:	b283      	uxth	r3, r0
 8026aa4:	1acb      	subs	r3, r1, r3
 8026aa6:	0c00      	lsrs	r0, r0, #16
 8026aa8:	4463      	add	r3, ip
 8026aaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8026aae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026ab2:	b29b      	uxth	r3, r3
 8026ab4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026ab8:	4576      	cmp	r6, lr
 8026aba:	f849 3b04 	str.w	r3, [r9], #4
 8026abe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026ac2:	d8e5      	bhi.n	8026a90 <__mdiff+0x88>
 8026ac4:	1b33      	subs	r3, r6, r4
 8026ac6:	3b15      	subs	r3, #21
 8026ac8:	f023 0303 	bic.w	r3, r3, #3
 8026acc:	3415      	adds	r4, #21
 8026ace:	3304      	adds	r3, #4
 8026ad0:	42a6      	cmp	r6, r4
 8026ad2:	bf38      	it	cc
 8026ad4:	2304      	movcc	r3, #4
 8026ad6:	441d      	add	r5, r3
 8026ad8:	445b      	add	r3, fp
 8026ada:	461e      	mov	r6, r3
 8026adc:	462c      	mov	r4, r5
 8026ade:	4544      	cmp	r4, r8
 8026ae0:	d30e      	bcc.n	8026b00 <__mdiff+0xf8>
 8026ae2:	f108 0103 	add.w	r1, r8, #3
 8026ae6:	1b49      	subs	r1, r1, r5
 8026ae8:	f021 0103 	bic.w	r1, r1, #3
 8026aec:	3d03      	subs	r5, #3
 8026aee:	45a8      	cmp	r8, r5
 8026af0:	bf38      	it	cc
 8026af2:	2100      	movcc	r1, #0
 8026af4:	440b      	add	r3, r1
 8026af6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026afa:	b191      	cbz	r1, 8026b22 <__mdiff+0x11a>
 8026afc:	6117      	str	r7, [r2, #16]
 8026afe:	e79d      	b.n	8026a3c <__mdiff+0x34>
 8026b00:	f854 1b04 	ldr.w	r1, [r4], #4
 8026b04:	46e6      	mov	lr, ip
 8026b06:	0c08      	lsrs	r0, r1, #16
 8026b08:	fa1c fc81 	uxtah	ip, ip, r1
 8026b0c:	4471      	add	r1, lr
 8026b0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026b12:	b289      	uxth	r1, r1
 8026b14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8026b18:	f846 1b04 	str.w	r1, [r6], #4
 8026b1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026b20:	e7dd      	b.n	8026ade <__mdiff+0xd6>
 8026b22:	3f01      	subs	r7, #1
 8026b24:	e7e7      	b.n	8026af6 <__mdiff+0xee>
 8026b26:	bf00      	nop
 8026b28:	0802d348 	.word	0x0802d348
 8026b2c:	0802d359 	.word	0x0802d359

08026b30 <__ulp>:
 8026b30:	b082      	sub	sp, #8
 8026b32:	ed8d 0b00 	vstr	d0, [sp]
 8026b36:	9a01      	ldr	r2, [sp, #4]
 8026b38:	4b0f      	ldr	r3, [pc, #60]	@ (8026b78 <__ulp+0x48>)
 8026b3a:	4013      	ands	r3, r2
 8026b3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	dc08      	bgt.n	8026b56 <__ulp+0x26>
 8026b44:	425b      	negs	r3, r3
 8026b46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8026b4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026b4e:	da04      	bge.n	8026b5a <__ulp+0x2a>
 8026b50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026b54:	4113      	asrs	r3, r2
 8026b56:	2200      	movs	r2, #0
 8026b58:	e008      	b.n	8026b6c <__ulp+0x3c>
 8026b5a:	f1a2 0314 	sub.w	r3, r2, #20
 8026b5e:	2b1e      	cmp	r3, #30
 8026b60:	bfda      	itte	le
 8026b62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8026b66:	40da      	lsrle	r2, r3
 8026b68:	2201      	movgt	r2, #1
 8026b6a:	2300      	movs	r3, #0
 8026b6c:	4619      	mov	r1, r3
 8026b6e:	4610      	mov	r0, r2
 8026b70:	ec41 0b10 	vmov	d0, r0, r1
 8026b74:	b002      	add	sp, #8
 8026b76:	4770      	bx	lr
 8026b78:	7ff00000 	.word	0x7ff00000

08026b7c <__b2d>:
 8026b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b80:	6906      	ldr	r6, [r0, #16]
 8026b82:	f100 0814 	add.w	r8, r0, #20
 8026b86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8026b8a:	1f37      	subs	r7, r6, #4
 8026b8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026b90:	4610      	mov	r0, r2
 8026b92:	f7ff fd4b 	bl	802662c <__hi0bits>
 8026b96:	f1c0 0320 	rsb	r3, r0, #32
 8026b9a:	280a      	cmp	r0, #10
 8026b9c:	600b      	str	r3, [r1, #0]
 8026b9e:	491b      	ldr	r1, [pc, #108]	@ (8026c0c <__b2d+0x90>)
 8026ba0:	dc15      	bgt.n	8026bce <__b2d+0x52>
 8026ba2:	f1c0 0c0b 	rsb	ip, r0, #11
 8026ba6:	fa22 f30c 	lsr.w	r3, r2, ip
 8026baa:	45b8      	cmp	r8, r7
 8026bac:	ea43 0501 	orr.w	r5, r3, r1
 8026bb0:	bf34      	ite	cc
 8026bb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026bb6:	2300      	movcs	r3, #0
 8026bb8:	3015      	adds	r0, #21
 8026bba:	fa02 f000 	lsl.w	r0, r2, r0
 8026bbe:	fa23 f30c 	lsr.w	r3, r3, ip
 8026bc2:	4303      	orrs	r3, r0
 8026bc4:	461c      	mov	r4, r3
 8026bc6:	ec45 4b10 	vmov	d0, r4, r5
 8026bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026bce:	45b8      	cmp	r8, r7
 8026bd0:	bf3a      	itte	cc
 8026bd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8026bd6:	f1a6 0708 	subcc.w	r7, r6, #8
 8026bda:	2300      	movcs	r3, #0
 8026bdc:	380b      	subs	r0, #11
 8026bde:	d012      	beq.n	8026c06 <__b2d+0x8a>
 8026be0:	f1c0 0120 	rsb	r1, r0, #32
 8026be4:	fa23 f401 	lsr.w	r4, r3, r1
 8026be8:	4082      	lsls	r2, r0
 8026bea:	4322      	orrs	r2, r4
 8026bec:	4547      	cmp	r7, r8
 8026bee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026bf2:	bf8c      	ite	hi
 8026bf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8026bf8:	2200      	movls	r2, #0
 8026bfa:	4083      	lsls	r3, r0
 8026bfc:	40ca      	lsrs	r2, r1
 8026bfe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026c02:	4313      	orrs	r3, r2
 8026c04:	e7de      	b.n	8026bc4 <__b2d+0x48>
 8026c06:	ea42 0501 	orr.w	r5, r2, r1
 8026c0a:	e7db      	b.n	8026bc4 <__b2d+0x48>
 8026c0c:	3ff00000 	.word	0x3ff00000

08026c10 <__d2b>:
 8026c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c14:	460f      	mov	r7, r1
 8026c16:	2101      	movs	r1, #1
 8026c18:	ec59 8b10 	vmov	r8, r9, d0
 8026c1c:	4616      	mov	r6, r2
 8026c1e:	f7ff fc13 	bl	8026448 <_Balloc>
 8026c22:	4604      	mov	r4, r0
 8026c24:	b930      	cbnz	r0, 8026c34 <__d2b+0x24>
 8026c26:	4602      	mov	r2, r0
 8026c28:	4b23      	ldr	r3, [pc, #140]	@ (8026cb8 <__d2b+0xa8>)
 8026c2a:	4824      	ldr	r0, [pc, #144]	@ (8026cbc <__d2b+0xac>)
 8026c2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8026c30:	f7fe fdc2 	bl	80257b8 <__assert_func>
 8026c34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026c3c:	b10d      	cbz	r5, 8026c42 <__d2b+0x32>
 8026c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026c42:	9301      	str	r3, [sp, #4]
 8026c44:	f1b8 0300 	subs.w	r3, r8, #0
 8026c48:	d023      	beq.n	8026c92 <__d2b+0x82>
 8026c4a:	4668      	mov	r0, sp
 8026c4c:	9300      	str	r3, [sp, #0]
 8026c4e:	f7ff fd0c 	bl	802666a <__lo0bits>
 8026c52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026c56:	b1d0      	cbz	r0, 8026c8e <__d2b+0x7e>
 8026c58:	f1c0 0320 	rsb	r3, r0, #32
 8026c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8026c60:	430b      	orrs	r3, r1
 8026c62:	40c2      	lsrs	r2, r0
 8026c64:	6163      	str	r3, [r4, #20]
 8026c66:	9201      	str	r2, [sp, #4]
 8026c68:	9b01      	ldr	r3, [sp, #4]
 8026c6a:	61a3      	str	r3, [r4, #24]
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	bf0c      	ite	eq
 8026c70:	2201      	moveq	r2, #1
 8026c72:	2202      	movne	r2, #2
 8026c74:	6122      	str	r2, [r4, #16]
 8026c76:	b1a5      	cbz	r5, 8026ca2 <__d2b+0x92>
 8026c78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8026c7c:	4405      	add	r5, r0
 8026c7e:	603d      	str	r5, [r7, #0]
 8026c80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026c84:	6030      	str	r0, [r6, #0]
 8026c86:	4620      	mov	r0, r4
 8026c88:	b003      	add	sp, #12
 8026c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c8e:	6161      	str	r1, [r4, #20]
 8026c90:	e7ea      	b.n	8026c68 <__d2b+0x58>
 8026c92:	a801      	add	r0, sp, #4
 8026c94:	f7ff fce9 	bl	802666a <__lo0bits>
 8026c98:	9b01      	ldr	r3, [sp, #4]
 8026c9a:	6163      	str	r3, [r4, #20]
 8026c9c:	3020      	adds	r0, #32
 8026c9e:	2201      	movs	r2, #1
 8026ca0:	e7e8      	b.n	8026c74 <__d2b+0x64>
 8026ca2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026ca6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8026caa:	6038      	str	r0, [r7, #0]
 8026cac:	6918      	ldr	r0, [r3, #16]
 8026cae:	f7ff fcbd 	bl	802662c <__hi0bits>
 8026cb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026cb6:	e7e5      	b.n	8026c84 <__d2b+0x74>
 8026cb8:	0802d348 	.word	0x0802d348
 8026cbc:	0802d359 	.word	0x0802d359

08026cc0 <__ratio>:
 8026cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cc4:	4688      	mov	r8, r1
 8026cc6:	4669      	mov	r1, sp
 8026cc8:	4681      	mov	r9, r0
 8026cca:	f7ff ff57 	bl	8026b7c <__b2d>
 8026cce:	a901      	add	r1, sp, #4
 8026cd0:	4640      	mov	r0, r8
 8026cd2:	ec55 4b10 	vmov	r4, r5, d0
 8026cd6:	f7ff ff51 	bl	8026b7c <__b2d>
 8026cda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8026cde:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8026ce2:	1ad2      	subs	r2, r2, r3
 8026ce4:	e9dd 3100 	ldrd	r3, r1, [sp]
 8026ce8:	1a5b      	subs	r3, r3, r1
 8026cea:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8026cee:	ec57 6b10 	vmov	r6, r7, d0
 8026cf2:	2b00      	cmp	r3, #0
 8026cf4:	bfd6      	itet	le
 8026cf6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026cfa:	462a      	movgt	r2, r5
 8026cfc:	463a      	movle	r2, r7
 8026cfe:	46ab      	mov	fp, r5
 8026d00:	46a2      	mov	sl, r4
 8026d02:	bfce      	itee	gt
 8026d04:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8026d08:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8026d0c:	ee00 3a90 	vmovle	s1, r3
 8026d10:	ec4b ab17 	vmov	d7, sl, fp
 8026d14:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8026d18:	b003      	add	sp, #12
 8026d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d1e <__copybits>:
 8026d1e:	3901      	subs	r1, #1
 8026d20:	b570      	push	{r4, r5, r6, lr}
 8026d22:	1149      	asrs	r1, r1, #5
 8026d24:	6914      	ldr	r4, [r2, #16]
 8026d26:	3101      	adds	r1, #1
 8026d28:	f102 0314 	add.w	r3, r2, #20
 8026d2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026d30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026d34:	1f05      	subs	r5, r0, #4
 8026d36:	42a3      	cmp	r3, r4
 8026d38:	d30c      	bcc.n	8026d54 <__copybits+0x36>
 8026d3a:	1aa3      	subs	r3, r4, r2
 8026d3c:	3b11      	subs	r3, #17
 8026d3e:	f023 0303 	bic.w	r3, r3, #3
 8026d42:	3211      	adds	r2, #17
 8026d44:	42a2      	cmp	r2, r4
 8026d46:	bf88      	it	hi
 8026d48:	2300      	movhi	r3, #0
 8026d4a:	4418      	add	r0, r3
 8026d4c:	2300      	movs	r3, #0
 8026d4e:	4288      	cmp	r0, r1
 8026d50:	d305      	bcc.n	8026d5e <__copybits+0x40>
 8026d52:	bd70      	pop	{r4, r5, r6, pc}
 8026d54:	f853 6b04 	ldr.w	r6, [r3], #4
 8026d58:	f845 6f04 	str.w	r6, [r5, #4]!
 8026d5c:	e7eb      	b.n	8026d36 <__copybits+0x18>
 8026d5e:	f840 3b04 	str.w	r3, [r0], #4
 8026d62:	e7f4      	b.n	8026d4e <__copybits+0x30>

08026d64 <__any_on>:
 8026d64:	f100 0214 	add.w	r2, r0, #20
 8026d68:	6900      	ldr	r0, [r0, #16]
 8026d6a:	114b      	asrs	r3, r1, #5
 8026d6c:	4298      	cmp	r0, r3
 8026d6e:	b510      	push	{r4, lr}
 8026d70:	db11      	blt.n	8026d96 <__any_on+0x32>
 8026d72:	dd0a      	ble.n	8026d8a <__any_on+0x26>
 8026d74:	f011 011f 	ands.w	r1, r1, #31
 8026d78:	d007      	beq.n	8026d8a <__any_on+0x26>
 8026d7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026d7e:	fa24 f001 	lsr.w	r0, r4, r1
 8026d82:	fa00 f101 	lsl.w	r1, r0, r1
 8026d86:	428c      	cmp	r4, r1
 8026d88:	d10b      	bne.n	8026da2 <__any_on+0x3e>
 8026d8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026d8e:	4293      	cmp	r3, r2
 8026d90:	d803      	bhi.n	8026d9a <__any_on+0x36>
 8026d92:	2000      	movs	r0, #0
 8026d94:	bd10      	pop	{r4, pc}
 8026d96:	4603      	mov	r3, r0
 8026d98:	e7f7      	b.n	8026d8a <__any_on+0x26>
 8026d9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026d9e:	2900      	cmp	r1, #0
 8026da0:	d0f5      	beq.n	8026d8e <__any_on+0x2a>
 8026da2:	2001      	movs	r0, #1
 8026da4:	e7f6      	b.n	8026d94 <__any_on+0x30>

08026da6 <sulp>:
 8026da6:	b570      	push	{r4, r5, r6, lr}
 8026da8:	4604      	mov	r4, r0
 8026daa:	460d      	mov	r5, r1
 8026dac:	4616      	mov	r6, r2
 8026dae:	ec45 4b10 	vmov	d0, r4, r5
 8026db2:	f7ff febd 	bl	8026b30 <__ulp>
 8026db6:	b17e      	cbz	r6, 8026dd8 <sulp+0x32>
 8026db8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026dbc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	dd09      	ble.n	8026dd8 <sulp+0x32>
 8026dc4:	051b      	lsls	r3, r3, #20
 8026dc6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026dca:	2000      	movs	r0, #0
 8026dcc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026dd0:	ec41 0b17 	vmov	d7, r0, r1
 8026dd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026dd8:	bd70      	pop	{r4, r5, r6, pc}
 8026dda:	0000      	movs	r0, r0
 8026ddc:	0000      	movs	r0, r0
	...

08026de0 <_strtod_l>:
 8026de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026de4:	ed2d 8b0a 	vpush	{d8-d12}
 8026de8:	b097      	sub	sp, #92	@ 0x5c
 8026dea:	4688      	mov	r8, r1
 8026dec:	920e      	str	r2, [sp, #56]	@ 0x38
 8026dee:	2200      	movs	r2, #0
 8026df0:	9212      	str	r2, [sp, #72]	@ 0x48
 8026df2:	9005      	str	r0, [sp, #20]
 8026df4:	f04f 0a00 	mov.w	sl, #0
 8026df8:	f04f 0b00 	mov.w	fp, #0
 8026dfc:	460a      	mov	r2, r1
 8026dfe:	9211      	str	r2, [sp, #68]	@ 0x44
 8026e00:	7811      	ldrb	r1, [r2, #0]
 8026e02:	292b      	cmp	r1, #43	@ 0x2b
 8026e04:	d04c      	beq.n	8026ea0 <_strtod_l+0xc0>
 8026e06:	d839      	bhi.n	8026e7c <_strtod_l+0x9c>
 8026e08:	290d      	cmp	r1, #13
 8026e0a:	d833      	bhi.n	8026e74 <_strtod_l+0x94>
 8026e0c:	2908      	cmp	r1, #8
 8026e0e:	d833      	bhi.n	8026e78 <_strtod_l+0x98>
 8026e10:	2900      	cmp	r1, #0
 8026e12:	d03c      	beq.n	8026e8e <_strtod_l+0xae>
 8026e14:	2200      	movs	r2, #0
 8026e16:	9208      	str	r2, [sp, #32]
 8026e18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026e1a:	782a      	ldrb	r2, [r5, #0]
 8026e1c:	2a30      	cmp	r2, #48	@ 0x30
 8026e1e:	f040 80b5 	bne.w	8026f8c <_strtod_l+0x1ac>
 8026e22:	786a      	ldrb	r2, [r5, #1]
 8026e24:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026e28:	2a58      	cmp	r2, #88	@ 0x58
 8026e2a:	d170      	bne.n	8026f0e <_strtod_l+0x12e>
 8026e2c:	9302      	str	r3, [sp, #8]
 8026e2e:	9b08      	ldr	r3, [sp, #32]
 8026e30:	9301      	str	r3, [sp, #4]
 8026e32:	ab12      	add	r3, sp, #72	@ 0x48
 8026e34:	9300      	str	r3, [sp, #0]
 8026e36:	4a8b      	ldr	r2, [pc, #556]	@ (8027064 <_strtod_l+0x284>)
 8026e38:	9805      	ldr	r0, [sp, #20]
 8026e3a:	ab13      	add	r3, sp, #76	@ 0x4c
 8026e3c:	a911      	add	r1, sp, #68	@ 0x44
 8026e3e:	f001 fd71 	bl	8028924 <__gethex>
 8026e42:	f010 060f 	ands.w	r6, r0, #15
 8026e46:	4604      	mov	r4, r0
 8026e48:	d005      	beq.n	8026e56 <_strtod_l+0x76>
 8026e4a:	2e06      	cmp	r6, #6
 8026e4c:	d12a      	bne.n	8026ea4 <_strtod_l+0xc4>
 8026e4e:	3501      	adds	r5, #1
 8026e50:	2300      	movs	r3, #0
 8026e52:	9511      	str	r5, [sp, #68]	@ 0x44
 8026e54:	9308      	str	r3, [sp, #32]
 8026e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	f040 852f 	bne.w	80278bc <_strtod_l+0xadc>
 8026e5e:	9b08      	ldr	r3, [sp, #32]
 8026e60:	ec4b ab10 	vmov	d0, sl, fp
 8026e64:	b1cb      	cbz	r3, 8026e9a <_strtod_l+0xba>
 8026e66:	eeb1 0b40 	vneg.f64	d0, d0
 8026e6a:	b017      	add	sp, #92	@ 0x5c
 8026e6c:	ecbd 8b0a 	vpop	{d8-d12}
 8026e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e74:	2920      	cmp	r1, #32
 8026e76:	d1cd      	bne.n	8026e14 <_strtod_l+0x34>
 8026e78:	3201      	adds	r2, #1
 8026e7a:	e7c0      	b.n	8026dfe <_strtod_l+0x1e>
 8026e7c:	292d      	cmp	r1, #45	@ 0x2d
 8026e7e:	d1c9      	bne.n	8026e14 <_strtod_l+0x34>
 8026e80:	2101      	movs	r1, #1
 8026e82:	9108      	str	r1, [sp, #32]
 8026e84:	1c51      	adds	r1, r2, #1
 8026e86:	9111      	str	r1, [sp, #68]	@ 0x44
 8026e88:	7852      	ldrb	r2, [r2, #1]
 8026e8a:	2a00      	cmp	r2, #0
 8026e8c:	d1c4      	bne.n	8026e18 <_strtod_l+0x38>
 8026e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026e90:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026e94:	2b00      	cmp	r3, #0
 8026e96:	f040 850f 	bne.w	80278b8 <_strtod_l+0xad8>
 8026e9a:	ec4b ab10 	vmov	d0, sl, fp
 8026e9e:	e7e4      	b.n	8026e6a <_strtod_l+0x8a>
 8026ea0:	2100      	movs	r1, #0
 8026ea2:	e7ee      	b.n	8026e82 <_strtod_l+0xa2>
 8026ea4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026ea6:	b13a      	cbz	r2, 8026eb8 <_strtod_l+0xd8>
 8026ea8:	2135      	movs	r1, #53	@ 0x35
 8026eaa:	a814      	add	r0, sp, #80	@ 0x50
 8026eac:	f7ff ff37 	bl	8026d1e <__copybits>
 8026eb0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026eb2:	9805      	ldr	r0, [sp, #20]
 8026eb4:	f7ff fb08 	bl	80264c8 <_Bfree>
 8026eb8:	1e73      	subs	r3, r6, #1
 8026eba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026ebc:	2b04      	cmp	r3, #4
 8026ebe:	d806      	bhi.n	8026ece <_strtod_l+0xee>
 8026ec0:	e8df f003 	tbb	[pc, r3]
 8026ec4:	201d0314 	.word	0x201d0314
 8026ec8:	14          	.byte	0x14
 8026ec9:	00          	.byte	0x00
 8026eca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026ece:	05e3      	lsls	r3, r4, #23
 8026ed0:	bf48      	it	mi
 8026ed2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8026ed6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026eda:	0d1b      	lsrs	r3, r3, #20
 8026edc:	051b      	lsls	r3, r3, #20
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d1b9      	bne.n	8026e56 <_strtod_l+0x76>
 8026ee2:	f7fe fc27 	bl	8025734 <__errno>
 8026ee6:	2322      	movs	r3, #34	@ 0x22
 8026ee8:	6003      	str	r3, [r0, #0]
 8026eea:	e7b4      	b.n	8026e56 <_strtod_l+0x76>
 8026eec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026ef0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026ef4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026ef8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026efc:	e7e7      	b.n	8026ece <_strtod_l+0xee>
 8026efe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 802706c <_strtod_l+0x28c>
 8026f02:	e7e4      	b.n	8026ece <_strtod_l+0xee>
 8026f04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026f08:	f04f 3aff 	mov.w	sl, #4294967295
 8026f0c:	e7df      	b.n	8026ece <_strtod_l+0xee>
 8026f0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f10:	1c5a      	adds	r2, r3, #1
 8026f12:	9211      	str	r2, [sp, #68]	@ 0x44
 8026f14:	785b      	ldrb	r3, [r3, #1]
 8026f16:	2b30      	cmp	r3, #48	@ 0x30
 8026f18:	d0f9      	beq.n	8026f0e <_strtod_l+0x12e>
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d09b      	beq.n	8026e56 <_strtod_l+0x76>
 8026f1e:	2301      	movs	r3, #1
 8026f20:	2600      	movs	r6, #0
 8026f22:	9307      	str	r3, [sp, #28]
 8026f24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8026f28:	46b1      	mov	r9, r6
 8026f2a:	4635      	mov	r5, r6
 8026f2c:	220a      	movs	r2, #10
 8026f2e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026f30:	7804      	ldrb	r4, [r0, #0]
 8026f32:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8026f36:	b2d9      	uxtb	r1, r3
 8026f38:	2909      	cmp	r1, #9
 8026f3a:	d929      	bls.n	8026f90 <_strtod_l+0x1b0>
 8026f3c:	494a      	ldr	r1, [pc, #296]	@ (8027068 <_strtod_l+0x288>)
 8026f3e:	2201      	movs	r2, #1
 8026f40:	f7fe fb8c 	bl	802565c <strncmp>
 8026f44:	b378      	cbz	r0, 8026fa6 <_strtod_l+0x1c6>
 8026f46:	2000      	movs	r0, #0
 8026f48:	4622      	mov	r2, r4
 8026f4a:	462b      	mov	r3, r5
 8026f4c:	4607      	mov	r7, r0
 8026f4e:	9006      	str	r0, [sp, #24]
 8026f50:	2a65      	cmp	r2, #101	@ 0x65
 8026f52:	d001      	beq.n	8026f58 <_strtod_l+0x178>
 8026f54:	2a45      	cmp	r2, #69	@ 0x45
 8026f56:	d117      	bne.n	8026f88 <_strtod_l+0x1a8>
 8026f58:	b91b      	cbnz	r3, 8026f62 <_strtod_l+0x182>
 8026f5a:	9b07      	ldr	r3, [sp, #28]
 8026f5c:	4303      	orrs	r3, r0
 8026f5e:	d096      	beq.n	8026e8e <_strtod_l+0xae>
 8026f60:	2300      	movs	r3, #0
 8026f62:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8026f66:	f108 0201 	add.w	r2, r8, #1
 8026f6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8026f6c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026f70:	2a2b      	cmp	r2, #43	@ 0x2b
 8026f72:	d06b      	beq.n	802704c <_strtod_l+0x26c>
 8026f74:	2a2d      	cmp	r2, #45	@ 0x2d
 8026f76:	d071      	beq.n	802705c <_strtod_l+0x27c>
 8026f78:	f04f 0e00 	mov.w	lr, #0
 8026f7c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026f80:	2c09      	cmp	r4, #9
 8026f82:	d979      	bls.n	8027078 <_strtod_l+0x298>
 8026f84:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026f88:	2400      	movs	r4, #0
 8026f8a:	e094      	b.n	80270b6 <_strtod_l+0x2d6>
 8026f8c:	2300      	movs	r3, #0
 8026f8e:	e7c7      	b.n	8026f20 <_strtod_l+0x140>
 8026f90:	2d08      	cmp	r5, #8
 8026f92:	f100 0001 	add.w	r0, r0, #1
 8026f96:	bfd4      	ite	le
 8026f98:	fb02 3909 	mlale	r9, r2, r9, r3
 8026f9c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8026fa0:	3501      	adds	r5, #1
 8026fa2:	9011      	str	r0, [sp, #68]	@ 0x44
 8026fa4:	e7c3      	b.n	8026f2e <_strtod_l+0x14e>
 8026fa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026fa8:	1c5a      	adds	r2, r3, #1
 8026faa:	9211      	str	r2, [sp, #68]	@ 0x44
 8026fac:	785a      	ldrb	r2, [r3, #1]
 8026fae:	b375      	cbz	r5, 802700e <_strtod_l+0x22e>
 8026fb0:	4607      	mov	r7, r0
 8026fb2:	462b      	mov	r3, r5
 8026fb4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8026fb8:	2909      	cmp	r1, #9
 8026fba:	d913      	bls.n	8026fe4 <_strtod_l+0x204>
 8026fbc:	2101      	movs	r1, #1
 8026fbe:	9106      	str	r1, [sp, #24]
 8026fc0:	e7c6      	b.n	8026f50 <_strtod_l+0x170>
 8026fc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026fc4:	1c5a      	adds	r2, r3, #1
 8026fc6:	9211      	str	r2, [sp, #68]	@ 0x44
 8026fc8:	785a      	ldrb	r2, [r3, #1]
 8026fca:	3001      	adds	r0, #1
 8026fcc:	2a30      	cmp	r2, #48	@ 0x30
 8026fce:	d0f8      	beq.n	8026fc2 <_strtod_l+0x1e2>
 8026fd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8026fd4:	2b08      	cmp	r3, #8
 8026fd6:	f200 8476 	bhi.w	80278c6 <_strtod_l+0xae6>
 8026fda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8026fde:	4607      	mov	r7, r0
 8026fe0:	2000      	movs	r0, #0
 8026fe2:	4603      	mov	r3, r0
 8026fe4:	3a30      	subs	r2, #48	@ 0x30
 8026fe6:	f100 0101 	add.w	r1, r0, #1
 8026fea:	d023      	beq.n	8027034 <_strtod_l+0x254>
 8026fec:	440f      	add	r7, r1
 8026fee:	eb00 0c03 	add.w	ip, r0, r3
 8026ff2:	4619      	mov	r1, r3
 8026ff4:	240a      	movs	r4, #10
 8026ff6:	4561      	cmp	r1, ip
 8026ff8:	d10b      	bne.n	8027012 <_strtod_l+0x232>
 8026ffa:	1c5c      	adds	r4, r3, #1
 8026ffc:	4403      	add	r3, r0
 8026ffe:	2b08      	cmp	r3, #8
 8027000:	4404      	add	r4, r0
 8027002:	dc11      	bgt.n	8027028 <_strtod_l+0x248>
 8027004:	230a      	movs	r3, #10
 8027006:	fb03 2909 	mla	r9, r3, r9, r2
 802700a:	2100      	movs	r1, #0
 802700c:	e013      	b.n	8027036 <_strtod_l+0x256>
 802700e:	4628      	mov	r0, r5
 8027010:	e7dc      	b.n	8026fcc <_strtod_l+0x1ec>
 8027012:	2908      	cmp	r1, #8
 8027014:	f101 0101 	add.w	r1, r1, #1
 8027018:	dc02      	bgt.n	8027020 <_strtod_l+0x240>
 802701a:	fb04 f909 	mul.w	r9, r4, r9
 802701e:	e7ea      	b.n	8026ff6 <_strtod_l+0x216>
 8027020:	2910      	cmp	r1, #16
 8027022:	bfd8      	it	le
 8027024:	4366      	mulle	r6, r4
 8027026:	e7e6      	b.n	8026ff6 <_strtod_l+0x216>
 8027028:	2b0f      	cmp	r3, #15
 802702a:	dcee      	bgt.n	802700a <_strtod_l+0x22a>
 802702c:	230a      	movs	r3, #10
 802702e:	fb03 2606 	mla	r6, r3, r6, r2
 8027032:	e7ea      	b.n	802700a <_strtod_l+0x22a>
 8027034:	461c      	mov	r4, r3
 8027036:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027038:	1c5a      	adds	r2, r3, #1
 802703a:	9211      	str	r2, [sp, #68]	@ 0x44
 802703c:	785a      	ldrb	r2, [r3, #1]
 802703e:	4608      	mov	r0, r1
 8027040:	4623      	mov	r3, r4
 8027042:	e7b7      	b.n	8026fb4 <_strtod_l+0x1d4>
 8027044:	2301      	movs	r3, #1
 8027046:	2700      	movs	r7, #0
 8027048:	9306      	str	r3, [sp, #24]
 802704a:	e786      	b.n	8026f5a <_strtod_l+0x17a>
 802704c:	f04f 0e00 	mov.w	lr, #0
 8027050:	f108 0202 	add.w	r2, r8, #2
 8027054:	9211      	str	r2, [sp, #68]	@ 0x44
 8027056:	f898 2002 	ldrb.w	r2, [r8, #2]
 802705a:	e78f      	b.n	8026f7c <_strtod_l+0x19c>
 802705c:	f04f 0e01 	mov.w	lr, #1
 8027060:	e7f6      	b.n	8027050 <_strtod_l+0x270>
 8027062:	bf00      	nop
 8027064:	0802d4c8 	.word	0x0802d4c8
 8027068:	0802d4b0 	.word	0x0802d4b0
 802706c:	7ff00000 	.word	0x7ff00000
 8027070:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027072:	1c54      	adds	r4, r2, #1
 8027074:	9411      	str	r4, [sp, #68]	@ 0x44
 8027076:	7852      	ldrb	r2, [r2, #1]
 8027078:	2a30      	cmp	r2, #48	@ 0x30
 802707a:	d0f9      	beq.n	8027070 <_strtod_l+0x290>
 802707c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8027080:	2c08      	cmp	r4, #8
 8027082:	d881      	bhi.n	8026f88 <_strtod_l+0x1a8>
 8027084:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8027088:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802708a:	9209      	str	r2, [sp, #36]	@ 0x24
 802708c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802708e:	1c51      	adds	r1, r2, #1
 8027090:	9111      	str	r1, [sp, #68]	@ 0x44
 8027092:	7852      	ldrb	r2, [r2, #1]
 8027094:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8027098:	2c09      	cmp	r4, #9
 802709a:	d938      	bls.n	802710e <_strtod_l+0x32e>
 802709c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802709e:	1b0c      	subs	r4, r1, r4
 80270a0:	2c08      	cmp	r4, #8
 80270a2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80270a6:	dc02      	bgt.n	80270ae <_strtod_l+0x2ce>
 80270a8:	4564      	cmp	r4, ip
 80270aa:	bfa8      	it	ge
 80270ac:	4664      	movge	r4, ip
 80270ae:	f1be 0f00 	cmp.w	lr, #0
 80270b2:	d000      	beq.n	80270b6 <_strtod_l+0x2d6>
 80270b4:	4264      	negs	r4, r4
 80270b6:	2b00      	cmp	r3, #0
 80270b8:	d14e      	bne.n	8027158 <_strtod_l+0x378>
 80270ba:	9b07      	ldr	r3, [sp, #28]
 80270bc:	4318      	orrs	r0, r3
 80270be:	f47f aeca 	bne.w	8026e56 <_strtod_l+0x76>
 80270c2:	9b06      	ldr	r3, [sp, #24]
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	f47f aee2 	bne.w	8026e8e <_strtod_l+0xae>
 80270ca:	2a69      	cmp	r2, #105	@ 0x69
 80270cc:	d027      	beq.n	802711e <_strtod_l+0x33e>
 80270ce:	dc24      	bgt.n	802711a <_strtod_l+0x33a>
 80270d0:	2a49      	cmp	r2, #73	@ 0x49
 80270d2:	d024      	beq.n	802711e <_strtod_l+0x33e>
 80270d4:	2a4e      	cmp	r2, #78	@ 0x4e
 80270d6:	f47f aeda 	bne.w	8026e8e <_strtod_l+0xae>
 80270da:	4997      	ldr	r1, [pc, #604]	@ (8027338 <_strtod_l+0x558>)
 80270dc:	a811      	add	r0, sp, #68	@ 0x44
 80270de:	f001 fe43 	bl	8028d68 <__match>
 80270e2:	2800      	cmp	r0, #0
 80270e4:	f43f aed3 	beq.w	8026e8e <_strtod_l+0xae>
 80270e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270ea:	781b      	ldrb	r3, [r3, #0]
 80270ec:	2b28      	cmp	r3, #40	@ 0x28
 80270ee:	d12d      	bne.n	802714c <_strtod_l+0x36c>
 80270f0:	4992      	ldr	r1, [pc, #584]	@ (802733c <_strtod_l+0x55c>)
 80270f2:	aa14      	add	r2, sp, #80	@ 0x50
 80270f4:	a811      	add	r0, sp, #68	@ 0x44
 80270f6:	f001 fe4b 	bl	8028d90 <__hexnan>
 80270fa:	2805      	cmp	r0, #5
 80270fc:	d126      	bne.n	802714c <_strtod_l+0x36c>
 80270fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027100:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8027104:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8027108:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802710c:	e6a3      	b.n	8026e56 <_strtod_l+0x76>
 802710e:	240a      	movs	r4, #10
 8027110:	fb04 2c0c 	mla	ip, r4, ip, r2
 8027114:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8027118:	e7b8      	b.n	802708c <_strtod_l+0x2ac>
 802711a:	2a6e      	cmp	r2, #110	@ 0x6e
 802711c:	e7db      	b.n	80270d6 <_strtod_l+0x2f6>
 802711e:	4988      	ldr	r1, [pc, #544]	@ (8027340 <_strtod_l+0x560>)
 8027120:	a811      	add	r0, sp, #68	@ 0x44
 8027122:	f001 fe21 	bl	8028d68 <__match>
 8027126:	2800      	cmp	r0, #0
 8027128:	f43f aeb1 	beq.w	8026e8e <_strtod_l+0xae>
 802712c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802712e:	4985      	ldr	r1, [pc, #532]	@ (8027344 <_strtod_l+0x564>)
 8027130:	3b01      	subs	r3, #1
 8027132:	a811      	add	r0, sp, #68	@ 0x44
 8027134:	9311      	str	r3, [sp, #68]	@ 0x44
 8027136:	f001 fe17 	bl	8028d68 <__match>
 802713a:	b910      	cbnz	r0, 8027142 <_strtod_l+0x362>
 802713c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802713e:	3301      	adds	r3, #1
 8027140:	9311      	str	r3, [sp, #68]	@ 0x44
 8027142:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8027358 <_strtod_l+0x578>
 8027146:	f04f 0a00 	mov.w	sl, #0
 802714a:	e684      	b.n	8026e56 <_strtod_l+0x76>
 802714c:	487e      	ldr	r0, [pc, #504]	@ (8027348 <_strtod_l+0x568>)
 802714e:	f001 fb5f 	bl	8028810 <nan>
 8027152:	ec5b ab10 	vmov	sl, fp, d0
 8027156:	e67e      	b.n	8026e56 <_strtod_l+0x76>
 8027158:	ee07 9a90 	vmov	s15, r9
 802715c:	1be2      	subs	r2, r4, r7
 802715e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027162:	2d00      	cmp	r5, #0
 8027164:	bf08      	it	eq
 8027166:	461d      	moveq	r5, r3
 8027168:	2b10      	cmp	r3, #16
 802716a:	9209      	str	r2, [sp, #36]	@ 0x24
 802716c:	461a      	mov	r2, r3
 802716e:	bfa8      	it	ge
 8027170:	2210      	movge	r2, #16
 8027172:	2b09      	cmp	r3, #9
 8027174:	ec5b ab17 	vmov	sl, fp, d7
 8027178:	dc15      	bgt.n	80271a6 <_strtod_l+0x3c6>
 802717a:	1be1      	subs	r1, r4, r7
 802717c:	2900      	cmp	r1, #0
 802717e:	f43f ae6a 	beq.w	8026e56 <_strtod_l+0x76>
 8027182:	eba4 0107 	sub.w	r1, r4, r7
 8027186:	dd72      	ble.n	802726e <_strtod_l+0x48e>
 8027188:	2916      	cmp	r1, #22
 802718a:	dc59      	bgt.n	8027240 <_strtod_l+0x460>
 802718c:	4b6f      	ldr	r3, [pc, #444]	@ (802734c <_strtod_l+0x56c>)
 802718e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027194:	ed93 7b00 	vldr	d7, [r3]
 8027198:	ec4b ab16 	vmov	d6, sl, fp
 802719c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80271a0:	ec5b ab17 	vmov	sl, fp, d7
 80271a4:	e657      	b.n	8026e56 <_strtod_l+0x76>
 80271a6:	4969      	ldr	r1, [pc, #420]	@ (802734c <_strtod_l+0x56c>)
 80271a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80271ac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80271b0:	ee06 6a90 	vmov	s13, r6
 80271b4:	2b0f      	cmp	r3, #15
 80271b6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80271ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80271be:	ec5b ab16 	vmov	sl, fp, d6
 80271c2:	ddda      	ble.n	802717a <_strtod_l+0x39a>
 80271c4:	1a9a      	subs	r2, r3, r2
 80271c6:	1be1      	subs	r1, r4, r7
 80271c8:	440a      	add	r2, r1
 80271ca:	2a00      	cmp	r2, #0
 80271cc:	f340 8094 	ble.w	80272f8 <_strtod_l+0x518>
 80271d0:	f012 000f 	ands.w	r0, r2, #15
 80271d4:	d00a      	beq.n	80271ec <_strtod_l+0x40c>
 80271d6:	495d      	ldr	r1, [pc, #372]	@ (802734c <_strtod_l+0x56c>)
 80271d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80271dc:	ed91 7b00 	vldr	d7, [r1]
 80271e0:	ec4b ab16 	vmov	d6, sl, fp
 80271e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80271e8:	ec5b ab17 	vmov	sl, fp, d7
 80271ec:	f032 020f 	bics.w	r2, r2, #15
 80271f0:	d073      	beq.n	80272da <_strtod_l+0x4fa>
 80271f2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80271f6:	dd47      	ble.n	8027288 <_strtod_l+0x4a8>
 80271f8:	2400      	movs	r4, #0
 80271fa:	4625      	mov	r5, r4
 80271fc:	9407      	str	r4, [sp, #28]
 80271fe:	4626      	mov	r6, r4
 8027200:	9a05      	ldr	r2, [sp, #20]
 8027202:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8027358 <_strtod_l+0x578>
 8027206:	2322      	movs	r3, #34	@ 0x22
 8027208:	6013      	str	r3, [r2, #0]
 802720a:	f04f 0a00 	mov.w	sl, #0
 802720e:	9b07      	ldr	r3, [sp, #28]
 8027210:	2b00      	cmp	r3, #0
 8027212:	f43f ae20 	beq.w	8026e56 <_strtod_l+0x76>
 8027216:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027218:	9805      	ldr	r0, [sp, #20]
 802721a:	f7ff f955 	bl	80264c8 <_Bfree>
 802721e:	9805      	ldr	r0, [sp, #20]
 8027220:	4631      	mov	r1, r6
 8027222:	f7ff f951 	bl	80264c8 <_Bfree>
 8027226:	9805      	ldr	r0, [sp, #20]
 8027228:	4629      	mov	r1, r5
 802722a:	f7ff f94d 	bl	80264c8 <_Bfree>
 802722e:	9907      	ldr	r1, [sp, #28]
 8027230:	9805      	ldr	r0, [sp, #20]
 8027232:	f7ff f949 	bl	80264c8 <_Bfree>
 8027236:	9805      	ldr	r0, [sp, #20]
 8027238:	4621      	mov	r1, r4
 802723a:	f7ff f945 	bl	80264c8 <_Bfree>
 802723e:	e60a      	b.n	8026e56 <_strtod_l+0x76>
 8027240:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8027244:	1be0      	subs	r0, r4, r7
 8027246:	4281      	cmp	r1, r0
 8027248:	dbbc      	blt.n	80271c4 <_strtod_l+0x3e4>
 802724a:	4a40      	ldr	r2, [pc, #256]	@ (802734c <_strtod_l+0x56c>)
 802724c:	f1c3 030f 	rsb	r3, r3, #15
 8027250:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8027254:	ed91 7b00 	vldr	d7, [r1]
 8027258:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802725a:	ec4b ab16 	vmov	d6, sl, fp
 802725e:	1acb      	subs	r3, r1, r3
 8027260:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8027264:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027268:	ed92 6b00 	vldr	d6, [r2]
 802726c:	e796      	b.n	802719c <_strtod_l+0x3bc>
 802726e:	3116      	adds	r1, #22
 8027270:	dba8      	blt.n	80271c4 <_strtod_l+0x3e4>
 8027272:	4b36      	ldr	r3, [pc, #216]	@ (802734c <_strtod_l+0x56c>)
 8027274:	1b3c      	subs	r4, r7, r4
 8027276:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802727a:	ed94 7b00 	vldr	d7, [r4]
 802727e:	ec4b ab16 	vmov	d6, sl, fp
 8027282:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027286:	e78b      	b.n	80271a0 <_strtod_l+0x3c0>
 8027288:	2000      	movs	r0, #0
 802728a:	ec4b ab17 	vmov	d7, sl, fp
 802728e:	4e30      	ldr	r6, [pc, #192]	@ (8027350 <_strtod_l+0x570>)
 8027290:	1112      	asrs	r2, r2, #4
 8027292:	4601      	mov	r1, r0
 8027294:	2a01      	cmp	r2, #1
 8027296:	dc23      	bgt.n	80272e0 <_strtod_l+0x500>
 8027298:	b108      	cbz	r0, 802729e <_strtod_l+0x4be>
 802729a:	ec5b ab17 	vmov	sl, fp, d7
 802729e:	4a2c      	ldr	r2, [pc, #176]	@ (8027350 <_strtod_l+0x570>)
 80272a0:	482c      	ldr	r0, [pc, #176]	@ (8027354 <_strtod_l+0x574>)
 80272a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80272a6:	ed92 7b00 	vldr	d7, [r2]
 80272aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80272ae:	ec4b ab16 	vmov	d6, sl, fp
 80272b2:	4a29      	ldr	r2, [pc, #164]	@ (8027358 <_strtod_l+0x578>)
 80272b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80272b8:	ee17 1a90 	vmov	r1, s15
 80272bc:	400a      	ands	r2, r1
 80272be:	4282      	cmp	r2, r0
 80272c0:	ec5b ab17 	vmov	sl, fp, d7
 80272c4:	d898      	bhi.n	80271f8 <_strtod_l+0x418>
 80272c6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80272ca:	4282      	cmp	r2, r0
 80272cc:	bf86      	itte	hi
 80272ce:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 802735c <_strtod_l+0x57c>
 80272d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80272d6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80272da:	2200      	movs	r2, #0
 80272dc:	9206      	str	r2, [sp, #24]
 80272de:	e076      	b.n	80273ce <_strtod_l+0x5ee>
 80272e0:	f012 0f01 	tst.w	r2, #1
 80272e4:	d004      	beq.n	80272f0 <_strtod_l+0x510>
 80272e6:	ed96 6b00 	vldr	d6, [r6]
 80272ea:	2001      	movs	r0, #1
 80272ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80272f0:	3101      	adds	r1, #1
 80272f2:	1052      	asrs	r2, r2, #1
 80272f4:	3608      	adds	r6, #8
 80272f6:	e7cd      	b.n	8027294 <_strtod_l+0x4b4>
 80272f8:	d0ef      	beq.n	80272da <_strtod_l+0x4fa>
 80272fa:	4252      	negs	r2, r2
 80272fc:	f012 000f 	ands.w	r0, r2, #15
 8027300:	d00a      	beq.n	8027318 <_strtod_l+0x538>
 8027302:	4912      	ldr	r1, [pc, #72]	@ (802734c <_strtod_l+0x56c>)
 8027304:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027308:	ed91 7b00 	vldr	d7, [r1]
 802730c:	ec4b ab16 	vmov	d6, sl, fp
 8027310:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027314:	ec5b ab17 	vmov	sl, fp, d7
 8027318:	1112      	asrs	r2, r2, #4
 802731a:	d0de      	beq.n	80272da <_strtod_l+0x4fa>
 802731c:	2a1f      	cmp	r2, #31
 802731e:	dd1f      	ble.n	8027360 <_strtod_l+0x580>
 8027320:	2400      	movs	r4, #0
 8027322:	4625      	mov	r5, r4
 8027324:	9407      	str	r4, [sp, #28]
 8027326:	4626      	mov	r6, r4
 8027328:	9a05      	ldr	r2, [sp, #20]
 802732a:	2322      	movs	r3, #34	@ 0x22
 802732c:	f04f 0a00 	mov.w	sl, #0
 8027330:	f04f 0b00 	mov.w	fp, #0
 8027334:	6013      	str	r3, [r2, #0]
 8027336:	e76a      	b.n	802720e <_strtod_l+0x42e>
 8027338:	0802d27d 	.word	0x0802d27d
 802733c:	0802d4b4 	.word	0x0802d4b4
 8027340:	0802d275 	.word	0x0802d275
 8027344:	0802d2e6 	.word	0x0802d2e6
 8027348:	0802d2e2 	.word	0x0802d2e2
 802734c:	0802d3e8 	.word	0x0802d3e8
 8027350:	0802d3c0 	.word	0x0802d3c0
 8027354:	7ca00000 	.word	0x7ca00000
 8027358:	7ff00000 	.word	0x7ff00000
 802735c:	7fefffff 	.word	0x7fefffff
 8027360:	f012 0110 	ands.w	r1, r2, #16
 8027364:	bf18      	it	ne
 8027366:	216a      	movne	r1, #106	@ 0x6a
 8027368:	9106      	str	r1, [sp, #24]
 802736a:	ec4b ab17 	vmov	d7, sl, fp
 802736e:	49b0      	ldr	r1, [pc, #704]	@ (8027630 <_strtod_l+0x850>)
 8027370:	2000      	movs	r0, #0
 8027372:	07d6      	lsls	r6, r2, #31
 8027374:	d504      	bpl.n	8027380 <_strtod_l+0x5a0>
 8027376:	ed91 6b00 	vldr	d6, [r1]
 802737a:	2001      	movs	r0, #1
 802737c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027380:	1052      	asrs	r2, r2, #1
 8027382:	f101 0108 	add.w	r1, r1, #8
 8027386:	d1f4      	bne.n	8027372 <_strtod_l+0x592>
 8027388:	b108      	cbz	r0, 802738e <_strtod_l+0x5ae>
 802738a:	ec5b ab17 	vmov	sl, fp, d7
 802738e:	9a06      	ldr	r2, [sp, #24]
 8027390:	b1b2      	cbz	r2, 80273c0 <_strtod_l+0x5e0>
 8027392:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8027396:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802739a:	2a00      	cmp	r2, #0
 802739c:	4658      	mov	r0, fp
 802739e:	dd0f      	ble.n	80273c0 <_strtod_l+0x5e0>
 80273a0:	2a1f      	cmp	r2, #31
 80273a2:	dd55      	ble.n	8027450 <_strtod_l+0x670>
 80273a4:	2a34      	cmp	r2, #52	@ 0x34
 80273a6:	bfde      	ittt	le
 80273a8:	f04f 32ff 	movle.w	r2, #4294967295
 80273ac:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80273b0:	408a      	lslle	r2, r1
 80273b2:	f04f 0a00 	mov.w	sl, #0
 80273b6:	bfcc      	ite	gt
 80273b8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80273bc:	ea02 0b00 	andle.w	fp, r2, r0
 80273c0:	ec4b ab17 	vmov	d7, sl, fp
 80273c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80273c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273cc:	d0a8      	beq.n	8027320 <_strtod_l+0x540>
 80273ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80273d0:	9805      	ldr	r0, [sp, #20]
 80273d2:	f8cd 9000 	str.w	r9, [sp]
 80273d6:	462a      	mov	r2, r5
 80273d8:	f7ff f8de 	bl	8026598 <__s2b>
 80273dc:	9007      	str	r0, [sp, #28]
 80273de:	2800      	cmp	r0, #0
 80273e0:	f43f af0a 	beq.w	80271f8 <_strtod_l+0x418>
 80273e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273e6:	1b3f      	subs	r7, r7, r4
 80273e8:	2b00      	cmp	r3, #0
 80273ea:	bfb4      	ite	lt
 80273ec:	463b      	movlt	r3, r7
 80273ee:	2300      	movge	r3, #0
 80273f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80273f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273f4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8027620 <_strtod_l+0x840>
 80273f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80273fc:	2400      	movs	r4, #0
 80273fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8027400:	4625      	mov	r5, r4
 8027402:	9b07      	ldr	r3, [sp, #28]
 8027404:	9805      	ldr	r0, [sp, #20]
 8027406:	6859      	ldr	r1, [r3, #4]
 8027408:	f7ff f81e 	bl	8026448 <_Balloc>
 802740c:	4606      	mov	r6, r0
 802740e:	2800      	cmp	r0, #0
 8027410:	f43f aef6 	beq.w	8027200 <_strtod_l+0x420>
 8027414:	9b07      	ldr	r3, [sp, #28]
 8027416:	691a      	ldr	r2, [r3, #16]
 8027418:	ec4b ab19 	vmov	d9, sl, fp
 802741c:	3202      	adds	r2, #2
 802741e:	f103 010c 	add.w	r1, r3, #12
 8027422:	0092      	lsls	r2, r2, #2
 8027424:	300c      	adds	r0, #12
 8027426:	f7fe f9b2 	bl	802578e <memcpy>
 802742a:	eeb0 0b49 	vmov.f64	d0, d9
 802742e:	9805      	ldr	r0, [sp, #20]
 8027430:	aa14      	add	r2, sp, #80	@ 0x50
 8027432:	a913      	add	r1, sp, #76	@ 0x4c
 8027434:	f7ff fbec 	bl	8026c10 <__d2b>
 8027438:	9012      	str	r0, [sp, #72]	@ 0x48
 802743a:	2800      	cmp	r0, #0
 802743c:	f43f aee0 	beq.w	8027200 <_strtod_l+0x420>
 8027440:	9805      	ldr	r0, [sp, #20]
 8027442:	2101      	movs	r1, #1
 8027444:	f7ff f93e 	bl	80266c4 <__i2b>
 8027448:	4605      	mov	r5, r0
 802744a:	b940      	cbnz	r0, 802745e <_strtod_l+0x67e>
 802744c:	2500      	movs	r5, #0
 802744e:	e6d7      	b.n	8027200 <_strtod_l+0x420>
 8027450:	f04f 31ff 	mov.w	r1, #4294967295
 8027454:	fa01 f202 	lsl.w	r2, r1, r2
 8027458:	ea02 0a0a 	and.w	sl, r2, sl
 802745c:	e7b0      	b.n	80273c0 <_strtod_l+0x5e0>
 802745e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8027460:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027462:	2f00      	cmp	r7, #0
 8027464:	bfab      	itete	ge
 8027466:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8027468:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802746a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 802746e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8027472:	bfac      	ite	ge
 8027474:	eb07 0903 	addge.w	r9, r7, r3
 8027478:	eba3 0807 	sublt.w	r8, r3, r7
 802747c:	9b06      	ldr	r3, [sp, #24]
 802747e:	1aff      	subs	r7, r7, r3
 8027480:	4417      	add	r7, r2
 8027482:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8027486:	4a6b      	ldr	r2, [pc, #428]	@ (8027634 <_strtod_l+0x854>)
 8027488:	3f01      	subs	r7, #1
 802748a:	4297      	cmp	r7, r2
 802748c:	da51      	bge.n	8027532 <_strtod_l+0x752>
 802748e:	1bd1      	subs	r1, r2, r7
 8027490:	291f      	cmp	r1, #31
 8027492:	eba3 0301 	sub.w	r3, r3, r1
 8027496:	f04f 0201 	mov.w	r2, #1
 802749a:	dc3e      	bgt.n	802751a <_strtod_l+0x73a>
 802749c:	408a      	lsls	r2, r1
 802749e:	920c      	str	r2, [sp, #48]	@ 0x30
 80274a0:	2200      	movs	r2, #0
 80274a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80274a4:	eb09 0703 	add.w	r7, r9, r3
 80274a8:	4498      	add	r8, r3
 80274aa:	9b06      	ldr	r3, [sp, #24]
 80274ac:	45b9      	cmp	r9, r7
 80274ae:	4498      	add	r8, r3
 80274b0:	464b      	mov	r3, r9
 80274b2:	bfa8      	it	ge
 80274b4:	463b      	movge	r3, r7
 80274b6:	4543      	cmp	r3, r8
 80274b8:	bfa8      	it	ge
 80274ba:	4643      	movge	r3, r8
 80274bc:	2b00      	cmp	r3, #0
 80274be:	bfc2      	ittt	gt
 80274c0:	1aff      	subgt	r7, r7, r3
 80274c2:	eba8 0803 	subgt.w	r8, r8, r3
 80274c6:	eba9 0903 	subgt.w	r9, r9, r3
 80274ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	dd16      	ble.n	80274fe <_strtod_l+0x71e>
 80274d0:	4629      	mov	r1, r5
 80274d2:	9805      	ldr	r0, [sp, #20]
 80274d4:	461a      	mov	r2, r3
 80274d6:	f7ff f9b5 	bl	8026844 <__pow5mult>
 80274da:	4605      	mov	r5, r0
 80274dc:	2800      	cmp	r0, #0
 80274de:	d0b5      	beq.n	802744c <_strtod_l+0x66c>
 80274e0:	4601      	mov	r1, r0
 80274e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80274e4:	9805      	ldr	r0, [sp, #20]
 80274e6:	f7ff f903 	bl	80266f0 <__multiply>
 80274ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80274ec:	2800      	cmp	r0, #0
 80274ee:	f43f ae87 	beq.w	8027200 <_strtod_l+0x420>
 80274f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80274f4:	9805      	ldr	r0, [sp, #20]
 80274f6:	f7fe ffe7 	bl	80264c8 <_Bfree>
 80274fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80274fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80274fe:	2f00      	cmp	r7, #0
 8027500:	dc1b      	bgt.n	802753a <_strtod_l+0x75a>
 8027502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027504:	2b00      	cmp	r3, #0
 8027506:	dd21      	ble.n	802754c <_strtod_l+0x76c>
 8027508:	4631      	mov	r1, r6
 802750a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802750c:	9805      	ldr	r0, [sp, #20]
 802750e:	f7ff f999 	bl	8026844 <__pow5mult>
 8027512:	4606      	mov	r6, r0
 8027514:	b9d0      	cbnz	r0, 802754c <_strtod_l+0x76c>
 8027516:	2600      	movs	r6, #0
 8027518:	e672      	b.n	8027200 <_strtod_l+0x420>
 802751a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 802751e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8027522:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8027526:	37e2      	adds	r7, #226	@ 0xe2
 8027528:	fa02 f107 	lsl.w	r1, r2, r7
 802752c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802752e:	920c      	str	r2, [sp, #48]	@ 0x30
 8027530:	e7b8      	b.n	80274a4 <_strtod_l+0x6c4>
 8027532:	2200      	movs	r2, #0
 8027534:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027536:	2201      	movs	r2, #1
 8027538:	e7f9      	b.n	802752e <_strtod_l+0x74e>
 802753a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802753c:	9805      	ldr	r0, [sp, #20]
 802753e:	463a      	mov	r2, r7
 8027540:	f7ff f9da 	bl	80268f8 <__lshift>
 8027544:	9012      	str	r0, [sp, #72]	@ 0x48
 8027546:	2800      	cmp	r0, #0
 8027548:	d1db      	bne.n	8027502 <_strtod_l+0x722>
 802754a:	e659      	b.n	8027200 <_strtod_l+0x420>
 802754c:	f1b8 0f00 	cmp.w	r8, #0
 8027550:	dd07      	ble.n	8027562 <_strtod_l+0x782>
 8027552:	4631      	mov	r1, r6
 8027554:	9805      	ldr	r0, [sp, #20]
 8027556:	4642      	mov	r2, r8
 8027558:	f7ff f9ce 	bl	80268f8 <__lshift>
 802755c:	4606      	mov	r6, r0
 802755e:	2800      	cmp	r0, #0
 8027560:	d0d9      	beq.n	8027516 <_strtod_l+0x736>
 8027562:	f1b9 0f00 	cmp.w	r9, #0
 8027566:	dd08      	ble.n	802757a <_strtod_l+0x79a>
 8027568:	4629      	mov	r1, r5
 802756a:	9805      	ldr	r0, [sp, #20]
 802756c:	464a      	mov	r2, r9
 802756e:	f7ff f9c3 	bl	80268f8 <__lshift>
 8027572:	4605      	mov	r5, r0
 8027574:	2800      	cmp	r0, #0
 8027576:	f43f ae43 	beq.w	8027200 <_strtod_l+0x420>
 802757a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802757c:	9805      	ldr	r0, [sp, #20]
 802757e:	4632      	mov	r2, r6
 8027580:	f7ff fa42 	bl	8026a08 <__mdiff>
 8027584:	4604      	mov	r4, r0
 8027586:	2800      	cmp	r0, #0
 8027588:	f43f ae3a 	beq.w	8027200 <_strtod_l+0x420>
 802758c:	2300      	movs	r3, #0
 802758e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8027592:	60c3      	str	r3, [r0, #12]
 8027594:	4629      	mov	r1, r5
 8027596:	f7ff fa1b 	bl	80269d0 <__mcmp>
 802759a:	2800      	cmp	r0, #0
 802759c:	da4e      	bge.n	802763c <_strtod_l+0x85c>
 802759e:	ea58 080a 	orrs.w	r8, r8, sl
 80275a2:	d174      	bne.n	802768e <_strtod_l+0x8ae>
 80275a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80275a8:	2b00      	cmp	r3, #0
 80275aa:	d170      	bne.n	802768e <_strtod_l+0x8ae>
 80275ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80275b0:	0d1b      	lsrs	r3, r3, #20
 80275b2:	051b      	lsls	r3, r3, #20
 80275b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80275b8:	d969      	bls.n	802768e <_strtod_l+0x8ae>
 80275ba:	6963      	ldr	r3, [r4, #20]
 80275bc:	b913      	cbnz	r3, 80275c4 <_strtod_l+0x7e4>
 80275be:	6923      	ldr	r3, [r4, #16]
 80275c0:	2b01      	cmp	r3, #1
 80275c2:	dd64      	ble.n	802768e <_strtod_l+0x8ae>
 80275c4:	4621      	mov	r1, r4
 80275c6:	2201      	movs	r2, #1
 80275c8:	9805      	ldr	r0, [sp, #20]
 80275ca:	f7ff f995 	bl	80268f8 <__lshift>
 80275ce:	4629      	mov	r1, r5
 80275d0:	4604      	mov	r4, r0
 80275d2:	f7ff f9fd 	bl	80269d0 <__mcmp>
 80275d6:	2800      	cmp	r0, #0
 80275d8:	dd59      	ble.n	802768e <_strtod_l+0x8ae>
 80275da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80275de:	9a06      	ldr	r2, [sp, #24]
 80275e0:	0d1b      	lsrs	r3, r3, #20
 80275e2:	051b      	lsls	r3, r3, #20
 80275e4:	2a00      	cmp	r2, #0
 80275e6:	d070      	beq.n	80276ca <_strtod_l+0x8ea>
 80275e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80275ec:	d86d      	bhi.n	80276ca <_strtod_l+0x8ea>
 80275ee:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80275f2:	f67f ae99 	bls.w	8027328 <_strtod_l+0x548>
 80275f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8027628 <_strtod_l+0x848>
 80275fa:	ec4b ab16 	vmov	d6, sl, fp
 80275fe:	4b0e      	ldr	r3, [pc, #56]	@ (8027638 <_strtod_l+0x858>)
 8027600:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027604:	ee17 2a90 	vmov	r2, s15
 8027608:	4013      	ands	r3, r2
 802760a:	ec5b ab17 	vmov	sl, fp, d7
 802760e:	2b00      	cmp	r3, #0
 8027610:	f47f ae01 	bne.w	8027216 <_strtod_l+0x436>
 8027614:	9a05      	ldr	r2, [sp, #20]
 8027616:	2322      	movs	r3, #34	@ 0x22
 8027618:	6013      	str	r3, [r2, #0]
 802761a:	e5fc      	b.n	8027216 <_strtod_l+0x436>
 802761c:	f3af 8000 	nop.w
 8027620:	ffc00000 	.word	0xffc00000
 8027624:	41dfffff 	.word	0x41dfffff
 8027628:	00000000 	.word	0x00000000
 802762c:	39500000 	.word	0x39500000
 8027630:	0802d4e0 	.word	0x0802d4e0
 8027634:	fffffc02 	.word	0xfffffc02
 8027638:	7ff00000 	.word	0x7ff00000
 802763c:	46d9      	mov	r9, fp
 802763e:	d15d      	bne.n	80276fc <_strtod_l+0x91c>
 8027640:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027644:	f1b8 0f00 	cmp.w	r8, #0
 8027648:	d02a      	beq.n	80276a0 <_strtod_l+0x8c0>
 802764a:	4aab      	ldr	r2, [pc, #684]	@ (80278f8 <_strtod_l+0xb18>)
 802764c:	4293      	cmp	r3, r2
 802764e:	d12a      	bne.n	80276a6 <_strtod_l+0x8c6>
 8027650:	9b06      	ldr	r3, [sp, #24]
 8027652:	4652      	mov	r2, sl
 8027654:	b1fb      	cbz	r3, 8027696 <_strtod_l+0x8b6>
 8027656:	4ba9      	ldr	r3, [pc, #676]	@ (80278fc <_strtod_l+0xb1c>)
 8027658:	ea0b 0303 	and.w	r3, fp, r3
 802765c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8027660:	f04f 31ff 	mov.w	r1, #4294967295
 8027664:	d81a      	bhi.n	802769c <_strtod_l+0x8bc>
 8027666:	0d1b      	lsrs	r3, r3, #20
 8027668:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802766c:	fa01 f303 	lsl.w	r3, r1, r3
 8027670:	429a      	cmp	r2, r3
 8027672:	d118      	bne.n	80276a6 <_strtod_l+0x8c6>
 8027674:	4ba2      	ldr	r3, [pc, #648]	@ (8027900 <_strtod_l+0xb20>)
 8027676:	4599      	cmp	r9, r3
 8027678:	d102      	bne.n	8027680 <_strtod_l+0x8a0>
 802767a:	3201      	adds	r2, #1
 802767c:	f43f adc0 	beq.w	8027200 <_strtod_l+0x420>
 8027680:	4b9e      	ldr	r3, [pc, #632]	@ (80278fc <_strtod_l+0xb1c>)
 8027682:	ea09 0303 	and.w	r3, r9, r3
 8027686:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802768a:	f04f 0a00 	mov.w	sl, #0
 802768e:	9b06      	ldr	r3, [sp, #24]
 8027690:	2b00      	cmp	r3, #0
 8027692:	d1b0      	bne.n	80275f6 <_strtod_l+0x816>
 8027694:	e5bf      	b.n	8027216 <_strtod_l+0x436>
 8027696:	f04f 33ff 	mov.w	r3, #4294967295
 802769a:	e7e9      	b.n	8027670 <_strtod_l+0x890>
 802769c:	460b      	mov	r3, r1
 802769e:	e7e7      	b.n	8027670 <_strtod_l+0x890>
 80276a0:	ea53 030a 	orrs.w	r3, r3, sl
 80276a4:	d099      	beq.n	80275da <_strtod_l+0x7fa>
 80276a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80276a8:	b1c3      	cbz	r3, 80276dc <_strtod_l+0x8fc>
 80276aa:	ea13 0f09 	tst.w	r3, r9
 80276ae:	d0ee      	beq.n	802768e <_strtod_l+0x8ae>
 80276b0:	9a06      	ldr	r2, [sp, #24]
 80276b2:	4650      	mov	r0, sl
 80276b4:	4659      	mov	r1, fp
 80276b6:	f1b8 0f00 	cmp.w	r8, #0
 80276ba:	d013      	beq.n	80276e4 <_strtod_l+0x904>
 80276bc:	f7ff fb73 	bl	8026da6 <sulp>
 80276c0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80276c4:	ec5b ab17 	vmov	sl, fp, d7
 80276c8:	e7e1      	b.n	802768e <_strtod_l+0x8ae>
 80276ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80276ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80276d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80276d6:	f04f 3aff 	mov.w	sl, #4294967295
 80276da:	e7d8      	b.n	802768e <_strtod_l+0x8ae>
 80276dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80276de:	ea13 0f0a 	tst.w	r3, sl
 80276e2:	e7e4      	b.n	80276ae <_strtod_l+0x8ce>
 80276e4:	f7ff fb5f 	bl	8026da6 <sulp>
 80276e8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80276ec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80276f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80276f4:	ec5b ab10 	vmov	sl, fp, d0
 80276f8:	d1c9      	bne.n	802768e <_strtod_l+0x8ae>
 80276fa:	e615      	b.n	8027328 <_strtod_l+0x548>
 80276fc:	4629      	mov	r1, r5
 80276fe:	4620      	mov	r0, r4
 8027700:	f7ff fade 	bl	8026cc0 <__ratio>
 8027704:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8027708:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027710:	d85d      	bhi.n	80277ce <_strtod_l+0x9ee>
 8027712:	f1b8 0f00 	cmp.w	r8, #0
 8027716:	d164      	bne.n	80277e2 <_strtod_l+0xa02>
 8027718:	f1ba 0f00 	cmp.w	sl, #0
 802771c:	d14b      	bne.n	80277b6 <_strtod_l+0x9d6>
 802771e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027722:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8027726:	2b00      	cmp	r3, #0
 8027728:	d160      	bne.n	80277ec <_strtod_l+0xa0c>
 802772a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802772e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8027732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027736:	d401      	bmi.n	802773c <_strtod_l+0x95c>
 8027738:	ee20 8b08 	vmul.f64	d8, d0, d8
 802773c:	eeb1 ab48 	vneg.f64	d10, d8
 8027740:	486e      	ldr	r0, [pc, #440]	@ (80278fc <_strtod_l+0xb1c>)
 8027742:	4970      	ldr	r1, [pc, #448]	@ (8027904 <_strtod_l+0xb24>)
 8027744:	ea09 0700 	and.w	r7, r9, r0
 8027748:	428f      	cmp	r7, r1
 802774a:	ec53 2b1a 	vmov	r2, r3, d10
 802774e:	d17d      	bne.n	802784c <_strtod_l+0xa6c>
 8027750:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8027754:	ec4b ab1c 	vmov	d12, sl, fp
 8027758:	eeb0 0b4c 	vmov.f64	d0, d12
 802775c:	f7ff f9e8 	bl	8026b30 <__ulp>
 8027760:	4866      	ldr	r0, [pc, #408]	@ (80278fc <_strtod_l+0xb1c>)
 8027762:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8027766:	ee1c 3a90 	vmov	r3, s25
 802776a:	4a67      	ldr	r2, [pc, #412]	@ (8027908 <_strtod_l+0xb28>)
 802776c:	ea03 0100 	and.w	r1, r3, r0
 8027770:	4291      	cmp	r1, r2
 8027772:	ec5b ab1c 	vmov	sl, fp, d12
 8027776:	d93c      	bls.n	80277f2 <_strtod_l+0xa12>
 8027778:	ee19 2a90 	vmov	r2, s19
 802777c:	4b60      	ldr	r3, [pc, #384]	@ (8027900 <_strtod_l+0xb20>)
 802777e:	429a      	cmp	r2, r3
 8027780:	d104      	bne.n	802778c <_strtod_l+0x9ac>
 8027782:	ee19 3a10 	vmov	r3, s18
 8027786:	3301      	adds	r3, #1
 8027788:	f43f ad3a 	beq.w	8027200 <_strtod_l+0x420>
 802778c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8027900 <_strtod_l+0xb20>
 8027790:	f04f 3aff 	mov.w	sl, #4294967295
 8027794:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027796:	9805      	ldr	r0, [sp, #20]
 8027798:	f7fe fe96 	bl	80264c8 <_Bfree>
 802779c:	9805      	ldr	r0, [sp, #20]
 802779e:	4631      	mov	r1, r6
 80277a0:	f7fe fe92 	bl	80264c8 <_Bfree>
 80277a4:	9805      	ldr	r0, [sp, #20]
 80277a6:	4629      	mov	r1, r5
 80277a8:	f7fe fe8e 	bl	80264c8 <_Bfree>
 80277ac:	9805      	ldr	r0, [sp, #20]
 80277ae:	4621      	mov	r1, r4
 80277b0:	f7fe fe8a 	bl	80264c8 <_Bfree>
 80277b4:	e625      	b.n	8027402 <_strtod_l+0x622>
 80277b6:	f1ba 0f01 	cmp.w	sl, #1
 80277ba:	d103      	bne.n	80277c4 <_strtod_l+0x9e4>
 80277bc:	f1bb 0f00 	cmp.w	fp, #0
 80277c0:	f43f adb2 	beq.w	8027328 <_strtod_l+0x548>
 80277c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80277c8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80277cc:	e7b8      	b.n	8027740 <_strtod_l+0x960>
 80277ce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80277d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80277d6:	f1b8 0f00 	cmp.w	r8, #0
 80277da:	d0af      	beq.n	802773c <_strtod_l+0x95c>
 80277dc:	eeb0 ab48 	vmov.f64	d10, d8
 80277e0:	e7ae      	b.n	8027740 <_strtod_l+0x960>
 80277e2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80277e6:	eeb0 8b4a 	vmov.f64	d8, d10
 80277ea:	e7a9      	b.n	8027740 <_strtod_l+0x960>
 80277ec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80277f0:	e7a6      	b.n	8027740 <_strtod_l+0x960>
 80277f2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80277f6:	9b06      	ldr	r3, [sp, #24]
 80277f8:	46d9      	mov	r9, fp
 80277fa:	2b00      	cmp	r3, #0
 80277fc:	d1ca      	bne.n	8027794 <_strtod_l+0x9b4>
 80277fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027802:	0d1b      	lsrs	r3, r3, #20
 8027804:	051b      	lsls	r3, r3, #20
 8027806:	429f      	cmp	r7, r3
 8027808:	d1c4      	bne.n	8027794 <_strtod_l+0x9b4>
 802780a:	ec51 0b18 	vmov	r0, r1, d8
 802780e:	f7d8 ff93 	bl	8000738 <__aeabi_d2lz>
 8027812:	f7d8 ff4b 	bl	80006ac <__aeabi_l2d>
 8027816:	f3cb 0913 	ubfx	r9, fp, #0, #20
 802781a:	ec41 0b17 	vmov	d7, r0, r1
 802781e:	ea49 090a 	orr.w	r9, r9, sl
 8027822:	ea59 0908 	orrs.w	r9, r9, r8
 8027826:	ee38 8b47 	vsub.f64	d8, d8, d7
 802782a:	d03c      	beq.n	80278a6 <_strtod_l+0xac6>
 802782c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80278e0 <_strtod_l+0xb00>
 8027830:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027838:	f53f aced 	bmi.w	8027216 <_strtod_l+0x436>
 802783c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80278e8 <_strtod_l+0xb08>
 8027840:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027848:	dda4      	ble.n	8027794 <_strtod_l+0x9b4>
 802784a:	e4e4      	b.n	8027216 <_strtod_l+0x436>
 802784c:	9906      	ldr	r1, [sp, #24]
 802784e:	b1e1      	cbz	r1, 802788a <_strtod_l+0xaaa>
 8027850:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8027854:	d819      	bhi.n	802788a <_strtod_l+0xaaa>
 8027856:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802785e:	d811      	bhi.n	8027884 <_strtod_l+0xaa4>
 8027860:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8027864:	ee18 3a10 	vmov	r3, s16
 8027868:	2b01      	cmp	r3, #1
 802786a:	bf38      	it	cc
 802786c:	2301      	movcc	r3, #1
 802786e:	ee08 3a10 	vmov	s16, r3
 8027872:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027876:	f1b8 0f00 	cmp.w	r8, #0
 802787a:	d111      	bne.n	80278a0 <_strtod_l+0xac0>
 802787c:	eeb1 7b48 	vneg.f64	d7, d8
 8027880:	ec53 2b17 	vmov	r2, r3, d7
 8027884:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8027888:	1bcb      	subs	r3, r1, r7
 802788a:	eeb0 0b49 	vmov.f64	d0, d9
 802788e:	ec43 2b1a 	vmov	d10, r2, r3
 8027892:	f7ff f94d 	bl	8026b30 <__ulp>
 8027896:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802789a:	ec5b ab19 	vmov	sl, fp, d9
 802789e:	e7aa      	b.n	80277f6 <_strtod_l+0xa16>
 80278a0:	eeb0 7b48 	vmov.f64	d7, d8
 80278a4:	e7ec      	b.n	8027880 <_strtod_l+0xaa0>
 80278a6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80278f0 <_strtod_l+0xb10>
 80278aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80278ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278b2:	f57f af6f 	bpl.w	8027794 <_strtod_l+0x9b4>
 80278b6:	e4ae      	b.n	8027216 <_strtod_l+0x436>
 80278b8:	2300      	movs	r3, #0
 80278ba:	9308      	str	r3, [sp, #32]
 80278bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80278be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80278c0:	6013      	str	r3, [r2, #0]
 80278c2:	f7ff bacc 	b.w	8026e5e <_strtod_l+0x7e>
 80278c6:	2a65      	cmp	r2, #101	@ 0x65
 80278c8:	f43f abbc 	beq.w	8027044 <_strtod_l+0x264>
 80278cc:	2a45      	cmp	r2, #69	@ 0x45
 80278ce:	f43f abb9 	beq.w	8027044 <_strtod_l+0x264>
 80278d2:	2301      	movs	r3, #1
 80278d4:	9306      	str	r3, [sp, #24]
 80278d6:	f7ff bbf0 	b.w	80270ba <_strtod_l+0x2da>
 80278da:	bf00      	nop
 80278dc:	f3af 8000 	nop.w
 80278e0:	94a03595 	.word	0x94a03595
 80278e4:	3fdfffff 	.word	0x3fdfffff
 80278e8:	35afe535 	.word	0x35afe535
 80278ec:	3fe00000 	.word	0x3fe00000
 80278f0:	94a03595 	.word	0x94a03595
 80278f4:	3fcfffff 	.word	0x3fcfffff
 80278f8:	000fffff 	.word	0x000fffff
 80278fc:	7ff00000 	.word	0x7ff00000
 8027900:	7fefffff 	.word	0x7fefffff
 8027904:	7fe00000 	.word	0x7fe00000
 8027908:	7c9fffff 	.word	0x7c9fffff

0802790c <_strtod_r>:
 802790c:	4b01      	ldr	r3, [pc, #4]	@ (8027914 <_strtod_r+0x8>)
 802790e:	f7ff ba67 	b.w	8026de0 <_strtod_l>
 8027912:	bf00      	nop
 8027914:	24000274 	.word	0x24000274

08027918 <__ssputs_r>:
 8027918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802791c:	688e      	ldr	r6, [r1, #8]
 802791e:	461f      	mov	r7, r3
 8027920:	42be      	cmp	r6, r7
 8027922:	680b      	ldr	r3, [r1, #0]
 8027924:	4682      	mov	sl, r0
 8027926:	460c      	mov	r4, r1
 8027928:	4690      	mov	r8, r2
 802792a:	d82d      	bhi.n	8027988 <__ssputs_r+0x70>
 802792c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8027934:	d026      	beq.n	8027984 <__ssputs_r+0x6c>
 8027936:	6965      	ldr	r5, [r4, #20]
 8027938:	6909      	ldr	r1, [r1, #16]
 802793a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802793e:	eba3 0901 	sub.w	r9, r3, r1
 8027942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027946:	1c7b      	adds	r3, r7, #1
 8027948:	444b      	add	r3, r9
 802794a:	106d      	asrs	r5, r5, #1
 802794c:	429d      	cmp	r5, r3
 802794e:	bf38      	it	cc
 8027950:	461d      	movcc	r5, r3
 8027952:	0553      	lsls	r3, r2, #21
 8027954:	d527      	bpl.n	80279a6 <__ssputs_r+0x8e>
 8027956:	4629      	mov	r1, r5
 8027958:	f7fc fd42 	bl	80243e0 <_malloc_r>
 802795c:	4606      	mov	r6, r0
 802795e:	b360      	cbz	r0, 80279ba <__ssputs_r+0xa2>
 8027960:	6921      	ldr	r1, [r4, #16]
 8027962:	464a      	mov	r2, r9
 8027964:	f7fd ff13 	bl	802578e <memcpy>
 8027968:	89a3      	ldrh	r3, [r4, #12]
 802796a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802796e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027972:	81a3      	strh	r3, [r4, #12]
 8027974:	6126      	str	r6, [r4, #16]
 8027976:	6165      	str	r5, [r4, #20]
 8027978:	444e      	add	r6, r9
 802797a:	eba5 0509 	sub.w	r5, r5, r9
 802797e:	6026      	str	r6, [r4, #0]
 8027980:	60a5      	str	r5, [r4, #8]
 8027982:	463e      	mov	r6, r7
 8027984:	42be      	cmp	r6, r7
 8027986:	d900      	bls.n	802798a <__ssputs_r+0x72>
 8027988:	463e      	mov	r6, r7
 802798a:	6820      	ldr	r0, [r4, #0]
 802798c:	4632      	mov	r2, r6
 802798e:	4641      	mov	r1, r8
 8027990:	f7fd fe42 	bl	8025618 <memmove>
 8027994:	68a3      	ldr	r3, [r4, #8]
 8027996:	1b9b      	subs	r3, r3, r6
 8027998:	60a3      	str	r3, [r4, #8]
 802799a:	6823      	ldr	r3, [r4, #0]
 802799c:	4433      	add	r3, r6
 802799e:	6023      	str	r3, [r4, #0]
 80279a0:	2000      	movs	r0, #0
 80279a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80279a6:	462a      	mov	r2, r5
 80279a8:	f001 fa9f 	bl	8028eea <_realloc_r>
 80279ac:	4606      	mov	r6, r0
 80279ae:	2800      	cmp	r0, #0
 80279b0:	d1e0      	bne.n	8027974 <__ssputs_r+0x5c>
 80279b2:	6921      	ldr	r1, [r4, #16]
 80279b4:	4650      	mov	r0, sl
 80279b6:	f7fe fcfd 	bl	80263b4 <_free_r>
 80279ba:	230c      	movs	r3, #12
 80279bc:	f8ca 3000 	str.w	r3, [sl]
 80279c0:	89a3      	ldrh	r3, [r4, #12]
 80279c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80279c6:	81a3      	strh	r3, [r4, #12]
 80279c8:	f04f 30ff 	mov.w	r0, #4294967295
 80279cc:	e7e9      	b.n	80279a2 <__ssputs_r+0x8a>
	...

080279d0 <_svfiprintf_r>:
 80279d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279d4:	4698      	mov	r8, r3
 80279d6:	898b      	ldrh	r3, [r1, #12]
 80279d8:	061b      	lsls	r3, r3, #24
 80279da:	b09d      	sub	sp, #116	@ 0x74
 80279dc:	4607      	mov	r7, r0
 80279de:	460d      	mov	r5, r1
 80279e0:	4614      	mov	r4, r2
 80279e2:	d510      	bpl.n	8027a06 <_svfiprintf_r+0x36>
 80279e4:	690b      	ldr	r3, [r1, #16]
 80279e6:	b973      	cbnz	r3, 8027a06 <_svfiprintf_r+0x36>
 80279e8:	2140      	movs	r1, #64	@ 0x40
 80279ea:	f7fc fcf9 	bl	80243e0 <_malloc_r>
 80279ee:	6028      	str	r0, [r5, #0]
 80279f0:	6128      	str	r0, [r5, #16]
 80279f2:	b930      	cbnz	r0, 8027a02 <_svfiprintf_r+0x32>
 80279f4:	230c      	movs	r3, #12
 80279f6:	603b      	str	r3, [r7, #0]
 80279f8:	f04f 30ff 	mov.w	r0, #4294967295
 80279fc:	b01d      	add	sp, #116	@ 0x74
 80279fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a02:	2340      	movs	r3, #64	@ 0x40
 8027a04:	616b      	str	r3, [r5, #20]
 8027a06:	2300      	movs	r3, #0
 8027a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a0a:	2320      	movs	r3, #32
 8027a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a14:	2330      	movs	r3, #48	@ 0x30
 8027a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8027bb4 <_svfiprintf_r+0x1e4>
 8027a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027a1e:	f04f 0901 	mov.w	r9, #1
 8027a22:	4623      	mov	r3, r4
 8027a24:	469a      	mov	sl, r3
 8027a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a2a:	b10a      	cbz	r2, 8027a30 <_svfiprintf_r+0x60>
 8027a2c:	2a25      	cmp	r2, #37	@ 0x25
 8027a2e:	d1f9      	bne.n	8027a24 <_svfiprintf_r+0x54>
 8027a30:	ebba 0b04 	subs.w	fp, sl, r4
 8027a34:	d00b      	beq.n	8027a4e <_svfiprintf_r+0x7e>
 8027a36:	465b      	mov	r3, fp
 8027a38:	4622      	mov	r2, r4
 8027a3a:	4629      	mov	r1, r5
 8027a3c:	4638      	mov	r0, r7
 8027a3e:	f7ff ff6b 	bl	8027918 <__ssputs_r>
 8027a42:	3001      	adds	r0, #1
 8027a44:	f000 80a7 	beq.w	8027b96 <_svfiprintf_r+0x1c6>
 8027a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027a4a:	445a      	add	r2, fp
 8027a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8027a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8027a52:	2b00      	cmp	r3, #0
 8027a54:	f000 809f 	beq.w	8027b96 <_svfiprintf_r+0x1c6>
 8027a58:	2300      	movs	r3, #0
 8027a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8027a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a62:	f10a 0a01 	add.w	sl, sl, #1
 8027a66:	9304      	str	r3, [sp, #16]
 8027a68:	9307      	str	r3, [sp, #28]
 8027a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8027a70:	4654      	mov	r4, sl
 8027a72:	2205      	movs	r2, #5
 8027a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027a78:	484e      	ldr	r0, [pc, #312]	@ (8027bb4 <_svfiprintf_r+0x1e4>)
 8027a7a:	f7d8 fc31 	bl	80002e0 <memchr>
 8027a7e:	9a04      	ldr	r2, [sp, #16]
 8027a80:	b9d8      	cbnz	r0, 8027aba <_svfiprintf_r+0xea>
 8027a82:	06d0      	lsls	r0, r2, #27
 8027a84:	bf44      	itt	mi
 8027a86:	2320      	movmi	r3, #32
 8027a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027a8c:	0711      	lsls	r1, r2, #28
 8027a8e:	bf44      	itt	mi
 8027a90:	232b      	movmi	r3, #43	@ 0x2b
 8027a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027a96:	f89a 3000 	ldrb.w	r3, [sl]
 8027a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027a9c:	d015      	beq.n	8027aca <_svfiprintf_r+0xfa>
 8027a9e:	9a07      	ldr	r2, [sp, #28]
 8027aa0:	4654      	mov	r4, sl
 8027aa2:	2000      	movs	r0, #0
 8027aa4:	f04f 0c0a 	mov.w	ip, #10
 8027aa8:	4621      	mov	r1, r4
 8027aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027aae:	3b30      	subs	r3, #48	@ 0x30
 8027ab0:	2b09      	cmp	r3, #9
 8027ab2:	d94b      	bls.n	8027b4c <_svfiprintf_r+0x17c>
 8027ab4:	b1b0      	cbz	r0, 8027ae4 <_svfiprintf_r+0x114>
 8027ab6:	9207      	str	r2, [sp, #28]
 8027ab8:	e014      	b.n	8027ae4 <_svfiprintf_r+0x114>
 8027aba:	eba0 0308 	sub.w	r3, r0, r8
 8027abe:	fa09 f303 	lsl.w	r3, r9, r3
 8027ac2:	4313      	orrs	r3, r2
 8027ac4:	9304      	str	r3, [sp, #16]
 8027ac6:	46a2      	mov	sl, r4
 8027ac8:	e7d2      	b.n	8027a70 <_svfiprintf_r+0xa0>
 8027aca:	9b03      	ldr	r3, [sp, #12]
 8027acc:	1d19      	adds	r1, r3, #4
 8027ace:	681b      	ldr	r3, [r3, #0]
 8027ad0:	9103      	str	r1, [sp, #12]
 8027ad2:	2b00      	cmp	r3, #0
 8027ad4:	bfbb      	ittet	lt
 8027ad6:	425b      	neglt	r3, r3
 8027ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8027adc:	9307      	strge	r3, [sp, #28]
 8027ade:	9307      	strlt	r3, [sp, #28]
 8027ae0:	bfb8      	it	lt
 8027ae2:	9204      	strlt	r2, [sp, #16]
 8027ae4:	7823      	ldrb	r3, [r4, #0]
 8027ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8027ae8:	d10a      	bne.n	8027b00 <_svfiprintf_r+0x130>
 8027aea:	7863      	ldrb	r3, [r4, #1]
 8027aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8027aee:	d132      	bne.n	8027b56 <_svfiprintf_r+0x186>
 8027af0:	9b03      	ldr	r3, [sp, #12]
 8027af2:	1d1a      	adds	r2, r3, #4
 8027af4:	681b      	ldr	r3, [r3, #0]
 8027af6:	9203      	str	r2, [sp, #12]
 8027af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027afc:	3402      	adds	r4, #2
 8027afe:	9305      	str	r3, [sp, #20]
 8027b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8027bc4 <_svfiprintf_r+0x1f4>
 8027b04:	7821      	ldrb	r1, [r4, #0]
 8027b06:	2203      	movs	r2, #3
 8027b08:	4650      	mov	r0, sl
 8027b0a:	f7d8 fbe9 	bl	80002e0 <memchr>
 8027b0e:	b138      	cbz	r0, 8027b20 <_svfiprintf_r+0x150>
 8027b10:	9b04      	ldr	r3, [sp, #16]
 8027b12:	eba0 000a 	sub.w	r0, r0, sl
 8027b16:	2240      	movs	r2, #64	@ 0x40
 8027b18:	4082      	lsls	r2, r0
 8027b1a:	4313      	orrs	r3, r2
 8027b1c:	3401      	adds	r4, #1
 8027b1e:	9304      	str	r3, [sp, #16]
 8027b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b24:	4824      	ldr	r0, [pc, #144]	@ (8027bb8 <_svfiprintf_r+0x1e8>)
 8027b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027b2a:	2206      	movs	r2, #6
 8027b2c:	f7d8 fbd8 	bl	80002e0 <memchr>
 8027b30:	2800      	cmp	r0, #0
 8027b32:	d036      	beq.n	8027ba2 <_svfiprintf_r+0x1d2>
 8027b34:	4b21      	ldr	r3, [pc, #132]	@ (8027bbc <_svfiprintf_r+0x1ec>)
 8027b36:	bb1b      	cbnz	r3, 8027b80 <_svfiprintf_r+0x1b0>
 8027b38:	9b03      	ldr	r3, [sp, #12]
 8027b3a:	3307      	adds	r3, #7
 8027b3c:	f023 0307 	bic.w	r3, r3, #7
 8027b40:	3308      	adds	r3, #8
 8027b42:	9303      	str	r3, [sp, #12]
 8027b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b46:	4433      	add	r3, r6
 8027b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b4a:	e76a      	b.n	8027a22 <_svfiprintf_r+0x52>
 8027b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8027b50:	460c      	mov	r4, r1
 8027b52:	2001      	movs	r0, #1
 8027b54:	e7a8      	b.n	8027aa8 <_svfiprintf_r+0xd8>
 8027b56:	2300      	movs	r3, #0
 8027b58:	3401      	adds	r4, #1
 8027b5a:	9305      	str	r3, [sp, #20]
 8027b5c:	4619      	mov	r1, r3
 8027b5e:	f04f 0c0a 	mov.w	ip, #10
 8027b62:	4620      	mov	r0, r4
 8027b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027b68:	3a30      	subs	r2, #48	@ 0x30
 8027b6a:	2a09      	cmp	r2, #9
 8027b6c:	d903      	bls.n	8027b76 <_svfiprintf_r+0x1a6>
 8027b6e:	2b00      	cmp	r3, #0
 8027b70:	d0c6      	beq.n	8027b00 <_svfiprintf_r+0x130>
 8027b72:	9105      	str	r1, [sp, #20]
 8027b74:	e7c4      	b.n	8027b00 <_svfiprintf_r+0x130>
 8027b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8027b7a:	4604      	mov	r4, r0
 8027b7c:	2301      	movs	r3, #1
 8027b7e:	e7f0      	b.n	8027b62 <_svfiprintf_r+0x192>
 8027b80:	ab03      	add	r3, sp, #12
 8027b82:	9300      	str	r3, [sp, #0]
 8027b84:	462a      	mov	r2, r5
 8027b86:	4b0e      	ldr	r3, [pc, #56]	@ (8027bc0 <_svfiprintf_r+0x1f0>)
 8027b88:	a904      	add	r1, sp, #16
 8027b8a:	4638      	mov	r0, r7
 8027b8c:	f7fc fdfc 	bl	8024788 <_printf_float>
 8027b90:	1c42      	adds	r2, r0, #1
 8027b92:	4606      	mov	r6, r0
 8027b94:	d1d6      	bne.n	8027b44 <_svfiprintf_r+0x174>
 8027b96:	89ab      	ldrh	r3, [r5, #12]
 8027b98:	065b      	lsls	r3, r3, #25
 8027b9a:	f53f af2d 	bmi.w	80279f8 <_svfiprintf_r+0x28>
 8027b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027ba0:	e72c      	b.n	80279fc <_svfiprintf_r+0x2c>
 8027ba2:	ab03      	add	r3, sp, #12
 8027ba4:	9300      	str	r3, [sp, #0]
 8027ba6:	462a      	mov	r2, r5
 8027ba8:	4b05      	ldr	r3, [pc, #20]	@ (8027bc0 <_svfiprintf_r+0x1f0>)
 8027baa:	a904      	add	r1, sp, #16
 8027bac:	4638      	mov	r0, r7
 8027bae:	f7fd f873 	bl	8024c98 <_printf_i>
 8027bb2:	e7ed      	b.n	8027b90 <_svfiprintf_r+0x1c0>
 8027bb4:	0802d508 	.word	0x0802d508
 8027bb8:	0802d512 	.word	0x0802d512
 8027bbc:	08024789 	.word	0x08024789
 8027bc0:	08027919 	.word	0x08027919
 8027bc4:	0802d50e 	.word	0x0802d50e

08027bc8 <_sungetc_r>:
 8027bc8:	b538      	push	{r3, r4, r5, lr}
 8027bca:	1c4b      	adds	r3, r1, #1
 8027bcc:	4614      	mov	r4, r2
 8027bce:	d103      	bne.n	8027bd8 <_sungetc_r+0x10>
 8027bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8027bd4:	4628      	mov	r0, r5
 8027bd6:	bd38      	pop	{r3, r4, r5, pc}
 8027bd8:	8993      	ldrh	r3, [r2, #12]
 8027bda:	f023 0320 	bic.w	r3, r3, #32
 8027bde:	8193      	strh	r3, [r2, #12]
 8027be0:	6853      	ldr	r3, [r2, #4]
 8027be2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8027be4:	b2cd      	uxtb	r5, r1
 8027be6:	b18a      	cbz	r2, 8027c0c <_sungetc_r+0x44>
 8027be8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8027bea:	429a      	cmp	r2, r3
 8027bec:	dd08      	ble.n	8027c00 <_sungetc_r+0x38>
 8027bee:	6823      	ldr	r3, [r4, #0]
 8027bf0:	1e5a      	subs	r2, r3, #1
 8027bf2:	6022      	str	r2, [r4, #0]
 8027bf4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8027bf8:	6863      	ldr	r3, [r4, #4]
 8027bfa:	3301      	adds	r3, #1
 8027bfc:	6063      	str	r3, [r4, #4]
 8027bfe:	e7e9      	b.n	8027bd4 <_sungetc_r+0xc>
 8027c00:	4621      	mov	r1, r4
 8027c02:	f000 fd34 	bl	802866e <__submore>
 8027c06:	2800      	cmp	r0, #0
 8027c08:	d0f1      	beq.n	8027bee <_sungetc_r+0x26>
 8027c0a:	e7e1      	b.n	8027bd0 <_sungetc_r+0x8>
 8027c0c:	6921      	ldr	r1, [r4, #16]
 8027c0e:	6822      	ldr	r2, [r4, #0]
 8027c10:	b141      	cbz	r1, 8027c24 <_sungetc_r+0x5c>
 8027c12:	4291      	cmp	r1, r2
 8027c14:	d206      	bcs.n	8027c24 <_sungetc_r+0x5c>
 8027c16:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8027c1a:	42a9      	cmp	r1, r5
 8027c1c:	d102      	bne.n	8027c24 <_sungetc_r+0x5c>
 8027c1e:	3a01      	subs	r2, #1
 8027c20:	6022      	str	r2, [r4, #0]
 8027c22:	e7ea      	b.n	8027bfa <_sungetc_r+0x32>
 8027c24:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8027c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027c2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8027c2e:	2303      	movs	r3, #3
 8027c30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8027c32:	4623      	mov	r3, r4
 8027c34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027c38:	6023      	str	r3, [r4, #0]
 8027c3a:	2301      	movs	r3, #1
 8027c3c:	e7de      	b.n	8027bfc <_sungetc_r+0x34>

08027c3e <__ssrefill_r>:
 8027c3e:	b510      	push	{r4, lr}
 8027c40:	460c      	mov	r4, r1
 8027c42:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8027c44:	b169      	cbz	r1, 8027c62 <__ssrefill_r+0x24>
 8027c46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027c4a:	4299      	cmp	r1, r3
 8027c4c:	d001      	beq.n	8027c52 <__ssrefill_r+0x14>
 8027c4e:	f7fe fbb1 	bl	80263b4 <_free_r>
 8027c52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027c54:	6063      	str	r3, [r4, #4]
 8027c56:	2000      	movs	r0, #0
 8027c58:	6360      	str	r0, [r4, #52]	@ 0x34
 8027c5a:	b113      	cbz	r3, 8027c62 <__ssrefill_r+0x24>
 8027c5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027c5e:	6023      	str	r3, [r4, #0]
 8027c60:	bd10      	pop	{r4, pc}
 8027c62:	6923      	ldr	r3, [r4, #16]
 8027c64:	6023      	str	r3, [r4, #0]
 8027c66:	2300      	movs	r3, #0
 8027c68:	6063      	str	r3, [r4, #4]
 8027c6a:	89a3      	ldrh	r3, [r4, #12]
 8027c6c:	f043 0320 	orr.w	r3, r3, #32
 8027c70:	81a3      	strh	r3, [r4, #12]
 8027c72:	f04f 30ff 	mov.w	r0, #4294967295
 8027c76:	e7f3      	b.n	8027c60 <__ssrefill_r+0x22>

08027c78 <__ssvfiscanf_r>:
 8027c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c7c:	460c      	mov	r4, r1
 8027c7e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8027c82:	2100      	movs	r1, #0
 8027c84:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8027c88:	49a5      	ldr	r1, [pc, #660]	@ (8027f20 <__ssvfiscanf_r+0x2a8>)
 8027c8a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8027c8c:	f10d 0804 	add.w	r8, sp, #4
 8027c90:	49a4      	ldr	r1, [pc, #656]	@ (8027f24 <__ssvfiscanf_r+0x2ac>)
 8027c92:	4fa5      	ldr	r7, [pc, #660]	@ (8027f28 <__ssvfiscanf_r+0x2b0>)
 8027c94:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8027c98:	4606      	mov	r6, r0
 8027c9a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8027c9c:	9300      	str	r3, [sp, #0]
 8027c9e:	7813      	ldrb	r3, [r2, #0]
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	f000 8158 	beq.w	8027f56 <__ssvfiscanf_r+0x2de>
 8027ca6:	5cf9      	ldrb	r1, [r7, r3]
 8027ca8:	f011 0108 	ands.w	r1, r1, #8
 8027cac:	f102 0501 	add.w	r5, r2, #1
 8027cb0:	d019      	beq.n	8027ce6 <__ssvfiscanf_r+0x6e>
 8027cb2:	6863      	ldr	r3, [r4, #4]
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	dd0f      	ble.n	8027cd8 <__ssvfiscanf_r+0x60>
 8027cb8:	6823      	ldr	r3, [r4, #0]
 8027cba:	781a      	ldrb	r2, [r3, #0]
 8027cbc:	5cba      	ldrb	r2, [r7, r2]
 8027cbe:	0712      	lsls	r2, r2, #28
 8027cc0:	d401      	bmi.n	8027cc6 <__ssvfiscanf_r+0x4e>
 8027cc2:	462a      	mov	r2, r5
 8027cc4:	e7eb      	b.n	8027c9e <__ssvfiscanf_r+0x26>
 8027cc6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027cc8:	3201      	adds	r2, #1
 8027cca:	9245      	str	r2, [sp, #276]	@ 0x114
 8027ccc:	6862      	ldr	r2, [r4, #4]
 8027cce:	3301      	adds	r3, #1
 8027cd0:	3a01      	subs	r2, #1
 8027cd2:	6062      	str	r2, [r4, #4]
 8027cd4:	6023      	str	r3, [r4, #0]
 8027cd6:	e7ec      	b.n	8027cb2 <__ssvfiscanf_r+0x3a>
 8027cd8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027cda:	4621      	mov	r1, r4
 8027cdc:	4630      	mov	r0, r6
 8027cde:	4798      	blx	r3
 8027ce0:	2800      	cmp	r0, #0
 8027ce2:	d0e9      	beq.n	8027cb8 <__ssvfiscanf_r+0x40>
 8027ce4:	e7ed      	b.n	8027cc2 <__ssvfiscanf_r+0x4a>
 8027ce6:	2b25      	cmp	r3, #37	@ 0x25
 8027ce8:	d012      	beq.n	8027d10 <__ssvfiscanf_r+0x98>
 8027cea:	4699      	mov	r9, r3
 8027cec:	6863      	ldr	r3, [r4, #4]
 8027cee:	2b00      	cmp	r3, #0
 8027cf0:	f340 8093 	ble.w	8027e1a <__ssvfiscanf_r+0x1a2>
 8027cf4:	6822      	ldr	r2, [r4, #0]
 8027cf6:	7813      	ldrb	r3, [r2, #0]
 8027cf8:	454b      	cmp	r3, r9
 8027cfa:	f040 812c 	bne.w	8027f56 <__ssvfiscanf_r+0x2de>
 8027cfe:	6863      	ldr	r3, [r4, #4]
 8027d00:	3b01      	subs	r3, #1
 8027d02:	6063      	str	r3, [r4, #4]
 8027d04:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8027d06:	3201      	adds	r2, #1
 8027d08:	3301      	adds	r3, #1
 8027d0a:	6022      	str	r2, [r4, #0]
 8027d0c:	9345      	str	r3, [sp, #276]	@ 0x114
 8027d0e:	e7d8      	b.n	8027cc2 <__ssvfiscanf_r+0x4a>
 8027d10:	9141      	str	r1, [sp, #260]	@ 0x104
 8027d12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027d14:	7853      	ldrb	r3, [r2, #1]
 8027d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8027d18:	bf02      	ittt	eq
 8027d1a:	2310      	moveq	r3, #16
 8027d1c:	1c95      	addeq	r5, r2, #2
 8027d1e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8027d20:	220a      	movs	r2, #10
 8027d22:	46a9      	mov	r9, r5
 8027d24:	f819 1b01 	ldrb.w	r1, [r9], #1
 8027d28:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8027d2c:	2b09      	cmp	r3, #9
 8027d2e:	d91e      	bls.n	8027d6e <__ssvfiscanf_r+0xf6>
 8027d30:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8027f2c <__ssvfiscanf_r+0x2b4>
 8027d34:	2203      	movs	r2, #3
 8027d36:	4650      	mov	r0, sl
 8027d38:	f7d8 fad2 	bl	80002e0 <memchr>
 8027d3c:	b138      	cbz	r0, 8027d4e <__ssvfiscanf_r+0xd6>
 8027d3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027d40:	eba0 000a 	sub.w	r0, r0, sl
 8027d44:	2301      	movs	r3, #1
 8027d46:	4083      	lsls	r3, r0
 8027d48:	4313      	orrs	r3, r2
 8027d4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8027d4c:	464d      	mov	r5, r9
 8027d4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027d52:	2b78      	cmp	r3, #120	@ 0x78
 8027d54:	d806      	bhi.n	8027d64 <__ssvfiscanf_r+0xec>
 8027d56:	2b57      	cmp	r3, #87	@ 0x57
 8027d58:	d810      	bhi.n	8027d7c <__ssvfiscanf_r+0x104>
 8027d5a:	2b25      	cmp	r3, #37	@ 0x25
 8027d5c:	d0c5      	beq.n	8027cea <__ssvfiscanf_r+0x72>
 8027d5e:	d857      	bhi.n	8027e10 <__ssvfiscanf_r+0x198>
 8027d60:	2b00      	cmp	r3, #0
 8027d62:	d065      	beq.n	8027e30 <__ssvfiscanf_r+0x1b8>
 8027d64:	2303      	movs	r3, #3
 8027d66:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027d68:	230a      	movs	r3, #10
 8027d6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8027d6c:	e078      	b.n	8027e60 <__ssvfiscanf_r+0x1e8>
 8027d6e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8027d70:	fb02 1103 	mla	r1, r2, r3, r1
 8027d74:	3930      	subs	r1, #48	@ 0x30
 8027d76:	9143      	str	r1, [sp, #268]	@ 0x10c
 8027d78:	464d      	mov	r5, r9
 8027d7a:	e7d2      	b.n	8027d22 <__ssvfiscanf_r+0xaa>
 8027d7c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8027d80:	2a20      	cmp	r2, #32
 8027d82:	d8ef      	bhi.n	8027d64 <__ssvfiscanf_r+0xec>
 8027d84:	a101      	add	r1, pc, #4	@ (adr r1, 8027d8c <__ssvfiscanf_r+0x114>)
 8027d86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027d8a:	bf00      	nop
 8027d8c:	08027e3f 	.word	0x08027e3f
 8027d90:	08027d65 	.word	0x08027d65
 8027d94:	08027d65 	.word	0x08027d65
 8027d98:	08027e99 	.word	0x08027e99
 8027d9c:	08027d65 	.word	0x08027d65
 8027da0:	08027d65 	.word	0x08027d65
 8027da4:	08027d65 	.word	0x08027d65
 8027da8:	08027d65 	.word	0x08027d65
 8027dac:	08027d65 	.word	0x08027d65
 8027db0:	08027d65 	.word	0x08027d65
 8027db4:	08027d65 	.word	0x08027d65
 8027db8:	08027eaf 	.word	0x08027eaf
 8027dbc:	08027e95 	.word	0x08027e95
 8027dc0:	08027e17 	.word	0x08027e17
 8027dc4:	08027e17 	.word	0x08027e17
 8027dc8:	08027e17 	.word	0x08027e17
 8027dcc:	08027d65 	.word	0x08027d65
 8027dd0:	08027e51 	.word	0x08027e51
 8027dd4:	08027d65 	.word	0x08027d65
 8027dd8:	08027d65 	.word	0x08027d65
 8027ddc:	08027d65 	.word	0x08027d65
 8027de0:	08027d65 	.word	0x08027d65
 8027de4:	08027ebf 	.word	0x08027ebf
 8027de8:	08027e59 	.word	0x08027e59
 8027dec:	08027e37 	.word	0x08027e37
 8027df0:	08027d65 	.word	0x08027d65
 8027df4:	08027d65 	.word	0x08027d65
 8027df8:	08027ebb 	.word	0x08027ebb
 8027dfc:	08027d65 	.word	0x08027d65
 8027e00:	08027e95 	.word	0x08027e95
 8027e04:	08027d65 	.word	0x08027d65
 8027e08:	08027d65 	.word	0x08027d65
 8027e0c:	08027e3f 	.word	0x08027e3f
 8027e10:	3b45      	subs	r3, #69	@ 0x45
 8027e12:	2b02      	cmp	r3, #2
 8027e14:	d8a6      	bhi.n	8027d64 <__ssvfiscanf_r+0xec>
 8027e16:	2305      	movs	r3, #5
 8027e18:	e021      	b.n	8027e5e <__ssvfiscanf_r+0x1e6>
 8027e1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027e1c:	4621      	mov	r1, r4
 8027e1e:	4630      	mov	r0, r6
 8027e20:	4798      	blx	r3
 8027e22:	2800      	cmp	r0, #0
 8027e24:	f43f af66 	beq.w	8027cf4 <__ssvfiscanf_r+0x7c>
 8027e28:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027e2a:	2800      	cmp	r0, #0
 8027e2c:	f040 808b 	bne.w	8027f46 <__ssvfiscanf_r+0x2ce>
 8027e30:	f04f 30ff 	mov.w	r0, #4294967295
 8027e34:	e08b      	b.n	8027f4e <__ssvfiscanf_r+0x2d6>
 8027e36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027e38:	f042 0220 	orr.w	r2, r2, #32
 8027e3c:	9241      	str	r2, [sp, #260]	@ 0x104
 8027e3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8027e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8027e44:	9241      	str	r2, [sp, #260]	@ 0x104
 8027e46:	2210      	movs	r2, #16
 8027e48:	2b6e      	cmp	r3, #110	@ 0x6e
 8027e4a:	9242      	str	r2, [sp, #264]	@ 0x108
 8027e4c:	d902      	bls.n	8027e54 <__ssvfiscanf_r+0x1dc>
 8027e4e:	e005      	b.n	8027e5c <__ssvfiscanf_r+0x1e4>
 8027e50:	2300      	movs	r3, #0
 8027e52:	9342      	str	r3, [sp, #264]	@ 0x108
 8027e54:	2303      	movs	r3, #3
 8027e56:	e002      	b.n	8027e5e <__ssvfiscanf_r+0x1e6>
 8027e58:	2308      	movs	r3, #8
 8027e5a:	9342      	str	r3, [sp, #264]	@ 0x108
 8027e5c:	2304      	movs	r3, #4
 8027e5e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8027e60:	6863      	ldr	r3, [r4, #4]
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	dd39      	ble.n	8027eda <__ssvfiscanf_r+0x262>
 8027e66:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027e68:	0659      	lsls	r1, r3, #25
 8027e6a:	d404      	bmi.n	8027e76 <__ssvfiscanf_r+0x1fe>
 8027e6c:	6823      	ldr	r3, [r4, #0]
 8027e6e:	781a      	ldrb	r2, [r3, #0]
 8027e70:	5cba      	ldrb	r2, [r7, r2]
 8027e72:	0712      	lsls	r2, r2, #28
 8027e74:	d438      	bmi.n	8027ee8 <__ssvfiscanf_r+0x270>
 8027e76:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8027e78:	2b02      	cmp	r3, #2
 8027e7a:	dc47      	bgt.n	8027f0c <__ssvfiscanf_r+0x294>
 8027e7c:	466b      	mov	r3, sp
 8027e7e:	4622      	mov	r2, r4
 8027e80:	a941      	add	r1, sp, #260	@ 0x104
 8027e82:	4630      	mov	r0, r6
 8027e84:	f000 f9ae 	bl	80281e4 <_scanf_chars>
 8027e88:	2801      	cmp	r0, #1
 8027e8a:	d064      	beq.n	8027f56 <__ssvfiscanf_r+0x2de>
 8027e8c:	2802      	cmp	r0, #2
 8027e8e:	f47f af18 	bne.w	8027cc2 <__ssvfiscanf_r+0x4a>
 8027e92:	e7c9      	b.n	8027e28 <__ssvfiscanf_r+0x1b0>
 8027e94:	220a      	movs	r2, #10
 8027e96:	e7d7      	b.n	8027e48 <__ssvfiscanf_r+0x1d0>
 8027e98:	4629      	mov	r1, r5
 8027e9a:	4640      	mov	r0, r8
 8027e9c:	f000 fbae 	bl	80285fc <__sccl>
 8027ea0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027ea6:	9341      	str	r3, [sp, #260]	@ 0x104
 8027ea8:	4605      	mov	r5, r0
 8027eaa:	2301      	movs	r3, #1
 8027eac:	e7d7      	b.n	8027e5e <__ssvfiscanf_r+0x1e6>
 8027eae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8027eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027eb4:	9341      	str	r3, [sp, #260]	@ 0x104
 8027eb6:	2300      	movs	r3, #0
 8027eb8:	e7d1      	b.n	8027e5e <__ssvfiscanf_r+0x1e6>
 8027eba:	2302      	movs	r3, #2
 8027ebc:	e7cf      	b.n	8027e5e <__ssvfiscanf_r+0x1e6>
 8027ebe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8027ec0:	06c3      	lsls	r3, r0, #27
 8027ec2:	f53f aefe 	bmi.w	8027cc2 <__ssvfiscanf_r+0x4a>
 8027ec6:	9b00      	ldr	r3, [sp, #0]
 8027ec8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027eca:	1d19      	adds	r1, r3, #4
 8027ecc:	9100      	str	r1, [sp, #0]
 8027ece:	681b      	ldr	r3, [r3, #0]
 8027ed0:	07c0      	lsls	r0, r0, #31
 8027ed2:	bf4c      	ite	mi
 8027ed4:	801a      	strhmi	r2, [r3, #0]
 8027ed6:	601a      	strpl	r2, [r3, #0]
 8027ed8:	e6f3      	b.n	8027cc2 <__ssvfiscanf_r+0x4a>
 8027eda:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027edc:	4621      	mov	r1, r4
 8027ede:	4630      	mov	r0, r6
 8027ee0:	4798      	blx	r3
 8027ee2:	2800      	cmp	r0, #0
 8027ee4:	d0bf      	beq.n	8027e66 <__ssvfiscanf_r+0x1ee>
 8027ee6:	e79f      	b.n	8027e28 <__ssvfiscanf_r+0x1b0>
 8027ee8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8027eea:	3201      	adds	r2, #1
 8027eec:	9245      	str	r2, [sp, #276]	@ 0x114
 8027eee:	6862      	ldr	r2, [r4, #4]
 8027ef0:	3a01      	subs	r2, #1
 8027ef2:	2a00      	cmp	r2, #0
 8027ef4:	6062      	str	r2, [r4, #4]
 8027ef6:	dd02      	ble.n	8027efe <__ssvfiscanf_r+0x286>
 8027ef8:	3301      	adds	r3, #1
 8027efa:	6023      	str	r3, [r4, #0]
 8027efc:	e7b6      	b.n	8027e6c <__ssvfiscanf_r+0x1f4>
 8027efe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8027f00:	4621      	mov	r1, r4
 8027f02:	4630      	mov	r0, r6
 8027f04:	4798      	blx	r3
 8027f06:	2800      	cmp	r0, #0
 8027f08:	d0b0      	beq.n	8027e6c <__ssvfiscanf_r+0x1f4>
 8027f0a:	e78d      	b.n	8027e28 <__ssvfiscanf_r+0x1b0>
 8027f0c:	2b04      	cmp	r3, #4
 8027f0e:	dc0f      	bgt.n	8027f30 <__ssvfiscanf_r+0x2b8>
 8027f10:	466b      	mov	r3, sp
 8027f12:	4622      	mov	r2, r4
 8027f14:	a941      	add	r1, sp, #260	@ 0x104
 8027f16:	4630      	mov	r0, r6
 8027f18:	f000 f9be 	bl	8028298 <_scanf_i>
 8027f1c:	e7b4      	b.n	8027e88 <__ssvfiscanf_r+0x210>
 8027f1e:	bf00      	nop
 8027f20:	08027bc9 	.word	0x08027bc9
 8027f24:	08027c3f 	.word	0x08027c3f
 8027f28:	0802d170 	.word	0x0802d170
 8027f2c:	0802d50e 	.word	0x0802d50e
 8027f30:	4b0a      	ldr	r3, [pc, #40]	@ (8027f5c <__ssvfiscanf_r+0x2e4>)
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	f43f aec5 	beq.w	8027cc2 <__ssvfiscanf_r+0x4a>
 8027f38:	466b      	mov	r3, sp
 8027f3a:	4622      	mov	r2, r4
 8027f3c:	a941      	add	r1, sp, #260	@ 0x104
 8027f3e:	4630      	mov	r0, r6
 8027f40:	f7fc ffca 	bl	8024ed8 <_scanf_float>
 8027f44:	e7a0      	b.n	8027e88 <__ssvfiscanf_r+0x210>
 8027f46:	89a3      	ldrh	r3, [r4, #12]
 8027f48:	065b      	lsls	r3, r3, #25
 8027f4a:	f53f af71 	bmi.w	8027e30 <__ssvfiscanf_r+0x1b8>
 8027f4e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8027f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027f56:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8027f58:	e7f9      	b.n	8027f4e <__ssvfiscanf_r+0x2d6>
 8027f5a:	bf00      	nop
 8027f5c:	08024ed9 	.word	0x08024ed9

08027f60 <__sfputc_r>:
 8027f60:	6893      	ldr	r3, [r2, #8]
 8027f62:	3b01      	subs	r3, #1
 8027f64:	2b00      	cmp	r3, #0
 8027f66:	b410      	push	{r4}
 8027f68:	6093      	str	r3, [r2, #8]
 8027f6a:	da08      	bge.n	8027f7e <__sfputc_r+0x1e>
 8027f6c:	6994      	ldr	r4, [r2, #24]
 8027f6e:	42a3      	cmp	r3, r4
 8027f70:	db01      	blt.n	8027f76 <__sfputc_r+0x16>
 8027f72:	290a      	cmp	r1, #10
 8027f74:	d103      	bne.n	8027f7e <__sfputc_r+0x1e>
 8027f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027f7a:	f000 bbb2 	b.w	80286e2 <__swbuf_r>
 8027f7e:	6813      	ldr	r3, [r2, #0]
 8027f80:	1c58      	adds	r0, r3, #1
 8027f82:	6010      	str	r0, [r2, #0]
 8027f84:	7019      	strb	r1, [r3, #0]
 8027f86:	4608      	mov	r0, r1
 8027f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027f8c:	4770      	bx	lr

08027f8e <__sfputs_r>:
 8027f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f90:	4606      	mov	r6, r0
 8027f92:	460f      	mov	r7, r1
 8027f94:	4614      	mov	r4, r2
 8027f96:	18d5      	adds	r5, r2, r3
 8027f98:	42ac      	cmp	r4, r5
 8027f9a:	d101      	bne.n	8027fa0 <__sfputs_r+0x12>
 8027f9c:	2000      	movs	r0, #0
 8027f9e:	e007      	b.n	8027fb0 <__sfputs_r+0x22>
 8027fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027fa4:	463a      	mov	r2, r7
 8027fa6:	4630      	mov	r0, r6
 8027fa8:	f7ff ffda 	bl	8027f60 <__sfputc_r>
 8027fac:	1c43      	adds	r3, r0, #1
 8027fae:	d1f3      	bne.n	8027f98 <__sfputs_r+0xa>
 8027fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027fb4 <_vfiprintf_r>:
 8027fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fb8:	460d      	mov	r5, r1
 8027fba:	b09d      	sub	sp, #116	@ 0x74
 8027fbc:	4614      	mov	r4, r2
 8027fbe:	4698      	mov	r8, r3
 8027fc0:	4606      	mov	r6, r0
 8027fc2:	b118      	cbz	r0, 8027fcc <_vfiprintf_r+0x18>
 8027fc4:	6a03      	ldr	r3, [r0, #32]
 8027fc6:	b90b      	cbnz	r3, 8027fcc <_vfiprintf_r+0x18>
 8027fc8:	f7fd fa1e 	bl	8025408 <__sinit>
 8027fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027fce:	07d9      	lsls	r1, r3, #31
 8027fd0:	d405      	bmi.n	8027fde <_vfiprintf_r+0x2a>
 8027fd2:	89ab      	ldrh	r3, [r5, #12]
 8027fd4:	059a      	lsls	r2, r3, #22
 8027fd6:	d402      	bmi.n	8027fde <_vfiprintf_r+0x2a>
 8027fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027fda:	f7fd fbd6 	bl	802578a <__retarget_lock_acquire_recursive>
 8027fde:	89ab      	ldrh	r3, [r5, #12]
 8027fe0:	071b      	lsls	r3, r3, #28
 8027fe2:	d501      	bpl.n	8027fe8 <_vfiprintf_r+0x34>
 8027fe4:	692b      	ldr	r3, [r5, #16]
 8027fe6:	b99b      	cbnz	r3, 8028010 <_vfiprintf_r+0x5c>
 8027fe8:	4629      	mov	r1, r5
 8027fea:	4630      	mov	r0, r6
 8027fec:	f000 fbb8 	bl	8028760 <__swsetup_r>
 8027ff0:	b170      	cbz	r0, 8028010 <_vfiprintf_r+0x5c>
 8027ff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027ff4:	07dc      	lsls	r4, r3, #31
 8027ff6:	d504      	bpl.n	8028002 <_vfiprintf_r+0x4e>
 8027ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8027ffc:	b01d      	add	sp, #116	@ 0x74
 8027ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028002:	89ab      	ldrh	r3, [r5, #12]
 8028004:	0598      	lsls	r0, r3, #22
 8028006:	d4f7      	bmi.n	8027ff8 <_vfiprintf_r+0x44>
 8028008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802800a:	f7fd fbbf 	bl	802578c <__retarget_lock_release_recursive>
 802800e:	e7f3      	b.n	8027ff8 <_vfiprintf_r+0x44>
 8028010:	2300      	movs	r3, #0
 8028012:	9309      	str	r3, [sp, #36]	@ 0x24
 8028014:	2320      	movs	r3, #32
 8028016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802801a:	f8cd 800c 	str.w	r8, [sp, #12]
 802801e:	2330      	movs	r3, #48	@ 0x30
 8028020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80281d0 <_vfiprintf_r+0x21c>
 8028024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028028:	f04f 0901 	mov.w	r9, #1
 802802c:	4623      	mov	r3, r4
 802802e:	469a      	mov	sl, r3
 8028030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028034:	b10a      	cbz	r2, 802803a <_vfiprintf_r+0x86>
 8028036:	2a25      	cmp	r2, #37	@ 0x25
 8028038:	d1f9      	bne.n	802802e <_vfiprintf_r+0x7a>
 802803a:	ebba 0b04 	subs.w	fp, sl, r4
 802803e:	d00b      	beq.n	8028058 <_vfiprintf_r+0xa4>
 8028040:	465b      	mov	r3, fp
 8028042:	4622      	mov	r2, r4
 8028044:	4629      	mov	r1, r5
 8028046:	4630      	mov	r0, r6
 8028048:	f7ff ffa1 	bl	8027f8e <__sfputs_r>
 802804c:	3001      	adds	r0, #1
 802804e:	f000 80a7 	beq.w	80281a0 <_vfiprintf_r+0x1ec>
 8028052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028054:	445a      	add	r2, fp
 8028056:	9209      	str	r2, [sp, #36]	@ 0x24
 8028058:	f89a 3000 	ldrb.w	r3, [sl]
 802805c:	2b00      	cmp	r3, #0
 802805e:	f000 809f 	beq.w	80281a0 <_vfiprintf_r+0x1ec>
 8028062:	2300      	movs	r3, #0
 8028064:	f04f 32ff 	mov.w	r2, #4294967295
 8028068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802806c:	f10a 0a01 	add.w	sl, sl, #1
 8028070:	9304      	str	r3, [sp, #16]
 8028072:	9307      	str	r3, [sp, #28]
 8028074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8028078:	931a      	str	r3, [sp, #104]	@ 0x68
 802807a:	4654      	mov	r4, sl
 802807c:	2205      	movs	r2, #5
 802807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028082:	4853      	ldr	r0, [pc, #332]	@ (80281d0 <_vfiprintf_r+0x21c>)
 8028084:	f7d8 f92c 	bl	80002e0 <memchr>
 8028088:	9a04      	ldr	r2, [sp, #16]
 802808a:	b9d8      	cbnz	r0, 80280c4 <_vfiprintf_r+0x110>
 802808c:	06d1      	lsls	r1, r2, #27
 802808e:	bf44      	itt	mi
 8028090:	2320      	movmi	r3, #32
 8028092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028096:	0713      	lsls	r3, r2, #28
 8028098:	bf44      	itt	mi
 802809a:	232b      	movmi	r3, #43	@ 0x2b
 802809c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80280a0:	f89a 3000 	ldrb.w	r3, [sl]
 80280a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80280a6:	d015      	beq.n	80280d4 <_vfiprintf_r+0x120>
 80280a8:	9a07      	ldr	r2, [sp, #28]
 80280aa:	4654      	mov	r4, sl
 80280ac:	2000      	movs	r0, #0
 80280ae:	f04f 0c0a 	mov.w	ip, #10
 80280b2:	4621      	mov	r1, r4
 80280b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80280b8:	3b30      	subs	r3, #48	@ 0x30
 80280ba:	2b09      	cmp	r3, #9
 80280bc:	d94b      	bls.n	8028156 <_vfiprintf_r+0x1a2>
 80280be:	b1b0      	cbz	r0, 80280ee <_vfiprintf_r+0x13a>
 80280c0:	9207      	str	r2, [sp, #28]
 80280c2:	e014      	b.n	80280ee <_vfiprintf_r+0x13a>
 80280c4:	eba0 0308 	sub.w	r3, r0, r8
 80280c8:	fa09 f303 	lsl.w	r3, r9, r3
 80280cc:	4313      	orrs	r3, r2
 80280ce:	9304      	str	r3, [sp, #16]
 80280d0:	46a2      	mov	sl, r4
 80280d2:	e7d2      	b.n	802807a <_vfiprintf_r+0xc6>
 80280d4:	9b03      	ldr	r3, [sp, #12]
 80280d6:	1d19      	adds	r1, r3, #4
 80280d8:	681b      	ldr	r3, [r3, #0]
 80280da:	9103      	str	r1, [sp, #12]
 80280dc:	2b00      	cmp	r3, #0
 80280de:	bfbb      	ittet	lt
 80280e0:	425b      	neglt	r3, r3
 80280e2:	f042 0202 	orrlt.w	r2, r2, #2
 80280e6:	9307      	strge	r3, [sp, #28]
 80280e8:	9307      	strlt	r3, [sp, #28]
 80280ea:	bfb8      	it	lt
 80280ec:	9204      	strlt	r2, [sp, #16]
 80280ee:	7823      	ldrb	r3, [r4, #0]
 80280f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80280f2:	d10a      	bne.n	802810a <_vfiprintf_r+0x156>
 80280f4:	7863      	ldrb	r3, [r4, #1]
 80280f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80280f8:	d132      	bne.n	8028160 <_vfiprintf_r+0x1ac>
 80280fa:	9b03      	ldr	r3, [sp, #12]
 80280fc:	1d1a      	adds	r2, r3, #4
 80280fe:	681b      	ldr	r3, [r3, #0]
 8028100:	9203      	str	r2, [sp, #12]
 8028102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028106:	3402      	adds	r4, #2
 8028108:	9305      	str	r3, [sp, #20]
 802810a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80281e0 <_vfiprintf_r+0x22c>
 802810e:	7821      	ldrb	r1, [r4, #0]
 8028110:	2203      	movs	r2, #3
 8028112:	4650      	mov	r0, sl
 8028114:	f7d8 f8e4 	bl	80002e0 <memchr>
 8028118:	b138      	cbz	r0, 802812a <_vfiprintf_r+0x176>
 802811a:	9b04      	ldr	r3, [sp, #16]
 802811c:	eba0 000a 	sub.w	r0, r0, sl
 8028120:	2240      	movs	r2, #64	@ 0x40
 8028122:	4082      	lsls	r2, r0
 8028124:	4313      	orrs	r3, r2
 8028126:	3401      	adds	r4, #1
 8028128:	9304      	str	r3, [sp, #16]
 802812a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802812e:	4829      	ldr	r0, [pc, #164]	@ (80281d4 <_vfiprintf_r+0x220>)
 8028130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8028134:	2206      	movs	r2, #6
 8028136:	f7d8 f8d3 	bl	80002e0 <memchr>
 802813a:	2800      	cmp	r0, #0
 802813c:	d03f      	beq.n	80281be <_vfiprintf_r+0x20a>
 802813e:	4b26      	ldr	r3, [pc, #152]	@ (80281d8 <_vfiprintf_r+0x224>)
 8028140:	bb1b      	cbnz	r3, 802818a <_vfiprintf_r+0x1d6>
 8028142:	9b03      	ldr	r3, [sp, #12]
 8028144:	3307      	adds	r3, #7
 8028146:	f023 0307 	bic.w	r3, r3, #7
 802814a:	3308      	adds	r3, #8
 802814c:	9303      	str	r3, [sp, #12]
 802814e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028150:	443b      	add	r3, r7
 8028152:	9309      	str	r3, [sp, #36]	@ 0x24
 8028154:	e76a      	b.n	802802c <_vfiprintf_r+0x78>
 8028156:	fb0c 3202 	mla	r2, ip, r2, r3
 802815a:	460c      	mov	r4, r1
 802815c:	2001      	movs	r0, #1
 802815e:	e7a8      	b.n	80280b2 <_vfiprintf_r+0xfe>
 8028160:	2300      	movs	r3, #0
 8028162:	3401      	adds	r4, #1
 8028164:	9305      	str	r3, [sp, #20]
 8028166:	4619      	mov	r1, r3
 8028168:	f04f 0c0a 	mov.w	ip, #10
 802816c:	4620      	mov	r0, r4
 802816e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028172:	3a30      	subs	r2, #48	@ 0x30
 8028174:	2a09      	cmp	r2, #9
 8028176:	d903      	bls.n	8028180 <_vfiprintf_r+0x1cc>
 8028178:	2b00      	cmp	r3, #0
 802817a:	d0c6      	beq.n	802810a <_vfiprintf_r+0x156>
 802817c:	9105      	str	r1, [sp, #20]
 802817e:	e7c4      	b.n	802810a <_vfiprintf_r+0x156>
 8028180:	fb0c 2101 	mla	r1, ip, r1, r2
 8028184:	4604      	mov	r4, r0
 8028186:	2301      	movs	r3, #1
 8028188:	e7f0      	b.n	802816c <_vfiprintf_r+0x1b8>
 802818a:	ab03      	add	r3, sp, #12
 802818c:	9300      	str	r3, [sp, #0]
 802818e:	462a      	mov	r2, r5
 8028190:	4b12      	ldr	r3, [pc, #72]	@ (80281dc <_vfiprintf_r+0x228>)
 8028192:	a904      	add	r1, sp, #16
 8028194:	4630      	mov	r0, r6
 8028196:	f7fc faf7 	bl	8024788 <_printf_float>
 802819a:	4607      	mov	r7, r0
 802819c:	1c78      	adds	r0, r7, #1
 802819e:	d1d6      	bne.n	802814e <_vfiprintf_r+0x19a>
 80281a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80281a2:	07d9      	lsls	r1, r3, #31
 80281a4:	d405      	bmi.n	80281b2 <_vfiprintf_r+0x1fe>
 80281a6:	89ab      	ldrh	r3, [r5, #12]
 80281a8:	059a      	lsls	r2, r3, #22
 80281aa:	d402      	bmi.n	80281b2 <_vfiprintf_r+0x1fe>
 80281ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80281ae:	f7fd faed 	bl	802578c <__retarget_lock_release_recursive>
 80281b2:	89ab      	ldrh	r3, [r5, #12]
 80281b4:	065b      	lsls	r3, r3, #25
 80281b6:	f53f af1f 	bmi.w	8027ff8 <_vfiprintf_r+0x44>
 80281ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80281bc:	e71e      	b.n	8027ffc <_vfiprintf_r+0x48>
 80281be:	ab03      	add	r3, sp, #12
 80281c0:	9300      	str	r3, [sp, #0]
 80281c2:	462a      	mov	r2, r5
 80281c4:	4b05      	ldr	r3, [pc, #20]	@ (80281dc <_vfiprintf_r+0x228>)
 80281c6:	a904      	add	r1, sp, #16
 80281c8:	4630      	mov	r0, r6
 80281ca:	f7fc fd65 	bl	8024c98 <_printf_i>
 80281ce:	e7e4      	b.n	802819a <_vfiprintf_r+0x1e6>
 80281d0:	0802d508 	.word	0x0802d508
 80281d4:	0802d512 	.word	0x0802d512
 80281d8:	08024789 	.word	0x08024789
 80281dc:	08027f8f 	.word	0x08027f8f
 80281e0:	0802d50e 	.word	0x0802d50e

080281e4 <_scanf_chars>:
 80281e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80281e8:	4615      	mov	r5, r2
 80281ea:	688a      	ldr	r2, [r1, #8]
 80281ec:	4680      	mov	r8, r0
 80281ee:	460c      	mov	r4, r1
 80281f0:	b932      	cbnz	r2, 8028200 <_scanf_chars+0x1c>
 80281f2:	698a      	ldr	r2, [r1, #24]
 80281f4:	2a00      	cmp	r2, #0
 80281f6:	bf14      	ite	ne
 80281f8:	f04f 32ff 	movne.w	r2, #4294967295
 80281fc:	2201      	moveq	r2, #1
 80281fe:	608a      	str	r2, [r1, #8]
 8028200:	6822      	ldr	r2, [r4, #0]
 8028202:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8028294 <_scanf_chars+0xb0>
 8028206:	06d1      	lsls	r1, r2, #27
 8028208:	bf5f      	itttt	pl
 802820a:	681a      	ldrpl	r2, [r3, #0]
 802820c:	1d11      	addpl	r1, r2, #4
 802820e:	6019      	strpl	r1, [r3, #0]
 8028210:	6816      	ldrpl	r6, [r2, #0]
 8028212:	2700      	movs	r7, #0
 8028214:	69a0      	ldr	r0, [r4, #24]
 8028216:	b188      	cbz	r0, 802823c <_scanf_chars+0x58>
 8028218:	2801      	cmp	r0, #1
 802821a:	d107      	bne.n	802822c <_scanf_chars+0x48>
 802821c:	682b      	ldr	r3, [r5, #0]
 802821e:	781a      	ldrb	r2, [r3, #0]
 8028220:	6963      	ldr	r3, [r4, #20]
 8028222:	5c9b      	ldrb	r3, [r3, r2]
 8028224:	b953      	cbnz	r3, 802823c <_scanf_chars+0x58>
 8028226:	2f00      	cmp	r7, #0
 8028228:	d031      	beq.n	802828e <_scanf_chars+0xaa>
 802822a:	e022      	b.n	8028272 <_scanf_chars+0x8e>
 802822c:	2802      	cmp	r0, #2
 802822e:	d120      	bne.n	8028272 <_scanf_chars+0x8e>
 8028230:	682b      	ldr	r3, [r5, #0]
 8028232:	781b      	ldrb	r3, [r3, #0]
 8028234:	f819 3003 	ldrb.w	r3, [r9, r3]
 8028238:	071b      	lsls	r3, r3, #28
 802823a:	d41a      	bmi.n	8028272 <_scanf_chars+0x8e>
 802823c:	6823      	ldr	r3, [r4, #0]
 802823e:	06da      	lsls	r2, r3, #27
 8028240:	bf5e      	ittt	pl
 8028242:	682b      	ldrpl	r3, [r5, #0]
 8028244:	781b      	ldrbpl	r3, [r3, #0]
 8028246:	f806 3b01 	strbpl.w	r3, [r6], #1
 802824a:	682a      	ldr	r2, [r5, #0]
 802824c:	686b      	ldr	r3, [r5, #4]
 802824e:	3201      	adds	r2, #1
 8028250:	602a      	str	r2, [r5, #0]
 8028252:	68a2      	ldr	r2, [r4, #8]
 8028254:	3b01      	subs	r3, #1
 8028256:	3a01      	subs	r2, #1
 8028258:	606b      	str	r3, [r5, #4]
 802825a:	3701      	adds	r7, #1
 802825c:	60a2      	str	r2, [r4, #8]
 802825e:	b142      	cbz	r2, 8028272 <_scanf_chars+0x8e>
 8028260:	2b00      	cmp	r3, #0
 8028262:	dcd7      	bgt.n	8028214 <_scanf_chars+0x30>
 8028264:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8028268:	4629      	mov	r1, r5
 802826a:	4640      	mov	r0, r8
 802826c:	4798      	blx	r3
 802826e:	2800      	cmp	r0, #0
 8028270:	d0d0      	beq.n	8028214 <_scanf_chars+0x30>
 8028272:	6823      	ldr	r3, [r4, #0]
 8028274:	f013 0310 	ands.w	r3, r3, #16
 8028278:	d105      	bne.n	8028286 <_scanf_chars+0xa2>
 802827a:	68e2      	ldr	r2, [r4, #12]
 802827c:	3201      	adds	r2, #1
 802827e:	60e2      	str	r2, [r4, #12]
 8028280:	69a2      	ldr	r2, [r4, #24]
 8028282:	b102      	cbz	r2, 8028286 <_scanf_chars+0xa2>
 8028284:	7033      	strb	r3, [r6, #0]
 8028286:	6923      	ldr	r3, [r4, #16]
 8028288:	443b      	add	r3, r7
 802828a:	6123      	str	r3, [r4, #16]
 802828c:	2000      	movs	r0, #0
 802828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028292:	bf00      	nop
 8028294:	0802d170 	.word	0x0802d170

08028298 <_scanf_i>:
 8028298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802829c:	4698      	mov	r8, r3
 802829e:	4b74      	ldr	r3, [pc, #464]	@ (8028470 <_scanf_i+0x1d8>)
 80282a0:	460c      	mov	r4, r1
 80282a2:	4682      	mov	sl, r0
 80282a4:	4616      	mov	r6, r2
 80282a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80282aa:	b087      	sub	sp, #28
 80282ac:	ab03      	add	r3, sp, #12
 80282ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80282b2:	4b70      	ldr	r3, [pc, #448]	@ (8028474 <_scanf_i+0x1dc>)
 80282b4:	69a1      	ldr	r1, [r4, #24]
 80282b6:	4a70      	ldr	r2, [pc, #448]	@ (8028478 <_scanf_i+0x1e0>)
 80282b8:	2903      	cmp	r1, #3
 80282ba:	bf08      	it	eq
 80282bc:	461a      	moveq	r2, r3
 80282be:	68a3      	ldr	r3, [r4, #8]
 80282c0:	9201      	str	r2, [sp, #4]
 80282c2:	1e5a      	subs	r2, r3, #1
 80282c4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80282c8:	bf88      	it	hi
 80282ca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80282ce:	4627      	mov	r7, r4
 80282d0:	bf82      	ittt	hi
 80282d2:	eb03 0905 	addhi.w	r9, r3, r5
 80282d6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80282da:	60a3      	strhi	r3, [r4, #8]
 80282dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80282e0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80282e4:	bf98      	it	ls
 80282e6:	f04f 0900 	movls.w	r9, #0
 80282ea:	6023      	str	r3, [r4, #0]
 80282ec:	463d      	mov	r5, r7
 80282ee:	f04f 0b00 	mov.w	fp, #0
 80282f2:	6831      	ldr	r1, [r6, #0]
 80282f4:	ab03      	add	r3, sp, #12
 80282f6:	7809      	ldrb	r1, [r1, #0]
 80282f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80282fc:	2202      	movs	r2, #2
 80282fe:	f7d7 ffef 	bl	80002e0 <memchr>
 8028302:	b328      	cbz	r0, 8028350 <_scanf_i+0xb8>
 8028304:	f1bb 0f01 	cmp.w	fp, #1
 8028308:	d159      	bne.n	80283be <_scanf_i+0x126>
 802830a:	6862      	ldr	r2, [r4, #4]
 802830c:	b92a      	cbnz	r2, 802831a <_scanf_i+0x82>
 802830e:	6822      	ldr	r2, [r4, #0]
 8028310:	2108      	movs	r1, #8
 8028312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8028316:	6061      	str	r1, [r4, #4]
 8028318:	6022      	str	r2, [r4, #0]
 802831a:	6822      	ldr	r2, [r4, #0]
 802831c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8028320:	6022      	str	r2, [r4, #0]
 8028322:	68a2      	ldr	r2, [r4, #8]
 8028324:	1e51      	subs	r1, r2, #1
 8028326:	60a1      	str	r1, [r4, #8]
 8028328:	b192      	cbz	r2, 8028350 <_scanf_i+0xb8>
 802832a:	6832      	ldr	r2, [r6, #0]
 802832c:	1c51      	adds	r1, r2, #1
 802832e:	6031      	str	r1, [r6, #0]
 8028330:	7812      	ldrb	r2, [r2, #0]
 8028332:	f805 2b01 	strb.w	r2, [r5], #1
 8028336:	6872      	ldr	r2, [r6, #4]
 8028338:	3a01      	subs	r2, #1
 802833a:	2a00      	cmp	r2, #0
 802833c:	6072      	str	r2, [r6, #4]
 802833e:	dc07      	bgt.n	8028350 <_scanf_i+0xb8>
 8028340:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8028344:	4631      	mov	r1, r6
 8028346:	4650      	mov	r0, sl
 8028348:	4790      	blx	r2
 802834a:	2800      	cmp	r0, #0
 802834c:	f040 8085 	bne.w	802845a <_scanf_i+0x1c2>
 8028350:	f10b 0b01 	add.w	fp, fp, #1
 8028354:	f1bb 0f03 	cmp.w	fp, #3
 8028358:	d1cb      	bne.n	80282f2 <_scanf_i+0x5a>
 802835a:	6863      	ldr	r3, [r4, #4]
 802835c:	b90b      	cbnz	r3, 8028362 <_scanf_i+0xca>
 802835e:	230a      	movs	r3, #10
 8028360:	6063      	str	r3, [r4, #4]
 8028362:	6863      	ldr	r3, [r4, #4]
 8028364:	4945      	ldr	r1, [pc, #276]	@ (802847c <_scanf_i+0x1e4>)
 8028366:	6960      	ldr	r0, [r4, #20]
 8028368:	1ac9      	subs	r1, r1, r3
 802836a:	f000 f947 	bl	80285fc <__sccl>
 802836e:	f04f 0b00 	mov.w	fp, #0
 8028372:	68a3      	ldr	r3, [r4, #8]
 8028374:	6822      	ldr	r2, [r4, #0]
 8028376:	2b00      	cmp	r3, #0
 8028378:	d03d      	beq.n	80283f6 <_scanf_i+0x15e>
 802837a:	6831      	ldr	r1, [r6, #0]
 802837c:	6960      	ldr	r0, [r4, #20]
 802837e:	f891 c000 	ldrb.w	ip, [r1]
 8028382:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028386:	2800      	cmp	r0, #0
 8028388:	d035      	beq.n	80283f6 <_scanf_i+0x15e>
 802838a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802838e:	d124      	bne.n	80283da <_scanf_i+0x142>
 8028390:	0510      	lsls	r0, r2, #20
 8028392:	d522      	bpl.n	80283da <_scanf_i+0x142>
 8028394:	f10b 0b01 	add.w	fp, fp, #1
 8028398:	f1b9 0f00 	cmp.w	r9, #0
 802839c:	d003      	beq.n	80283a6 <_scanf_i+0x10e>
 802839e:	3301      	adds	r3, #1
 80283a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80283a4:	60a3      	str	r3, [r4, #8]
 80283a6:	6873      	ldr	r3, [r6, #4]
 80283a8:	3b01      	subs	r3, #1
 80283aa:	2b00      	cmp	r3, #0
 80283ac:	6073      	str	r3, [r6, #4]
 80283ae:	dd1b      	ble.n	80283e8 <_scanf_i+0x150>
 80283b0:	6833      	ldr	r3, [r6, #0]
 80283b2:	3301      	adds	r3, #1
 80283b4:	6033      	str	r3, [r6, #0]
 80283b6:	68a3      	ldr	r3, [r4, #8]
 80283b8:	3b01      	subs	r3, #1
 80283ba:	60a3      	str	r3, [r4, #8]
 80283bc:	e7d9      	b.n	8028372 <_scanf_i+0xda>
 80283be:	f1bb 0f02 	cmp.w	fp, #2
 80283c2:	d1ae      	bne.n	8028322 <_scanf_i+0x8a>
 80283c4:	6822      	ldr	r2, [r4, #0]
 80283c6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80283ca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80283ce:	d1bf      	bne.n	8028350 <_scanf_i+0xb8>
 80283d0:	2110      	movs	r1, #16
 80283d2:	6061      	str	r1, [r4, #4]
 80283d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80283d8:	e7a2      	b.n	8028320 <_scanf_i+0x88>
 80283da:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80283de:	6022      	str	r2, [r4, #0]
 80283e0:	780b      	ldrb	r3, [r1, #0]
 80283e2:	f805 3b01 	strb.w	r3, [r5], #1
 80283e6:	e7de      	b.n	80283a6 <_scanf_i+0x10e>
 80283e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80283ec:	4631      	mov	r1, r6
 80283ee:	4650      	mov	r0, sl
 80283f0:	4798      	blx	r3
 80283f2:	2800      	cmp	r0, #0
 80283f4:	d0df      	beq.n	80283b6 <_scanf_i+0x11e>
 80283f6:	6823      	ldr	r3, [r4, #0]
 80283f8:	05d9      	lsls	r1, r3, #23
 80283fa:	d50d      	bpl.n	8028418 <_scanf_i+0x180>
 80283fc:	42bd      	cmp	r5, r7
 80283fe:	d909      	bls.n	8028414 <_scanf_i+0x17c>
 8028400:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028404:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8028408:	4632      	mov	r2, r6
 802840a:	4650      	mov	r0, sl
 802840c:	4798      	blx	r3
 802840e:	f105 39ff 	add.w	r9, r5, #4294967295
 8028412:	464d      	mov	r5, r9
 8028414:	42bd      	cmp	r5, r7
 8028416:	d028      	beq.n	802846a <_scanf_i+0x1d2>
 8028418:	6822      	ldr	r2, [r4, #0]
 802841a:	f012 0210 	ands.w	r2, r2, #16
 802841e:	d113      	bne.n	8028448 <_scanf_i+0x1b0>
 8028420:	702a      	strb	r2, [r5, #0]
 8028422:	6863      	ldr	r3, [r4, #4]
 8028424:	9e01      	ldr	r6, [sp, #4]
 8028426:	4639      	mov	r1, r7
 8028428:	4650      	mov	r0, sl
 802842a:	47b0      	blx	r6
 802842c:	f8d8 3000 	ldr.w	r3, [r8]
 8028430:	6821      	ldr	r1, [r4, #0]
 8028432:	1d1a      	adds	r2, r3, #4
 8028434:	f8c8 2000 	str.w	r2, [r8]
 8028438:	f011 0f20 	tst.w	r1, #32
 802843c:	681b      	ldr	r3, [r3, #0]
 802843e:	d00f      	beq.n	8028460 <_scanf_i+0x1c8>
 8028440:	6018      	str	r0, [r3, #0]
 8028442:	68e3      	ldr	r3, [r4, #12]
 8028444:	3301      	adds	r3, #1
 8028446:	60e3      	str	r3, [r4, #12]
 8028448:	6923      	ldr	r3, [r4, #16]
 802844a:	1bed      	subs	r5, r5, r7
 802844c:	445d      	add	r5, fp
 802844e:	442b      	add	r3, r5
 8028450:	6123      	str	r3, [r4, #16]
 8028452:	2000      	movs	r0, #0
 8028454:	b007      	add	sp, #28
 8028456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802845a:	f04f 0b00 	mov.w	fp, #0
 802845e:	e7ca      	b.n	80283f6 <_scanf_i+0x15e>
 8028460:	07ca      	lsls	r2, r1, #31
 8028462:	bf4c      	ite	mi
 8028464:	8018      	strhmi	r0, [r3, #0]
 8028466:	6018      	strpl	r0, [r3, #0]
 8028468:	e7eb      	b.n	8028442 <_scanf_i+0x1aa>
 802846a:	2001      	movs	r0, #1
 802846c:	e7f2      	b.n	8028454 <_scanf_i+0x1bc>
 802846e:	bf00      	nop
 8028470:	0802cf34 	.word	0x0802cf34
 8028474:	08024669 	.word	0x08024669
 8028478:	08029025 	.word	0x08029025
 802847c:	0802d529 	.word	0x0802d529

08028480 <__sflush_r>:
 8028480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028488:	0716      	lsls	r6, r2, #28
 802848a:	4605      	mov	r5, r0
 802848c:	460c      	mov	r4, r1
 802848e:	d454      	bmi.n	802853a <__sflush_r+0xba>
 8028490:	684b      	ldr	r3, [r1, #4]
 8028492:	2b00      	cmp	r3, #0
 8028494:	dc02      	bgt.n	802849c <__sflush_r+0x1c>
 8028496:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028498:	2b00      	cmp	r3, #0
 802849a:	dd48      	ble.n	802852e <__sflush_r+0xae>
 802849c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802849e:	2e00      	cmp	r6, #0
 80284a0:	d045      	beq.n	802852e <__sflush_r+0xae>
 80284a2:	2300      	movs	r3, #0
 80284a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80284a8:	682f      	ldr	r7, [r5, #0]
 80284aa:	6a21      	ldr	r1, [r4, #32]
 80284ac:	602b      	str	r3, [r5, #0]
 80284ae:	d030      	beq.n	8028512 <__sflush_r+0x92>
 80284b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80284b2:	89a3      	ldrh	r3, [r4, #12]
 80284b4:	0759      	lsls	r1, r3, #29
 80284b6:	d505      	bpl.n	80284c4 <__sflush_r+0x44>
 80284b8:	6863      	ldr	r3, [r4, #4]
 80284ba:	1ad2      	subs	r2, r2, r3
 80284bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80284be:	b10b      	cbz	r3, 80284c4 <__sflush_r+0x44>
 80284c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80284c2:	1ad2      	subs	r2, r2, r3
 80284c4:	2300      	movs	r3, #0
 80284c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80284c8:	6a21      	ldr	r1, [r4, #32]
 80284ca:	4628      	mov	r0, r5
 80284cc:	47b0      	blx	r6
 80284ce:	1c43      	adds	r3, r0, #1
 80284d0:	89a3      	ldrh	r3, [r4, #12]
 80284d2:	d106      	bne.n	80284e2 <__sflush_r+0x62>
 80284d4:	6829      	ldr	r1, [r5, #0]
 80284d6:	291d      	cmp	r1, #29
 80284d8:	d82b      	bhi.n	8028532 <__sflush_r+0xb2>
 80284da:	4a2a      	ldr	r2, [pc, #168]	@ (8028584 <__sflush_r+0x104>)
 80284dc:	410a      	asrs	r2, r1
 80284de:	07d6      	lsls	r6, r2, #31
 80284e0:	d427      	bmi.n	8028532 <__sflush_r+0xb2>
 80284e2:	2200      	movs	r2, #0
 80284e4:	6062      	str	r2, [r4, #4]
 80284e6:	04d9      	lsls	r1, r3, #19
 80284e8:	6922      	ldr	r2, [r4, #16]
 80284ea:	6022      	str	r2, [r4, #0]
 80284ec:	d504      	bpl.n	80284f8 <__sflush_r+0x78>
 80284ee:	1c42      	adds	r2, r0, #1
 80284f0:	d101      	bne.n	80284f6 <__sflush_r+0x76>
 80284f2:	682b      	ldr	r3, [r5, #0]
 80284f4:	b903      	cbnz	r3, 80284f8 <__sflush_r+0x78>
 80284f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80284f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80284fa:	602f      	str	r7, [r5, #0]
 80284fc:	b1b9      	cbz	r1, 802852e <__sflush_r+0xae>
 80284fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028502:	4299      	cmp	r1, r3
 8028504:	d002      	beq.n	802850c <__sflush_r+0x8c>
 8028506:	4628      	mov	r0, r5
 8028508:	f7fd ff54 	bl	80263b4 <_free_r>
 802850c:	2300      	movs	r3, #0
 802850e:	6363      	str	r3, [r4, #52]	@ 0x34
 8028510:	e00d      	b.n	802852e <__sflush_r+0xae>
 8028512:	2301      	movs	r3, #1
 8028514:	4628      	mov	r0, r5
 8028516:	47b0      	blx	r6
 8028518:	4602      	mov	r2, r0
 802851a:	1c50      	adds	r0, r2, #1
 802851c:	d1c9      	bne.n	80284b2 <__sflush_r+0x32>
 802851e:	682b      	ldr	r3, [r5, #0]
 8028520:	2b00      	cmp	r3, #0
 8028522:	d0c6      	beq.n	80284b2 <__sflush_r+0x32>
 8028524:	2b1d      	cmp	r3, #29
 8028526:	d001      	beq.n	802852c <__sflush_r+0xac>
 8028528:	2b16      	cmp	r3, #22
 802852a:	d11e      	bne.n	802856a <__sflush_r+0xea>
 802852c:	602f      	str	r7, [r5, #0]
 802852e:	2000      	movs	r0, #0
 8028530:	e022      	b.n	8028578 <__sflush_r+0xf8>
 8028532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028536:	b21b      	sxth	r3, r3
 8028538:	e01b      	b.n	8028572 <__sflush_r+0xf2>
 802853a:	690f      	ldr	r7, [r1, #16]
 802853c:	2f00      	cmp	r7, #0
 802853e:	d0f6      	beq.n	802852e <__sflush_r+0xae>
 8028540:	0793      	lsls	r3, r2, #30
 8028542:	680e      	ldr	r6, [r1, #0]
 8028544:	bf08      	it	eq
 8028546:	694b      	ldreq	r3, [r1, #20]
 8028548:	600f      	str	r7, [r1, #0]
 802854a:	bf18      	it	ne
 802854c:	2300      	movne	r3, #0
 802854e:	eba6 0807 	sub.w	r8, r6, r7
 8028552:	608b      	str	r3, [r1, #8]
 8028554:	f1b8 0f00 	cmp.w	r8, #0
 8028558:	dde9      	ble.n	802852e <__sflush_r+0xae>
 802855a:	6a21      	ldr	r1, [r4, #32]
 802855c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802855e:	4643      	mov	r3, r8
 8028560:	463a      	mov	r2, r7
 8028562:	4628      	mov	r0, r5
 8028564:	47b0      	blx	r6
 8028566:	2800      	cmp	r0, #0
 8028568:	dc08      	bgt.n	802857c <__sflush_r+0xfc>
 802856a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802856e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028572:	81a3      	strh	r3, [r4, #12]
 8028574:	f04f 30ff 	mov.w	r0, #4294967295
 8028578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802857c:	4407      	add	r7, r0
 802857e:	eba8 0800 	sub.w	r8, r8, r0
 8028582:	e7e7      	b.n	8028554 <__sflush_r+0xd4>
 8028584:	dfbffffe 	.word	0xdfbffffe

08028588 <_fflush_r>:
 8028588:	b538      	push	{r3, r4, r5, lr}
 802858a:	690b      	ldr	r3, [r1, #16]
 802858c:	4605      	mov	r5, r0
 802858e:	460c      	mov	r4, r1
 8028590:	b913      	cbnz	r3, 8028598 <_fflush_r+0x10>
 8028592:	2500      	movs	r5, #0
 8028594:	4628      	mov	r0, r5
 8028596:	bd38      	pop	{r3, r4, r5, pc}
 8028598:	b118      	cbz	r0, 80285a2 <_fflush_r+0x1a>
 802859a:	6a03      	ldr	r3, [r0, #32]
 802859c:	b90b      	cbnz	r3, 80285a2 <_fflush_r+0x1a>
 802859e:	f7fc ff33 	bl	8025408 <__sinit>
 80285a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80285a6:	2b00      	cmp	r3, #0
 80285a8:	d0f3      	beq.n	8028592 <_fflush_r+0xa>
 80285aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80285ac:	07d0      	lsls	r0, r2, #31
 80285ae:	d404      	bmi.n	80285ba <_fflush_r+0x32>
 80285b0:	0599      	lsls	r1, r3, #22
 80285b2:	d402      	bmi.n	80285ba <_fflush_r+0x32>
 80285b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80285b6:	f7fd f8e8 	bl	802578a <__retarget_lock_acquire_recursive>
 80285ba:	4628      	mov	r0, r5
 80285bc:	4621      	mov	r1, r4
 80285be:	f7ff ff5f 	bl	8028480 <__sflush_r>
 80285c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80285c4:	07da      	lsls	r2, r3, #31
 80285c6:	4605      	mov	r5, r0
 80285c8:	d4e4      	bmi.n	8028594 <_fflush_r+0xc>
 80285ca:	89a3      	ldrh	r3, [r4, #12]
 80285cc:	059b      	lsls	r3, r3, #22
 80285ce:	d4e1      	bmi.n	8028594 <_fflush_r+0xc>
 80285d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80285d2:	f7fd f8db 	bl	802578c <__retarget_lock_release_recursive>
 80285d6:	e7dd      	b.n	8028594 <_fflush_r+0xc>

080285d8 <fiprintf>:
 80285d8:	b40e      	push	{r1, r2, r3}
 80285da:	b503      	push	{r0, r1, lr}
 80285dc:	4601      	mov	r1, r0
 80285de:	ab03      	add	r3, sp, #12
 80285e0:	4805      	ldr	r0, [pc, #20]	@ (80285f8 <fiprintf+0x20>)
 80285e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80285e6:	6800      	ldr	r0, [r0, #0]
 80285e8:	9301      	str	r3, [sp, #4]
 80285ea:	f7ff fce3 	bl	8027fb4 <_vfiprintf_r>
 80285ee:	b002      	add	sp, #8
 80285f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80285f4:	b003      	add	sp, #12
 80285f6:	4770      	bx	lr
 80285f8:	24000224 	.word	0x24000224

080285fc <__sccl>:
 80285fc:	b570      	push	{r4, r5, r6, lr}
 80285fe:	780b      	ldrb	r3, [r1, #0]
 8028600:	4604      	mov	r4, r0
 8028602:	2b5e      	cmp	r3, #94	@ 0x5e
 8028604:	bf0b      	itete	eq
 8028606:	784b      	ldrbeq	r3, [r1, #1]
 8028608:	1c4a      	addne	r2, r1, #1
 802860a:	1c8a      	addeq	r2, r1, #2
 802860c:	2100      	movne	r1, #0
 802860e:	bf08      	it	eq
 8028610:	2101      	moveq	r1, #1
 8028612:	3801      	subs	r0, #1
 8028614:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8028618:	f800 1f01 	strb.w	r1, [r0, #1]!
 802861c:	42a8      	cmp	r0, r5
 802861e:	d1fb      	bne.n	8028618 <__sccl+0x1c>
 8028620:	b90b      	cbnz	r3, 8028626 <__sccl+0x2a>
 8028622:	1e50      	subs	r0, r2, #1
 8028624:	bd70      	pop	{r4, r5, r6, pc}
 8028626:	f081 0101 	eor.w	r1, r1, #1
 802862a:	54e1      	strb	r1, [r4, r3]
 802862c:	4610      	mov	r0, r2
 802862e:	4602      	mov	r2, r0
 8028630:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028634:	2d2d      	cmp	r5, #45	@ 0x2d
 8028636:	d005      	beq.n	8028644 <__sccl+0x48>
 8028638:	2d5d      	cmp	r5, #93	@ 0x5d
 802863a:	d016      	beq.n	802866a <__sccl+0x6e>
 802863c:	2d00      	cmp	r5, #0
 802863e:	d0f1      	beq.n	8028624 <__sccl+0x28>
 8028640:	462b      	mov	r3, r5
 8028642:	e7f2      	b.n	802862a <__sccl+0x2e>
 8028644:	7846      	ldrb	r6, [r0, #1]
 8028646:	2e5d      	cmp	r6, #93	@ 0x5d
 8028648:	d0fa      	beq.n	8028640 <__sccl+0x44>
 802864a:	42b3      	cmp	r3, r6
 802864c:	dcf8      	bgt.n	8028640 <__sccl+0x44>
 802864e:	3002      	adds	r0, #2
 8028650:	461a      	mov	r2, r3
 8028652:	3201      	adds	r2, #1
 8028654:	4296      	cmp	r6, r2
 8028656:	54a1      	strb	r1, [r4, r2]
 8028658:	dcfb      	bgt.n	8028652 <__sccl+0x56>
 802865a:	1af2      	subs	r2, r6, r3
 802865c:	3a01      	subs	r2, #1
 802865e:	1c5d      	adds	r5, r3, #1
 8028660:	42b3      	cmp	r3, r6
 8028662:	bfa8      	it	ge
 8028664:	2200      	movge	r2, #0
 8028666:	18ab      	adds	r3, r5, r2
 8028668:	e7e1      	b.n	802862e <__sccl+0x32>
 802866a:	4610      	mov	r0, r2
 802866c:	e7da      	b.n	8028624 <__sccl+0x28>

0802866e <__submore>:
 802866e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028672:	460c      	mov	r4, r1
 8028674:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8028676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802867a:	4299      	cmp	r1, r3
 802867c:	d11d      	bne.n	80286ba <__submore+0x4c>
 802867e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8028682:	f7fb fead 	bl	80243e0 <_malloc_r>
 8028686:	b918      	cbnz	r0, 8028690 <__submore+0x22>
 8028688:	f04f 30ff 	mov.w	r0, #4294967295
 802868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028694:	63a3      	str	r3, [r4, #56]	@ 0x38
 8028696:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802869a:	6360      	str	r0, [r4, #52]	@ 0x34
 802869c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80286a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80286a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80286a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80286ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80286b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80286b4:	6020      	str	r0, [r4, #0]
 80286b6:	2000      	movs	r0, #0
 80286b8:	e7e8      	b.n	802868c <__submore+0x1e>
 80286ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80286bc:	0077      	lsls	r7, r6, #1
 80286be:	463a      	mov	r2, r7
 80286c0:	f000 fc13 	bl	8028eea <_realloc_r>
 80286c4:	4605      	mov	r5, r0
 80286c6:	2800      	cmp	r0, #0
 80286c8:	d0de      	beq.n	8028688 <__submore+0x1a>
 80286ca:	eb00 0806 	add.w	r8, r0, r6
 80286ce:	4601      	mov	r1, r0
 80286d0:	4632      	mov	r2, r6
 80286d2:	4640      	mov	r0, r8
 80286d4:	f7fd f85b 	bl	802578e <memcpy>
 80286d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80286dc:	f8c4 8000 	str.w	r8, [r4]
 80286e0:	e7e9      	b.n	80286b6 <__submore+0x48>

080286e2 <__swbuf_r>:
 80286e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80286e4:	460e      	mov	r6, r1
 80286e6:	4614      	mov	r4, r2
 80286e8:	4605      	mov	r5, r0
 80286ea:	b118      	cbz	r0, 80286f4 <__swbuf_r+0x12>
 80286ec:	6a03      	ldr	r3, [r0, #32]
 80286ee:	b90b      	cbnz	r3, 80286f4 <__swbuf_r+0x12>
 80286f0:	f7fc fe8a 	bl	8025408 <__sinit>
 80286f4:	69a3      	ldr	r3, [r4, #24]
 80286f6:	60a3      	str	r3, [r4, #8]
 80286f8:	89a3      	ldrh	r3, [r4, #12]
 80286fa:	071a      	lsls	r2, r3, #28
 80286fc:	d501      	bpl.n	8028702 <__swbuf_r+0x20>
 80286fe:	6923      	ldr	r3, [r4, #16]
 8028700:	b943      	cbnz	r3, 8028714 <__swbuf_r+0x32>
 8028702:	4621      	mov	r1, r4
 8028704:	4628      	mov	r0, r5
 8028706:	f000 f82b 	bl	8028760 <__swsetup_r>
 802870a:	b118      	cbz	r0, 8028714 <__swbuf_r+0x32>
 802870c:	f04f 37ff 	mov.w	r7, #4294967295
 8028710:	4638      	mov	r0, r7
 8028712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028714:	6823      	ldr	r3, [r4, #0]
 8028716:	6922      	ldr	r2, [r4, #16]
 8028718:	1a98      	subs	r0, r3, r2
 802871a:	6963      	ldr	r3, [r4, #20]
 802871c:	b2f6      	uxtb	r6, r6
 802871e:	4283      	cmp	r3, r0
 8028720:	4637      	mov	r7, r6
 8028722:	dc05      	bgt.n	8028730 <__swbuf_r+0x4e>
 8028724:	4621      	mov	r1, r4
 8028726:	4628      	mov	r0, r5
 8028728:	f7ff ff2e 	bl	8028588 <_fflush_r>
 802872c:	2800      	cmp	r0, #0
 802872e:	d1ed      	bne.n	802870c <__swbuf_r+0x2a>
 8028730:	68a3      	ldr	r3, [r4, #8]
 8028732:	3b01      	subs	r3, #1
 8028734:	60a3      	str	r3, [r4, #8]
 8028736:	6823      	ldr	r3, [r4, #0]
 8028738:	1c5a      	adds	r2, r3, #1
 802873a:	6022      	str	r2, [r4, #0]
 802873c:	701e      	strb	r6, [r3, #0]
 802873e:	6962      	ldr	r2, [r4, #20]
 8028740:	1c43      	adds	r3, r0, #1
 8028742:	429a      	cmp	r2, r3
 8028744:	d004      	beq.n	8028750 <__swbuf_r+0x6e>
 8028746:	89a3      	ldrh	r3, [r4, #12]
 8028748:	07db      	lsls	r3, r3, #31
 802874a:	d5e1      	bpl.n	8028710 <__swbuf_r+0x2e>
 802874c:	2e0a      	cmp	r6, #10
 802874e:	d1df      	bne.n	8028710 <__swbuf_r+0x2e>
 8028750:	4621      	mov	r1, r4
 8028752:	4628      	mov	r0, r5
 8028754:	f7ff ff18 	bl	8028588 <_fflush_r>
 8028758:	2800      	cmp	r0, #0
 802875a:	d0d9      	beq.n	8028710 <__swbuf_r+0x2e>
 802875c:	e7d6      	b.n	802870c <__swbuf_r+0x2a>
	...

08028760 <__swsetup_r>:
 8028760:	b538      	push	{r3, r4, r5, lr}
 8028762:	4b29      	ldr	r3, [pc, #164]	@ (8028808 <__swsetup_r+0xa8>)
 8028764:	4605      	mov	r5, r0
 8028766:	6818      	ldr	r0, [r3, #0]
 8028768:	460c      	mov	r4, r1
 802876a:	b118      	cbz	r0, 8028774 <__swsetup_r+0x14>
 802876c:	6a03      	ldr	r3, [r0, #32]
 802876e:	b90b      	cbnz	r3, 8028774 <__swsetup_r+0x14>
 8028770:	f7fc fe4a 	bl	8025408 <__sinit>
 8028774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028778:	0719      	lsls	r1, r3, #28
 802877a:	d422      	bmi.n	80287c2 <__swsetup_r+0x62>
 802877c:	06da      	lsls	r2, r3, #27
 802877e:	d407      	bmi.n	8028790 <__swsetup_r+0x30>
 8028780:	2209      	movs	r2, #9
 8028782:	602a      	str	r2, [r5, #0]
 8028784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028788:	81a3      	strh	r3, [r4, #12]
 802878a:	f04f 30ff 	mov.w	r0, #4294967295
 802878e:	e033      	b.n	80287f8 <__swsetup_r+0x98>
 8028790:	0758      	lsls	r0, r3, #29
 8028792:	d512      	bpl.n	80287ba <__swsetup_r+0x5a>
 8028794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028796:	b141      	cbz	r1, 80287aa <__swsetup_r+0x4a>
 8028798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802879c:	4299      	cmp	r1, r3
 802879e:	d002      	beq.n	80287a6 <__swsetup_r+0x46>
 80287a0:	4628      	mov	r0, r5
 80287a2:	f7fd fe07 	bl	80263b4 <_free_r>
 80287a6:	2300      	movs	r3, #0
 80287a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80287aa:	89a3      	ldrh	r3, [r4, #12]
 80287ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80287b0:	81a3      	strh	r3, [r4, #12]
 80287b2:	2300      	movs	r3, #0
 80287b4:	6063      	str	r3, [r4, #4]
 80287b6:	6923      	ldr	r3, [r4, #16]
 80287b8:	6023      	str	r3, [r4, #0]
 80287ba:	89a3      	ldrh	r3, [r4, #12]
 80287bc:	f043 0308 	orr.w	r3, r3, #8
 80287c0:	81a3      	strh	r3, [r4, #12]
 80287c2:	6923      	ldr	r3, [r4, #16]
 80287c4:	b94b      	cbnz	r3, 80287da <__swsetup_r+0x7a>
 80287c6:	89a3      	ldrh	r3, [r4, #12]
 80287c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80287cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80287d0:	d003      	beq.n	80287da <__swsetup_r+0x7a>
 80287d2:	4621      	mov	r1, r4
 80287d4:	4628      	mov	r0, r5
 80287d6:	f000 fc5a 	bl	802908e <__smakebuf_r>
 80287da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80287de:	f013 0201 	ands.w	r2, r3, #1
 80287e2:	d00a      	beq.n	80287fa <__swsetup_r+0x9a>
 80287e4:	2200      	movs	r2, #0
 80287e6:	60a2      	str	r2, [r4, #8]
 80287e8:	6962      	ldr	r2, [r4, #20]
 80287ea:	4252      	negs	r2, r2
 80287ec:	61a2      	str	r2, [r4, #24]
 80287ee:	6922      	ldr	r2, [r4, #16]
 80287f0:	b942      	cbnz	r2, 8028804 <__swsetup_r+0xa4>
 80287f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80287f6:	d1c5      	bne.n	8028784 <__swsetup_r+0x24>
 80287f8:	bd38      	pop	{r3, r4, r5, pc}
 80287fa:	0799      	lsls	r1, r3, #30
 80287fc:	bf58      	it	pl
 80287fe:	6962      	ldrpl	r2, [r4, #20]
 8028800:	60a2      	str	r2, [r4, #8]
 8028802:	e7f4      	b.n	80287ee <__swsetup_r+0x8e>
 8028804:	2000      	movs	r0, #0
 8028806:	e7f7      	b.n	80287f8 <__swsetup_r+0x98>
 8028808:	24000224 	.word	0x24000224
 802880c:	00000000 	.word	0x00000000

08028810 <nan>:
 8028810:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8028818 <nan+0x8>
 8028814:	4770      	bx	lr
 8028816:	bf00      	nop
 8028818:	00000000 	.word	0x00000000
 802881c:	7ff80000 	.word	0x7ff80000

08028820 <abort>:
 8028820:	b508      	push	{r3, lr}
 8028822:	2006      	movs	r0, #6
 8028824:	f000 fc98 	bl	8029158 <raise>
 8028828:	2001      	movs	r0, #1
 802882a:	f7dc fec1 	bl	80055b0 <_exit>

0802882e <_calloc_r>:
 802882e:	b570      	push	{r4, r5, r6, lr}
 8028830:	fba1 5402 	umull	r5, r4, r1, r2
 8028834:	b93c      	cbnz	r4, 8028846 <_calloc_r+0x18>
 8028836:	4629      	mov	r1, r5
 8028838:	f7fb fdd2 	bl	80243e0 <_malloc_r>
 802883c:	4606      	mov	r6, r0
 802883e:	b928      	cbnz	r0, 802884c <_calloc_r+0x1e>
 8028840:	2600      	movs	r6, #0
 8028842:	4630      	mov	r0, r6
 8028844:	bd70      	pop	{r4, r5, r6, pc}
 8028846:	220c      	movs	r2, #12
 8028848:	6002      	str	r2, [r0, #0]
 802884a:	e7f9      	b.n	8028840 <_calloc_r+0x12>
 802884c:	462a      	mov	r2, r5
 802884e:	4621      	mov	r1, r4
 8028850:	f7fc fefc 	bl	802564c <memset>
 8028854:	e7f5      	b.n	8028842 <_calloc_r+0x14>

08028856 <rshift>:
 8028856:	6903      	ldr	r3, [r0, #16]
 8028858:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802885c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028860:	ea4f 1261 	mov.w	r2, r1, asr #5
 8028864:	f100 0414 	add.w	r4, r0, #20
 8028868:	dd45      	ble.n	80288f6 <rshift+0xa0>
 802886a:	f011 011f 	ands.w	r1, r1, #31
 802886e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8028872:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8028876:	d10c      	bne.n	8028892 <rshift+0x3c>
 8028878:	f100 0710 	add.w	r7, r0, #16
 802887c:	4629      	mov	r1, r5
 802887e:	42b1      	cmp	r1, r6
 8028880:	d334      	bcc.n	80288ec <rshift+0x96>
 8028882:	1a9b      	subs	r3, r3, r2
 8028884:	009b      	lsls	r3, r3, #2
 8028886:	1eea      	subs	r2, r5, #3
 8028888:	4296      	cmp	r6, r2
 802888a:	bf38      	it	cc
 802888c:	2300      	movcc	r3, #0
 802888e:	4423      	add	r3, r4
 8028890:	e015      	b.n	80288be <rshift+0x68>
 8028892:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028896:	f1c1 0820 	rsb	r8, r1, #32
 802889a:	40cf      	lsrs	r7, r1
 802889c:	f105 0e04 	add.w	lr, r5, #4
 80288a0:	46a1      	mov	r9, r4
 80288a2:	4576      	cmp	r6, lr
 80288a4:	46f4      	mov	ip, lr
 80288a6:	d815      	bhi.n	80288d4 <rshift+0x7e>
 80288a8:	1a9a      	subs	r2, r3, r2
 80288aa:	0092      	lsls	r2, r2, #2
 80288ac:	3a04      	subs	r2, #4
 80288ae:	3501      	adds	r5, #1
 80288b0:	42ae      	cmp	r6, r5
 80288b2:	bf38      	it	cc
 80288b4:	2200      	movcc	r2, #0
 80288b6:	18a3      	adds	r3, r4, r2
 80288b8:	50a7      	str	r7, [r4, r2]
 80288ba:	b107      	cbz	r7, 80288be <rshift+0x68>
 80288bc:	3304      	adds	r3, #4
 80288be:	1b1a      	subs	r2, r3, r4
 80288c0:	42a3      	cmp	r3, r4
 80288c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80288c6:	bf08      	it	eq
 80288c8:	2300      	moveq	r3, #0
 80288ca:	6102      	str	r2, [r0, #16]
 80288cc:	bf08      	it	eq
 80288ce:	6143      	streq	r3, [r0, #20]
 80288d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80288d4:	f8dc c000 	ldr.w	ip, [ip]
 80288d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80288dc:	ea4c 0707 	orr.w	r7, ip, r7
 80288e0:	f849 7b04 	str.w	r7, [r9], #4
 80288e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80288e8:	40cf      	lsrs	r7, r1
 80288ea:	e7da      	b.n	80288a2 <rshift+0x4c>
 80288ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80288f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80288f4:	e7c3      	b.n	802887e <rshift+0x28>
 80288f6:	4623      	mov	r3, r4
 80288f8:	e7e1      	b.n	80288be <rshift+0x68>

080288fa <__hexdig_fun>:
 80288fa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80288fe:	2b09      	cmp	r3, #9
 8028900:	d802      	bhi.n	8028908 <__hexdig_fun+0xe>
 8028902:	3820      	subs	r0, #32
 8028904:	b2c0      	uxtb	r0, r0
 8028906:	4770      	bx	lr
 8028908:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802890c:	2b05      	cmp	r3, #5
 802890e:	d801      	bhi.n	8028914 <__hexdig_fun+0x1a>
 8028910:	3847      	subs	r0, #71	@ 0x47
 8028912:	e7f7      	b.n	8028904 <__hexdig_fun+0xa>
 8028914:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028918:	2b05      	cmp	r3, #5
 802891a:	d801      	bhi.n	8028920 <__hexdig_fun+0x26>
 802891c:	3827      	subs	r0, #39	@ 0x27
 802891e:	e7f1      	b.n	8028904 <__hexdig_fun+0xa>
 8028920:	2000      	movs	r0, #0
 8028922:	4770      	bx	lr

08028924 <__gethex>:
 8028924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028928:	b085      	sub	sp, #20
 802892a:	468a      	mov	sl, r1
 802892c:	9302      	str	r3, [sp, #8]
 802892e:	680b      	ldr	r3, [r1, #0]
 8028930:	9001      	str	r0, [sp, #4]
 8028932:	4690      	mov	r8, r2
 8028934:	1c9c      	adds	r4, r3, #2
 8028936:	46a1      	mov	r9, r4
 8028938:	f814 0b01 	ldrb.w	r0, [r4], #1
 802893c:	2830      	cmp	r0, #48	@ 0x30
 802893e:	d0fa      	beq.n	8028936 <__gethex+0x12>
 8028940:	eba9 0303 	sub.w	r3, r9, r3
 8028944:	f1a3 0b02 	sub.w	fp, r3, #2
 8028948:	f7ff ffd7 	bl	80288fa <__hexdig_fun>
 802894c:	4605      	mov	r5, r0
 802894e:	2800      	cmp	r0, #0
 8028950:	d168      	bne.n	8028a24 <__gethex+0x100>
 8028952:	49a0      	ldr	r1, [pc, #640]	@ (8028bd4 <__gethex+0x2b0>)
 8028954:	2201      	movs	r2, #1
 8028956:	4648      	mov	r0, r9
 8028958:	f7fc fe80 	bl	802565c <strncmp>
 802895c:	4607      	mov	r7, r0
 802895e:	2800      	cmp	r0, #0
 8028960:	d167      	bne.n	8028a32 <__gethex+0x10e>
 8028962:	f899 0001 	ldrb.w	r0, [r9, #1]
 8028966:	4626      	mov	r6, r4
 8028968:	f7ff ffc7 	bl	80288fa <__hexdig_fun>
 802896c:	2800      	cmp	r0, #0
 802896e:	d062      	beq.n	8028a36 <__gethex+0x112>
 8028970:	4623      	mov	r3, r4
 8028972:	7818      	ldrb	r0, [r3, #0]
 8028974:	2830      	cmp	r0, #48	@ 0x30
 8028976:	4699      	mov	r9, r3
 8028978:	f103 0301 	add.w	r3, r3, #1
 802897c:	d0f9      	beq.n	8028972 <__gethex+0x4e>
 802897e:	f7ff ffbc 	bl	80288fa <__hexdig_fun>
 8028982:	fab0 f580 	clz	r5, r0
 8028986:	096d      	lsrs	r5, r5, #5
 8028988:	f04f 0b01 	mov.w	fp, #1
 802898c:	464a      	mov	r2, r9
 802898e:	4616      	mov	r6, r2
 8028990:	3201      	adds	r2, #1
 8028992:	7830      	ldrb	r0, [r6, #0]
 8028994:	f7ff ffb1 	bl	80288fa <__hexdig_fun>
 8028998:	2800      	cmp	r0, #0
 802899a:	d1f8      	bne.n	802898e <__gethex+0x6a>
 802899c:	498d      	ldr	r1, [pc, #564]	@ (8028bd4 <__gethex+0x2b0>)
 802899e:	2201      	movs	r2, #1
 80289a0:	4630      	mov	r0, r6
 80289a2:	f7fc fe5b 	bl	802565c <strncmp>
 80289a6:	2800      	cmp	r0, #0
 80289a8:	d13f      	bne.n	8028a2a <__gethex+0x106>
 80289aa:	b944      	cbnz	r4, 80289be <__gethex+0x9a>
 80289ac:	1c74      	adds	r4, r6, #1
 80289ae:	4622      	mov	r2, r4
 80289b0:	4616      	mov	r6, r2
 80289b2:	3201      	adds	r2, #1
 80289b4:	7830      	ldrb	r0, [r6, #0]
 80289b6:	f7ff ffa0 	bl	80288fa <__hexdig_fun>
 80289ba:	2800      	cmp	r0, #0
 80289bc:	d1f8      	bne.n	80289b0 <__gethex+0x8c>
 80289be:	1ba4      	subs	r4, r4, r6
 80289c0:	00a7      	lsls	r7, r4, #2
 80289c2:	7833      	ldrb	r3, [r6, #0]
 80289c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80289c8:	2b50      	cmp	r3, #80	@ 0x50
 80289ca:	d13e      	bne.n	8028a4a <__gethex+0x126>
 80289cc:	7873      	ldrb	r3, [r6, #1]
 80289ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80289d0:	d033      	beq.n	8028a3a <__gethex+0x116>
 80289d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80289d4:	d034      	beq.n	8028a40 <__gethex+0x11c>
 80289d6:	1c71      	adds	r1, r6, #1
 80289d8:	2400      	movs	r4, #0
 80289da:	7808      	ldrb	r0, [r1, #0]
 80289dc:	f7ff ff8d 	bl	80288fa <__hexdig_fun>
 80289e0:	1e43      	subs	r3, r0, #1
 80289e2:	b2db      	uxtb	r3, r3
 80289e4:	2b18      	cmp	r3, #24
 80289e6:	d830      	bhi.n	8028a4a <__gethex+0x126>
 80289e8:	f1a0 0210 	sub.w	r2, r0, #16
 80289ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80289f0:	f7ff ff83 	bl	80288fa <__hexdig_fun>
 80289f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80289f8:	fa5f fc8c 	uxtb.w	ip, ip
 80289fc:	f1bc 0f18 	cmp.w	ip, #24
 8028a00:	f04f 030a 	mov.w	r3, #10
 8028a04:	d91e      	bls.n	8028a44 <__gethex+0x120>
 8028a06:	b104      	cbz	r4, 8028a0a <__gethex+0xe6>
 8028a08:	4252      	negs	r2, r2
 8028a0a:	4417      	add	r7, r2
 8028a0c:	f8ca 1000 	str.w	r1, [sl]
 8028a10:	b1ed      	cbz	r5, 8028a4e <__gethex+0x12a>
 8028a12:	f1bb 0f00 	cmp.w	fp, #0
 8028a16:	bf0c      	ite	eq
 8028a18:	2506      	moveq	r5, #6
 8028a1a:	2500      	movne	r5, #0
 8028a1c:	4628      	mov	r0, r5
 8028a1e:	b005      	add	sp, #20
 8028a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a24:	2500      	movs	r5, #0
 8028a26:	462c      	mov	r4, r5
 8028a28:	e7b0      	b.n	802898c <__gethex+0x68>
 8028a2a:	2c00      	cmp	r4, #0
 8028a2c:	d1c7      	bne.n	80289be <__gethex+0x9a>
 8028a2e:	4627      	mov	r7, r4
 8028a30:	e7c7      	b.n	80289c2 <__gethex+0x9e>
 8028a32:	464e      	mov	r6, r9
 8028a34:	462f      	mov	r7, r5
 8028a36:	2501      	movs	r5, #1
 8028a38:	e7c3      	b.n	80289c2 <__gethex+0x9e>
 8028a3a:	2400      	movs	r4, #0
 8028a3c:	1cb1      	adds	r1, r6, #2
 8028a3e:	e7cc      	b.n	80289da <__gethex+0xb6>
 8028a40:	2401      	movs	r4, #1
 8028a42:	e7fb      	b.n	8028a3c <__gethex+0x118>
 8028a44:	fb03 0002 	mla	r0, r3, r2, r0
 8028a48:	e7ce      	b.n	80289e8 <__gethex+0xc4>
 8028a4a:	4631      	mov	r1, r6
 8028a4c:	e7de      	b.n	8028a0c <__gethex+0xe8>
 8028a4e:	eba6 0309 	sub.w	r3, r6, r9
 8028a52:	3b01      	subs	r3, #1
 8028a54:	4629      	mov	r1, r5
 8028a56:	2b07      	cmp	r3, #7
 8028a58:	dc0a      	bgt.n	8028a70 <__gethex+0x14c>
 8028a5a:	9801      	ldr	r0, [sp, #4]
 8028a5c:	f7fd fcf4 	bl	8026448 <_Balloc>
 8028a60:	4604      	mov	r4, r0
 8028a62:	b940      	cbnz	r0, 8028a76 <__gethex+0x152>
 8028a64:	4b5c      	ldr	r3, [pc, #368]	@ (8028bd8 <__gethex+0x2b4>)
 8028a66:	4602      	mov	r2, r0
 8028a68:	21e4      	movs	r1, #228	@ 0xe4
 8028a6a:	485c      	ldr	r0, [pc, #368]	@ (8028bdc <__gethex+0x2b8>)
 8028a6c:	f7fc fea4 	bl	80257b8 <__assert_func>
 8028a70:	3101      	adds	r1, #1
 8028a72:	105b      	asrs	r3, r3, #1
 8028a74:	e7ef      	b.n	8028a56 <__gethex+0x132>
 8028a76:	f100 0a14 	add.w	sl, r0, #20
 8028a7a:	2300      	movs	r3, #0
 8028a7c:	4655      	mov	r5, sl
 8028a7e:	469b      	mov	fp, r3
 8028a80:	45b1      	cmp	r9, r6
 8028a82:	d337      	bcc.n	8028af4 <__gethex+0x1d0>
 8028a84:	f845 bb04 	str.w	fp, [r5], #4
 8028a88:	eba5 050a 	sub.w	r5, r5, sl
 8028a8c:	10ad      	asrs	r5, r5, #2
 8028a8e:	6125      	str	r5, [r4, #16]
 8028a90:	4658      	mov	r0, fp
 8028a92:	f7fd fdcb 	bl	802662c <__hi0bits>
 8028a96:	016d      	lsls	r5, r5, #5
 8028a98:	f8d8 6000 	ldr.w	r6, [r8]
 8028a9c:	1a2d      	subs	r5, r5, r0
 8028a9e:	42b5      	cmp	r5, r6
 8028aa0:	dd54      	ble.n	8028b4c <__gethex+0x228>
 8028aa2:	1bad      	subs	r5, r5, r6
 8028aa4:	4629      	mov	r1, r5
 8028aa6:	4620      	mov	r0, r4
 8028aa8:	f7fe f95c 	bl	8026d64 <__any_on>
 8028aac:	4681      	mov	r9, r0
 8028aae:	b178      	cbz	r0, 8028ad0 <__gethex+0x1ac>
 8028ab0:	1e6b      	subs	r3, r5, #1
 8028ab2:	1159      	asrs	r1, r3, #5
 8028ab4:	f003 021f 	and.w	r2, r3, #31
 8028ab8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028abc:	f04f 0901 	mov.w	r9, #1
 8028ac0:	fa09 f202 	lsl.w	r2, r9, r2
 8028ac4:	420a      	tst	r2, r1
 8028ac6:	d003      	beq.n	8028ad0 <__gethex+0x1ac>
 8028ac8:	454b      	cmp	r3, r9
 8028aca:	dc36      	bgt.n	8028b3a <__gethex+0x216>
 8028acc:	f04f 0902 	mov.w	r9, #2
 8028ad0:	4629      	mov	r1, r5
 8028ad2:	4620      	mov	r0, r4
 8028ad4:	f7ff febf 	bl	8028856 <rshift>
 8028ad8:	442f      	add	r7, r5
 8028ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028ade:	42bb      	cmp	r3, r7
 8028ae0:	da42      	bge.n	8028b68 <__gethex+0x244>
 8028ae2:	9801      	ldr	r0, [sp, #4]
 8028ae4:	4621      	mov	r1, r4
 8028ae6:	f7fd fcef 	bl	80264c8 <_Bfree>
 8028aea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028aec:	2300      	movs	r3, #0
 8028aee:	6013      	str	r3, [r2, #0]
 8028af0:	25a3      	movs	r5, #163	@ 0xa3
 8028af2:	e793      	b.n	8028a1c <__gethex+0xf8>
 8028af4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028af8:	2a2e      	cmp	r2, #46	@ 0x2e
 8028afa:	d012      	beq.n	8028b22 <__gethex+0x1fe>
 8028afc:	2b20      	cmp	r3, #32
 8028afe:	d104      	bne.n	8028b0a <__gethex+0x1e6>
 8028b00:	f845 bb04 	str.w	fp, [r5], #4
 8028b04:	f04f 0b00 	mov.w	fp, #0
 8028b08:	465b      	mov	r3, fp
 8028b0a:	7830      	ldrb	r0, [r6, #0]
 8028b0c:	9303      	str	r3, [sp, #12]
 8028b0e:	f7ff fef4 	bl	80288fa <__hexdig_fun>
 8028b12:	9b03      	ldr	r3, [sp, #12]
 8028b14:	f000 000f 	and.w	r0, r0, #15
 8028b18:	4098      	lsls	r0, r3
 8028b1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8028b1e:	3304      	adds	r3, #4
 8028b20:	e7ae      	b.n	8028a80 <__gethex+0x15c>
 8028b22:	45b1      	cmp	r9, r6
 8028b24:	d8ea      	bhi.n	8028afc <__gethex+0x1d8>
 8028b26:	492b      	ldr	r1, [pc, #172]	@ (8028bd4 <__gethex+0x2b0>)
 8028b28:	9303      	str	r3, [sp, #12]
 8028b2a:	2201      	movs	r2, #1
 8028b2c:	4630      	mov	r0, r6
 8028b2e:	f7fc fd95 	bl	802565c <strncmp>
 8028b32:	9b03      	ldr	r3, [sp, #12]
 8028b34:	2800      	cmp	r0, #0
 8028b36:	d1e1      	bne.n	8028afc <__gethex+0x1d8>
 8028b38:	e7a2      	b.n	8028a80 <__gethex+0x15c>
 8028b3a:	1ea9      	subs	r1, r5, #2
 8028b3c:	4620      	mov	r0, r4
 8028b3e:	f7fe f911 	bl	8026d64 <__any_on>
 8028b42:	2800      	cmp	r0, #0
 8028b44:	d0c2      	beq.n	8028acc <__gethex+0x1a8>
 8028b46:	f04f 0903 	mov.w	r9, #3
 8028b4a:	e7c1      	b.n	8028ad0 <__gethex+0x1ac>
 8028b4c:	da09      	bge.n	8028b62 <__gethex+0x23e>
 8028b4e:	1b75      	subs	r5, r6, r5
 8028b50:	4621      	mov	r1, r4
 8028b52:	9801      	ldr	r0, [sp, #4]
 8028b54:	462a      	mov	r2, r5
 8028b56:	f7fd fecf 	bl	80268f8 <__lshift>
 8028b5a:	1b7f      	subs	r7, r7, r5
 8028b5c:	4604      	mov	r4, r0
 8028b5e:	f100 0a14 	add.w	sl, r0, #20
 8028b62:	f04f 0900 	mov.w	r9, #0
 8028b66:	e7b8      	b.n	8028ada <__gethex+0x1b6>
 8028b68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028b6c:	42bd      	cmp	r5, r7
 8028b6e:	dd6f      	ble.n	8028c50 <__gethex+0x32c>
 8028b70:	1bed      	subs	r5, r5, r7
 8028b72:	42ae      	cmp	r6, r5
 8028b74:	dc34      	bgt.n	8028be0 <__gethex+0x2bc>
 8028b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028b7a:	2b02      	cmp	r3, #2
 8028b7c:	d022      	beq.n	8028bc4 <__gethex+0x2a0>
 8028b7e:	2b03      	cmp	r3, #3
 8028b80:	d024      	beq.n	8028bcc <__gethex+0x2a8>
 8028b82:	2b01      	cmp	r3, #1
 8028b84:	d115      	bne.n	8028bb2 <__gethex+0x28e>
 8028b86:	42ae      	cmp	r6, r5
 8028b88:	d113      	bne.n	8028bb2 <__gethex+0x28e>
 8028b8a:	2e01      	cmp	r6, #1
 8028b8c:	d10b      	bne.n	8028ba6 <__gethex+0x282>
 8028b8e:	9a02      	ldr	r2, [sp, #8]
 8028b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028b94:	6013      	str	r3, [r2, #0]
 8028b96:	2301      	movs	r3, #1
 8028b98:	6123      	str	r3, [r4, #16]
 8028b9a:	f8ca 3000 	str.w	r3, [sl]
 8028b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028ba0:	2562      	movs	r5, #98	@ 0x62
 8028ba2:	601c      	str	r4, [r3, #0]
 8028ba4:	e73a      	b.n	8028a1c <__gethex+0xf8>
 8028ba6:	1e71      	subs	r1, r6, #1
 8028ba8:	4620      	mov	r0, r4
 8028baa:	f7fe f8db 	bl	8026d64 <__any_on>
 8028bae:	2800      	cmp	r0, #0
 8028bb0:	d1ed      	bne.n	8028b8e <__gethex+0x26a>
 8028bb2:	9801      	ldr	r0, [sp, #4]
 8028bb4:	4621      	mov	r1, r4
 8028bb6:	f7fd fc87 	bl	80264c8 <_Bfree>
 8028bba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028bbc:	2300      	movs	r3, #0
 8028bbe:	6013      	str	r3, [r2, #0]
 8028bc0:	2550      	movs	r5, #80	@ 0x50
 8028bc2:	e72b      	b.n	8028a1c <__gethex+0xf8>
 8028bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028bc6:	2b00      	cmp	r3, #0
 8028bc8:	d1f3      	bne.n	8028bb2 <__gethex+0x28e>
 8028bca:	e7e0      	b.n	8028b8e <__gethex+0x26a>
 8028bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028bce:	2b00      	cmp	r3, #0
 8028bd0:	d1dd      	bne.n	8028b8e <__gethex+0x26a>
 8028bd2:	e7ee      	b.n	8028bb2 <__gethex+0x28e>
 8028bd4:	0802d4b0 	.word	0x0802d4b0
 8028bd8:	0802d348 	.word	0x0802d348
 8028bdc:	0802d53c 	.word	0x0802d53c
 8028be0:	1e6f      	subs	r7, r5, #1
 8028be2:	f1b9 0f00 	cmp.w	r9, #0
 8028be6:	d130      	bne.n	8028c4a <__gethex+0x326>
 8028be8:	b127      	cbz	r7, 8028bf4 <__gethex+0x2d0>
 8028bea:	4639      	mov	r1, r7
 8028bec:	4620      	mov	r0, r4
 8028bee:	f7fe f8b9 	bl	8026d64 <__any_on>
 8028bf2:	4681      	mov	r9, r0
 8028bf4:	117a      	asrs	r2, r7, #5
 8028bf6:	2301      	movs	r3, #1
 8028bf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028bfc:	f007 071f 	and.w	r7, r7, #31
 8028c00:	40bb      	lsls	r3, r7
 8028c02:	4213      	tst	r3, r2
 8028c04:	4629      	mov	r1, r5
 8028c06:	4620      	mov	r0, r4
 8028c08:	bf18      	it	ne
 8028c0a:	f049 0902 	orrne.w	r9, r9, #2
 8028c0e:	f7ff fe22 	bl	8028856 <rshift>
 8028c12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028c16:	1b76      	subs	r6, r6, r5
 8028c18:	2502      	movs	r5, #2
 8028c1a:	f1b9 0f00 	cmp.w	r9, #0
 8028c1e:	d047      	beq.n	8028cb0 <__gethex+0x38c>
 8028c20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028c24:	2b02      	cmp	r3, #2
 8028c26:	d015      	beq.n	8028c54 <__gethex+0x330>
 8028c28:	2b03      	cmp	r3, #3
 8028c2a:	d017      	beq.n	8028c5c <__gethex+0x338>
 8028c2c:	2b01      	cmp	r3, #1
 8028c2e:	d109      	bne.n	8028c44 <__gethex+0x320>
 8028c30:	f019 0f02 	tst.w	r9, #2
 8028c34:	d006      	beq.n	8028c44 <__gethex+0x320>
 8028c36:	f8da 3000 	ldr.w	r3, [sl]
 8028c3a:	ea49 0903 	orr.w	r9, r9, r3
 8028c3e:	f019 0f01 	tst.w	r9, #1
 8028c42:	d10e      	bne.n	8028c62 <__gethex+0x33e>
 8028c44:	f045 0510 	orr.w	r5, r5, #16
 8028c48:	e032      	b.n	8028cb0 <__gethex+0x38c>
 8028c4a:	f04f 0901 	mov.w	r9, #1
 8028c4e:	e7d1      	b.n	8028bf4 <__gethex+0x2d0>
 8028c50:	2501      	movs	r5, #1
 8028c52:	e7e2      	b.n	8028c1a <__gethex+0x2f6>
 8028c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c56:	f1c3 0301 	rsb	r3, r3, #1
 8028c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028c5e:	2b00      	cmp	r3, #0
 8028c60:	d0f0      	beq.n	8028c44 <__gethex+0x320>
 8028c62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8028c66:	f104 0314 	add.w	r3, r4, #20
 8028c6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8028c6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8028c72:	f04f 0c00 	mov.w	ip, #0
 8028c76:	4618      	mov	r0, r3
 8028c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8028c7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8028c80:	d01b      	beq.n	8028cba <__gethex+0x396>
 8028c82:	3201      	adds	r2, #1
 8028c84:	6002      	str	r2, [r0, #0]
 8028c86:	2d02      	cmp	r5, #2
 8028c88:	f104 0314 	add.w	r3, r4, #20
 8028c8c:	d13c      	bne.n	8028d08 <__gethex+0x3e4>
 8028c8e:	f8d8 2000 	ldr.w	r2, [r8]
 8028c92:	3a01      	subs	r2, #1
 8028c94:	42b2      	cmp	r2, r6
 8028c96:	d109      	bne.n	8028cac <__gethex+0x388>
 8028c98:	1171      	asrs	r1, r6, #5
 8028c9a:	2201      	movs	r2, #1
 8028c9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028ca0:	f006 061f 	and.w	r6, r6, #31
 8028ca4:	fa02 f606 	lsl.w	r6, r2, r6
 8028ca8:	421e      	tst	r6, r3
 8028caa:	d13a      	bne.n	8028d22 <__gethex+0x3fe>
 8028cac:	f045 0520 	orr.w	r5, r5, #32
 8028cb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028cb2:	601c      	str	r4, [r3, #0]
 8028cb4:	9b02      	ldr	r3, [sp, #8]
 8028cb6:	601f      	str	r7, [r3, #0]
 8028cb8:	e6b0      	b.n	8028a1c <__gethex+0xf8>
 8028cba:	4299      	cmp	r1, r3
 8028cbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8028cc0:	d8d9      	bhi.n	8028c76 <__gethex+0x352>
 8028cc2:	68a3      	ldr	r3, [r4, #8]
 8028cc4:	459b      	cmp	fp, r3
 8028cc6:	db17      	blt.n	8028cf8 <__gethex+0x3d4>
 8028cc8:	6861      	ldr	r1, [r4, #4]
 8028cca:	9801      	ldr	r0, [sp, #4]
 8028ccc:	3101      	adds	r1, #1
 8028cce:	f7fd fbbb 	bl	8026448 <_Balloc>
 8028cd2:	4681      	mov	r9, r0
 8028cd4:	b918      	cbnz	r0, 8028cde <__gethex+0x3ba>
 8028cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8028d40 <__gethex+0x41c>)
 8028cd8:	4602      	mov	r2, r0
 8028cda:	2184      	movs	r1, #132	@ 0x84
 8028cdc:	e6c5      	b.n	8028a6a <__gethex+0x146>
 8028cde:	6922      	ldr	r2, [r4, #16]
 8028ce0:	3202      	adds	r2, #2
 8028ce2:	f104 010c 	add.w	r1, r4, #12
 8028ce6:	0092      	lsls	r2, r2, #2
 8028ce8:	300c      	adds	r0, #12
 8028cea:	f7fc fd50 	bl	802578e <memcpy>
 8028cee:	4621      	mov	r1, r4
 8028cf0:	9801      	ldr	r0, [sp, #4]
 8028cf2:	f7fd fbe9 	bl	80264c8 <_Bfree>
 8028cf6:	464c      	mov	r4, r9
 8028cf8:	6923      	ldr	r3, [r4, #16]
 8028cfa:	1c5a      	adds	r2, r3, #1
 8028cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028d00:	6122      	str	r2, [r4, #16]
 8028d02:	2201      	movs	r2, #1
 8028d04:	615a      	str	r2, [r3, #20]
 8028d06:	e7be      	b.n	8028c86 <__gethex+0x362>
 8028d08:	6922      	ldr	r2, [r4, #16]
 8028d0a:	455a      	cmp	r2, fp
 8028d0c:	dd0b      	ble.n	8028d26 <__gethex+0x402>
 8028d0e:	2101      	movs	r1, #1
 8028d10:	4620      	mov	r0, r4
 8028d12:	f7ff fda0 	bl	8028856 <rshift>
 8028d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028d1a:	3701      	adds	r7, #1
 8028d1c:	42bb      	cmp	r3, r7
 8028d1e:	f6ff aee0 	blt.w	8028ae2 <__gethex+0x1be>
 8028d22:	2501      	movs	r5, #1
 8028d24:	e7c2      	b.n	8028cac <__gethex+0x388>
 8028d26:	f016 061f 	ands.w	r6, r6, #31
 8028d2a:	d0fa      	beq.n	8028d22 <__gethex+0x3fe>
 8028d2c:	4453      	add	r3, sl
 8028d2e:	f1c6 0620 	rsb	r6, r6, #32
 8028d32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028d36:	f7fd fc79 	bl	802662c <__hi0bits>
 8028d3a:	42b0      	cmp	r0, r6
 8028d3c:	dbe7      	blt.n	8028d0e <__gethex+0x3ea>
 8028d3e:	e7f0      	b.n	8028d22 <__gethex+0x3fe>
 8028d40:	0802d348 	.word	0x0802d348

08028d44 <L_shift>:
 8028d44:	f1c2 0208 	rsb	r2, r2, #8
 8028d48:	0092      	lsls	r2, r2, #2
 8028d4a:	b570      	push	{r4, r5, r6, lr}
 8028d4c:	f1c2 0620 	rsb	r6, r2, #32
 8028d50:	6843      	ldr	r3, [r0, #4]
 8028d52:	6804      	ldr	r4, [r0, #0]
 8028d54:	fa03 f506 	lsl.w	r5, r3, r6
 8028d58:	432c      	orrs	r4, r5
 8028d5a:	40d3      	lsrs	r3, r2
 8028d5c:	6004      	str	r4, [r0, #0]
 8028d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8028d62:	4288      	cmp	r0, r1
 8028d64:	d3f4      	bcc.n	8028d50 <L_shift+0xc>
 8028d66:	bd70      	pop	{r4, r5, r6, pc}

08028d68 <__match>:
 8028d68:	b530      	push	{r4, r5, lr}
 8028d6a:	6803      	ldr	r3, [r0, #0]
 8028d6c:	3301      	adds	r3, #1
 8028d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028d72:	b914      	cbnz	r4, 8028d7a <__match+0x12>
 8028d74:	6003      	str	r3, [r0, #0]
 8028d76:	2001      	movs	r0, #1
 8028d78:	bd30      	pop	{r4, r5, pc}
 8028d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028d7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028d82:	2d19      	cmp	r5, #25
 8028d84:	bf98      	it	ls
 8028d86:	3220      	addls	r2, #32
 8028d88:	42a2      	cmp	r2, r4
 8028d8a:	d0f0      	beq.n	8028d6e <__match+0x6>
 8028d8c:	2000      	movs	r0, #0
 8028d8e:	e7f3      	b.n	8028d78 <__match+0x10>

08028d90 <__hexnan>:
 8028d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d94:	680b      	ldr	r3, [r1, #0]
 8028d96:	6801      	ldr	r1, [r0, #0]
 8028d98:	115e      	asrs	r6, r3, #5
 8028d9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028d9e:	f013 031f 	ands.w	r3, r3, #31
 8028da2:	b087      	sub	sp, #28
 8028da4:	bf18      	it	ne
 8028da6:	3604      	addne	r6, #4
 8028da8:	2500      	movs	r5, #0
 8028daa:	1f37      	subs	r7, r6, #4
 8028dac:	4682      	mov	sl, r0
 8028dae:	4690      	mov	r8, r2
 8028db0:	9301      	str	r3, [sp, #4]
 8028db2:	f846 5c04 	str.w	r5, [r6, #-4]
 8028db6:	46b9      	mov	r9, r7
 8028db8:	463c      	mov	r4, r7
 8028dba:	9502      	str	r5, [sp, #8]
 8028dbc:	46ab      	mov	fp, r5
 8028dbe:	784a      	ldrb	r2, [r1, #1]
 8028dc0:	1c4b      	adds	r3, r1, #1
 8028dc2:	9303      	str	r3, [sp, #12]
 8028dc4:	b342      	cbz	r2, 8028e18 <__hexnan+0x88>
 8028dc6:	4610      	mov	r0, r2
 8028dc8:	9105      	str	r1, [sp, #20]
 8028dca:	9204      	str	r2, [sp, #16]
 8028dcc:	f7ff fd95 	bl	80288fa <__hexdig_fun>
 8028dd0:	2800      	cmp	r0, #0
 8028dd2:	d151      	bne.n	8028e78 <__hexnan+0xe8>
 8028dd4:	9a04      	ldr	r2, [sp, #16]
 8028dd6:	9905      	ldr	r1, [sp, #20]
 8028dd8:	2a20      	cmp	r2, #32
 8028dda:	d818      	bhi.n	8028e0e <__hexnan+0x7e>
 8028ddc:	9b02      	ldr	r3, [sp, #8]
 8028dde:	459b      	cmp	fp, r3
 8028de0:	dd13      	ble.n	8028e0a <__hexnan+0x7a>
 8028de2:	454c      	cmp	r4, r9
 8028de4:	d206      	bcs.n	8028df4 <__hexnan+0x64>
 8028de6:	2d07      	cmp	r5, #7
 8028de8:	dc04      	bgt.n	8028df4 <__hexnan+0x64>
 8028dea:	462a      	mov	r2, r5
 8028dec:	4649      	mov	r1, r9
 8028dee:	4620      	mov	r0, r4
 8028df0:	f7ff ffa8 	bl	8028d44 <L_shift>
 8028df4:	4544      	cmp	r4, r8
 8028df6:	d952      	bls.n	8028e9e <__hexnan+0x10e>
 8028df8:	2300      	movs	r3, #0
 8028dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8028dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8028e02:	f8cd b008 	str.w	fp, [sp, #8]
 8028e06:	464c      	mov	r4, r9
 8028e08:	461d      	mov	r5, r3
 8028e0a:	9903      	ldr	r1, [sp, #12]
 8028e0c:	e7d7      	b.n	8028dbe <__hexnan+0x2e>
 8028e0e:	2a29      	cmp	r2, #41	@ 0x29
 8028e10:	d157      	bne.n	8028ec2 <__hexnan+0x132>
 8028e12:	3102      	adds	r1, #2
 8028e14:	f8ca 1000 	str.w	r1, [sl]
 8028e18:	f1bb 0f00 	cmp.w	fp, #0
 8028e1c:	d051      	beq.n	8028ec2 <__hexnan+0x132>
 8028e1e:	454c      	cmp	r4, r9
 8028e20:	d206      	bcs.n	8028e30 <__hexnan+0xa0>
 8028e22:	2d07      	cmp	r5, #7
 8028e24:	dc04      	bgt.n	8028e30 <__hexnan+0xa0>
 8028e26:	462a      	mov	r2, r5
 8028e28:	4649      	mov	r1, r9
 8028e2a:	4620      	mov	r0, r4
 8028e2c:	f7ff ff8a 	bl	8028d44 <L_shift>
 8028e30:	4544      	cmp	r4, r8
 8028e32:	d936      	bls.n	8028ea2 <__hexnan+0x112>
 8028e34:	f1a8 0204 	sub.w	r2, r8, #4
 8028e38:	4623      	mov	r3, r4
 8028e3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8028e3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8028e42:	429f      	cmp	r7, r3
 8028e44:	d2f9      	bcs.n	8028e3a <__hexnan+0xaa>
 8028e46:	1b3b      	subs	r3, r7, r4
 8028e48:	f023 0303 	bic.w	r3, r3, #3
 8028e4c:	3304      	adds	r3, #4
 8028e4e:	3401      	adds	r4, #1
 8028e50:	3e03      	subs	r6, #3
 8028e52:	42b4      	cmp	r4, r6
 8028e54:	bf88      	it	hi
 8028e56:	2304      	movhi	r3, #4
 8028e58:	4443      	add	r3, r8
 8028e5a:	2200      	movs	r2, #0
 8028e5c:	f843 2b04 	str.w	r2, [r3], #4
 8028e60:	429f      	cmp	r7, r3
 8028e62:	d2fb      	bcs.n	8028e5c <__hexnan+0xcc>
 8028e64:	683b      	ldr	r3, [r7, #0]
 8028e66:	b91b      	cbnz	r3, 8028e70 <__hexnan+0xe0>
 8028e68:	4547      	cmp	r7, r8
 8028e6a:	d128      	bne.n	8028ebe <__hexnan+0x12e>
 8028e6c:	2301      	movs	r3, #1
 8028e6e:	603b      	str	r3, [r7, #0]
 8028e70:	2005      	movs	r0, #5
 8028e72:	b007      	add	sp, #28
 8028e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e78:	3501      	adds	r5, #1
 8028e7a:	2d08      	cmp	r5, #8
 8028e7c:	f10b 0b01 	add.w	fp, fp, #1
 8028e80:	dd06      	ble.n	8028e90 <__hexnan+0x100>
 8028e82:	4544      	cmp	r4, r8
 8028e84:	d9c1      	bls.n	8028e0a <__hexnan+0x7a>
 8028e86:	2300      	movs	r3, #0
 8028e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8028e8c:	2501      	movs	r5, #1
 8028e8e:	3c04      	subs	r4, #4
 8028e90:	6822      	ldr	r2, [r4, #0]
 8028e92:	f000 000f 	and.w	r0, r0, #15
 8028e96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028e9a:	6020      	str	r0, [r4, #0]
 8028e9c:	e7b5      	b.n	8028e0a <__hexnan+0x7a>
 8028e9e:	2508      	movs	r5, #8
 8028ea0:	e7b3      	b.n	8028e0a <__hexnan+0x7a>
 8028ea2:	9b01      	ldr	r3, [sp, #4]
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	d0dd      	beq.n	8028e64 <__hexnan+0xd4>
 8028ea8:	f1c3 0320 	rsb	r3, r3, #32
 8028eac:	f04f 32ff 	mov.w	r2, #4294967295
 8028eb0:	40da      	lsrs	r2, r3
 8028eb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028eb6:	4013      	ands	r3, r2
 8028eb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8028ebc:	e7d2      	b.n	8028e64 <__hexnan+0xd4>
 8028ebe:	3f04      	subs	r7, #4
 8028ec0:	e7d0      	b.n	8028e64 <__hexnan+0xd4>
 8028ec2:	2004      	movs	r0, #4
 8028ec4:	e7d5      	b.n	8028e72 <__hexnan+0xe2>

08028ec6 <__ascii_mbtowc>:
 8028ec6:	b082      	sub	sp, #8
 8028ec8:	b901      	cbnz	r1, 8028ecc <__ascii_mbtowc+0x6>
 8028eca:	a901      	add	r1, sp, #4
 8028ecc:	b142      	cbz	r2, 8028ee0 <__ascii_mbtowc+0x1a>
 8028ece:	b14b      	cbz	r3, 8028ee4 <__ascii_mbtowc+0x1e>
 8028ed0:	7813      	ldrb	r3, [r2, #0]
 8028ed2:	600b      	str	r3, [r1, #0]
 8028ed4:	7812      	ldrb	r2, [r2, #0]
 8028ed6:	1e10      	subs	r0, r2, #0
 8028ed8:	bf18      	it	ne
 8028eda:	2001      	movne	r0, #1
 8028edc:	b002      	add	sp, #8
 8028ede:	4770      	bx	lr
 8028ee0:	4610      	mov	r0, r2
 8028ee2:	e7fb      	b.n	8028edc <__ascii_mbtowc+0x16>
 8028ee4:	f06f 0001 	mvn.w	r0, #1
 8028ee8:	e7f8      	b.n	8028edc <__ascii_mbtowc+0x16>

08028eea <_realloc_r>:
 8028eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028eee:	4680      	mov	r8, r0
 8028ef0:	4615      	mov	r5, r2
 8028ef2:	460c      	mov	r4, r1
 8028ef4:	b921      	cbnz	r1, 8028f00 <_realloc_r+0x16>
 8028ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028efa:	4611      	mov	r1, r2
 8028efc:	f7fb ba70 	b.w	80243e0 <_malloc_r>
 8028f00:	b92a      	cbnz	r2, 8028f0e <_realloc_r+0x24>
 8028f02:	f7fd fa57 	bl	80263b4 <_free_r>
 8028f06:	2400      	movs	r4, #0
 8028f08:	4620      	mov	r0, r4
 8028f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f0e:	f000 f961 	bl	80291d4 <_malloc_usable_size_r>
 8028f12:	4285      	cmp	r5, r0
 8028f14:	4606      	mov	r6, r0
 8028f16:	d802      	bhi.n	8028f1e <_realloc_r+0x34>
 8028f18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8028f1c:	d8f4      	bhi.n	8028f08 <_realloc_r+0x1e>
 8028f1e:	4629      	mov	r1, r5
 8028f20:	4640      	mov	r0, r8
 8028f22:	f7fb fa5d 	bl	80243e0 <_malloc_r>
 8028f26:	4607      	mov	r7, r0
 8028f28:	2800      	cmp	r0, #0
 8028f2a:	d0ec      	beq.n	8028f06 <_realloc_r+0x1c>
 8028f2c:	42b5      	cmp	r5, r6
 8028f2e:	462a      	mov	r2, r5
 8028f30:	4621      	mov	r1, r4
 8028f32:	bf28      	it	cs
 8028f34:	4632      	movcs	r2, r6
 8028f36:	f7fc fc2a 	bl	802578e <memcpy>
 8028f3a:	4621      	mov	r1, r4
 8028f3c:	4640      	mov	r0, r8
 8028f3e:	f7fd fa39 	bl	80263b4 <_free_r>
 8028f42:	463c      	mov	r4, r7
 8028f44:	e7e0      	b.n	8028f08 <_realloc_r+0x1e>
	...

08028f48 <_strtoul_l.constprop.0>:
 8028f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028f4c:	4e34      	ldr	r6, [pc, #208]	@ (8029020 <_strtoul_l.constprop.0+0xd8>)
 8028f4e:	4686      	mov	lr, r0
 8028f50:	460d      	mov	r5, r1
 8028f52:	4628      	mov	r0, r5
 8028f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028f58:	5d37      	ldrb	r7, [r6, r4]
 8028f5a:	f017 0708 	ands.w	r7, r7, #8
 8028f5e:	d1f8      	bne.n	8028f52 <_strtoul_l.constprop.0+0xa>
 8028f60:	2c2d      	cmp	r4, #45	@ 0x2d
 8028f62:	d12f      	bne.n	8028fc4 <_strtoul_l.constprop.0+0x7c>
 8028f64:	782c      	ldrb	r4, [r5, #0]
 8028f66:	2701      	movs	r7, #1
 8028f68:	1c85      	adds	r5, r0, #2
 8028f6a:	f033 0010 	bics.w	r0, r3, #16
 8028f6e:	d109      	bne.n	8028f84 <_strtoul_l.constprop.0+0x3c>
 8028f70:	2c30      	cmp	r4, #48	@ 0x30
 8028f72:	d12c      	bne.n	8028fce <_strtoul_l.constprop.0+0x86>
 8028f74:	7828      	ldrb	r0, [r5, #0]
 8028f76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8028f7a:	2858      	cmp	r0, #88	@ 0x58
 8028f7c:	d127      	bne.n	8028fce <_strtoul_l.constprop.0+0x86>
 8028f7e:	786c      	ldrb	r4, [r5, #1]
 8028f80:	2310      	movs	r3, #16
 8028f82:	3502      	adds	r5, #2
 8028f84:	f04f 38ff 	mov.w	r8, #4294967295
 8028f88:	2600      	movs	r6, #0
 8028f8a:	fbb8 f8f3 	udiv	r8, r8, r3
 8028f8e:	fb03 f908 	mul.w	r9, r3, r8
 8028f92:	ea6f 0909 	mvn.w	r9, r9
 8028f96:	4630      	mov	r0, r6
 8028f98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8028f9c:	f1bc 0f09 	cmp.w	ip, #9
 8028fa0:	d81c      	bhi.n	8028fdc <_strtoul_l.constprop.0+0x94>
 8028fa2:	4664      	mov	r4, ip
 8028fa4:	42a3      	cmp	r3, r4
 8028fa6:	dd2a      	ble.n	8028ffe <_strtoul_l.constprop.0+0xb6>
 8028fa8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8028fac:	d007      	beq.n	8028fbe <_strtoul_l.constprop.0+0x76>
 8028fae:	4580      	cmp	r8, r0
 8028fb0:	d322      	bcc.n	8028ff8 <_strtoul_l.constprop.0+0xb0>
 8028fb2:	d101      	bne.n	8028fb8 <_strtoul_l.constprop.0+0x70>
 8028fb4:	45a1      	cmp	r9, r4
 8028fb6:	db1f      	blt.n	8028ff8 <_strtoul_l.constprop.0+0xb0>
 8028fb8:	fb00 4003 	mla	r0, r0, r3, r4
 8028fbc:	2601      	movs	r6, #1
 8028fbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028fc2:	e7e9      	b.n	8028f98 <_strtoul_l.constprop.0+0x50>
 8028fc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8028fc6:	bf04      	itt	eq
 8028fc8:	782c      	ldrbeq	r4, [r5, #0]
 8028fca:	1c85      	addeq	r5, r0, #2
 8028fcc:	e7cd      	b.n	8028f6a <_strtoul_l.constprop.0+0x22>
 8028fce:	2b00      	cmp	r3, #0
 8028fd0:	d1d8      	bne.n	8028f84 <_strtoul_l.constprop.0+0x3c>
 8028fd2:	2c30      	cmp	r4, #48	@ 0x30
 8028fd4:	bf0c      	ite	eq
 8028fd6:	2308      	moveq	r3, #8
 8028fd8:	230a      	movne	r3, #10
 8028fda:	e7d3      	b.n	8028f84 <_strtoul_l.constprop.0+0x3c>
 8028fdc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8028fe0:	f1bc 0f19 	cmp.w	ip, #25
 8028fe4:	d801      	bhi.n	8028fea <_strtoul_l.constprop.0+0xa2>
 8028fe6:	3c37      	subs	r4, #55	@ 0x37
 8028fe8:	e7dc      	b.n	8028fa4 <_strtoul_l.constprop.0+0x5c>
 8028fea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8028fee:	f1bc 0f19 	cmp.w	ip, #25
 8028ff2:	d804      	bhi.n	8028ffe <_strtoul_l.constprop.0+0xb6>
 8028ff4:	3c57      	subs	r4, #87	@ 0x57
 8028ff6:	e7d5      	b.n	8028fa4 <_strtoul_l.constprop.0+0x5c>
 8028ff8:	f04f 36ff 	mov.w	r6, #4294967295
 8028ffc:	e7df      	b.n	8028fbe <_strtoul_l.constprop.0+0x76>
 8028ffe:	1c73      	adds	r3, r6, #1
 8029000:	d106      	bne.n	8029010 <_strtoul_l.constprop.0+0xc8>
 8029002:	2322      	movs	r3, #34	@ 0x22
 8029004:	f8ce 3000 	str.w	r3, [lr]
 8029008:	4630      	mov	r0, r6
 802900a:	b932      	cbnz	r2, 802901a <_strtoul_l.constprop.0+0xd2>
 802900c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029010:	b107      	cbz	r7, 8029014 <_strtoul_l.constprop.0+0xcc>
 8029012:	4240      	negs	r0, r0
 8029014:	2a00      	cmp	r2, #0
 8029016:	d0f9      	beq.n	802900c <_strtoul_l.constprop.0+0xc4>
 8029018:	b106      	cbz	r6, 802901c <_strtoul_l.constprop.0+0xd4>
 802901a:	1e69      	subs	r1, r5, #1
 802901c:	6011      	str	r1, [r2, #0]
 802901e:	e7f5      	b.n	802900c <_strtoul_l.constprop.0+0xc4>
 8029020:	0802d170 	.word	0x0802d170

08029024 <_strtoul_r>:
 8029024:	f7ff bf90 	b.w	8028f48 <_strtoul_l.constprop.0>

08029028 <__ascii_wctomb>:
 8029028:	4603      	mov	r3, r0
 802902a:	4608      	mov	r0, r1
 802902c:	b141      	cbz	r1, 8029040 <__ascii_wctomb+0x18>
 802902e:	2aff      	cmp	r2, #255	@ 0xff
 8029030:	d904      	bls.n	802903c <__ascii_wctomb+0x14>
 8029032:	228a      	movs	r2, #138	@ 0x8a
 8029034:	601a      	str	r2, [r3, #0]
 8029036:	f04f 30ff 	mov.w	r0, #4294967295
 802903a:	4770      	bx	lr
 802903c:	700a      	strb	r2, [r1, #0]
 802903e:	2001      	movs	r0, #1
 8029040:	4770      	bx	lr

08029042 <__swhatbuf_r>:
 8029042:	b570      	push	{r4, r5, r6, lr}
 8029044:	460c      	mov	r4, r1
 8029046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802904a:	2900      	cmp	r1, #0
 802904c:	b096      	sub	sp, #88	@ 0x58
 802904e:	4615      	mov	r5, r2
 8029050:	461e      	mov	r6, r3
 8029052:	da0d      	bge.n	8029070 <__swhatbuf_r+0x2e>
 8029054:	89a3      	ldrh	r3, [r4, #12]
 8029056:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802905a:	f04f 0100 	mov.w	r1, #0
 802905e:	bf14      	ite	ne
 8029060:	2340      	movne	r3, #64	@ 0x40
 8029062:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029066:	2000      	movs	r0, #0
 8029068:	6031      	str	r1, [r6, #0]
 802906a:	602b      	str	r3, [r5, #0]
 802906c:	b016      	add	sp, #88	@ 0x58
 802906e:	bd70      	pop	{r4, r5, r6, pc}
 8029070:	466a      	mov	r2, sp
 8029072:	f000 f879 	bl	8029168 <_fstat_r>
 8029076:	2800      	cmp	r0, #0
 8029078:	dbec      	blt.n	8029054 <__swhatbuf_r+0x12>
 802907a:	9901      	ldr	r1, [sp, #4]
 802907c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029080:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029084:	4259      	negs	r1, r3
 8029086:	4159      	adcs	r1, r3
 8029088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802908c:	e7eb      	b.n	8029066 <__swhatbuf_r+0x24>

0802908e <__smakebuf_r>:
 802908e:	898b      	ldrh	r3, [r1, #12]
 8029090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029092:	079d      	lsls	r5, r3, #30
 8029094:	4606      	mov	r6, r0
 8029096:	460c      	mov	r4, r1
 8029098:	d507      	bpl.n	80290aa <__smakebuf_r+0x1c>
 802909a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802909e:	6023      	str	r3, [r4, #0]
 80290a0:	6123      	str	r3, [r4, #16]
 80290a2:	2301      	movs	r3, #1
 80290a4:	6163      	str	r3, [r4, #20]
 80290a6:	b003      	add	sp, #12
 80290a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290aa:	ab01      	add	r3, sp, #4
 80290ac:	466a      	mov	r2, sp
 80290ae:	f7ff ffc8 	bl	8029042 <__swhatbuf_r>
 80290b2:	9f00      	ldr	r7, [sp, #0]
 80290b4:	4605      	mov	r5, r0
 80290b6:	4639      	mov	r1, r7
 80290b8:	4630      	mov	r0, r6
 80290ba:	f7fb f991 	bl	80243e0 <_malloc_r>
 80290be:	b948      	cbnz	r0, 80290d4 <__smakebuf_r+0x46>
 80290c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290c4:	059a      	lsls	r2, r3, #22
 80290c6:	d4ee      	bmi.n	80290a6 <__smakebuf_r+0x18>
 80290c8:	f023 0303 	bic.w	r3, r3, #3
 80290cc:	f043 0302 	orr.w	r3, r3, #2
 80290d0:	81a3      	strh	r3, [r4, #12]
 80290d2:	e7e2      	b.n	802909a <__smakebuf_r+0xc>
 80290d4:	89a3      	ldrh	r3, [r4, #12]
 80290d6:	6020      	str	r0, [r4, #0]
 80290d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80290dc:	81a3      	strh	r3, [r4, #12]
 80290de:	9b01      	ldr	r3, [sp, #4]
 80290e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80290e4:	b15b      	cbz	r3, 80290fe <__smakebuf_r+0x70>
 80290e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80290ea:	4630      	mov	r0, r6
 80290ec:	f000 f84e 	bl	802918c <_isatty_r>
 80290f0:	b128      	cbz	r0, 80290fe <__smakebuf_r+0x70>
 80290f2:	89a3      	ldrh	r3, [r4, #12]
 80290f4:	f023 0303 	bic.w	r3, r3, #3
 80290f8:	f043 0301 	orr.w	r3, r3, #1
 80290fc:	81a3      	strh	r3, [r4, #12]
 80290fe:	89a3      	ldrh	r3, [r4, #12]
 8029100:	431d      	orrs	r5, r3
 8029102:	81a5      	strh	r5, [r4, #12]
 8029104:	e7cf      	b.n	80290a6 <__smakebuf_r+0x18>

08029106 <_raise_r>:
 8029106:	291f      	cmp	r1, #31
 8029108:	b538      	push	{r3, r4, r5, lr}
 802910a:	4605      	mov	r5, r0
 802910c:	460c      	mov	r4, r1
 802910e:	d904      	bls.n	802911a <_raise_r+0x14>
 8029110:	2316      	movs	r3, #22
 8029112:	6003      	str	r3, [r0, #0]
 8029114:	f04f 30ff 	mov.w	r0, #4294967295
 8029118:	bd38      	pop	{r3, r4, r5, pc}
 802911a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802911c:	b112      	cbz	r2, 8029124 <_raise_r+0x1e>
 802911e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029122:	b94b      	cbnz	r3, 8029138 <_raise_r+0x32>
 8029124:	4628      	mov	r0, r5
 8029126:	f000 f853 	bl	80291d0 <_getpid_r>
 802912a:	4622      	mov	r2, r4
 802912c:	4601      	mov	r1, r0
 802912e:	4628      	mov	r0, r5
 8029130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029134:	f000 b83a 	b.w	80291ac <_kill_r>
 8029138:	2b01      	cmp	r3, #1
 802913a:	d00a      	beq.n	8029152 <_raise_r+0x4c>
 802913c:	1c59      	adds	r1, r3, #1
 802913e:	d103      	bne.n	8029148 <_raise_r+0x42>
 8029140:	2316      	movs	r3, #22
 8029142:	6003      	str	r3, [r0, #0]
 8029144:	2001      	movs	r0, #1
 8029146:	e7e7      	b.n	8029118 <_raise_r+0x12>
 8029148:	2100      	movs	r1, #0
 802914a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802914e:	4620      	mov	r0, r4
 8029150:	4798      	blx	r3
 8029152:	2000      	movs	r0, #0
 8029154:	e7e0      	b.n	8029118 <_raise_r+0x12>
	...

08029158 <raise>:
 8029158:	4b02      	ldr	r3, [pc, #8]	@ (8029164 <raise+0xc>)
 802915a:	4601      	mov	r1, r0
 802915c:	6818      	ldr	r0, [r3, #0]
 802915e:	f7ff bfd2 	b.w	8029106 <_raise_r>
 8029162:	bf00      	nop
 8029164:	24000224 	.word	0x24000224

08029168 <_fstat_r>:
 8029168:	b538      	push	{r3, r4, r5, lr}
 802916a:	4d07      	ldr	r5, [pc, #28]	@ (8029188 <_fstat_r+0x20>)
 802916c:	2300      	movs	r3, #0
 802916e:	4604      	mov	r4, r0
 8029170:	4608      	mov	r0, r1
 8029172:	4611      	mov	r1, r2
 8029174:	602b      	str	r3, [r5, #0]
 8029176:	f7dc fa6b 	bl	8005650 <_fstat>
 802917a:	1c43      	adds	r3, r0, #1
 802917c:	d102      	bne.n	8029184 <_fstat_r+0x1c>
 802917e:	682b      	ldr	r3, [r5, #0]
 8029180:	b103      	cbz	r3, 8029184 <_fstat_r+0x1c>
 8029182:	6023      	str	r3, [r4, #0]
 8029184:	bd38      	pop	{r3, r4, r5, pc}
 8029186:	bf00      	nop
 8029188:	2400bfc0 	.word	0x2400bfc0

0802918c <_isatty_r>:
 802918c:	b538      	push	{r3, r4, r5, lr}
 802918e:	4d06      	ldr	r5, [pc, #24]	@ (80291a8 <_isatty_r+0x1c>)
 8029190:	2300      	movs	r3, #0
 8029192:	4604      	mov	r4, r0
 8029194:	4608      	mov	r0, r1
 8029196:	602b      	str	r3, [r5, #0]
 8029198:	f7dc fa6a 	bl	8005670 <_isatty>
 802919c:	1c43      	adds	r3, r0, #1
 802919e:	d102      	bne.n	80291a6 <_isatty_r+0x1a>
 80291a0:	682b      	ldr	r3, [r5, #0]
 80291a2:	b103      	cbz	r3, 80291a6 <_isatty_r+0x1a>
 80291a4:	6023      	str	r3, [r4, #0]
 80291a6:	bd38      	pop	{r3, r4, r5, pc}
 80291a8:	2400bfc0 	.word	0x2400bfc0

080291ac <_kill_r>:
 80291ac:	b538      	push	{r3, r4, r5, lr}
 80291ae:	4d07      	ldr	r5, [pc, #28]	@ (80291cc <_kill_r+0x20>)
 80291b0:	2300      	movs	r3, #0
 80291b2:	4604      	mov	r4, r0
 80291b4:	4608      	mov	r0, r1
 80291b6:	4611      	mov	r1, r2
 80291b8:	602b      	str	r3, [r5, #0]
 80291ba:	f7dc f9e7 	bl	800558c <_kill>
 80291be:	1c43      	adds	r3, r0, #1
 80291c0:	d102      	bne.n	80291c8 <_kill_r+0x1c>
 80291c2:	682b      	ldr	r3, [r5, #0]
 80291c4:	b103      	cbz	r3, 80291c8 <_kill_r+0x1c>
 80291c6:	6023      	str	r3, [r4, #0]
 80291c8:	bd38      	pop	{r3, r4, r5, pc}
 80291ca:	bf00      	nop
 80291cc:	2400bfc0 	.word	0x2400bfc0

080291d0 <_getpid_r>:
 80291d0:	f7dc b9d4 	b.w	800557c <_getpid>

080291d4 <_malloc_usable_size_r>:
 80291d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80291d8:	1f18      	subs	r0, r3, #4
 80291da:	2b00      	cmp	r3, #0
 80291dc:	bfbc      	itt	lt
 80291de:	580b      	ldrlt	r3, [r1, r0]
 80291e0:	18c0      	addlt	r0, r0, r3
 80291e2:	4770      	bx	lr

080291e4 <_init>:
 80291e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291e6:	bf00      	nop
 80291e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291ea:	bc08      	pop	{r3}
 80291ec:	469e      	mov	lr, r3
 80291ee:	4770      	bx	lr

080291f0 <_fini>:
 80291f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291f2:	bf00      	nop
 80291f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291f6:	bc08      	pop	{r3}
 80291f8:	469e      	mov	lr, r3
 80291fa:	4770      	bx	lr
